{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p><code>pwndbg</code> (/po\u028andb\u00e6g/) is a GDB plug-in that makes debugging with GDB suck less, with a focus on features needed by low-level software developers, hardware hackers, reverse-engineers and exploit developers.</p> <p>It has a boatload of features, see FEATURES.md or these docs.</p>"},{"location":"#why","title":"Why?","text":"<p>Vanilla GDB is terrible to use for reverse engineering and exploit development. Typing <code>x/g30x $esp</code> is not fun, and does not  confer much information.  The year is 2020 and GDB still lacks a hexdump command!  GDB's syntax is arcane and difficult to approach.  Windbg users are completely lost when they occasionally need to bump into GDB.</p>"},{"location":"#what","title":"What?","text":"<p>Pwndbg is a Python module which is loaded directly into GDB, and provides a suite of utilities and crutches to hack around all of the cruft that is GDB and smooth out the rough edges.</p> <p>Many other projects from the past (e.g., gdbinit, PEDA) and present (e.g. GEF) exist to fill some these gaps.  Each provides an excellent experience and great features -- but they're difficult to extend (some are unmaintained, and all are a single 100KB, 200KB, or 300KB file (respectively)).</p> <p>Pwndbg exists not only to replace all of its predecessors, but also to have a clean implementation that runs quickly and is resilient against all the weird corner cases that come up.</p>"},{"location":"#how","title":"How?","text":"<p>Installation is straightforward. Pwndbg is best supported on Ubuntu 22.04 or 24.04 and GDB &gt;= 12.1.</p> Bash<pre><code>git clone https://github.com/pwndbg/pwndbg\ncd pwndbg\n./setup.sh\n</code></pre> <p>If you use any other Linux distribution, we recommend using the latest available GDB built from source.  Be sure to pass <code>--with-python=/path/to/python</code> to <code>configure</code>.</p>"},{"location":"#what-can-i-do-with-that","title":"What can I do with that?","text":"<p>For further info about features/functionalities, see FEATURES.</p>"},{"location":"#who","title":"Who?","text":"<p>Pwndbg is an open-source project, written and maintained by many contributors!</p> <p>Want to help with development? Read CONTRIBUTING.</p>"},{"location":"#contact","title":"Contact","text":"<p>If you have any questions not worthy of a bug report, feel free to ping anybody on Discord and ask away.</p>"},{"location":"binja_integration/","title":"Integrating Binary Ninja with pwndbg","text":""},{"location":"binja_integration/#requirements","title":"Requirements","text":"<p>You need at least the personal edition of Binary Ninja (only tested on version 4.0+) that runs at least Python 3.10 for plugins.</p>"},{"location":"binja_integration/#setup","title":"Setup","text":"<p>Copy (or symlink) <code>binja_script.py</code> to your plugins directory.</p>"},{"location":"binja_integration/#usage","title":"Usage","text":"<p>To start the Binary Ninja integration, open the binary you want to debug in Binary Ninja, then go to <code>Plugins &gt; pwndbg &gt; Start integration on current view</code>. This will start the XMLRPC server that pwndbg queries for information.</p> <p>Then, inside GDB, run <code>set integration-provider binja</code>, which will start the integration. You can run <code>set integration-provider none</code> to disable it again.</p>"},{"location":"binja_integration/#features","title":"Features","text":"<p>The integration currently syncs symbol names, comments, decompilation, function type signatures, and stack variables.</p>"},{"location":"binja_integration/#commands","title":"Commands","text":"<ul> <li><code>bn-sync</code>: Navigate the Binary Ninja view to the current instruction</li> <li><code>decomp ADDR NLINES</code>: Displays the decompilation for <code>NLINES</code> lines at address <code>ADDR</code>. </li> </ul>"},{"location":"binja_integration/#config-options","title":"Config Options","text":"<ul> <li><code>bn-autosync</code>: If set to <code>yes</code>, every step will automatically run <code>bn-sync</code></li> <li><code>bn-il-level</code>: Sets the IL level to use for decompilation. Valid values are: <code>disasm</code>, <code>llil</code>, <code>mlil</code>, <code>hlil</code></li> <li><code>bn-rpc-host</code>/<code>bn-rpc-port</code>: The host and port to connect to for the XMLRPC server</li> <li><code>bn-timeout</code>: The amount, in seconds, to wait for the XMLRPC server to connect</li> </ul>"},{"location":"env_vars/","title":"Env vars","text":""},{"location":"env_vars/#environment-variables","title":"Environment Variables","text":"<p>Pwndbg relies on several environment variables to customize its behavior. Below is a list of these variables and their purposes:</p> <ul> <li><code>PATH</code>: Standard system <code>PATH</code> variable used to locate executables.</li> <li><code>EDITOR</code>, <code>VISUAL</code>: Used by the <code>cymbol</code> command to open an editor.</li> <li><code>HOME</code>, <code>XDG_CACHE_HOME</code>: Used by <code>lib.tempfile</code> to determine temporary file locations.</li> <li><code>PWNDBG_VENV_PATH</code>: Specifies the virtual environment path for Pwndbg.</li> <li><code>PWNDBG_DISABLE_COLORS</code>: Disables colored output in Pwndbg.</li> <li><code>PWNDBG_LOGLEVEL</code>: Initial log level to use for log messages.</li> <li><code>OPENAI_API_KEY</code>, <code>ANTHROPIC_API_KEY</code>: Used by the <code>ai</code> command for accessing respective AI APIs.</li> <li><code>GITHUB_ACTIONS</code>, <code>RUN_FLAKY</code>: Used by <code>tests_commands.py</code> to determine the test environment.</li> <li><code>PWNDBG_PROFILE</code>: Enables profiling for benchmarking.</li> <li><code>USE_PDB</code>: Enables Python debugger in tests.</li> <li><code>PWNDBG_LAUNCH_TEST</code>: Used by tests to configure test launching.</li> <li><code>PWNDBG_ARCH</code>, <code>PWNDBG_KERNEL_TYPE</code>, <code>PWNDBG_KERNEL_VERSION</code>: Used by <code>gdblib</code> kernel tests to specify kernel parameters.</li> <li><code>SPHINX</code>: Used by <code>docs/source/conf.py</code>, likely to be removed.</li> <li><code>PWNLIB_NOTERM=1</code>: Set by Pwndbg to avoid terminal issues with Pwntools.</li> </ul>"},{"location":"go_debugging/","title":"Debugging Go with pwndbg","text":""},{"location":"go_debugging/#basics","title":"Basics","text":"<p>The <code>go-dump</code> command can be used to dump Go values during debugging. It takes the form <code>go-dump type address_expression</code>, and supports many different types with the same syntax as Go: - Integer types: <code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, <code>int128</code>, and their <code>uint</code> counterparts - Misc types: <code>bool</code>, <code>rune</code>, <code>uintptr</code>, <code>string</code> - Floating point types: <code>float32</code>, <code>float64</code> - Complex numbers: <code>complex64</code>, <code>complex128</code> - Interface types: <code>any</code> for <code>interface{}</code> (the empty interface), and <code>interface</code> for all non-empty interfaces - Function types: <code>funcptr</code> for all function types - Pointers: <code>*ELEM</code> - Slices: <code>[]ELEM</code> - Arrays: <code>[LEN]ELEM</code> - Maps: <code>map[KEY][VAL]</code> (note that maps in Go are actually pointers to the map, whereas this map is the inner map, so you may need to use <code>*map[KEY]VAL</code> to dump a map)</p> <p>Struct types are also supported, but the syntax is slightly different from Go in order to avoid having to compute offsets (and also to support only having partial field information on structs). Struct types are notated as <code>OFFSET:FIELD_NAME:TYPE</code> triples separated by semicolons then enclosed with <code>struct(SIZE){}</code>, e.g. <code>struct(24){0:foo:string;16:bar:int64}</code> to represent the 24-byte Go struct <code>struct { foo string; bar int64 }</code>.</p> <p>Example: Text Only<pre><code>pwndbg&gt; go-dump map[string]int 0xc0000b20f0\n{\"a\": 1, \"b\": 2, \"c\": 3}\n\npwndbg&gt; go-dump any 0xc0000ace40\n([]struct { a int; b string }) [struct {a: 1, b: \"first\"}, struct {a: 2, b: \"second\"}]\n\npwndbg&gt; go-dump struct(24){0:a:int;8:b:string} 0xc000108120\nstruct {a: 1, b: \"first\"}\n</code></pre></p> <p>Some notable flags include <code>-p</code> to enable pretty printing, <code>-x</code> to display integers in hex, <code>-f DECIMALS</code> to set the number of decimals used to display floats, <code>-d</code> to enable debug printing, which displays memory addresses of everything shown in the dump.</p>"},{"location":"go_debugging/#runtime-type-parsing","title":"Runtime Type Parsing","text":"<p>Go's compiler emits type objects for every single type used by the program. This is what enables dumping interface values with <code>go-dump</code> without having to specify any additional type information, and can also be leveraged to dump non-interface values if the type can be located. A good way to locate types is by finding the type pointer passed into heap allocation functions like <code>runtime.newobject</code> or <code>runtime.makeslice</code>.</p> <p>After finding the type pointer, the <code>go-type</code> command can be used to inspect a type: Text Only<pre><code>pwndbg&gt; go-type 0x49fbc0\n Name: struct { a int; b string }\n Kind: STRUCT\n Size: 24 (0x18)\nAlign: 8\nParse: struct(24){0:a:int;8:b:string}\nField a:\n    Offset: 0 (0x0)\n    Type name: int\n    Type addr: 0x498ce0\nField b:\n    Offset: 8 (0x8)\n    Type name: string\n    Type addr: 0x498aa0\n</code></pre></p> <p>The <code>go-dump</code> command can also take an address to a type instead of the name of a type: Text Only<pre><code>pwndbg&gt; go-dump 0x49fbc0 0xc000108120\nstruct {a: 1, b: \"first\"}\n</code></pre></p>"},{"location":"pycharm_debugging/","title":"Debugging with PyCharm","text":"<p>In order to debug code with PyCharm you need to configure remote debugging.</p> <p>PyCharm will start a remote debugging server which will listen for connections and pwndbg will then connect to that server, on startup.</p>"},{"location":"pycharm_debugging/#configuring-the-debugging-server","title":"Configuring the debugging server","text":"<p>Select <code>Run -&gt; Edit Configurations</code> and follow the instructions there :)</p> <ul> <li>Create a new server with the <code>+</code> button.</li> <li>Put your IP in <code>IDE host name</code> and select a port number.</li> <li>Optionally, add a path mapping: <code>pycharm/pwndbg/dir=machine/pwndbg/dir</code></li> <li>Uncheck <code>suspend after connect</code></li> </ul>"},{"location":"pycharm_debugging/#configuring-pwndbg","title":"Configuring pwndbg","text":"<ul> <li>Select <code>Run -&gt; Edit Configurations</code> and install the packages described in that window.</li> <li><code>pip install pydevd-pycharm~=&lt;your_pycharm_version&gt;</code></li> <li>Add the following code somewhere where it will execute on gdb startup: Python<pre><code>import pydevd_pycharm\npydevd_pycharm.settrace('&lt;your_IP&gt;', port=&lt;port&gt;, stdoutToServer=True, stderrToServer=True)\n</code></pre></li> </ul>"},{"location":"pycharm_debugging/#debugging","title":"Debugging","text":"<ol> <li>Start the debugging server in PyCharm</li> <li>Run pwndbg</li> </ol>"},{"location":"pycharm_debugging/#wsl2","title":"WSL2","text":"<p>In order to debug using WSL2, you need to obtain your Windows IP. The easiest way to do that is to run: Text Only<pre><code>cat /etc/resolv.conf\n</code></pre> and then to pick the value in the <code>nameserver</code> line. Then use that IP in the <code>IDE host name</code> field, when configuring the server. Afterwards, use the same IP in <code>pydevd_pycharm.settrace(...)</code></p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#quick-start","title":"Quick start","text":"<p>Installation from source is straightforward:</p> Bash<pre><code>git clone https://github.com/pwndbg/pwndbg\ncd pwndbg\n./setup.sh\n</code></pre>"},{"location":"setup/#install-on-linux-distributions","title":"Install on Linux distributions","text":"<p>Nix package manager (you can use Nix on any distribution): Bash<pre><code>nix shell github:pwndbg/pwndbg\npwndbg ./your-binary\n</code></pre></p> <p>Pwndbg is supported on Ubuntu 22.04, and 24.04 with GDB 12.1 and later. We do not test on any older versions of Ubuntu, so <code>pwndbg</code> may not work on these versions (for Ubuntu 18.04 use the 2023.07.17: ubuntu18.04-final release). We may accept pull requests fixing issues in older versions on a case by case basis, please discuss this with us on Discord first. You can also always checkout an older version of <code>pwndbg</code> from around the time the Ubuntu version you're interested in was still supported by Canonical, or you can attempt to build a newer version of GDB from source.</p> <p>Other Linux distributions are also supported via <code>setup.sh</code>, including:</p> <ul> <li>Debian-based OSes (via apt-get)</li> <li>Fedora and Red Hat (via dnf)</li> <li>Clear (via swiped)</li> <li>OpenSUSE LEAP (via zypper)</li> <li>Arch and Manjaro (via community AUR packages)</li> <li>Void (via xbps)</li> <li>Gentoo (via emerge)</li> </ul> <p>If you use any Linux distribution other than Ubuntu, we recommend using the latest available GDB built from source. You can build it as: Text Only<pre><code>cd &lt;gdb-sources-dir&gt;\nmkdir build\ncd build\n../configure --disable-nls --disable-werror --with-system-readline --with-python=`which python3` --with-system-gdbinit=/etc/gdb/gdbinit --enable-targets=all\nmake -j7\n</code></pre></p>"},{"location":"setup/#portable-installation-from-package","title":"Portable Installation from package","text":"<p>The portable version includes all necessary dependencies and should work without the need to install additional packages.</p>"},{"location":"setup/#download-the-portable-version","title":"Download the Portable Version:","text":"<p>Download the portable version from the Pwndbg releases page by selecting the desired version. Choose the appropriate version for your system architecture (x86_64 or aarch64).</p>"},{"location":"setup/#installation-on-rpm-based-systems-centosalmarockyrhel","title":"Installation on RPM-based Systems (CentOS/Alma/Rocky/RHEL):","text":"Bash<pre><code>dnf install ./pwndbg-2023.07.17.x86_64.rpm\n# pwndbg\n</code></pre>"},{"location":"setup/#installation-on-deb-based-systems-debianubuntukali","title":"Installation on DEB-based Systems (Debian/Ubuntu/Kali):","text":"Bash<pre><code>apt install ./pwndbg_2023.07.17_amd64.deb\n# pwndbg\n</code></pre>"},{"location":"setup/#installation-on-alpine","title":"Installation on Alpine:","text":"Bash<pre><code>apk add --allow-untrusted ./pwndbg_2023.07.17_x86_64.apk\n# pwndbg\n</code></pre>"},{"location":"setup/#installation-on-arch-linux","title":"Installation on Arch Linux:","text":"Bash<pre><code>pacman -U ./pwndbg-2023.07.17-1-x86_64.pkg.tar.zst\n# pwndbg\n</code></pre>"},{"location":"setup/#generic-linux-installation","title":"Generic Linux Installation:","text":"Bash<pre><code>tar -v -xf ./pwndbg_2023.07.17_amd64.tar.gz\n# ./pwndbg/bin/pwndbg\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/","title":"Pwndbg coding sprints report","text":"<p>This blog post is a report of the two coding sprints for the Pwndbg project that I organized first on the EuroPython 2022 conference and then, taking inspiration from the previous one, in the Hackerspace Krak\u00f3w, located in Cracow, Poland.</p> <p>PS: If you are only looking for a list of things done, scroll down!</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#where-i-got-the-idea-for-sprints","title":"Where I got the idea for sprints?","text":"<p>I have recently attended the EuroPython 2022 conference and I enjoyed the \u201csprints\u201d there. In short, a sprint is a semi-organized event, where anyone can announce a project they will be working on and others can join them. This helps both the projects and the event participants to learn about the project and to make first-time contributions. At the EuroPython conference, there were 16 officially announced projects, but I know that even more projects were being worked on in practice. Of course, other communities or conferences also do this (e.g. NixCon).</p> <p>At the EuroPython conference, I announced my own sprint to work on the Pwndbg project that I maintain. Having no expectations, I felt excited when four people showed up to learn something new and hack together on the project. Later, taking inspiration from it, I organized another sprint, this time in Cracow in the local Hackerspace with even a bigger response. Below, you can read a small report on the two sprints that have happened.</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#my-general-idea-for-a-pwndbg-sprint","title":"My general idea for a Pwndbg sprint","text":"<p>Pwndbg is written in Python, so on one hand is easy to hack on, but on the other hand it is a plugin for GDB, a console debugger for native programs (e.g. ones written in C, C++, Go or Rust). The general idea of Pwndbg is to alleviate the pain points of working with and improve the UX of GDB when debugging assembly code, reverse engineering a binary or during exploit development.</p> <p>Since not everyone is familiar with debuggers or the underlyings of programs execution (e.g. assembly code, CPU registers or stack or heap memory) I knew that I had to make some introduction to those concepts and if possible, prepare a list of simple tasks, so that people can get familiar with the codebase and the tool and contribute something.</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#europython-2022-sprint","title":"EuroPython 2022 sprint","text":"<p>On the first sprint, four people showed up, mostly having no prior experience with the topic. We started with an introduction to what GDB and Pwndbg are and why and when they are useful.</p> <p>For this, I took a small C program that had a buffer overflow bug: C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char* argv[]) {\n    char name[16] = {0};\n\n    // NOTE: We copy the `argv[1]` string which may be of arbitrary length\n    // into the `name` buffer which is only of 16-bytes long. Thus, we can\n    // overwrite the stack memory of the program past the `name` buffer.\n    strcpy(name, argv[1]);\n\n    printf(\"Hello %s!\\n\", name);\n}\n</code></pre></p> <p>Then, after compiling it (<code>gcc main.c</code>), we ran the program twice to see that it will crash if we provide a too long string as its argument:</p> Bash<pre><code>$ ./a.out Disconnect3d\nHello Disconnect3d!\n\n$ ./a.out Disconnect3d_at_EuroPython\nHello Disconnect3d_at_EuroPython!\n*** stack smashing detected ***: &lt;unknown&gt; terminated\nAborted (core dumped)\n</code></pre> <p>Then, I explained that the \"stack smashing detected\" we see is the \"stack canaries\" (also called \"stack cookies\") exploit mitigation added by compilers. This compiler feature adds a special 8-bytes canary value after the function's local variables located on the stack, so that then a stack frame may look like this:</p> Text Only<pre><code>------------------------------   lower addresses\nchar name[16];                         |\nuint8_t canary[8];                     |\nvoid* function_return_address;         V\n------------------------------   higher addresses\n</code></pre> <p>This local stack canary value is then filled in just after the function\u2019s prologue and is verified against a global value before the function returns to see if the stack was not corrupted (starting from the canary). Of course this may not detect all possible stack memory corruptions but it often makes it impossible to exploit a program (e.g. by changing the return address, also located on the stack), knowing just this vulnerability.</p> <p>The stack canary mitigation can also be disabled. And if it were done (by passing in a <code>-fno-stack-protector</code> flag during compilation), we would get a different result when running the resulting program:</p> Bash<pre><code>$ gcc -fno-stack-protector buf.c\n\n$ ./a.out Disconnect3d_on_EuroPython\nHello Disconnect3d_on_EuroPython!\nSegmentation fault (core dumped)\n</code></pre> <p>Now, the \"stack smashing detected\" is gone, but the program still crashed, because we still corrupted a part of its memory that we shouldn't have touched in a way that made the program do illegal things (e.g. accessing unmapped memory).</p> <p>During the sprint, we also ran a GDB+Pwndbg session to see the exact instructions that placed the canary value on the stack memory, to see that our input string was located just before it and how the canary was checked just before the function was returned.</p> <p>I am not going to describe all of this here, but you can see some of it in the below asciinema recording.</p> <p></p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#hackerspace-krakow-sprint","title":"Hackerspace Krak\u00f3w sprint","text":"<p>Since the second sprint was an ad-hoc event, I had to organize it myself. As a member of Hackerspace Krak\u00f3w, I was able to reserve the hackerspace's softroom, which is a perfect place for people to hack on things using their computers. Then, I advertised the event on the Hackerspace's mailing list and on a few other mediums.</p> <p>I did not expect many people to come, especially that I advertised the sprint ~2 days before the event.</p> <p>But... 8 people (!) showed up (excluding me). I prepared a document with some basic information and tasks, which can be found here (though, it is in Polish and it was modified during and after the sprint).</p> <p>I won't lie: most people that came were friends of mine, some of which I play CTFs with. However, not all of them had really used or developed Pwndbg before.</p>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#accomplishments-from-the-two-sprints","title":"Accomplishments from the two sprints","text":"<p>On the EP sprint, since we were just a group of four, we focused on small improvements to the codebase. In total, we did the following: * reviewed and merged the fs/gs_base fetching improvement PR, * pinned the project's dependencies, * updated the unicorn dependency version, * added a \"tip of the day\" feature, * improved the UX of using Pwndbg within a Python virtual environment, * and also worked on enhancing the display of arguments when stopping on a call to the printf functions family.</p> <p>The last item from the list was the hardest to jump on and it still requires enhancements until it is merged. Nonetheless, all of this was a nice outcome from the whole sprint :).</p> <p>On the second sprint, while we were a bigger group, we had much more limited time (since instead of having ~8 hours, we had just a few). Anyway, we were able to do the following:</p> <ul> <li>Cleanup some code leftover after dropping Python 2 support,</li> <li>Added documentation on how to debug Pwndbg using PyCharm remote debugging,</li> <li>Reviewed and merged the PRs that sets <code>$base_heap</code> variable and a tip for it, which may be useful for heap exploitation,</li> <li>Fix the X30 register display on AARCH64 targets,</li> <li>Fix <code>context args</code> display when PC/IP register pointed to unmapped memory,</li> <li>Fixed the <code>xor</code> and <code>memfrob</code> commands and added tests for them (! :D),</li> <li>Worked on adding a way to dump memory that can be copied right away as C or Python code (this needs to be changed to a command flag),</li> <li>Investigated a potential parsing issue, even looking at GDB's command parsing source code, implemented potential patch, which only later turned out to be redundant and the issue to be invalid.</li> </ul>"},{"location":"blog/2022/08/21/pwndbg-coding-sprints-report/#summary-and-whats-next","title":"Summary and what's next?","text":"<p>Organizing those sprints helped me to get back to develop the Pwndbg project more and and attract more people to contribute to it. I also think that more conferences should have this kind of attractions (similarly as more conferences should have lightning talk sessions, heh).</p> <p>Regarding the Pwndbg sprints, I am organizing another one this week in Cracow on Tuesday, so if you live nearby and are interested in learning about Pwndbg or contributing to the project, feel invited! :)</p> <p>PS: Thanks a lot to @arturcygan for reviewing this blog post.</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#start","title":"Start","text":"<ul> <li>attachp Attaches to a given pid, process name or device file.</li> <li>entry</li> <li>sstart Alias for 'tbreak __libc_start_main; run'.</li> <li>start</li> </ul>"},{"location":"commands/#integrations","title":"Integrations","text":"<ul> <li>ai Ask GPT-3 a question about the current debugging context.</li> <li>j Synchronize IDA's cursor with GDB.</li> <li>save_ida Save the ida database.</li> <li>r2 Launches radare2.</li> <li>r2pipe Execute stateful radare2 commands through r2pipe.</li> <li>rz Launches rizin.</li> <li>rzpipe Execute stateful rizin commands through rzpipe.</li> <li>rop Dump ROP gadgets with Jon Salwan's ROPgadget tool.</li> <li>ropper ROP gadget search with ropper.</li> </ul>"},{"location":"commands/#linuxlibcelf","title":"Linux/libc/ELF","text":"<ul> <li>argc Prints out the number of arguments.</li> <li>argv Prints out the contents of argv.</li> <li>envp Prints out the contents of the environment.</li> <li>aslr</li> <li>auxv Print information from the Auxiliary ELF Vector.</li> <li>elfsections Prints the section mappings contained in the ELF header.</li> <li>gotplt Prints any symbols found in the .got.plt section if it exists.</li> <li>plt Prints any symbols found in the .plt section if it exists.</li> <li>got Show the state of the Global Offset Table.</li> <li>track-got Controls GOT tracking</li> <li>linkmap Show the state of the Link Map</li> <li>errno Converts errno (or argument) to its string representation.</li> <li>piebase Calculate VA of RVA from PIE base.</li> <li>threads List all threads belonging to the selected inferior.</li> <li>tls Print out base address of the current Thread Local Storage (TLS).</li> </ul>"},{"location":"commands/#misc","title":"Misc","text":"<ul> <li>asm Assemble shellcode into bytes</li> <li>break-if-not-taken Breaks on a branch if it is not taken.</li> <li>break-if-taken Breaks on a branch if it is taken.</li> <li>checksec Prints out the binary security settings using <code>checksec</code>.</li> <li>comm Put comments in assembly code.</li> <li>cyclic Cyclic pattern creator/finder.</li> <li>cymbol Add, show, load, edit, or delete custom structures in plain C.</li> <li>dt</li> <li>dumpargs Prints determined arguments for call instruction.</li> <li>down Select and print stack frame called by this one.</li> <li>up Select and print stack frame that called this one.</li> <li>ipi Start an interactive IPython prompt.</li> <li>stepuntilasm Breaks on the next matching instruction.</li> <li>patch Patches given instruction with given code or bytes.</li> <li>patch_list List all patches.</li> <li>patch_revert Revert patch at given address.</li> <li>getfile Gets the current file.</li> <li>plist Dumps the elements of a linked list.</li> <li>sigreturn Display the SigreturnFrame at the specific address</li> <li>spray Spray memory with cyclic() generated values</li> <li>tips Shows tips.</li> <li>valist Dumps the arguments of a va_list.</li> </ul>"},{"location":"commands/#stack","title":"Stack","text":"<ul> <li>canary Print out the current stack canary.</li> <li>retaddr Print out the stack addresses that contain return addresses.</li> <li>stack Dereferences on stack data with specified count and offset.</li> <li>stackf Dereferences on stack data, printing the entire stack frame with specified count and offset .</li> </ul>"},{"location":"commands/#pwndbg","title":"pwndbg","text":"<ul> <li>config Shows pwndbg-specific configuration.</li> <li>configfile Generates a configuration file for the current pwndbg options.</li> <li>theme Shows pwndbg-specific theme configuration.</li> <li>themefile Generates a configuration file for the current pwndbg theme options.</li> <li>memoize</li> <li>pwndbg Prints out a list of all pwndbg commands.</li> <li>reinit_pwndbg Makes pwndbg reinitialize all state.</li> <li>reload Reload pwndbg.</li> <li>bugreport Generate a bug report.</li> <li>version Displays GDB, Python, and pwndbg versions.</li> </ul>"},{"location":"commands/#context","title":"Context","text":"<ul> <li>context Print out the current register, instruction, and stack context.</li> <li>contextoutput Sets the output of a context section.</li> <li>contextunwatch Removes an expression previously added to be watched.</li> <li>contextwatch</li> <li>regs Print out all registers and enhance the information.</li> <li>xinfo Shows offsets of the specified address from various useful locations.</li> </ul>"},{"location":"commands/#register","title":"Register","text":"<ul> <li>cpsr Print out ARM CPSR or xPSR register.</li> <li>setflag Modify the flags register.</li> <li>fsbase Prints out the FS base address. See also $fsbase.</li> <li>gsbase Prints out the GS base address. See also $gsbase.</li> </ul>"},{"location":"commands/#memory","title":"Memory","text":"<ul> <li>distance Print the distance between the two arguments, or print the offset to the address's page base.</li> <li>hexdump Hexdumps data at the specified address or module name.</li> <li>leakfind</li> <li>mmap</li> <li>mprotect</li> <li>p2p Pointer to pointer chain search. Searches given mapping for all pointers that point to specified mapping.</li> <li>telescope Recursively dereferences pointers starting at the specified address.</li> <li>telescope Recursively dereferences pointers starting at the specified address.</li> <li>probeleak</li> <li>search Search memory for byte sequences, strings, pointers, and integer values.</li> <li>telescope Recursively dereferences pointers starting at the specified address.</li> <li>vmmap Print virtual memory map pages.</li> <li>vmmap_add Add virtual memory map page.</li> <li>vmmap_clear Clear the vmmap cache.</li> <li>vmmap_load Load virtual memory map pages from ELF file.</li> <li>xinfo Shows offsets of the specified address from various useful locations.</li> <li>memfrob Memfrobs a region of memory (xor with '*').</li> <li>xor XOR <code>count</code> bytes at <code>address</code> with the key <code>key</code>.</li> </ul>"},{"location":"commands/#heap","title":"Heap","text":"<ul> <li>arena Print the contents of an arena.</li> <li>arenas List this process's arenas.</li> <li>bins Print the contents of all an arena's bins and a thread's tcache.</li> <li>fastbins Print the contents of an arena's fastbins.</li> <li>find_fake_fast Find candidate fake fast or tcache chunks overlapping the specified address.</li> <li>heap Iteratively print chunks on a heap.</li> <li>heap_config Shows heap related configuration.</li> <li>hi Searches all heaps to find if an address belongs to a chunk. If yes, prints the chunk.</li> <li>largebins Print the contents of an arena's largebins.</li> <li>malloc_chunk Print a chunk.</li> <li>mp Print the mp_ struct's contents.</li> <li>smallbins Print the contents of an arena's smallbins.</li> <li>tcache Print a thread's tcache contents.</li> <li>tcachebins Print the contents of a tcache.</li> <li>top_chunk Print relevant information about an arena's top chunk.</li> <li>try_free Check what would happen if free was called with given address.</li> <li>unsortedbin Print the contents of an arena's unsortedbin.</li> <li>vis_heap_chunks Visualize chunks on a heap.</li> </ul>"},{"location":"commands/#breakpoint","title":"Breakpoint","text":"<ul> <li>ignore Set ignore-count of breakpoint number N to COUNT.</li> <li>breakrva Break at RVA from PIE base.</li> </ul>"},{"location":"commands/#kernel","title":"Kernel","text":"<ul> <li>kbase Finds the kernel virtual base address.</li> <li>kchecksec Checks for kernel hardening configuration options.</li> <li>kcmdline Return the kernel commandline (/proc/cmdline).</li> <li>kconfig Outputs the kernel config (requires CONFIG_IKCONFIG).</li> <li>klookup Lookup kernel symbols.</li> <li>kversion Outputs the kernel version (/proc/version).</li> <li>slab Prints information about the slab allocator</li> </ul>"},{"location":"commands/#process","title":"Process","text":"<ul> <li>killthreads Kill all or given threads.</li> <li>pid Gets the pid.</li> <li>procinfo Display information about the running process.</li> </ul>"},{"location":"commands/#disassemble","title":"Disassemble","text":"<ul> <li>emulate Like nearpc, but will emulate instructions from the current $PC forward.</li> <li>nearpc Disassemble near a specified address.</li> </ul>"},{"location":"commands/#stepnextcontinue","title":"Step/Next/Continue","text":"<ul> <li>nextcall Breaks at the next call instruction.</li> <li>nextjmp Breaks at the next jump instruction.</li> <li>nextproginstr Breaks at the next instruction that belongs to the running program.</li> <li>nextret Breaks at next return-like instruction.</li> <li>nextsyscall Breaks at the next syscall not taking branches.</li> <li>stepover Breaks on the instruction after this one.</li> <li>stepret Breaks at next return-like instruction by 'stepping' to it.</li> <li>stepsyscall Breaks at the next syscall by taking branches.</li> <li>xuntil Continue execution until an address or function.</li> </ul>"},{"location":"commands/#windbg","title":"WinDbg","text":"<ul> <li>bc Clear the breakpoint with the specified index.</li> <li>bd Disable the breakpoint with the specified index.</li> <li>be Enable the breakpoint with the specified index.</li> <li>bl List breakpoints.</li> <li>bp Set a breakpoint at the specified address.</li> <li>da Dump a string at the specified address.</li> <li>db Starting at the specified address, dump N bytes.</li> <li>dc Starting at the specified address, hexdump.</li> <li>dd Starting at the specified address, dump N dwords.</li> <li>dds Dump pointers and symbols at the specified address.</li> <li>dq Starting at the specified address, dump N qwords.</li> <li>ds Dump a string at the specified address.</li> <li>dw Starting at the specified address, dump N words.</li> <li>eb Write hex bytes at the specified address.</li> <li>ed Write hex dwords at the specified address.</li> <li>eq Write hex qwords at the specified address.</li> <li>ew Write hex words at the specified address.</li> <li>ez Write a string at the specified address.</li> <li>eza Write a string at the specified address.</li> <li>go Windbg compatibility alias for 'continue' command.</li> <li>k Print a backtrace (alias 'bt').</li> <li>ln List the symbols nearest to the provided value.</li> <li>pc Windbg compatibility alias for 'nextcall' command.</li> <li>peb Not be windows.</li> </ul>"},{"location":"commands/ai/ai/","title":"ai","text":""},{"location":"commands/ai/ai/#description","title":"Description","text":"<p>Ask GPT-3 a question about the current debugging context.</p>"},{"location":"commands/ai/ai/#usage","title":"Usage:","text":"Bash<pre><code>usage: ai [-h] [-M MODEL] [-t TEMPERATURE] [-m MAX_TOKENS] [-v] [-L] [-c COMMAND] [question ...]\n</code></pre>"},{"location":"commands/ai/ai/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>question</code> The question to ask."},{"location":"commands/ai/ai/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-M</code> <code>--model</code> <code>None</code> The OpenAI model to use. <code>-t</code> <code>--temperature</code> <code>None</code> The temperature to use. <code>-m</code> <code>--max-tokens</code> <code>None</code> The maximum number of tokens to generate. <code>-v</code> <code>--verbose</code> Print the prompt and response. (default: %(default)s) <code>-L</code> <code>--list-models</code> List the available models. (default: %(default)s) <code>-c</code> <code>--command</code> <code>None</code> Run a command in the GDB debugger and ask a question about the output."},{"location":"commands/argv/argc/","title":"argc","text":""},{"location":"commands/argv/argc/#description","title":"Description","text":"<p>Prints out the number of arguments.</p>"},{"location":"commands/argv/argc/#usage","title":"Usage:","text":"Bash<pre><code>usage: argc [-h]\n</code></pre>"},{"location":"commands/argv/argc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/argv/argv/","title":"argv","text":""},{"location":"commands/argv/argv/#description","title":"Description","text":"<p>Prints out the contents of argv.</p>"},{"location":"commands/argv/argv/#usage","title":"Usage:","text":"Bash<pre><code>usage: argv [-h] [i]\n</code></pre>"},{"location":"commands/argv/argv/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>i</code> Index of the argument to print out."},{"location":"commands/argv/argv/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/argv/envp/","title":"envp","text":""},{"location":"commands/argv/envp/#description","title":"Description","text":"<p>Prints out the contents of the environment.</p>"},{"location":"commands/argv/envp/#usage","title":"Usage:","text":"Bash<pre><code>usage: envp [-h] [name]\n</code></pre>"},{"location":"commands/argv/envp/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>name</code> Name of the environment variable to see."},{"location":"commands/argv/envp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/aslr/aslr/","title":"aslr","text":""},{"location":"commands/aslr/aslr/#description","title":"Description","text":"<p>Check the current ASLR status, or turn it on/off.</p> <p>Does not take effect until the program is restarted.</p>"},{"location":"commands/aslr/aslr/#usage","title":"Usage:","text":"Bash<pre><code>usage: aslr [-h] [{on,off}]\n</code></pre>"},{"location":"commands/aslr/aslr/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>state</code> Turn ASLR on or off (takes effect when target is started)"},{"location":"commands/aslr/aslr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/asm/asm/","title":"asm","text":""},{"location":"commands/asm/asm/#description","title":"Description","text":"<p>Assemble shellcode into bytes</p>"},{"location":"commands/asm/asm/#usage","title":"Usage:","text":"Bash<pre><code>usage: asm [-h] [-f {hex,string}]\n           [--arch {powerpc64,aarch64,powerpc,riscv32,riscv64,sparc64,mips64,msp430,alpha,amd64,sparc,thumb,cris,i386,ia64,m68k,mips,s390,none,avr,arm,vax}] [-v AVOID] [-n]\n           [-z] [-i INFILE]\n           [shellcode ...]\n</code></pre>"},{"location":"commands/asm/asm/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>shellcode</code> Assembler code to assemble (default: %(default)s)"},{"location":"commands/asm/asm/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--format</code> <code>hex</code> Output format (default: %(default)s) <code>--arch</code> <code>i386</code> Target architecture (default: %(default)s) <code>-v</code> <code>--avoid</code> <code>None</code> Encode the shellcode to avoid the listed bytes (provided as hex) <code>-n</code> <code>--newline</code> <code>None</code> Encode the shellcode to avoid newlines <code>-z</code> <code>--zero</code> <code>None</code> Encode the shellcode to avoid NULL bytes <code>-i</code> <code>--infile</code> <code>None</code> Specify input file"},{"location":"commands/attachp/attachp/","title":"attachp","text":""},{"location":"commands/attachp/attachp/#description","title":"Description","text":"<p>Attaches to a given pid, process name or device file.</p> <p>This command wraps the original GDB <code>attach</code> command to add the ability to debug a process with given name. In such case the process identifier is fetched via the <code>pidof &lt;name&gt;</code> command.</p> <p>Original GDB attach command help:     Attach to a process or file outside of GDB.     This command attaches to another target, of the same type as your last     \"target\" command (\"info files\" will show your target stack).     The command may take as argument a process id or a device file.     For a process id, you must have permission to send the process a signal,     and it must have the same effective uid as the debugger.     When using \"attach\" with a process id, the debugger finds the     program running in the process, looking first in the current working     directory, or (if not found there) using the source file search path     (see the \"directory\" command).  You can also use the \"file\" command     to specify the program, and to load its symbol table.</p>"},{"location":"commands/attachp/attachp/#usage","title":"Usage:","text":"Bash<pre><code>usage: attachp [-h] [--no-truncate] target\n</code></pre>"},{"location":"commands/attachp/attachp/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>target</code> pid, process name or device file to attach to"},{"location":"commands/attachp/attachp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--no-truncate</code> dont truncate command args (default: %(default)s)"},{"location":"commands/auxv/auxv/","title":"auxv","text":""},{"location":"commands/auxv/auxv/#description","title":"Description","text":"<p>Print information from the Auxiliary ELF Vector.</p>"},{"location":"commands/auxv/auxv/#usage","title":"Usage:","text":"Bash<pre><code>usage: auxv [-h]\n</code></pre>"},{"location":"commands/auxv/auxv/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/branch/break_if_not_taken/","title":"break-if-not-taken","text":""},{"location":"commands/branch/break_if_not_taken/#description","title":"Description","text":"<p>Breaks on a branch if it is not taken.</p>"},{"location":"commands/branch/break_if_not_taken/#usage","title":"Usage:","text":"Bash<pre><code>usage: break-if-not-taken [-h] branch\n</code></pre>"},{"location":"commands/branch/break_if_not_taken/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>branch</code> The branch instruction to break on."},{"location":"commands/branch/break_if_not_taken/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/branch/break_if_taken/","title":"break-if-taken","text":""},{"location":"commands/branch/break_if_taken/#description","title":"Description","text":"<p>Breaks on a branch if it is taken.</p>"},{"location":"commands/branch/break_if_taken/#usage","title":"Usage:","text":"Bash<pre><code>usage: break-if-taken [-h] branch\n</code></pre>"},{"location":"commands/branch/break_if_taken/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>branch</code> The branch instruction to break on."},{"location":"commands/branch/break_if_taken/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/canary/canary/","title":"canary","text":""},{"location":"commands/canary/canary/#description","title":"Description","text":"<p>Print out the current stack canary.</p>"},{"location":"commands/canary/canary/#usage","title":"Usage:","text":"Bash<pre><code>usage: canary [-h]\n</code></pre>"},{"location":"commands/canary/canary/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/checksec/checksec/","title":"checksec","text":""},{"location":"commands/checksec/checksec/#description","title":"Description","text":"<p>Prints out the binary security settings using <code>checksec</code>.</p>"},{"location":"commands/checksec/checksec/#usage","title":"Usage:","text":"Bash<pre><code>usage: checksec [-h]\n</code></pre>"},{"location":"commands/checksec/checksec/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/comments/comm/","title":"comm","text":""},{"location":"commands/comments/comm/#description","title":"Description","text":"<p>Put comments in assembly code.</p>"},{"location":"commands/comments/comm/#usage","title":"Usage:","text":"Bash<pre><code>usage: comm [-h] [--addr address] comment\n</code></pre>"},{"location":"commands/comments/comm/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>comment</code> The text you want to comment"},{"location":"commands/comments/comm/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--addr</code> <code>None</code> Address to write comments"},{"location":"commands/config/config/","title":"config","text":""},{"location":"commands/config/config/#description","title":"Description","text":"<p>Shows pwndbg-specific configuration.</p>"},{"location":"commands/config/config/#usage","title":"Usage:","text":"Bash<pre><code>usage: config [-h] [filter_pattern]\n</code></pre>"},{"location":"commands/config/config/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to config parameters names/descriptions"},{"location":"commands/config/config/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/config/configfile/","title":"configfile","text":""},{"location":"commands/config/configfile/#description","title":"Description","text":"<p>Generates a configuration file for the current pwndbg options.</p>"},{"location":"commands/config/configfile/#usage","title":"Usage:","text":"Bash<pre><code>usage: configfile [-h] [--show-all]\n</code></pre>"},{"location":"commands/config/configfile/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--show-all</code> Display all configuration options. (default: %(default)s)"},{"location":"commands/config/theme/","title":"theme","text":""},{"location":"commands/config/theme/#description","title":"Description","text":"<p>Shows pwndbg-specific theme configuration.</p>"},{"location":"commands/config/theme/#usage","title":"Usage:","text":"Bash<pre><code>usage: theme [-h] [filter_pattern]\n</code></pre>"},{"location":"commands/config/theme/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to theme parameters names/descriptions"},{"location":"commands/config/theme/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/config/themefile/","title":"themefile","text":""},{"location":"commands/config/themefile/#description","title":"Description","text":"<p>Generates a configuration file for the current pwndbg theme options.</p>"},{"location":"commands/config/themefile/#usage","title":"Usage:","text":"Bash<pre><code>usage: themefile [-h] [--show-all]\n</code></pre>"},{"location":"commands/config/themefile/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--show-all</code> Force displaying of all theme options. (default: %(default)s)"},{"location":"commands/context/context/","title":"context","text":""},{"location":"commands/context/context/#description","title":"Description","text":"<p>Print out the current register, instruction, and stack context.</p>"},{"location":"commands/context/context/#usage","title":"Usage:","text":"Bash<pre><code>usage: context [-h] [subcontext ...]\n</code></pre>"},{"location":"commands/context/context/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>subcontext</code> Submenu to display: 'reg', 'disasm', 'code', 'stack', 'backtrace', 'ghidra', and/or 'args'"},{"location":"commands/context/context/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/contextoutput/","title":"contextoutput","text":""},{"location":"commands/context/contextoutput/#description","title":"Description","text":"<p>Sets the output of a context section.</p>"},{"location":"commands/context/contextoutput/#usage","title":"Usage:","text":"Bash<pre><code>usage: contextoutput [-h] section path clearing [banner] [width]\n</code></pre>"},{"location":"commands/context/contextoutput/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>section</code> The section which is to be configured. ('regs', 'disasm', 'code', 'stack', 'backtrace', and/or 'args') <code>path</code> The path to which the output is written <code>clearing</code> Indicates weather to clear the output <code>banner</code> Where a banner should be placed: both, top , bottom, none (default: %(default)s) <code>width</code> Sets a fixed width (used for banner). Set to None for auto"},{"location":"commands/context/contextoutput/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/contextunwatch/","title":"contextunwatch","text":""},{"location":"commands/context/contextunwatch/#description","title":"Description","text":"<p>Removes an expression previously added to be watched.</p>"},{"location":"commands/context/contextunwatch/#usage","title":"Usage:","text":"Bash<pre><code>usage: contextunwatch [-h] num\n</code></pre>"},{"location":"commands/context/contextunwatch/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>num</code> The expression number to be removed from context"},{"location":"commands/context/contextunwatch/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/contextwatch/","title":"contextwatch","text":""},{"location":"commands/context/contextwatch/#description","title":"Description","text":"<p>Adds an expression to be shown on context.</p> <p>To remove an expression, see <code>cunwatch</code>.</p>"},{"location":"commands/context/contextwatch/#usage","title":"Usage:","text":"Bash<pre><code>usage: contextwatch [-h] [{eval,execute}] expression\n</code></pre>"},{"location":"commands/context/contextwatch/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>cmd</code> Command to be used with the expression. - eval: the expression is parsed and evaluated as in the debugged language. - execute: the expression is executed as a GDB command. (default: %(default)s) <code>expression</code> The expression to be evaluated and shown in context"},{"location":"commands/context/contextwatch/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/context/regs/","title":"regs","text":""},{"location":"commands/context/regs/#description","title":"Description","text":"<p>Print out all registers and enhance the information.</p>"},{"location":"commands/context/regs/#usage","title":"Usage:","text":"Bash<pre><code>usage: regs [-h] [regs ...]\n</code></pre>"},{"location":"commands/context/regs/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>regs</code> Registers to be shown"},{"location":"commands/context/regs/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/cpsr/cpsr/","title":"cpsr","text":""},{"location":"commands/cpsr/cpsr/#description","title":"Description","text":"<p>Print out ARM CPSR or xPSR register.</p>"},{"location":"commands/cpsr/cpsr/#usage","title":"Usage:","text":"Bash<pre><code>usage: cpsr [-h]\n</code></pre>"},{"location":"commands/cpsr/cpsr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/cyclic/cyclic_cmd/","title":"cyclic","text":""},{"location":"commands/cyclic/cyclic_cmd/#description","title":"Description","text":"<p>Cyclic pattern creator/finder.</p>"},{"location":"commands/cyclic/cyclic_cmd/#usage","title":"Usage:","text":"Bash<pre><code>usage: cyclic [-h] [-a charset] [-n length] [-l lookup_value | count]\n</code></pre>"},{"location":"commands/cyclic/cyclic_cmd/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> Number of characters to print from the sequence (default: print the entire sequence) (default: %(default)s)"},{"location":"commands/cyclic/cyclic_cmd/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--alphabet</code> <code>abcdefghijklmnopqrstuvwxyz</code> The alphabet to use in the cyclic pattern (default: %(default)s) <code>-n</code> <code>--length</code> <code>None</code> Size of the unique subsequences (defaults to the pointer size for the current arch) <code>-o</code> <code>--lookup</code> <code>None</code> Do a lookup instead of printing the sequence (accepts constant values as well as expressions)"},{"location":"commands/cymbol/cymbol/","title":"cymbol","text":""},{"location":"commands/cymbol/cymbol/#description","title":"Description","text":"<p>Add, show, load, edit, or delete custom structures in plain C.</p>"},{"location":"commands/cymbol/cymbol/#usage","title":"Usage:","text":"Bash<pre><code>usage: cymbol [-h] [-a name] [-r name] [-e name] [-l name] [-s name]\n</code></pre>"},{"location":"commands/cymbol/cymbol/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--add</code> <code>None</code> Add a new custom structure <code>-r</code> <code>--remove</code> <code>None</code> Remove an existing custom structure <code>-e</code> <code>--edit</code> <code>None</code> Edit an existing custom structure <code>-l</code> <code>--load</code> <code>None</code> Load an existing custom structure <code>-s</code> <code>--show</code> <code>None</code> Show the source code of an existing custom structure"},{"location":"commands/distance/distance/","title":"distance","text":""},{"location":"commands/distance/distance/#description","title":"Description","text":"<p>Print the distance between the two arguments, or print the offset to the address's page base.</p>"},{"location":"commands/distance/distance/#usage","title":"Usage:","text":"Bash<pre><code>usage: distance [-h] a [b]\n</code></pre>"},{"location":"commands/distance/distance/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>a</code> The first address. <code>b</code> The second address."},{"location":"commands/distance/distance/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/dt/dt/","title":"dt","text":""},{"location":"commands/dt/dt/#description","title":"Description","text":"Text Only<pre><code>Dump out information on a type (e.g. ucontext_t).\n\nOptionally overlay that information at an address.\n</code></pre>"},{"location":"commands/dt/dt/#usage","title":"Usage:","text":"Bash<pre><code>usage: dt [-h] typename [address]\n</code></pre>"},{"location":"commands/dt/dt/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>typename</code> The name of the structure being dumped. <code>address</code> The address of the structure."},{"location":"commands/dt/dt/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/dumpargs/dumpargs/","title":"dumpargs","text":""},{"location":"commands/dumpargs/dumpargs/#description","title":"Description","text":"<p>Prints determined arguments for call instruction.</p>"},{"location":"commands/dumpargs/dumpargs/#usage","title":"Usage:","text":"Bash<pre><code>usage: dumpargs [-h] [-f]\n</code></pre>"},{"location":"commands/dumpargs/dumpargs/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--force</code> Force displaying of all arguments. (default: %(default)s)"},{"location":"commands/elf/elfsections/","title":"elfsections","text":""},{"location":"commands/elf/elfsections/#description","title":"Description","text":"<p>Prints the section mappings contained in the ELF header.</p>"},{"location":"commands/elf/elfsections/#usage","title":"Usage:","text":"Bash<pre><code>usage: elfsections [-h]\n</code></pre>"},{"location":"commands/elf/elfsections/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/elf/gotplt/","title":"gotplt","text":""},{"location":"commands/elf/gotplt/#description","title":"Description","text":"<p>Prints any symbols found in the .got.plt section if it exists.</p>"},{"location":"commands/elf/gotplt/#usage","title":"Usage:","text":"Bash<pre><code>usage: gotplt [-h]\n</code></pre>"},{"location":"commands/elf/gotplt/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/elf/plt/","title":"plt","text":""},{"location":"commands/elf/plt/#description","title":"Description","text":"<p>Prints any symbols found in the .plt section if it exists.</p>"},{"location":"commands/elf/plt/#usage","title":"Usage:","text":"Bash<pre><code>usage: plt [-h]\n</code></pre>"},{"location":"commands/elf/plt/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/flags/setflag/","title":"setflag","text":""},{"location":"commands/flags/setflag/#description","title":"Description","text":"<p>Modify the flags register.</p>"},{"location":"commands/flags/setflag/#usage","title":"Usage:","text":"Bash<pre><code>usage: setflag [-h] flag value\n</code></pre>"},{"location":"commands/flags/setflag/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>flag</code> Flag for which you want to change the value <code>value</code> Value to which you want to set the flag - only valid options are 0 and 1"},{"location":"commands/flags/setflag/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/got/got/","title":"got","text":""},{"location":"commands/got/got/#description","title":"Description","text":"<p>Show the state of the Global Offset Table.</p> <p>Examples:     got     got puts     got -p libc     got -a</p>"},{"location":"commands/got/got/#usage","title":"Usage:","text":"Bash<pre><code>usage: got [-h] [-p PATH_FILTER | -a] [-r] [symbol_filter]\n</code></pre>"},{"location":"commands/got/got/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>symbol_filter</code> Filter results by symbol name. (default: %(default)s)"},{"location":"commands/got/got/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-p</code> <code>--path</code> `` Filter results by library/objfile path. (default: %(default)s) <code>-a</code> <code>--all</code> Process all libs/obfjiles including the target executable. (default: %(default)s) <code>-r</code> <code>--show-readonly</code> Also display read-only entries (which are filtered out by default). (default: %(default)s)"},{"location":"commands/got_tracking/track_got/","title":"track-got","text":""},{"location":"commands/got_tracking/track_got/#description","title":"Description","text":"<p>Controls GOT tracking</p>"},{"location":"commands/got_tracking/track_got/#usage","title":"Usage:","text":"Bash<pre><code>usage: track-got [-h] {enable,disable,info,query} ...\n</code></pre>"},{"location":"commands/got_tracking/track_got/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/arena/","title":"arena","text":""},{"location":"commands/heap/arena/#description","title":"Description","text":"<p>Print the contents of an arena.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/arena/#usage","title":"Usage:","text":"Bash<pre><code>usage: arena [-h] [addr]\n</code></pre>"},{"location":"commands/heap/arena/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/arena/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/arenas/","title":"arenas","text":""},{"location":"commands/heap/arenas/#description","title":"Description","text":"<p>List this process's arenas.</p>"},{"location":"commands/heap/arenas/#usage","title":"Usage:","text":"Bash<pre><code>usage: arenas [-h]\n</code></pre>"},{"location":"commands/heap/arenas/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/bins/","title":"bins","text":""},{"location":"commands/heap/bins/#description","title":"Description","text":"<p>Print the contents of all an arena's bins and a thread's tcache.</p> <p>Default to the current thread's arena and tcache.</p>"},{"location":"commands/heap/bins/#usage","title":"Usage:","text":"Bash<pre><code>usage: bins [-h] [addr] [tcache_addr]\n</code></pre>"},{"location":"commands/heap/bins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena. <code>tcache_addr</code> Address of the tcache."},{"location":"commands/heap/bins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/fastbins/","title":"fastbins","text":""},{"location":"commands/heap/fastbins/#description","title":"Description","text":"<p>Print the contents of an arena's fastbins.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/fastbins/#usage","title":"Usage:","text":"Bash<pre><code>usage: fastbins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/fastbins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/fastbins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all fastbins, including empty ones (default: %(default)s)"},{"location":"commands/heap/find_fake_fast/","title":"find_fake_fast","text":""},{"location":"commands/heap/find_fake_fast/#description","title":"Description","text":"<p>Find candidate fake fast or tcache chunks overlapping the specified address.</p>"},{"location":"commands/heap/find_fake_fast/#usage","title":"Usage:","text":"Bash<pre><code>usage: find_fake_fast [-h] [--align] [--glibc-fastbin-bug] target_address [max_candidate_size]\n</code></pre>"},{"location":"commands/heap/find_fake_fast/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>target_address</code> Address of the word-sized value to overlap. <code>max_candidate_size</code> Maximum size of fake chunks to find."},{"location":"commands/heap/find_fake_fast/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--align</code> Whether the fake chunk must be aligned to MALLOC_ALIGNMENT. This is required for tcache chunks and for all chunks when Safe Linking is enabled (default: %(default)s) <code>-b</code> <code>--glibc-fastbin-bug</code> Does the GLIBC fastbin size field bug affect the candidate size field width? (default: %(default)s)"},{"location":"commands/heap/heap/","title":"heap","text":""},{"location":"commands/heap/heap/#description","title":"Description","text":"<p>Iteratively print chunks on a heap.</p> <p>Default to the current thread's active heap.</p>"},{"location":"commands/heap/heap/#usage","title":"Usage:","text":"Bash<pre><code>usage: heap [-h] [-v] [-s] [addr]\n</code></pre>"},{"location":"commands/heap/heap/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the first chunk (malloc_chunk struct start, prev_size field)."},{"location":"commands/heap/heap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Print all chunk fields, even unused ones. (default: %(default)s) <code>-s</code> <code>--simple</code> Simply print malloc_chunk struct's contents. (default: %(default)s)"},{"location":"commands/heap/heap_config/","title":"heap_config","text":""},{"location":"commands/heap/heap_config/#description","title":"Description","text":"<p>Shows heap related configuration.</p>"},{"location":"commands/heap/heap_config/#usage","title":"Usage:","text":"Bash<pre><code>usage: heap_config [-h] [filter_pattern]\n</code></pre>"},{"location":"commands/heap/heap_config/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to config parameters names/descriptions"},{"location":"commands/heap/heap_config/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/hi/","title":"hi","text":""},{"location":"commands/heap/hi/#description","title":"Description","text":"<p>Searches all heaps to find if an address belongs to a chunk. If yes, prints the chunk.</p>"},{"location":"commands/heap/hi/#usage","title":"Usage:","text":"Bash<pre><code>usage: hi [-h] [-v] [-s] [-f] addr\n</code></pre>"},{"location":"commands/heap/hi/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the interest."},{"location":"commands/heap/hi/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Print all chunk fields, even unused ones. (default: %(default)s) <code>-s</code> <code>--simple</code> Simply print malloc_chunk struct's contents. (default: %(default)s) <code>-f</code> <code>--fake</code> Allow fake chunks. If set, displays any memory as a heap chunk (even if its not a real chunk). (default: %(default)s)"},{"location":"commands/heap/largebins/","title":"largebins","text":""},{"location":"commands/heap/largebins/#description","title":"Description","text":"<p>Print the contents of an arena's largebins.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/largebins/#usage","title":"Usage:","text":"Bash<pre><code>usage: largebins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/largebins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/largebins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all largebins, including empty ones (default: %(default)s)"},{"location":"commands/heap/malloc_chunk/","title":"malloc_chunk","text":""},{"location":"commands/heap/malloc_chunk/#description","title":"Description","text":"<p>Print a chunk.</p>"},{"location":"commands/heap/malloc_chunk/#usage","title":"Usage:","text":"Bash<pre><code>usage: malloc_chunk [-h] [-f] [-v] [-s] addr\n</code></pre>"},{"location":"commands/heap/malloc_chunk/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the chunk (malloc_chunk struct start, prev_size field)."},{"location":"commands/heap/malloc_chunk/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--fake</code> Is this a fake chunk? (default: %(default)s) <code>-v</code> <code>--verbose</code> Print all chunk fields, even unused ones. (default: %(default)s) <code>-s</code> <code>--simple</code> Simply print malloc_chunk struct's contents. (default: %(default)s)"},{"location":"commands/heap/mp/","title":"mp","text":""},{"location":"commands/heap/mp/#description","title":"Description","text":"<p>Print the mp_ struct's contents.</p>"},{"location":"commands/heap/mp/#usage","title":"Usage:","text":"Bash<pre><code>usage: mp [-h]\n</code></pre>"},{"location":"commands/heap/mp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/smallbins/","title":"smallbins","text":""},{"location":"commands/heap/smallbins/#description","title":"Description","text":"<p>Print the contents of an arena's smallbins.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/smallbins/#usage","title":"Usage:","text":"Bash<pre><code>usage: smallbins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/smallbins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/smallbins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all smallbins, including empty ones (default: %(default)s)"},{"location":"commands/heap/tcache/","title":"tcache","text":""},{"location":"commands/heap/tcache/#description","title":"Description","text":"<p>Print a thread's tcache contents.</p> <p>Default to the current thread's tcache.</p>"},{"location":"commands/heap/tcache/#usage","title":"Usage:","text":"Bash<pre><code>usage: tcache [-h] [addr]\n</code></pre>"},{"location":"commands/heap/tcache/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the tcache."},{"location":"commands/heap/tcache/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/tcachebins/","title":"tcachebins","text":""},{"location":"commands/heap/tcachebins/#description","title":"Description","text":"<p>Print the contents of a tcache.</p> <p>Default to the current thread's tcache.</p>"},{"location":"commands/heap/tcachebins/#usage","title":"Usage:","text":"Bash<pre><code>usage: tcachebins [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/tcachebins/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> The address of the tcache bins."},{"location":"commands/heap/tcachebins/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show all tcachebins, including empty ones (default: %(default)s)"},{"location":"commands/heap/top_chunk/","title":"top_chunk","text":""},{"location":"commands/heap/top_chunk/#description","title":"Description","text":"<p>Print relevant information about an arena's top chunk.</p> <p>Default to current thread's arena.</p>"},{"location":"commands/heap/top_chunk/#usage","title":"Usage:","text":"Bash<pre><code>usage: top_chunk [-h] [addr]\n</code></pre>"},{"location":"commands/heap/top_chunk/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/top_chunk/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/try_free/","title":"try_free","text":""},{"location":"commands/heap/try_free/#description","title":"Description","text":"<p>Check what would happen if free was called with given address.</p>"},{"location":"commands/heap/try_free/#usage","title":"Usage:","text":"Bash<pre><code>usage: try_free [-h] [addr]\n</code></pre>"},{"location":"commands/heap/try_free/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address passed to free"},{"location":"commands/heap/try_free/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/heap/unsortedbin/","title":"unsortedbin","text":""},{"location":"commands/heap/unsortedbin/#description","title":"Description","text":"<p>Print the contents of an arena's unsortedbin.</p> <p>Default to the current thread's arena.</p>"},{"location":"commands/heap/unsortedbin/#usage","title":"Usage:","text":"Bash<pre><code>usage: unsortedbin [-h] [-v] [addr]\n</code></pre>"},{"location":"commands/heap/unsortedbin/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the arena."},{"location":"commands/heap/unsortedbin/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-v</code> <code>--verbose</code> Show the \"all\" bin even if it's empty (default: %(default)s)"},{"location":"commands/heap/vis_heap_chunks/","title":"vis_heap_chunks","text":""},{"location":"commands/heap/vis_heap_chunks/#description","title":"Description","text":"<p>Visualize chunks on a heap.</p> <p>Default to the current arena's active heap.</p>"},{"location":"commands/heap/vis_heap_chunks/#usage","title":"Usage:","text":"Bash<pre><code>usage: vis_heap_chunks [-h] [--beyond_top] [--no_truncate] [--all_chunks] [count] [addr]\n</code></pre>"},{"location":"commands/heap/vis_heap_chunks/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> Number of chunks to visualize. If the value is big enough and addr isn't provided, this is interpreted as addr instead. (default: %(default)s) <code>addr</code> Address of the first chunk."},{"location":"commands/heap/vis_heap_chunks/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-b</code> <code>--beyond_top</code> Attempt to keep printing beyond the top chunk. (default: %(default)s) <code>-n</code> <code>--no_truncate</code> Display all the chunk contents (Ignore the <code>max-visualize-chunk-size</code> configuration). (default: %(default)s) <code>-a</code> <code>--all_chunks</code> Display all chunks (Ignore the default-visualize-chunk-number configuration). (default: %(default)s)"},{"location":"commands/hexdump/hexdump/","title":"hexdump","text":""},{"location":"commands/hexdump/hexdump/#description","title":"Description","text":"<p>Hexdumps data at the specified address or module name.</p>"},{"location":"commands/hexdump/hexdump/#usage","title":"Usage:","text":"Bash<pre><code>usage: hexdump [-h] [address] [count]\n</code></pre>"},{"location":"commands/hexdump/hexdump/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address or module name to dump (default: %(default)s) <code>count</code> Number of bytes to dump (default: %(default)s)"},{"location":"commands/hexdump/hexdump/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/down/","title":"down","text":""},{"location":"commands/ida/down/#description","title":"Description","text":"<p>Select and print stack frame called by this one.</p>"},{"location":"commands/ida/down/#usage","title":"Usage:","text":"Bash<pre><code>usage: down [-h] [n]\n</code></pre>"},{"location":"commands/ida/down/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>n</code> The number of stack frames to go down. (default: %(default)s)"},{"location":"commands/ida/down/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/j/","title":"j","text":""},{"location":"commands/ida/j/#description","title":"Description","text":"<p>Synchronize IDA's cursor with GDB.</p>"},{"location":"commands/ida/j/#usage","title":"Usage:","text":"Bash<pre><code>usage: j [-h]\n</code></pre>"},{"location":"commands/ida/j/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/save_ida/","title":"save_ida","text":""},{"location":"commands/ida/save_ida/#description","title":"Description","text":"<p>Save the ida database.</p>"},{"location":"commands/ida/save_ida/#usage","title":"Usage:","text":"Bash<pre><code>usage: save_ida [-h]\n</code></pre>"},{"location":"commands/ida/save_ida/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ida/up/","title":"up","text":""},{"location":"commands/ida/up/#description","title":"Description","text":"<p>Select and print stack frame that called this one.</p>"},{"location":"commands/ida/up/#usage","title":"Usage:","text":"Bash<pre><code>usage: up [-h] [n]\n</code></pre>"},{"location":"commands/ida/up/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>n</code> The number of stack frames to go up. (default: %(default)s)"},{"location":"commands/ida/up/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ignore/ignore/","title":"ignore","text":""},{"location":"commands/ignore/ignore/#description","title":"Description","text":"<p>Set ignore-count of breakpoint number N to COUNT.</p> <p>While the ignore count is positive, execution will not stop on the breakpoint.</p> <p>By default, if `N' is ommitted, the last breakpoint (i.e. greatest breakpoint number) will be used.</p>"},{"location":"commands/ignore/ignore/#usage","title":"Usage:","text":"Bash<pre><code>usage: ignore [-h] [N] COUNT\n</code></pre>"},{"location":"commands/ignore/ignore/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>bpnum</code> The breakpoint number N. <code>count</code> The number to set COUNT."},{"location":"commands/ignore/ignore/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/ipython_interactive/ipi/","title":"ipi","text":""},{"location":"commands/ipython_interactive/ipi/#description","title":"Description","text":"<p>Start an interactive IPython prompt.</p>"},{"location":"commands/ipython_interactive/ipi/#usage","title":"Usage:","text":"Bash<pre><code>usage: ipi [-h]\n</code></pre>"},{"location":"commands/ipython_interactive/ipi/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kbase/kbase/","title":"kbase","text":""},{"location":"commands/kbase/kbase/#description","title":"Description","text":"<p>Finds the kernel virtual base address.</p>"},{"location":"commands/kbase/kbase/#usage","title":"Usage:","text":"Bash<pre><code>usage: kbase [-h]\n</code></pre>"},{"location":"commands/kbase/kbase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kchecksec/kchecksec/","title":"kchecksec","text":""},{"location":"commands/kchecksec/kchecksec/#description","title":"Description","text":"<p>Checks for kernel hardening configuration options.</p>"},{"location":"commands/kchecksec/kchecksec/#usage","title":"Usage:","text":"Bash<pre><code>usage: kchecksec [-h]\n</code></pre>"},{"location":"commands/kchecksec/kchecksec/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kcmdline/kcmdline/","title":"kcmdline","text":""},{"location":"commands/kcmdline/kcmdline/#description","title":"Description","text":"<p>Return the kernel commandline (/proc/cmdline).</p>"},{"location":"commands/kcmdline/kcmdline/#usage","title":"Usage:","text":"Bash<pre><code>usage: kcmdline [-h]\n</code></pre>"},{"location":"commands/kcmdline/kcmdline/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kconfig/kconfig/","title":"kconfig","text":""},{"location":"commands/kconfig/kconfig/#description","title":"Description","text":"<p>Outputs the kernel config (requires CONFIG_IKCONFIG).</p>"},{"location":"commands/kconfig/kconfig/#usage","title":"Usage:","text":"Bash<pre><code>usage: kconfig [-h] [config_name]\n</code></pre>"},{"location":"commands/kconfig/kconfig/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>config_name</code> A config name to search for"},{"location":"commands/kconfig/kconfig/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/killthreads/killthreads/","title":"killthreads","text":""},{"location":"commands/killthreads/killthreads/#description","title":"Description","text":"<p>Kill all or given threads.</p> <p>Switches to given threads and calls pthread_exit(0) on them. This is performed with scheduler-locking to prevent other threads from operating at the same time.</p> <p>Killing all other threads may be useful to use GDB checkpoints, e.g., to test given input &amp; restart the execution to the point of interest (checkpoint).</p>"},{"location":"commands/killthreads/killthreads/#usage","title":"Usage:","text":"Bash<pre><code>usage: killthreads [-h] [-a] [thread_ids ...]\n</code></pre>"},{"location":"commands/killthreads/killthreads/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>thread_ids</code> Thread IDs to kill."},{"location":"commands/killthreads/killthreads/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--all</code> Kill all threads except the current one. (default: %(default)s)"},{"location":"commands/klookup/klookup/","title":"klookup","text":""},{"location":"commands/klookup/klookup/#description","title":"Description","text":"<p>Lookup kernel symbols.</p>"},{"location":"commands/klookup/klookup/#usage","title":"Usage:","text":"Bash<pre><code>usage: klookup [-h] [symbol]\n</code></pre>"},{"location":"commands/klookup/klookup/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>symbol</code> Symbol or address to lookup."},{"location":"commands/klookup/klookup/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/kversion/kversion/","title":"kversion","text":""},{"location":"commands/kversion/kversion/#description","title":"Description","text":"<p>Outputs the kernel version (/proc/version).</p>"},{"location":"commands/kversion/kversion/#usage","title":"Usage:","text":"Bash<pre><code>usage: kversion [-h]\n</code></pre>"},{"location":"commands/kversion/kversion/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/leakfind/leakfind/","title":"leakfind","text":""},{"location":"commands/leakfind/leakfind/#description","title":"Description","text":"<p>Attempt to find a leak chain given a starting address. Scans memory near the given address, looks for pointers, and continues that process to attempt to find leaks.</p> <p>Example: leakfind $rsp --page_name=filename --max_offset=0x48 --max_depth=6. This would look for any chains of leaks that point to a section in filename which begin near $rsp, are never 0x48 bytes further from a known pointer, and are a maximum length of 6.</p>"},{"location":"commands/leakfind/leakfind/#usage","title":"Usage:","text":"Bash<pre><code>usage: leakfind [-h] [-p [PAGE_NAME]] [-o [MAX_OFFSET]] [-d [MAX_DEPTH]] [-s [STEP]] [--negative_offset [NEGATIVE_OFFSET]] [address]\n</code></pre>"},{"location":"commands/leakfind/leakfind/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Starting address to find a leak chain from (default: %(default)s)"},{"location":"commands/leakfind/leakfind/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-p</code> <code>--page_name</code> <code>None</code> Substring required to be part of the name of any found pages <code>-o</code> <code>--max_offset</code> <code>72</code> Max offset to add to addresses when looking for leak (default: %(default)s) <code>-d</code> <code>--max_depth</code> <code>4</code> Maximum depth to follow pointers to (default: %(default)s) <code>-s</code> <code>--step</code> <code>1</code> Step to add between pointers so they are considered. For example, if this is 4 it would only consider pointers at an offset divisible by 4 from the starting pointer (default: %(default)s) <code>--negative_offset</code> <code>0</code> Max negative offset to search before an address when looking for a leak (default: %(default)s)"},{"location":"commands/linkmap/linkmap/","title":"linkmap","text":""},{"location":"commands/linkmap/linkmap/#description","title":"Description","text":"<p>Show the state of the Link Map</p>"},{"location":"commands/linkmap/linkmap/#usage","title":"Usage:","text":"Bash<pre><code>usage: linkmap [-h]\n</code></pre>"},{"location":"commands/linkmap/linkmap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/memoize/memoize/","title":"memoize","text":""},{"location":"commands/memoize/memoize/#description","title":"Description","text":"<p>Toggles memoization (caching).</p> <p>Useful for diagnosing caching-related bugs. Decreases performance.</p>"},{"location":"commands/memoize/memoize/#usage","title":"Usage:","text":"Bash<pre><code>usage: memoize [-h]\n</code></pre>"},{"location":"commands/memoize/memoize/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/misc/errno_/","title":"errno","text":""},{"location":"commands/misc/errno_/#description","title":"Description","text":"<p>Converts errno (or argument) to its string representation.</p>"},{"location":"commands/misc/errno_/#usage","title":"Usage:","text":"Bash<pre><code>usage: errno [-h] [err]\n</code></pre>"},{"location":"commands/misc/errno_/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>err</code> Errno; if not passed, it is retrieved from __errno_location"},{"location":"commands/misc/errno_/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/misc/pwndbg_/","title":"pwndbg","text":""},{"location":"commands/misc/pwndbg_/#description","title":"Description","text":"<p>Prints out a list of all pwndbg commands.</p>"},{"location":"commands/misc/pwndbg_/#usage","title":"Usage:","text":"Bash<pre><code>usage: pwndbg [-h] [--shell | --all] [-c CATEGORY_ | --list-categories] [filter_pattern]\n</code></pre>"},{"location":"commands/misc/pwndbg_/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filter_pattern</code> Filter to apply to commands names/docs"},{"location":"commands/misc/pwndbg_/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--shell</code> Only display shell commands (default: %(default)s) <code>--all</code> Only display shell commands (default: %(default)s) <code>-c</code> <code>--category</code> <code>None</code> Filter commands by category <code>--list-categories</code> List command categories (default: %(default)s)"},{"location":"commands/mmap/mmap/","title":"mmap","text":""},{"location":"commands/mmap/mmap/#description","title":"Description","text":"<p>Calls the mmap syscall and prints its resulting address.</p> <p>Note that the mmap syscall may fail for various reasons (see <code>man mmap</code>) and, in case of failure, its return value will not be a valid pointer.</p> <p>PROT values: NONE (0), READ (1), WRITE (2), EXEC (4) MAP values: SHARED (1), PRIVATE (2), SHARED_VALIDATE (3), FIXED (0x10),             ANONYMOUS (0x20)</p> <p>Flags and protection values can be either a string containing the names of the flags or permissions or a single number corresponding to the bitwise OR of the protection and flag numbers.</p> <p>Examples:     mmap 0x0 4096 PROT_READ|PROT_WRITE|PROT_EXEC MAP_PRIVATE|MAP_ANONYMOUS -1 0      - Maps a new private+anonymous page with RWX permissions at a location        decided by the kernel.</p> Text Only<pre><code>mmap 0x0 4096 PROT_READ MAP_PRIVATE 10 0\n - Maps 4096 bytes of the file pointed to by file descriptor number 10 with\n   read permission at a location decided by the kernel.\n\nmmap 0xdeadbeef 0x1000\n - Maps a new private+anonymous page with RWX permissions at a page boundary\n   near 0xdeadbeef.\n</code></pre>"},{"location":"commands/mmap/mmap/#usage","title":"Usage:","text":"Bash<pre><code>usage: mmap [-h] [--quiet] [--force] addr length [prot] [flags] [fd] [offset]\n</code></pre>"},{"location":"commands/mmap/mmap/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address hint to be given to mmap. <code>length</code> Length of the mapping, in bytes. Needs to be greater than zero. <code>prot</code> Prot enum or int as in mmap(2). Eg. \"PROT_READ|PROT_EXEC\" or 7 (for RWX). (default: %(default)s) <code>flags</code> Flags enum or int as in mmap(2). Eg. \"MAP_PRIVATE|MAP_ANONYMOUS\" or 0x22. (default: %(default)s) <code>fd</code> File descriptor of the file to be mapped, or -1 if using MAP_ANONYMOUS. (default: %(default)s) <code>offset</code> Offset from the start of the file, in bytes, if using file based mapping. (default: %(default)s)"},{"location":"commands/mmap/mmap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-q</code> <code>--quiet</code> Disable address validity warnings and hints (default: %(default)s) <code>-f</code> <code>--force</code> Force potentially unsafe actions to happen (default: %(default)s)"},{"location":"commands/mprotect/mprotect/","title":"mprotect","text":""},{"location":"commands/mprotect/mprotect/#description","title":"Description","text":"<p>Calls the mprotect syscall and prints its result value.</p> <p>Note that the mprotect syscall may fail for various reasons (see <code>man mprotect</code>) and a non-zero error return value can be decoded with the <code>errno &lt;value&gt;</code> command.</p> <p>Examples:     mprotect $rsp 4096 PROT_READ|PROT_WRITE|PROT_EXEC     mprotect some_symbol 0x1000 PROT_NONE</p>"},{"location":"commands/mprotect/mprotect/#usage","title":"Usage:","text":"Bash<pre><code>usage: mprotect [-h] addr length prot\n</code></pre>"},{"location":"commands/mprotect/mprotect/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Page-aligned address to all mprotect on. <code>length</code> Count of bytes to call mprotect on. Needs to be multiple of page size. <code>prot</code> Prot string as in mprotect(2). Eg. \"PROT_READ|PROT_EXEC\""},{"location":"commands/mprotect/mprotect/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/nearpc/emulate/","title":"emulate","text":""},{"location":"commands/nearpc/emulate/#description","title":"Description","text":"<p>Like nearpc, but will emulate instructions from the current $PC forward.</p>"},{"location":"commands/nearpc/emulate/#usage","title":"Usage:","text":"Bash<pre><code>usage: emulate [-h] [pc] [lines]\n</code></pre>"},{"location":"commands/nearpc/emulate/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>pc</code> Address to emulate near. <code>lines</code> Number of lines to show on either side of the address."},{"location":"commands/nearpc/emulate/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/nearpc/nearpc/","title":"nearpc","text":""},{"location":"commands/nearpc/nearpc/#description","title":"Description","text":"<p>Disassemble near a specified address.</p>"},{"location":"commands/nearpc/nearpc/#usage","title":"Usage:","text":"Bash<pre><code>usage: nearpc [-h] [-e] [pc] [lines]\n</code></pre>"},{"location":"commands/nearpc/nearpc/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>pc</code> Address to disassemble near. If this is the only argument and the value provided is small enough, it is interpreted as lines instead. <code>lines</code> Number of lines to show on either side of the address."},{"location":"commands/nearpc/nearpc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-e</code> <code>--emulate</code> Whether to emulate instructions to find the next ones or just linearly disassemble. (default: %(default)s)"},{"location":"commands/next/nextcall/","title":"nextcall","text":""},{"location":"commands/next/nextcall/#description","title":"Description","text":"<p>Breaks at the next call instruction.</p>"},{"location":"commands/next/nextcall/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextcall [-h] [symbol_regex]\n</code></pre>"},{"location":"commands/next/nextcall/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>symbol_regex</code> A regex matching the name of next symbol to be broken on before calling."},{"location":"commands/next/nextcall/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextjmp/","title":"nextjmp","text":""},{"location":"commands/next/nextjmp/#description","title":"Description","text":"<p>Breaks at the next jump instruction.</p>"},{"location":"commands/next/nextjmp/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextjmp [-h]\n</code></pre>"},{"location":"commands/next/nextjmp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextproginstr/","title":"nextproginstr","text":""},{"location":"commands/next/nextproginstr/#description","title":"Description","text":"<p>Breaks at the next instruction that belongs to the running program.</p>"},{"location":"commands/next/nextproginstr/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextproginstr [-h]\n</code></pre>"},{"location":"commands/next/nextproginstr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextret/","title":"nextret","text":""},{"location":"commands/next/nextret/#description","title":"Description","text":"<p>Breaks at next return-like instruction.</p>"},{"location":"commands/next/nextret/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextret [-h]\n</code></pre>"},{"location":"commands/next/nextret/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/nextsyscall/","title":"nextsyscall","text":""},{"location":"commands/next/nextsyscall/#description","title":"Description","text":"<p>Breaks at the next syscall not taking branches.</p>"},{"location":"commands/next/nextsyscall/#usage","title":"Usage:","text":"Bash<pre><code>usage: nextsyscall [-h]\n</code></pre>"},{"location":"commands/next/nextsyscall/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepover/","title":"stepover","text":""},{"location":"commands/next/stepover/#description","title":"Description","text":"<p>Breaks on the instruction after this one.</p>"},{"location":"commands/next/stepover/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepover [-h] [addr]\n</code></pre>"},{"location":"commands/next/stepover/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> The address to break after."},{"location":"commands/next/stepover/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepret/","title":"stepret","text":""},{"location":"commands/next/stepret/#description","title":"Description","text":"<p>Breaks at next return-like instruction by 'stepping' to it.</p>"},{"location":"commands/next/stepret/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepret [-h]\n</code></pre>"},{"location":"commands/next/stepret/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepsyscall/","title":"stepsyscall","text":""},{"location":"commands/next/stepsyscall/#description","title":"Description","text":"<p>Breaks at the next syscall by taking branches.</p>"},{"location":"commands/next/stepsyscall/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepsyscall [-h]\n</code></pre>"},{"location":"commands/next/stepsyscall/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/next/stepuntilasm/","title":"stepuntilasm","text":""},{"location":"commands/next/stepuntilasm/#description","title":"Description","text":"<p>Breaks on the next matching instruction.</p>"},{"location":"commands/next/stepuntilasm/#usage","title":"Usage:","text":"Bash<pre><code>usage: stepuntilasm [-h] mnemonic [op_str ...]\n</code></pre>"},{"location":"commands/next/stepuntilasm/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>mnemonic</code> The mnemonic of the instruction <code>op_str</code> The operands of the instruction"},{"location":"commands/next/stepuntilasm/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/p2p/p2p/","title":"p2p","text":""},{"location":"commands/p2p/p2p/#description","title":"Description","text":"<p>Pointer to pointer chain search. Searches given mapping for all pointers that point to specified mapping.</p> <p>Any chain length greater than 0 is valid. If only one mapping is given it just looks for any pointers in that mapping.</p>"},{"location":"commands/p2p/p2p/#usage","title":"Usage:","text":"Bash<pre><code>usage: p2p [-h] mapping_names [mapping_names ...]\n</code></pre>"},{"location":"commands/p2p/p2p/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>mapping_names</code> Mapping name"},{"location":"commands/p2p/p2p/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/p2p/ts/","title":"telescope","text":""},{"location":"commands/p2p/ts/#description","title":"Description","text":"<p>Recursively dereferences pointers starting at the specified address.</p>"},{"location":"commands/p2p/ts/#usage","title":"Usage:","text":"Bash<pre><code>usage: telescope [-h] [-r] [-f] [-i] [address] [count]\n</code></pre>"},{"location":"commands/p2p/ts/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to telescope at. (default: %(default)s) <code>count</code> The number of lines to show. (default: %(default)s)"},{"location":"commands/p2p/ts/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-r</code> <code>--reverse</code> Show  previous addresses instead of next ones (default: %(default)s) <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show the stack reverse growth (default: %(default)s)"},{"location":"commands/patch/patch/","title":"patch","text":""},{"location":"commands/patch/patch/#description","title":"Description","text":"<p>Patches given instruction with given code or bytes.</p>"},{"location":"commands/patch/patch/#usage","title":"Usage:","text":"Bash<pre><code>usage: patch [-h] [-q] address ins\n</code></pre>"},{"location":"commands/patch/patch/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to patch <code>ins</code> instruction[s]"},{"location":"commands/patch/patch/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-q</code> <code>--quiet</code> don't print anything (default: %(default)s)"},{"location":"commands/patch/patch_list/","title":"patch_list","text":""},{"location":"commands/patch/patch_list/#description","title":"Description","text":"<p>List all patches.</p>"},{"location":"commands/patch/patch_list/#usage","title":"Usage:","text":"Bash<pre><code>usage: patch_list [-h]\n</code></pre>"},{"location":"commands/patch/patch_list/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/patch/patch_revert/","title":"patch_revert","text":""},{"location":"commands/patch/patch_revert/#description","title":"Description","text":"<p>Revert patch at given address.</p>"},{"location":"commands/patch/patch_revert/#usage","title":"Usage:","text":"Bash<pre><code>usage: patch_revert [-h] address\n</code></pre>"},{"location":"commands/patch/patch_revert/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to revert patch on"},{"location":"commands/patch/patch_revert/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/peda/getfile/","title":"getfile","text":""},{"location":"commands/peda/getfile/#description","title":"Description","text":"<p>Gets the current file.</p>"},{"location":"commands/peda/getfile/#usage","title":"Usage:","text":"Bash<pre><code>usage: getfile [-h]\n</code></pre>"},{"location":"commands/peda/getfile/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/peda/xinfo/","title":"context","text":""},{"location":"commands/peda/xinfo/#description","title":"Description","text":"<p>Print out the current register, instruction, and stack context.</p>"},{"location":"commands/peda/xinfo/#usage","title":"Usage:","text":"Bash<pre><code>usage: context [-h] [subcontext ...]\n</code></pre>"},{"location":"commands/peda/xinfo/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>subcontext</code> Submenu to display: 'reg', 'disasm', 'code', 'stack', 'backtrace', 'ghidra', and/or 'args'"},{"location":"commands/peda/xinfo/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/peda/xprint/","title":"telescope","text":""},{"location":"commands/peda/xprint/#description","title":"Description","text":"<p>Recursively dereferences pointers starting at the specified address.</p>"},{"location":"commands/peda/xprint/#usage","title":"Usage:","text":"Bash<pre><code>usage: telescope [-h] [-r] [-f] [-i] [address] [count]\n</code></pre>"},{"location":"commands/peda/xprint/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to telescope at. (default: %(default)s) <code>count</code> The number of lines to show. (default: %(default)s)"},{"location":"commands/peda/xprint/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-r</code> <code>--reverse</code> Show  previous addresses instead of next ones (default: %(default)s) <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show the stack reverse growth (default: %(default)s)"},{"location":"commands/peda/xuntil/","title":"xuntil","text":""},{"location":"commands/peda/xuntil/#description","title":"Description","text":"<p>Continue execution until an address or function.</p>"},{"location":"commands/peda/xuntil/#usage","title":"Usage:","text":"Bash<pre><code>usage: xuntil [-h] target\n</code></pre>"},{"location":"commands/peda/xuntil/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>target</code> Address or function to stop execution at"},{"location":"commands/peda/xuntil/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/pie/breakrva/","title":"breakrva","text":""},{"location":"commands/pie/breakrva/#description","title":"Description","text":"<p>Break at RVA from PIE base.</p>"},{"location":"commands/pie/breakrva/#usage","title":"Usage:","text":"Bash<pre><code>usage: breakrva [-h] [offset] [module]\n</code></pre>"},{"location":"commands/pie/breakrva/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>offset</code> Offset to add. (default: %(default)s) <code>module</code> Module to choose as base. Defaults to the target executable. (default: %(default)s)"},{"location":"commands/pie/breakrva/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/pie/piebase/","title":"piebase","text":""},{"location":"commands/pie/piebase/#description","title":"Description","text":"<p>Calculate VA of RVA from PIE base.</p>"},{"location":"commands/pie/piebase/#usage","title":"Usage:","text":"Bash<pre><code>usage: piebase [-h] [offset] [module]\n</code></pre>"},{"location":"commands/pie/piebase/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>offset</code> Offset from PIE base. (default: %(default)s) <code>module</code> Module to choose as base. Defaults to the target executable. (default: %(default)s)"},{"location":"commands/pie/piebase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/plist/plist/","title":"plist","text":""},{"location":"commands/plist/plist/#description","title":"Description","text":"<p>Dumps the elements of a linked list.</p> <p>This command traverses the linked list beginning at a given element, dumping its contents and the contents of all the elements that come after it in the list. Traversal is configurable and can handle multiple types of linked lists, but will always stop when a cycle is detected.</p> <p>The path to the first element can be any GDB expression that evaluates to either the first element directly, or a to pointer to it. The next element is the name of the field containing the next pointer, in either the structure itself or in the structure given by --inner.</p> <p>An address value may be given with --sentinel that signals the end of the list. By default, the value used is NULL (0).</p> <p>If only one field inside each node is desired, it can be printed exclusively by specifying its name with --field.</p> <p>This command supports traversing three types of linked lists, classified by how the next pointer can be found in the structure and what type it is:     1 - Next pointer is field of structure, type is the same as structure.     2 - Next pointer is field of inner nested structure, pointed to type is the         same as outer structure.     3 - Next pointer is field of inner nested structure, pointed to type is the         same as inner structure. Types 2 and 3 require --inner to be specified.</p> <p>Example 1:</p> Text Only<pre><code>struct node {\n    int value;\n    struct node *next;\n};\nstruct node node_c = { 2, NULL };\nstruct node node_b = { 1, &amp;node_c };\nstruct node node_a = { 0, &amp;node_b };\n</code></pre> <p>pwndbg&gt; plist node_a next 0x4000011050 : {   value = 0,   next = 0x4000011040  } 0x4000011040 : {   value = 1,   next = 0x4000011010  } 0x4000011010 : {   value = 2,   next = 0x0 } <p>Example 2:</p> Text Only<pre><code>struct node_inner_a {\n    struct node_inner_a *next;\n};\nstruct inner_a_node {\n    int value;\n    struct node_inner_a inner;\n};\nstruct inner_a_node inner_a_node_c = { 2, { NULL } };\nstruct inner_a_node inner_a_node_b = { 1, { &amp;inner_a_node_c.inner } };\nstruct inner_a_node inner_a_node_a = { 0, { &amp;inner_a_node_b.inner } };\n</code></pre> <p>pwndbg&gt; plist inner_a_node_a -i inner next 0x4000011070 : {   value = 0,   inner = {     next = 0x4000011068    } } 0x4000011060 : {   value = 1,   inner = {     next = 0x4000011028    } } 0x4000011020 : {   value = 2,   inner = {     next = 0x0   } } <p>Example 3:</p> Text Only<pre><code>struct inner_b_node;\nstruct node_inner_b {\n    struct inner_b_node *next;\n};\nstruct inner_b_node {\n    int value;\n    struct node_inner_b inner;\n};\nstruct inner_b_node inner_b_node_c = { 2, { NULL } };\nstruct inner_b_node inner_b_node_b = { 1, { &amp;inner_b_node_c } };\nstruct inner_b_node inner_b_node_a = { 0, { &amp;inner_b_node_b } };\n</code></pre> <p>pwndbg&gt; plist inner_b_node_a -i inner next 0x4000011090 : {   value = 0,   inner = {     next = 0x4000011080    } } 0x4000011080 : {   value = 1,   inner = {     next = 0x4000011030    } } 0x4000011030 : {   value = 2,   inner = {     next = 0x0   } }"},{"location":"commands/plist/plist/#usage","title":"Usage:","text":"Bash<pre><code>usage: plist [-h] [-s SENTINEL] [-i INNER_NAME] [-f FIELD_NAME] path next\n</code></pre>"},{"location":"commands/plist/plist/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>path</code> The first element of the linked list <code>next</code> The name of the field pointing to the next element in the list"},{"location":"commands/plist/plist/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-s</code> <code>--sentinel</code> <code>0</code> The address that stands in for an end of list marker in a non-cyclic list (default: %(default)s) <code>-i</code> <code>--inner</code> <code>None</code> The name of the inner nested structure where the next pointer is stored <code>-f</code> <code>--field</code> <code>None</code> The name of the field to be displayed, if only one is desired"},{"location":"commands/probeleak/probeleak/","title":"probeleak","text":""},{"location":"commands/probeleak/probeleak/#description","title":"Description","text":"<p>Pointer scan for possible offset leaks. Examples:     probeleak $rsp 0x64 - leaks 0x64 bytes starting at stack pointer and search for valid pointers     probeleak $rsp 0x64 --max-dist 0x10 - as above, but pointers may point 0x10 bytes outside of memory page     probeleak $rsp 0x64 --point-to libc --max-ptrs 1 --flags rwx - leaks 0x64 bytes starting at stack pointer and search for one valid pointer which points to a libc rwx page</p>"},{"location":"commands/probeleak/probeleak/#usage","title":"Usage:","text":"Bash<pre><code>usage: probeleak [-h] [--max-distance MAX_DISTANCE] [--point-to POINT_TO] [--max-ptrs MAX_PTRS] [--flags FLAGS] [address] [count]\n</code></pre>"},{"location":"commands/probeleak/probeleak/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Leak memory address (default: %(default)s) <code>count</code> Leak size in bytes (default: %(default)s)"},{"location":"commands/probeleak/probeleak/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--max-distance</code> <code>0</code> Max acceptable distance between memory page boundary and leaked pointer (default: %(default)s) <code>--point-to</code> <code>None</code> Mapping name of the page that you want the pointers point to <code>--max-ptrs</code> <code>0</code> Stop search after find n pointers, default 0 (default: %(default)s) <code>--flags</code> <code>None</code> flags of the page that you want the pointers point to. [e.g. rwx]"},{"location":"commands/procinfo/pid/","title":"pid","text":""},{"location":"commands/procinfo/pid/#description","title":"Description","text":"<p>Gets the pid.</p>"},{"location":"commands/procinfo/pid/#usage","title":"Usage:","text":"Bash<pre><code>usage: pid [-h]\n</code></pre>"},{"location":"commands/procinfo/pid/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/procinfo/procinfo/","title":"procinfo","text":""},{"location":"commands/procinfo/procinfo/#description","title":"Description","text":"<p>Display information about the running process.</p>"},{"location":"commands/procinfo/procinfo/#usage","title":"Usage:","text":"Bash<pre><code>usage: procinfo [-h]\n</code></pre>"},{"location":"commands/procinfo/procinfo/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/radare2/r2/","title":"r2","text":""},{"location":"commands/radare2/r2/#description","title":"Description","text":"<p>Launches radare2.</p>"},{"location":"commands/radare2/r2/#usage","title":"Usage:","text":"Bash<pre><code>usage: r2 [-h] [--no-seek] [--no-rebase] [arguments ...]\n</code></pre>"},{"location":"commands/radare2/r2/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to radare"},{"location":"commands/radare2/r2/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--no-seek</code> Do not seek to current pc (default: %(default)s) <code>--no-rebase</code> Do not set the base address for PIE according to the current mapping (default: %(default)s)"},{"location":"commands/radare2/r2pipe/","title":"r2pipe","text":""},{"location":"commands/radare2/r2pipe/#description","title":"Description","text":"<p>Execute stateful radare2 commands through r2pipe.</p>"},{"location":"commands/radare2/r2pipe/#usage","title":"Usage:","text":"Bash<pre><code>usage: r2pipe [-h] arguments [arguments ...]\n</code></pre>"},{"location":"commands/radare2/r2pipe/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to r2pipe"},{"location":"commands/radare2/r2pipe/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/reload/reinit_pwndbg/","title":"reinit_pwndbg","text":""},{"location":"commands/reload/reinit_pwndbg/#description","title":"Description","text":"<p>Makes pwndbg reinitialize all state.</p>"},{"location":"commands/reload/reinit_pwndbg/#usage","title":"Usage:","text":"Bash<pre><code>usage: reinit_pwndbg [-h]\n</code></pre>"},{"location":"commands/reload/reinit_pwndbg/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/reload/reload/","title":"reload","text":""},{"location":"commands/reload/reload/#description","title":"Description","text":"<p>Reload pwndbg.</p>"},{"location":"commands/reload/reload/#usage","title":"Usage:","text":"Bash<pre><code>usage: reload [-h]\n</code></pre>"},{"location":"commands/reload/reload/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/rizin/rz/","title":"rz","text":""},{"location":"commands/rizin/rz/#description","title":"Description","text":"<p>Launches rizin.</p>"},{"location":"commands/rizin/rz/#usage","title":"Usage:","text":"Bash<pre><code>usage: rz [-h] [--no-seek] [--no-rebase] [arguments ...]\n</code></pre>"},{"location":"commands/rizin/rz/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to rizin"},{"location":"commands/rizin/rz/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--no-seek</code> Do not seek to current pc (default: %(default)s) <code>--no-rebase</code> Do not set the base address for PIE according to the current mapping (default: %(default)s)"},{"location":"commands/rizin/rzpipe/","title":"rzpipe","text":""},{"location":"commands/rizin/rzpipe/#description","title":"Description","text":"<p>Execute stateful rizin commands through rzpipe.</p>"},{"location":"commands/rizin/rzpipe/#usage","title":"Usage:","text":"Bash<pre><code>usage: rzpipe [-h] arguments [arguments ...]\n</code></pre>"},{"location":"commands/rizin/rzpipe/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>arguments</code> Arguments to pass to rzpipe"},{"location":"commands/rizin/rzpipe/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/rop/rop/","title":"rop","text":""},{"location":"commands/rop/rop/#description","title":"Description","text":"<p>Dump ROP gadgets with Jon Salwan's ROPgadget tool.</p>"},{"location":"commands/rop/rop/#usage","title":"Usage:","text":"Bash<pre><code>usage: rop [-h] [--grep GREP] [argument ...]\n</code></pre>"},{"location":"commands/rop/rop/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>argument</code> Arguments to pass to ROPgadget"},{"location":"commands/rop/rop/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--grep</code> <code>None</code> String to grep the output for"},{"location":"commands/ropper/ropper/","title":"ropper","text":""},{"location":"commands/ropper/ropper/#description","title":"Description","text":"<p>ROP gadget search with ropper.</p>"},{"location":"commands/ropper/ropper/#usage","title":"Usage:","text":"Bash<pre><code>usage: ropper [-h] [argument ...]\n</code></pre>"},{"location":"commands/ropper/ropper/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>argument</code> Arguments to pass to ropper"},{"location":"commands/ropper/ropper/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/search/search/","title":"search","text":""},{"location":"commands/search/search/#description","title":"Description","text":"<p>Search memory for byte sequences, strings, pointers, and integer values.</p> <p>By default search results are cached. If you want to cache all results, but only print a subset, use --trunc-out. If you want to cache only a subset of results, and print the results immediately, use --limit. The latter is specially useful if you're searching a huge section of memory.</p>"},{"location":"commands/search/search/#usage","title":"Usage:","text":"Bash<pre><code>usage: search [-h] [-t {byte,short,word,dword,qword,pointer,string,bytes}] [-1] [-2] [-4] [-8] [-p] [-x] [-e] [-w] [-s STEP] [-l LIMIT] [-a ALIGNED] [--save] [--no-save] [-n]\n              [--trunc-out]\n              value [mapping_name]\n</code></pre>"},{"location":"commands/search/search/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>value</code> Value to search for <code>mapping_name</code> Mapping to search [e.g. libc]"},{"location":"commands/search/search/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-t</code> <code>--type</code> <code>bytes</code> Size of search target (default: %(default)s) <code>-1</code> <code>--byte</code> <code>None</code> Search for a 1-byte integer <code>-2</code> <code>--short</code> <code>None</code> Search for a 2-byte integer <code>-4</code> <code>--dword</code> <code>None</code> Search for a 4-byte integer <code>-8</code> <code>--qword</code> <code>None</code> Search for an 8-byte integer <code>-p</code> <code>--pointer</code> <code>None</code> Search for a pointer-width integer <code>-x</code> <code>--hex</code> Target is a hex-encoded (for bytes/strings) (default: %(default)s) <code>-e</code> <code>--executable</code> Search executable segments only (default: %(default)s) <code>-w</code> <code>--writable</code> Search writable segments only (default: %(default)s) <code>-s</code> <code>--step</code> <code>None</code> Step search address forward to next alignment after each hit (ex: 0x1000) <code>-l</code> <code>--limit</code> <code>None</code> Max results before quitting the search. Differs from --trunc-out in that it will not save all search results before quitting <code>-a</code> <code>--aligned</code> <code>None</code> Result must be aligned to this byte boundary <code>--save</code> <code>None</code> Save results for further searches with --next. Default comes from config 'auto-save-search' <code>--no-save</code> <code>None</code> Invert --save <code>-n</code> <code>--next</code> Search only locations returned by previous search with --save (default: %(default)s) <code>--trunc-out</code> Truncate the output to 20 results. Differs from --limit in that it will first save all search results (default: %(default)s)"},{"location":"commands/segments/fsbase/","title":"fsbase","text":""},{"location":"commands/segments/fsbase/#description","title":"Description","text":"<p>Prints out the FS base address. See also $fsbase.</p>"},{"location":"commands/segments/fsbase/#usage","title":"Usage:","text":"Bash<pre><code>usage: fsbase [-h]\n</code></pre>"},{"location":"commands/segments/fsbase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/segments/gsbase/","title":"gsbase","text":""},{"location":"commands/segments/gsbase/#description","title":"Description","text":"<p>Prints out the GS base address. See also $gsbase.</p>"},{"location":"commands/segments/gsbase/#usage","title":"Usage:","text":"Bash<pre><code>usage: gsbase [-h]\n</code></pre>"},{"location":"commands/segments/gsbase/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/sigreturn/sigreturn/","title":"sigreturn","text":""},{"location":"commands/sigreturn/sigreturn/#description","title":"Description","text":"<p>Display the SigreturnFrame at the specific address</p>"},{"location":"commands/sigreturn/sigreturn/#usage","title":"Usage:","text":"Bash<pre><code>usage: sigreturn [-h] [-a] [-p] [address]\n</code></pre>"},{"location":"commands/sigreturn/sigreturn/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to read the frame from"},{"location":"commands/sigreturn/sigreturn/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--all</code> Show all values in the frame in addition to common registers (default: %(default)s) <code>-p</code> <code>--print</code> Show addresses of frame values (default: %(default)s)"},{"location":"commands/slab/slab/","title":"slab","text":""},{"location":"commands/slab/slab/#description","title":"Description","text":"<p>Prints information about the slab allocator</p>"},{"location":"commands/slab/slab/#usage","title":"Usage:","text":"Bash<pre><code>usage: slab [-h] {list,info,contains} ...\n</code></pre>"},{"location":"commands/slab/slab/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>command</code> <code>None</code>"},{"location":"commands/slab/slab/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/spray/spray/","title":"spray","text":""},{"location":"commands/spray/spray/#description","title":"Description","text":"<p>Spray memory with cyclic() generated values</p>"},{"location":"commands/spray/spray/#usage","title":"Usage:","text":"Bash<pre><code>usage: spray [-h] [--value VALUE] [-x] addr [length]\n</code></pre>"},{"location":"commands/spray/spray/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address to spray <code>length</code> Length of byte sequence, when unspecified sprays until the end of vmmap which address belongs to (default: %(default)s)"},{"location":"commands/spray/spray/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>--value</code> <code>None</code> Value to spray memory with, when prefixed with '0x' treated as hex string encoded big-endian <code>-x</code> <code>--only-funcptrs</code> Spray only addresses whose values points to executable pages (default: %(default)s)"},{"location":"commands/stack/retaddr/","title":"retaddr","text":""},{"location":"commands/stack/retaddr/#description","title":"Description","text":"<p>Print out the stack addresses that contain return addresses.</p>"},{"location":"commands/stack/retaddr/#usage","title":"Usage:","text":"Bash<pre><code>usage: retaddr [-h]\n</code></pre>"},{"location":"commands/stack/retaddr/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/start/entry/","title":"entry","text":""},{"location":"commands/start/entry/#description","title":"Description","text":"<p>Start the debugged program stopping at its entrypoint address.</p> <p>Note that the entrypoint may not be the first instruction executed by the program. If you want to stop on the first executed instruction, use the GDB's <code>starti</code> command.</p> <p>Args may include \"*\", or \"[...]\"; they are expanded using the shell that will start the program (specified by the \"$SHELL\" environment variable).  Input and output redirection with \"&gt;\", \"&lt;\", or \"&gt;&gt;\" are also allowed.</p> <p>With no arguments, uses arguments last specified (with \"run\" or \"set args\").  To cancel previous arguments and run with no arguments, use \"set args\" without arguments.</p> <p>To start the inferior without using a shell, use \"set startup-with-shell off\".</p>"},{"location":"commands/start/entry/#usage","title":"Usage:","text":"Bash<pre><code>usage: entry [-h] [args ...]\n</code></pre>"},{"location":"commands/start/entry/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>args</code> The arguments to run the binary with. (default: %(default)s)"},{"location":"commands/start/entry/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/start/sstart/","title":"sstart","text":""},{"location":"commands/start/sstart/#description","title":"Description","text":"<p>Alias for 'tbreak __libc_start_main; run'.</p>"},{"location":"commands/start/sstart/#usage","title":"Usage:","text":"Bash<pre><code>usage: sstart [-h]\n</code></pre>"},{"location":"commands/start/sstart/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/start/start/","title":"start","text":""},{"location":"commands/start/start/#description","title":"Description","text":"<p>Start the debugged program stopping at the first convenient location from this list: main, _main, start, _start, init or _init. You may specify arguments to give it.</p> <p>Args may include \"*\", or \"[...]\"; they are expanded using the shell that will start the program (specified by the \"$SHELL\" environment variable).  Input and output redirection with \"&gt;\", \"&lt;\", or \"&gt;&gt;\" are also allowed.</p> <p>With no arguments, uses arguments last specified (with \"run\" or \"set args\").  To cancel previous arguments and run with no arguments, use \"set args\" without arguments.</p> <p>To start the inferior without using a shell, use \"set startup-with-shell off\".</p>"},{"location":"commands/start/start/#usage","title":"Usage:","text":"Bash<pre><code>usage: start [-h] [args ...]\n</code></pre>"},{"location":"commands/start/start/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>args</code> The arguments to run the binary with."},{"location":"commands/start/start/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/telescope/stack/","title":"stack","text":""},{"location":"commands/telescope/stack/#description","title":"Description","text":"<p>Dereferences on stack data with specified count and offset.</p>"},{"location":"commands/telescope/stack/#usage","title":"Usage:","text":"Bash<pre><code>usage: stack [-h] [-f] [-i] [count] [offset]\n</code></pre>"},{"location":"commands/telescope/stack/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> number of element to dump (default: %(default)s) <code>offset</code> Element offset from $sp (support negative offset) (default: %(default)s)"},{"location":"commands/telescope/stack/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show reverse stack growth (default: %(default)s)"},{"location":"commands/telescope/stackf/","title":"stackf","text":""},{"location":"commands/telescope/stackf/#description","title":"Description","text":"<p>Dereferences on stack data, printing the entire stack frame with specified count and offset .</p>"},{"location":"commands/telescope/stackf/#usage","title":"Usage:","text":"Bash<pre><code>usage: stackf [-h] [count] [offset]\n</code></pre>"},{"location":"commands/telescope/stackf/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>count</code> number of element to dump (default: %(default)s) <code>offset</code> Element offset from $sp (support negative offset) (default: %(default)s)"},{"location":"commands/telescope/stackf/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/telescope/telescope/","title":"telescope","text":""},{"location":"commands/telescope/telescope/#description","title":"Description","text":"<p>Recursively dereferences pointers starting at the specified address.</p>"},{"location":"commands/telescope/telescope/#usage","title":"Usage:","text":"Bash<pre><code>usage: telescope [-h] [-r] [-f] [-i] [address] [count]\n</code></pre>"},{"location":"commands/telescope/telescope/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to telescope at. (default: %(default)s) <code>count</code> The number of lines to show. (default: %(default)s)"},{"location":"commands/telescope/telescope/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-r</code> <code>--reverse</code> Show  previous addresses instead of next ones (default: %(default)s) <code>-f</code> <code>--frame</code> Show the stack frame, from rsp to rbp (default: %(default)s) <code>-i</code> <code>--inverse</code> Show the stack reverse growth (default: %(default)s)"},{"location":"commands/tips/tips/","title":"tips","text":""},{"location":"commands/tips/tips/#description","title":"Description","text":"<p>Shows tips.</p>"},{"location":"commands/tips/tips/#usage","title":"Usage:","text":"Bash<pre><code>usage: tips [-h] [-a]\n</code></pre>"},{"location":"commands/tips/tips/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-a</code> <code>--all</code> Show all tips. (default: %(default)s)"},{"location":"commands/tls/threads/","title":"threads","text":""},{"location":"commands/tls/threads/#description","title":"Description","text":"<p>List all threads belonging to the selected inferior.</p>"},{"location":"commands/tls/threads/#usage","title":"Usage:","text":"Bash<pre><code>usage: threads [-h] [-c] [num_threads]\n</code></pre>"},{"location":"commands/tls/threads/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>num_threads</code> Number of threads to display. Omit to display all threads."},{"location":"commands/tls/threads/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-c</code> <code>--config</code> Respect context-max-threads config to limit number of threads displayed. (default: %(default)s)"},{"location":"commands/tls/tls/","title":"tls","text":""},{"location":"commands/tls/tls/#description","title":"Description","text":"<p>Print out base address of the current Thread Local Storage (TLS).</p>"},{"location":"commands/tls/tls/#usage","title":"Usage:","text":"Bash<pre><code>usage: tls [-h] [-p]\n</code></pre>"},{"location":"commands/tls/tls/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-p</code> <code>--pthread-self</code> Try to get the address of TLS by calling pthread_self(). (default: %(default)s)"},{"location":"commands/valist/valist/","title":"valist","text":""},{"location":"commands/valist/valist/#description","title":"Description","text":"<p>Dumps the arguments of a va_list.</p>"},{"location":"commands/valist/valist/#usage","title":"Usage:","text":"Bash<pre><code>usage: valist [-h] addr [count]\n</code></pre>"},{"location":"commands/valist/valist/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> Address of the va_list <code>count</code> Number of arguments to dump (default: %(default)s)"},{"location":"commands/valist/valist/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/version/bugreport/","title":"bugreport","text":""},{"location":"commands/version/bugreport/#description","title":"Description","text":"<p>Generate a bug report.</p>"},{"location":"commands/version/bugreport/#usage","title":"Usage:","text":"Bash<pre><code>usage: bugreport [-h] [--run-browser | --use-gh]\n</code></pre>"},{"location":"commands/version/bugreport/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-b</code> <code>--run-browser</code> Open browser on github/issues/new (default: %(default)s) <code>-g</code> <code>--use-gh</code> Create issue using Github CLI (default: %(default)s)"},{"location":"commands/version/version/","title":"version","text":""},{"location":"commands/version/version/#description","title":"Description","text":"<p>Displays GDB, Python, and pwndbg versions.</p>"},{"location":"commands/version/version/#usage","title":"Usage:","text":"Bash<pre><code>usage: version [-h]\n</code></pre>"},{"location":"commands/version/version/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/vmmap/vmmap/","title":"vmmap","text":""},{"location":"commands/vmmap/vmmap/#description","title":"Description","text":"<p>Print virtual memory map pages.</p> <p>Unnamed mappings are named as [anon_%#x] where %#x is high part of their start address. This is useful for filtering with <code>vmmap</code> or <code>search</code> commands.</p> <p>Known issues with vmmap: For QEMU user targets, the QEMU's gdbstub does not provide memory maps information to GDB until [0] is finished &amp; merged. We try to deal with it without parsing the QEMU process' /proc/$pid/maps file, but if our approach fails, we simply create a [0, 0xffff...] vmmap which is not great and may result in lack of proper colors or inability to search memory with the <code>search</code> command.</p> <p>For QEMU kernel, we use gdb-pt-dump that parses page tables from the guest by reading /proc/$pid/mem of QEMU process. If this does not work for you, use <code>set kernel-vmmap-via-page-tables off</code> to refer to our old method of reading vmmap info from <code>monitor info mem</code> command exposed by QEMU. Note that the latter may be slower and will not give full vmmaps permission information.</p> <p>For coredump debugging, GDB also lacks all vmmap info but we do our best to get it back by using the <code>info proc mappings</code> and <code>maintenance info sections</code> commands.</p> <p>As a last resort, we sometimes try to explore the addresses in CPU registers and if they are readable by GDB, we determine their bounds and create an \"\" vmmap. However, this method is slow and is not used on each GDB stop. <p>Memory pages can also be added manually with the use of vmmap_add, vmmap_clear and vmmap_load commands. This may be useful for bare metal debugging.</p> <p>[0] https://lore.kernel.org/all/20220221030910.3203063-1-dominik.b.czarnota@gmail.com/</p>"},{"location":"commands/vmmap/vmmap/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap [-h] [-w] [-x] [-A LINES_AFTER] [-B LINES_BEFORE] [gdbval_or_str]\n</code></pre>"},{"location":"commands/vmmap/vmmap/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>gdbval_or_str</code> Address or module name filter"},{"location":"commands/vmmap/vmmap/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit <code>-w</code> <code>--writable</code> Display writable maps only (default: %(default)s) <code>-x</code> <code>--executable</code> Display executable maps only (default: %(default)s) <code>-A</code> <code>--lines-after</code> <code>1</code> Number of pages to display after result (default: %(default)s) <code>-B</code> <code>--lines-before</code> <code>1</code> Number of pages to display before result (default: %(default)s)"},{"location":"commands/vmmap/vmmap_add/","title":"vmmap_add","text":""},{"location":"commands/vmmap/vmmap_add/#description","title":"Description","text":"<p>Add virtual memory map page.</p>"},{"location":"commands/vmmap/vmmap_add/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap_add [-h] start size [flags] [offset]\n</code></pre>"},{"location":"commands/vmmap/vmmap_add/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>start</code> Starting virtual address <code>size</code> Size of the address space, in bytes <code>flags</code> Flags set by the ELF file, see PF_X, PF_R, PF_W (default: %(default)s) <code>offset</code> Offset into the original ELF file that the data is loaded from (default: %(default)s)"},{"location":"commands/vmmap/vmmap_add/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/vmmap/vmmap_clear/","title":"vmmap_clear","text":""},{"location":"commands/vmmap/vmmap_clear/#description","title":"Description","text":"<p>Clear the vmmap cache.</p>"},{"location":"commands/vmmap/vmmap_clear/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap_clear [-h]\n</code></pre>"},{"location":"commands/vmmap/vmmap_clear/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/vmmap/vmmap_load/","title":"vmmap_load","text":""},{"location":"commands/vmmap/vmmap_load/#description","title":"Description","text":"<p>Load virtual memory map pages from ELF file.</p>"},{"location":"commands/vmmap/vmmap_load/#usage","title":"Usage:","text":"Bash<pre><code>usage: vmmap_load [-h] [filename]\n</code></pre>"},{"location":"commands/vmmap/vmmap_load/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>filename</code> ELF filename, by default uses current loaded filename."},{"location":"commands/vmmap/vmmap_load/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bc/","title":"bc","text":""},{"location":"commands/windbg/bc/#description","title":"Description","text":"<p>Clear the breakpoint with the specified index.</p>"},{"location":"commands/windbg/bc/#usage","title":"Usage:","text":"Bash<pre><code>usage: bc [-h] [which]\n</code></pre>"},{"location":"commands/windbg/bc/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>which</code> Index of the breakpoint to clear. (default: %(default)s)"},{"location":"commands/windbg/bc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bd/","title":"bd","text":""},{"location":"commands/windbg/bd/#description","title":"Description","text":"<p>Disable the breakpoint with the specified index.</p>"},{"location":"commands/windbg/bd/#usage","title":"Usage:","text":"Bash<pre><code>usage: bd [-h] [which]\n</code></pre>"},{"location":"commands/windbg/bd/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>which</code> Index of the breakpoint to disable. (default: %(default)s)"},{"location":"commands/windbg/bd/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/be/","title":"be","text":""},{"location":"commands/windbg/be/#description","title":"Description","text":"<p>Enable the breakpoint with the specified index.</p>"},{"location":"commands/windbg/be/#usage","title":"Usage:","text":"Bash<pre><code>usage: be [-h] [which]\n</code></pre>"},{"location":"commands/windbg/be/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>which</code> Index of the breakpoint to enable. (default: %(default)s)"},{"location":"commands/windbg/be/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bl/","title":"bl","text":""},{"location":"commands/windbg/bl/#description","title":"Description","text":"<p>List breakpoints.</p>"},{"location":"commands/windbg/bl/#usage","title":"Usage:","text":"Bash<pre><code>usage: bl [-h]\n</code></pre>"},{"location":"commands/windbg/bl/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/bp/","title":"bp","text":""},{"location":"commands/windbg/bp/#description","title":"Description","text":"<p>Set a breakpoint at the specified address.</p>"},{"location":"commands/windbg/bp/#usage","title":"Usage:","text":"Bash<pre><code>usage: bp [-h] where\n</code></pre>"},{"location":"commands/windbg/bp/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>where</code> The address to break at."},{"location":"commands/windbg/bp/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/da/","title":"da","text":""},{"location":"commands/windbg/da/#description","title":"Description","text":"<p>Dump a string at the specified address.</p>"},{"location":"commands/windbg/da/#usage","title":"Usage:","text":"Bash<pre><code>usage: da [-h] address [max]\n</code></pre>"},{"location":"commands/windbg/da/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to dump <code>max</code> Maximum string length (default: %(default)s)"},{"location":"commands/windbg/da/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/db/","title":"db","text":""},{"location":"commands/windbg/db/#description","title":"Description","text":"<p>Starting at the specified address, dump N bytes.</p>"},{"location":"commands/windbg/db/#usage","title":"Usage:","text":"Bash<pre><code>usage: db [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/db/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of bytes to dump. (default: %(default)s)"},{"location":"commands/windbg/db/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dc/","title":"dc","text":""},{"location":"commands/windbg/dc/#description","title":"Description","text":"<p>Starting at the specified address, hexdump.</p>"},{"location":"commands/windbg/dc/#usage","title":"Usage:","text":"Bash<pre><code>usage: dc [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dc/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of bytes to hexdump. (default: %(default)s)"},{"location":"commands/windbg/dc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dd/","title":"dd","text":""},{"location":"commands/windbg/dd/#description","title":"Description","text":"<p>Starting at the specified address, dump N dwords.</p>"},{"location":"commands/windbg/dd/#usage","title":"Usage:","text":"Bash<pre><code>usage: dd [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dd/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of dwords to dump. (default: %(default)s)"},{"location":"commands/windbg/dd/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dds/","title":"dds","text":""},{"location":"commands/windbg/dds/#description","title":"Description","text":"<p>Dump pointers and symbols at the specified address.</p>"},{"location":"commands/windbg/dds/#usage","title":"Usage:","text":"Bash<pre><code>usage: dds [-h] addr\n</code></pre>"},{"location":"commands/windbg/dds/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>addr</code> The address to dump from."},{"location":"commands/windbg/dds/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dq/","title":"dq","text":""},{"location":"commands/windbg/dq/#description","title":"Description","text":"<p>Starting at the specified address, dump N qwords.</p>"},{"location":"commands/windbg/dq/#usage","title":"Usage:","text":"Bash<pre><code>usage: dq [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dq/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of qwords to dump. (default: %(default)s)"},{"location":"commands/windbg/dq/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ds/","title":"ds","text":""},{"location":"commands/windbg/ds/#description","title":"Description","text":"<p>Dump a string at the specified address.</p>"},{"location":"commands/windbg/ds/#usage","title":"Usage:","text":"Bash<pre><code>usage: ds [-h] address [max]\n</code></pre>"},{"location":"commands/windbg/ds/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to dump <code>max</code> Maximum string length (default: %(default)s)"},{"location":"commands/windbg/ds/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/dw/","title":"dw","text":""},{"location":"commands/windbg/dw/#description","title":"Description","text":"<p>Starting at the specified address, dump N words.</p>"},{"location":"commands/windbg/dw/#usage","title":"Usage:","text":"Bash<pre><code>usage: dw [-h] address [count]\n</code></pre>"},{"location":"commands/windbg/dw/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to dump from. <code>count</code> The number of words to dump. (default: %(default)s)"},{"location":"commands/windbg/dw/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/eb/","title":"eb","text":""},{"location":"commands/windbg/eb/#description","title":"Description","text":"<p>Write hex bytes at the specified address.</p>"},{"location":"commands/windbg/eb/#usage","title":"Usage:","text":"Bash<pre><code>usage: eb [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/eb/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The bytes to write."},{"location":"commands/windbg/eb/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ed/","title":"ed","text":""},{"location":"commands/windbg/ed/#description","title":"Description","text":"<p>Write hex dwords at the specified address.</p>"},{"location":"commands/windbg/ed/#usage","title":"Usage:","text":"Bash<pre><code>usage: ed [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/ed/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The dwords to write."},{"location":"commands/windbg/ed/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/eq/","title":"eq","text":""},{"location":"commands/windbg/eq/#description","title":"Description","text":"<p>Write hex qwords at the specified address.</p>"},{"location":"commands/windbg/eq/#usage","title":"Usage:","text":"Bash<pre><code>usage: eq [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/eq/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The qwords to write."},{"location":"commands/windbg/eq/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ew/","title":"ew","text":""},{"location":"commands/windbg/ew/#description","title":"Description","text":"<p>Write hex words at the specified address.</p>"},{"location":"commands/windbg/ew/#usage","title":"Usage:","text":"Bash<pre><code>usage: ew [-h] address [data ...]\n</code></pre>"},{"location":"commands/windbg/ew/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The words to write."},{"location":"commands/windbg/ew/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ez/","title":"ez","text":""},{"location":"commands/windbg/ez/#description","title":"Description","text":"<p>Write a string at the specified address.</p>"},{"location":"commands/windbg/ez/#usage","title":"Usage:","text":"Bash<pre><code>usage: ez [-h] address data\n</code></pre>"},{"location":"commands/windbg/ez/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The string to write."},{"location":"commands/windbg/ez/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/eza/","title":"eza","text":""},{"location":"commands/windbg/eza/#description","title":"Description","text":"<p>Write a string at the specified address.</p>"},{"location":"commands/windbg/eza/#usage","title":"Usage:","text":"Bash<pre><code>usage: eza [-h] address data\n</code></pre>"},{"location":"commands/windbg/eza/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to write to. <code>data</code> The string to write."},{"location":"commands/windbg/eza/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/go/","title":"go","text":""},{"location":"commands/windbg/go/#description","title":"Description","text":"<p>Windbg compatibility alias for 'continue' command.</p>"},{"location":"commands/windbg/go/#usage","title":"Usage:","text":"Bash<pre><code>usage: go [-h]\n</code></pre>"},{"location":"commands/windbg/go/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/k/","title":"k","text":""},{"location":"commands/windbg/k/#description","title":"Description","text":"<p>Print a backtrace (alias 'bt').</p>"},{"location":"commands/windbg/k/#usage","title":"Usage:","text":"Bash<pre><code>usage: k [-h]\n</code></pre>"},{"location":"commands/windbg/k/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/ln/","title":"ln","text":""},{"location":"commands/windbg/ln/#description","title":"Description","text":"<p>List the symbols nearest to the provided value.</p>"},{"location":"commands/windbg/ln/#usage","title":"Usage:","text":"Bash<pre><code>usage: ln [-h] [value]\n</code></pre>"},{"location":"commands/windbg/ln/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>value</code> The address you want the name of."},{"location":"commands/windbg/ln/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/pc/","title":"pc","text":""},{"location":"commands/windbg/pc/#description","title":"Description","text":"<p>Windbg compatibility alias for 'nextcall' command.</p>"},{"location":"commands/windbg/pc/#usage","title":"Usage:","text":"Bash<pre><code>usage: pc [-h]\n</code></pre>"},{"location":"commands/windbg/pc/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/windbg/peb/","title":"peb","text":""},{"location":"commands/windbg/peb/#description","title":"Description","text":"<p>Not be windows.</p>"},{"location":"commands/windbg/peb/#usage","title":"Usage:","text":"Bash<pre><code>usage: peb [-h]\n</code></pre>"},{"location":"commands/windbg/peb/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/xinfo/xinfo/","title":"xinfo","text":""},{"location":"commands/xinfo/xinfo/#description","title":"Description","text":"<p>Shows offsets of the specified address from various useful locations.</p>"},{"location":"commands/xinfo/xinfo/#usage","title":"Usage:","text":"Bash<pre><code>usage: xinfo [-h] [address]\n</code></pre>"},{"location":"commands/xinfo/xinfo/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> Address to inspect (default: %(default)s)"},{"location":"commands/xinfo/xinfo/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/xor/memfrob/","title":"memfrob","text":""},{"location":"commands/xor/memfrob/#description","title":"Description","text":"<p>Memfrobs a region of memory (xor with '*').</p>"},{"location":"commands/xor/memfrob/#usage","title":"Usage:","text":"Bash<pre><code>usage: memfrob [-h] address count\n</code></pre>"},{"location":"commands/xor/memfrob/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to start xoring at. <code>count</code> The number of bytes to xor."},{"location":"commands/xor/memfrob/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"commands/xor/xor/","title":"xor","text":""},{"location":"commands/xor/xor/#description","title":"Description","text":"<p>XOR <code>count</code> bytes at <code>address</code> with the key <code>key</code>.</p>"},{"location":"commands/xor/xor/#usage","title":"Usage:","text":"Bash<pre><code>usage: xor [-h] address key count\n</code></pre>"},{"location":"commands/xor/xor/#positional-arguments","title":"Positional Arguments","text":"Positional Argument Help <code>address</code> The address to start xoring at. <code>key</code> The key to use. <code>count</code> The number of bytes to xor."},{"location":"commands/xor/xor/#optional-arguments","title":"Optional Arguments","text":"Short Long Default Help <code>-h</code> <code>--help</code> show this help message and exit"},{"location":"source/","title":"Source","text":"<ul> <li>pwndbg<ul> <li>aglib<ul> <li>arch</li> <li>ctypes</li> <li>disasm<ul> <li>aarch64</li> <li>arch</li> <li>arm</li> <li>instruction</li> <li>mips</li> <li>ppc</li> <li>riscv</li> <li>sparc</li> <li>x86</li> </ul> </li> <li>dynamic</li> <li>elf</li> <li>file</li> <li>heap<ul> <li>heap</li> <li>ptmalloc</li> <li>structs</li> </ul> </li> <li>memory</li> <li>nearpc</li> <li>proc</li> <li>qemu</li> <li>regs</li> <li>remote</li> <li>stack</li> <li>strings</li> <li>tls</li> <li>typeinfo</li> <li>vmmap</li> </ul> </li> <li>arguments</li> <li>auxv</li> <li>chain</li> <li>color<ul> <li>context</li> <li>disasm</li> <li>enhance</li> <li>hexdump</li> <li>memory</li> <li>message</li> <li>syntax_highlight</li> <li>telescope</li> <li>theme</li> </ul> </li> <li>commands<ul> <li>ai</li> <li>argv</li> <li>aslr</li> <li>asm</li> <li>attachp</li> <li>auxv</li> <li>binder</li> <li>binja</li> <li>branch</li> <li>canary</li> <li>checksec</li> <li>comments</li> <li>config</li> <li>context</li> <li>cpsr</li> <li>cyclic</li> <li>cymbol</li> <li>dev</li> <li>distance</li> <li>dt</li> <li>dumpargs</li> <li>elf</li> <li>flags</li> <li>gdt</li> <li>ghidra</li> <li>godbg</li> <li>got</li> <li>got_tracking</li> <li>heap</li> <li>heap_tracking</li> <li>hexdump</li> <li>ida</li> <li>ignore</li> <li>integration</li> <li>ipython_interactive</li> <li>kbase</li> <li>kchecksec</li> <li>kcmdline</li> <li>kconfig</li> <li>killthreads</li> <li>klookup</li> <li>kversion</li> <li>leakfind</li> <li>linkmap</li> <li>memoize</li> <li>misc</li> <li>mmap</li> <li>mprotect</li> <li>nearpc</li> <li>next</li> <li>onegadget</li> <li>p2p</li> <li>patch</li> <li>pcplist</li> <li>peda</li> <li>pie</li> <li>plist</li> <li>probeleak</li> <li>procinfo</li> <li>radare2</li> <li>reload</li> <li>retaddr</li> <li>rizin</li> <li>rop</li> <li>ropper</li> <li>search</li> <li>segments</li> <li>shell</li> <li>sigreturn</li> <li>slab</li> <li>spray</li> <li>start</li> <li>telescope</li> <li>tips</li> <li>tls</li> <li>valist</li> <li>version</li> <li>vmmap</li> <li>windbg</li> <li>xinfo</li> <li>xor</li> </ul> </li> <li>dbg<ul> <li>gdb</li> <li>lldb<ul> <li>hooks</li> <li>pset</li> <li>repl<ul> <li>io</li> <li>proc</li> <li>readline</li> </ul> </li> <li>util</li> </ul> </li> </ul> </li> <li>decorators</li> <li>emu<ul> <li>emulator</li> </ul> </li> <li>enhance</li> <li>exception</li> <li>gdblib<ul> <li>abi</li> <li>android</li> <li>argv</li> <li>bpoint</li> <li>config</li> <li>ctypes</li> <li>dt</li> <li>elf</li> <li>events</li> <li>file</li> <li>functions</li> <li>godbg</li> <li>got</li> <li>heap_tracking</li> <li>hooks</li> <li>info</li> <li>kernel<ul> <li>kallsyms</li> <li>macros</li> <li>rbtree</li> <li>slab</li> </ul> </li> <li>memory</li> <li>nearpc</li> <li>net</li> <li>next</li> <li>onegadget</li> <li>proc</li> <li>prompt</li> <li>qemu</li> <li>regs</li> <li>remote</li> <li>scheduler</li> <li>shellcode</li> <li>stack</li> <li>strings</li> <li>symbol</li> <li>tls</li> <li>tui<ul> <li>context</li> <li>control</li> </ul> </li> <li>typeinfo</li> <li>vmmap</li> </ul> </li> <li>ghidra</li> <li>glibc</li> <li>hexdump</li> <li>integration<ul> <li>binja</li> <li>ida</li> </ul> </li> <li>lib<ul> <li>abi</li> <li>android</li> <li>arch</li> <li>cache</li> <li>config</li> <li>disasm<ul> <li>helpers</li> </ul> </li> <li>elftypes</li> <li>funcparser</li> <li>functions</li> <li>gcc</li> <li>heap<ul> <li>helpers</li> </ul> </li> <li>memory</li> <li>net</li> <li>regs</li> <li>stdio</li> <li>strings</li> <li>tempfile</li> <li>tips</li> <li>version</li> <li>which</li> </ul> </li> <li>log</li> <li>profiling</li> <li>radare2</li> <li>rizin</li> <li>search</li> <li>ui</li> <li>wrappers<ul> <li>checksec</li> <li>readelf</li> </ul> </li> </ul> </li> </ul>"},{"location":"source/__init__/","title":"init","text":""},{"location":"source/__init__/#pwndbg.__version__","title":"<code>__version__ = pwndbg.lib.version.__version__</code>  <code>module-attribute</code>","text":""},{"location":"source/__init__/#pwndbg.config","title":"<code>config: pwndbg.lib.config.Config = pwndbg.lib.config.Config()</code>  <code>module-attribute</code>","text":""},{"location":"source/__init__/#pwndbg.version","title":"<code>version = __version__</code>  <code>module-attribute</code>","text":""},{"location":"source/arguments/","title":"Arguments","text":"<p>Allows describing functions, specifically enumerating arguments which may be passed in a combination of registers and stack values.</p>"},{"location":"source/arguments/#pwndbg.arguments.argname","title":"<code>argname(n, abi=None)</code>","text":""},{"location":"source/arguments/#pwndbg.arguments.argument","title":"<code>argument(n, abi=None)</code>","text":"<p>Returns the nth argument, as if $pc were a 'call' or 'bl' type instruction. Works only for ABIs that use registers for arguments.</p>"},{"location":"source/arguments/#pwndbg.arguments.arguments","title":"<code>arguments(abi=None)</code>","text":"<p>Yields (arg_name, arg_value) tuples for arguments from a given ABI. Works only for ABIs that use registers for arguments.</p>"},{"location":"source/arguments/#pwndbg.arguments.format_args","title":"<code>format_args(instruction)</code>","text":""},{"location":"source/arguments/#pwndbg.arguments.get","title":"<code>get(instruction)</code>","text":"<p>Returns an array containing the arguments to the current function, if $pc is a 'call', 'bl', or 'jalr' type instruction.</p> <p>Otherwise, returns None.</p>"},{"location":"source/auxv/","title":"Auxv","text":""},{"location":"source/auxv/#pwndbg.auxv.AT_CONSTANTS","title":"<code>AT_CONSTANTS = {0: 'AT_NULL', 1: 'AT_IGNORE', 2: 'AT_EXECFD', 3: 'AT_PHDR', 4: 'AT_PHENT', 5: 'AT_PHNUM', 6: 'AT_PAGESZ', 7: 'AT_BASE', 8: 'AT_FLAGS', 9: 'AT_ENTRY', 10: 'AT_NOTELF', 11: 'AT_UID', 12: 'AT_EUID', 13: 'AT_GID', 14: 'AT_EGID', 15: 'AT_PLATFORM', 16: 'AT_HWCAP', 17: 'AT_CLKTCK', 18: 'AT_FPUCW', 19: 'AT_DCACHEBSIZE', 20: 'AT_ICACHEBSIZE', 21: 'AT_UCACHEBSIZE', 22: 'AT_IGNOREPPC', 23: 'AT_SECURE', 24: 'AT_BASE_PLATFORM', 25: 'AT_RANDOM', 31: 'AT_EXECFN', 32: 'AT_SYSINFO', 33: 'AT_SYSINFO_EHDR', 34: 'AT_L1I_CACHESHAPE', 35: 'AT_L1D_CACHESHAPE', 36: 'AT_L2_CACHESHAPE', 37: 'AT_L3_CACHESHAPE'}</code>  <code>module-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AT_CONSTANT_NAMES","title":"<code>AT_CONSTANT_NAMES = {v: kfor (k, v) in AT_CONSTANTS.items()}</code>  <code>module-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.example_info_auxv_linux","title":"<code>example_info_auxv_linux = '\\n33   AT_SYSINFO_EHDR      System-supplied DSO\\'s ELF header 0x7ffff7ffa000\\n16   AT_HWCAP             Machine-dependent CPU capability hints 0xfabfbff\\n6    AT_PAGESZ            System page size               4096\\n17   AT_CLKTCK            Frequency of times()           100\\n3    AT_PHDR              Program headers for program    0x400040\\n4    AT_PHENT             Size of program header entry   56\\n5    AT_PHNUM             Number of program headers      9\\n7    AT_BASE              Base address of interpreter    0x7ffff7dda000\\n8    AT_FLAGS             Flags                          0x0\\n9    AT_ENTRY             Entry point of program         0x42020b\\n11   AT_UID               Real user ID                   1000\\n12   AT_EUID              Effective user ID              1000\\n13   AT_GID               Real group ID                  1000\\n14   AT_EGID              Effective group ID             1000\\n23   AT_SECURE            Boolean, was exec setuid-like? 0\\n25   AT_RANDOM            Address of 16 random bytes     0x7fffffffdb39\\n31   AT_EXECFN            File name of executable        0x7fffffffefee \"/bin/bash\"\\n15   AT_PLATFORM          String identifying platform    0x7fffffffdb49 \"x86_64\"\\n0    AT_NULL              End of vector                  0x0\\n'</code>  <code>module-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV","title":"<code>AUXV</code>","text":"<p>               Bases: <code>Dict[str, Union[int, str]]</code></p>"},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_BASE","title":"<code>AT_BASE: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_ENTRY","title":"<code>AT_ENTRY: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_EXECFN","title":"<code>AT_EXECFN: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_PHDR","title":"<code>AT_PHDR: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_PLATFORM","title":"<code>AT_PLATFORM: Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_RANDOM","title":"<code>AT_RANDOM: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_SYSINFO","title":"<code>AT_SYSINFO: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.AT_SYSINFO_EHDR","title":"<code>AT_SYSINFO_EHDR: Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.__getattr__","title":"<code>__getattr__(attr)</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.AUXV.set","title":"<code>set(const, value)</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.find_stack_boundary","title":"<code>find_stack_boundary(addr)</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.get","title":"<code>get()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.use_info_auxv","title":"<code>use_info_auxv()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.walk_stack","title":"<code>walk_stack()</code>","text":""},{"location":"source/auxv/#pwndbg.auxv.walk_stack2","title":"<code>walk_stack2(offset=0)</code>","text":""},{"location":"source/chain/","title":"Chain","text":""},{"location":"source/chain/#pwndbg.chain.LIMIT","title":"<code>LIMIT = pwndbg.config.add_param('dereference-limit', 5, 'max number of pointers to dereference in a chain')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.c","title":"<code>c = ColorConfig('chain', [ColorParamSpec('arrow', 'normal', 'color of chain formatting (arrow)'), ColorParamSpec('contiguous-marker', 'normal', 'color of chain formatting (contiguous marker)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.config_arrow_left","title":"<code>config_arrow_left = theme.add_param('chain-arrow-left', '\u25c2\u2014', 'left arrow of chain formatting')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.config_arrow_right","title":"<code>config_arrow_right = theme.add_param('chain-arrow-right', '\u2014\u25b8', 'right arrow of chain formatting')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.config_contiguous","title":"<code>config_contiguous = theme.add_param('chain-contiguous-marker', '...', 'contiguous marker of chain formatting')</code>  <code>module-attribute</code>","text":""},{"location":"source/chain/#pwndbg.chain.format","title":"<code>format(value, limit=LIMIT, code=True, offset=0, hard_stop=None, hard_end=0, safe_linking=False, enhance_string_len=None)</code>","text":"<p>Recursively dereferences an address into string representation, or convert the list representation of address dereferences into string representation.</p> <p>Parameters:</p> Name Type Description Default <code>value(int|list)</code> <p>Either the starting address to be sent to get, or the result of get (a list)</p> required <code>limit(int)</code> <p>Number of valid pointers</p> required <code>code(bool)</code> <p>Hint that indicates the value may be an instruction</p> required <code>offset(int)</code> <p>Offset into the address to get the next pointer</p> required <code>hard_stop(int)</code> <p>Value to stop on</p> required <code>hard_end</code> <code>int</code> <p>Value to append when hard_stop is reached: null, value of hard stop, a string.</p> <code>0</code> <code>safe_linking(bool)</code> <p>whether this chain use safe-linking</p> required <code>enhance_string_len(int)</code> <p>The length of string to display for enhancement of the last pointer</p> required <p>Returns:     A string representing pointers of each address and reference     Strings format: 0x0804a10 \u2014\u25b8 0x08061000 \u25c2\u2014 0x41414141</p>"},{"location":"source/chain/#pwndbg.chain.get","title":"<code>get(address, limit=LIMIT, offset=0, hard_stop=None, hard_end=0, include_start=True, safe_linking=False)</code>","text":"<p>Recursively dereferences an address. For bare metal, it will stop when the address is not in any of vmmap pages to avoid redundant dereference.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>the first address to begin dereferencing</p> required <code>limit(int)</code> <p>number of valid pointers</p> required <code>offset(int)</code> <p>offset into the address to get the next pointer</p> required <code>hard_stop(int)</code> <p>address to stop at</p> required <code>hard_end</code> <code>int</code> <p>value to append when hard_stop is reached</p> <code>0</code> <code>include_start(bool)</code> <p>whether to include starting address or not</p> required <code>safe_linking(bool)</code> <p>whether this chain use safe-linking</p> required <p>Returns:</p> Type Description <code>List[int] | None</code> <p>A list representing pointers of each <code>address</code> and reference</p>"},{"location":"source/decorators/","title":"Decorators","text":""},{"location":"source/decorators/#pwndbg.decorators.K","title":"<code>K = TypeVar('K')</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.first_prompt","title":"<code>first_prompt = False</code>  <code>module-attribute</code>","text":""},{"location":"source/decorators/#pwndbg.decorators.only_after_first_prompt","title":"<code>only_after_first_prompt(value_before=None)</code>","text":"<p>Decorator to prevent a function from running before the first prompt was displayed. The 'value_before' parameter can be used to specify the value that is returned if the function is called before the first prompt was displayed.</p>"},{"location":"source/decorators/#pwndbg.decorators.suppress_errors","title":"<code>suppress_errors(fallback=None, should_warn=True)</code>","text":"<p>Decorator to make a function return a fallback value when it would otherwise error. The 'fallback' parameter can be used to specify the fallback value. If the 'should_warn' parameter is set, a warning will be printed whenever an error is suppressed.</p>"},{"location":"source/enhance/","title":"Enhance","text":"<p>Given an address in memory which does not contain a pointer elsewhere into memory, attempt to describe the data as best as possible.</p> <p>Currently prints out code, integers, or strings, in a best-effort manner dependent on page permissions, the contents of the data, and any supplemental information sources (e.g. active IDA Pro connection).</p>"},{"location":"source/enhance/#pwndbg.enhance.enhance","title":"<code>enhance(value, code=True, safe_linking=False, attempt_dereference=True, enhance_string_len=None)</code>","text":"<p>Given the last pointer in a chain, attempt to characterize</p> <p>Note that 'the last pointer in a chain' may not at all actually be a pointer.</p> <p>Additionally, optimizations are made based on various sources of data for 'value'. For example, if it is set to RWX, we try to get information on whether it resides on the stack, or in a RW section that happens to be RWX, to determine which order to print the fields.</p> <p>Parameters:</p> Name Type Description Default <code>value(obj)</code> <p>Value to enhance</p> required <code>code(bool)</code> <p>Hint that indicates the value may be an instruction</p> required <code>safe_linking(bool)</code> <p>Whether this chain use safe-linking</p> required <code>enhance_string_len(int)</code> <p>The length of string to display for enhancement of the last pointer</p> required"},{"location":"source/enhance/#pwndbg.enhance.format_small_int","title":"<code>format_small_int(value)</code>","text":""},{"location":"source/enhance/#pwndbg.enhance.format_small_int_pair","title":"<code>format_small_int_pair(first, second)</code>","text":""},{"location":"source/enhance/#pwndbg.enhance.int_str","title":"<code>int_str(value)</code>","text":""},{"location":"source/exception/","title":"Exception","text":""},{"location":"source/exception/#pwndbg.exception.debug","title":"<code>debug = config.add_param('exception-debugger', False, 'whether to debug exceptions raised in Pwndbg commands')</code>  <code>module-attribute</code>","text":""},{"location":"source/exception/#pwndbg.exception.verbose","title":"<code>verbose = config.add_param('exception-verbose', False, 'whether to print a full stacktrace for exceptions raised in Pwndbg commands')</code>  <code>module-attribute</code>","text":""},{"location":"source/exception/#pwndbg.exception.handle","title":"<code>handle(name='Error')</code>","text":"<p>Displays an exception to the user, optionally displaying a full traceback and spawning an interactive post-moretem debugger.</p> Notes <ul> <li><code>set exception-verbose on</code> enables stack traces.</li> <li><code>set exception-debugger on</code> enables the post-mortem debugger.</li> </ul>"},{"location":"source/exception/#pwndbg.exception.inform_report_issue","title":"<code>inform_report_issue(exception_msg)</code>","text":"<p>Informs user that he can report an issue. The use of caching makes it reporting only once for a given exception message.</p>"},{"location":"source/exception/#pwndbg.exception.inform_unmet_dependencies","title":"<code>inform_unmet_dependencies(errors)</code>","text":"<p>Informs user about unmet dependencies</p>"},{"location":"source/exception/#pwndbg.exception.inform_verbose_and_debug","title":"<code>inform_verbose_and_debug()</code>","text":""},{"location":"source/exception/#pwndbg.exception.print_exception","title":"<code>print_exception(exception_msg)</code>","text":""},{"location":"source/exception/#pwndbg.exception.set_trace","title":"<code>set_trace()</code>","text":"<p>Enable sane debugging in Pwndbg by switching to the \"real\" stdio.</p>"},{"location":"source/exception/#pwndbg.exception.update","title":"<code>update()</code>","text":""},{"location":"source/ghidra/","title":"Ghidra","text":""},{"location":"source/ghidra/#pwndbg.ghidra.r2decompiler","title":"<code>r2decompiler = pwndbg.config.add_param('r2decompiler', 'radare2', 'framework that your ghidra plugin installed (radare2/rizin)')</code>  <code>module-attribute</code>","text":""},{"location":"source/ghidra/#pwndbg.ghidra.decompile","title":"<code>decompile(func=None)</code>","text":"<p>Return the source of the given function decompiled by ghidra.</p> <p>If no function is given, decompile the function within the current pc. This function requires radare2, r2pipe and r2ghidra, or their related rizin counterparts.</p> <p>Raises Exception if any fatal error occurs.</p>"},{"location":"source/ghidra/#pwndbg.ghidra.set_r2decompiler","title":"<code>set_r2decompiler()</code>","text":""},{"location":"source/glibc/","title":"Glibc","text":"<p>Get information about the GLibc</p>"},{"location":"source/glibc/#pwndbg.glibc.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.glibc_version","title":"<code>glibc_version = pwndbg.config.add_param('glibc', '', 'GLIBC version for heap heuristics resolution (e.g. 2.31)', scope='heap')</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.safe_lnk","title":"<code>safe_lnk = pwndbg.config.add_param('safe-linking', None, 'whether glibc use safe-linking (on/off/auto)', param_class=pwndbg.lib.config.PARAM_AUTO_BOOLEAN)</code>  <code>module-attribute</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.OnlyWhenGlibcLoaded","title":"<code>OnlyWhenGlibcLoaded(function)</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.check_safe_linking","title":"<code>check_safe_linking()</code>","text":"<p>Safe-linking is a glibc 2.32 mitigation; see: - https://lanph3re.blogspot.com/2020/08/blog-post.html - https://research.checkpoint.com/2020/safe-linking-eliminating-a-20-year-old-malloc-exploit-primitive/</p>"},{"location":"source/glibc/#pwndbg.glibc.dump_elf_data_section","title":"<code>dump_elf_data_section()</code>","text":"<p>Dump .data section of libc ELF file</p>"},{"location":"source/glibc/#pwndbg.glibc.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(section_name)</code>","text":"<p>Dump relocations of a section by section name of libc ELF file</p>"},{"location":"source/glibc/#pwndbg.glibc.get_libc_filename_from_info_sharedlibrary","title":"<code>get_libc_filename_from_info_sharedlibrary()</code>","text":"<p>Get the filename of the libc by parsing the output of <code>info sharedlibrary</code>.</p>"},{"location":"source/glibc/#pwndbg.glibc.get_section_address_by_name","title":"<code>get_section_address_by_name(section_name)</code>","text":"<p>Find section address of libc by section name</p>"},{"location":"source/glibc/#pwndbg.glibc.get_version","title":"<code>get_version()</code>","text":""},{"location":"source/glibc/#pwndbg.glibc.set_glibc_version","title":"<code>set_glibc_version()</code>","text":""},{"location":"source/hexdump/","title":"Hexdump","text":"<p>Hexdump implementation, ~= stolen from pwntools.</p>"},{"location":"source/hexdump/#pwndbg.hexdump.color_scheme","title":"<code>color_scheme = None</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.config_byte_separator","title":"<code>config_byte_separator = theme.add_param('hexdump-byte-separator', ' ', 'separator of single bytes in hexdump (does NOT affect group separator)')</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.config_colorize_ascii","title":"<code>config_colorize_ascii = theme.add_param('hexdump-colorize-ascii', True, 'whether to colorize the hexdump command ascii section')</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.config_separator","title":"<code>config_separator = theme.add_param('hexdump-ascii-block-separator', '\u2502', 'block separator char of the hexdump command')</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.printable","title":"<code>printable = None</code>  <code>module-attribute</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.groupby","title":"<code>groupby(width, array, fill=None)</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.hexdump","title":"<code>hexdump(data, address=0, width=16, group_width=4, flip_group_endianness=False, skip=True, offset=0, size=0, count=0, repeat=False, dX_call=False)</code>","text":""},{"location":"source/hexdump/#pwndbg.hexdump.load_color_scheme","title":"<code>load_color_scheme()</code>","text":""},{"location":"source/log/","title":"Log","text":""},{"location":"source/log/#pwndbg.log.ColorFormatter","title":"<code>ColorFormatter</code>","text":"<p>               Bases: <code>Formatter</code></p>"},{"location":"source/log/#pwndbg.log.ColorFormatter.log_funcs","title":"<code>log_funcs = {logging.DEBUG: pwndbg.color.message.debug, logging.INFO: pwndbg.color.message.info, logging.WARNING: pwndbg.color.message.warn, logging.ERROR: pwndbg.color.message.error, logging.CRITICAL: pwndbg.color.message.error}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/log/#pwndbg.log.ColorFormatter.format","title":"<code>format(record)</code>","text":""},{"location":"source/profiling/","title":"Profiling","text":""},{"location":"source/profiling/#pwndbg.profiling.profiler","title":"<code>profiler: Profiler | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler","title":"<code>Profiler</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.__init__","title":"<code>__init__(p)</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.print_time_elapsed","title":"<code>print_time_elapsed()</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.start","title":"<code>start()</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.Profiler.stop","title":"<code>stop(filename=None)</code>","text":""},{"location":"source/profiling/#pwndbg.profiling.init","title":"<code>init(p, _start_time)</code>","text":""},{"location":"source/radare2/","title":"Radare2","text":""},{"location":"source/radare2/#pwndbg.radare2.r2pipe","title":"<code>r2pipe()</code>","text":"<p>Spawn and return a r2pipe handle for the current process file.</p> <p>This function requires a radare2 installation plus the r2pipe python library. The base address is automatically set for PIE when loading the binary. After opening the handle, the binary is automatically analyzed.</p> <p>Raises ImportError if r2pipe python library is not available. Raises Exception if anything goes fatally wrong.</p> <p>Returns a r2pipe.open handle.</p>"},{"location":"source/rizin/","title":"Rizin","text":""},{"location":"source/rizin/#pwndbg.rizin.rzpipe","title":"<code>rzpipe()</code>","text":"<p>Spawn and return a rzpipe handle for the current process file. This function requires a rizin installation plus the rzpipe python library. The base address is automatically set for PIE when loading the binary. After opening the handle, the binary is automatically analyzed. Raises ImportError if rzpipe python library is not available. Raises Exception if anything goes fatally wrong. Returns a rzpipe.open handle.</p>"},{"location":"source/search/","title":"Search","text":"<p>Search the address space for byte patterns.</p>"},{"location":"source/search/#pwndbg.search.search","title":"<code>search(searchfor, mappings=None, start=None, end=None, step=None, aligned=None, limit=None, executable=False, writable=False)</code>","text":"<p>Search inferior memory for a byte sequence.</p> <p>Parameters:</p> Name Type Description Default <code>searchfor(bytes)</code> <p>Byte sequence to find</p> required <code>mappings(list)</code> <p>List of pwndbg.lib.memory.Page objects to search By default, uses all available mappings.</p> required <code>start(int)</code> <p>First address to search, inclusive.</p> required <code>end(int)</code> <p>Last address to search, exclusive.</p> required <code>step(int)</code> <p>Size of memory region to skip each result</p> required <code>aligned(int)</code> <p>Strict byte alignment for search result</p> required <code>limit(int)</code> <p>Maximum number of results to return</p> required <code>executable(bool)</code> <p>Restrict search to executable pages</p> required <code>writable(bool)</code> <p>Restrict search to writable pages</p> required <p>Yields:</p> Type Description <code>int</code> <p>An iterator on the address matches</p>"},{"location":"source/ui/","title":"Ui","text":"<p>A few helpers for making things print pretty-like.</p>"},{"location":"source/ui/#pwndbg.ui.title_position","title":"<code>title_position = theme.add_param('banner-title-position', 'center', 'banner title position')</code>  <code>module-attribute</code>","text":""},{"location":"source/ui/#pwndbg.ui.addrsz","title":"<code>addrsz(address)</code>","text":""},{"location":"source/ui/#pwndbg.ui.banner","title":"<code>banner(title, target=sys.stdin, width=None, extra='')</code>","text":""},{"location":"source/ui/#pwndbg.ui.check_title_position","title":"<code>check_title_position()</code>","text":""},{"location":"source/ui/#pwndbg.ui.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":""},{"location":"source/ui/#pwndbg.ui.get_window_size","title":"<code>get_window_size(target=sys.stdin)</code>","text":""},{"location":"source/aglib/__init__/","title":"init","text":""},{"location":"source/aglib/__init__/#pwndbg.aglib.load_aglib","title":"<code>load_aglib()</code>","text":""},{"location":"source/aglib/arch/","title":"Arch","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.ARCHS","title":"<code>ARCHS = ('x86-64', 'i386', 'aarch64', 'mips', 'powerpc', 'sparc', 'arm', 'armcm', 'riscv:rv32', 'riscv:rv64', 'riscv')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.arch","title":"<code>arch: Arch = Arch('i386', 4, 'little')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.pwnlib_archs_mapping","title":"<code>pwnlib_archs_mapping = {'x86-64': 'amd64', 'i386': 'i386', 'aarch64': 'aarch64', 'mips': 'mips', 'powerpc': 'powerpc', 'sparc': 'sparc', 'arm': 'arm', 'iwmmxt': 'arm', 'armcm': 'thumb', 'rv32': 'riscv32', 'rv64': 'riscv64'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.get_thumb_mode_string","title":"<code>get_thumb_mode_string()</code>","text":""},{"location":"source/aglib/arch/#pwndbg.aglib.arch.read_thumb_bit","title":"<code>read_thumb_bit()</code>","text":"<p>Return 0 or 1, representing the status of the Thumb bit in the current Arm architecture</p> <p>Return None if the Thumb bit is not relevent to the current architecture</p>"},{"location":"source/aglib/arch/#pwndbg.aglib.arch.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/ctypes/","title":"Ctypes","text":"<p>On-the-fly endianness switching for ctypes structures.</p> <p>We cannot make use of ctypes.LittleEndianStructure and ctypes.BigEndianStructure, since these use metaclass hooks to catch fields being set when the class is declared.</p> <p>We need to catch on the fly.  We do this by swapping out the base classes of the Structure type, and incurring a performance penalty for foreign-endianness targets.</p>"},{"location":"source/aglib/ctypes/#pwndbg.aglib.ctypes.Structure","title":"<code>Structure = ctypes.LittleEndianStructure</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/ctypes/#pwndbg.aglib.ctypes.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/ctypes/#pwndbg.aglib.ctypes.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/dynamic/","title":"Dynamic","text":"<p>Dynamic linking interface.</p> <p>This module provides an interface to analyze various aspects of dynamically linked programs.</p> <p>It also defines a hook that watches for changes to the link map communicated by ld.so, and exposes an event that other parts of pwndbg can tap into, but one that may have a somewhat obtuse beahvior, due to limitations in GDB. See <code>r_debug_install_link_map_changed_hook</code> for more information.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DYNAMIC_SECTION_ALLOW_MULTIPLE","title":"<code>DYNAMIC_SECTION_ALLOW_MULTIPLE = {elf.DT_NEEDED}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DYNAMIC_SECTION_REQUIRED_TAGS","title":"<code>DYNAMIC_SECTION_REQUIRED_TAGS = {elf.DT_STRTAB, elf.DT_STRSZ, elf.DT_SYMTAB, elf.DT_SYMENT}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.R_DEBUG_LINK_MAP_CHANGED_HOOK","title":"<code>R_DEBUG_LINK_MAP_CHANGED_HOOK = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.R_DEBUG_LINK_MAP_CHANGED_LISTENERS","title":"<code>R_DEBUG_LINK_MAP_CHANGED_LISTENERS: Set[Callable[..., Any]] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct","title":"<code>CStruct</code>","text":"<p>Utility class for reading fields off of C structs.</p> <p>Without proper debug information it cannot be guaranteed that the calculated field offsets are correct, therefore, reasonable caution should be exercised when using this class. The assumptions made are:  - Padding is added between fields so that all internal members are    correctly aligned, as long as the struct itself is correctly aligned.  - The alignment of the struct is the same as the alignment of its most    strictly aligned member.  - Padding is added to the end of the struct so that sequentially laid out    instances are always correctly aligned.  - Stuct sizes must be greater than or equal to 1 byte.</p> <p>While these assumptions do not apply in all cases, they should be good enough for the structs in ld.so and in the ELF program images.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.align","title":"<code>align = alignment</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.converters","title":"<code>converters: Dict[str, type] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.offsets","title":"<code>offsets: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.size","title":"<code>size = current_offset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.types","title":"<code>types: Dict[str, pwndbg.dbg_mod.Type] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.__init__","title":"<code>__init__(fields)</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elf32_sym","title":"<code>elf32_sym()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the Elf32_Sym srtucture.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elf64_sym","title":"<code>elf64_sym()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the Elf64_Sym structure.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elfNN_dyn","title":"<code>elfNN_dyn()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ElfNN_Dyn structure, suitable for the architecture of the inferior.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elfNN_rel","title":"<code>elfNN_rel()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ElfNN_Rel structure, suitable for the architecture of the inferior.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.elfNN_rela","title":"<code>elfNN_rela()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ElfNN_Rela structure, suitable for the architecture of the inferior.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.has_field","title":"<code>has_field(name)</code>","text":"<p>Returns whether a field with the given name exists in this struct.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.link_map","title":"<code>link_map()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ABI-stable part of the link_map struct.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.r_debug","title":"<code>r_debug()</code>  <code>staticmethod</code>","text":"<p>Creates a new instance describing the ABI-stable part of the r_debug struct.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.CStruct.read","title":"<code>read(address, name)</code>","text":"<p>Reads the field with the given name from the struct instance located at the given address.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment","title":"<code>DynamicSegment</code>","text":"<p>Parser for the DYNAMIC segment present in a binary image.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.address","title":"<code>address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.elf_dyn","title":"<code>elf_dyn = elf_dyn</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.entries","title":"<code>entries = count</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.entries_by_tag","title":"<code>entries_by_tag: Dict[Any, Any] = sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.has_jmprel","title":"<code>has_jmprel = elf.DT_JMPREL in sections and elf.DT_PLTREL in sections and elf.DT_PLTRELSZ in sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.has_rel","title":"<code>has_rel = elf.DT_REL in sections and elf.DT_RELSZ in sections and elf.DT_RELENT in sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.has_rela","title":"<code>has_rela = elf.DT_RELA in sections and elf.DT_RELASZ in sections and elf.DT_RELAENT in sections</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_addr","title":"<code>jmprel_addr = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_elem","title":"<code>jmprel_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_info_fn","title":"<code>jmprel_r_info_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_sym","title":"<code>jmprel_r_sym = elf32_r_sym</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_sym_fn","title":"<code>jmprel_r_sym_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_r_type","title":"<code>jmprel_r_type = elf32_r_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.load_bias","title":"<code>load_bias = load_bias</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_addr","title":"<code>rel_addr = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_elem","title":"<code>rel_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_info_fn","title":"<code>rel_r_info_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_sym","title":"<code>rel_r_sym = elf32_r_sym</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_sym_fn","title":"<code>rel_r_sym_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_r_type","title":"<code>rel_r_type = elf32_r_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_addr","title":"<code>rela_addr = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_elem","title":"<code>rela_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_info_fn","title":"<code>rela_r_info_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_sym","title":"<code>rela_r_sym = elf32_r_sym</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_sym_fn","title":"<code>rela_r_sym_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_r_type","title":"<code>rela_r_type = elf32_r_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.strtab_addr","title":"<code>strtab_addr = self.dyn_array_read_tag_val(elf.DT_STRTAB)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.strtab_size","title":"<code>strtab_size = self.dyn_array_read_tag_val(elf.DT_STRSZ)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.symtab_addr","title":"<code>symtab_addr = self.dyn_array_read_tag_val(elf.DT_SYMTAB)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.symtab_elem","title":"<code>symtab_elem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.__init__","title":"<code>__init__(address, load_bias)</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.dyn_array_read","title":"<code>dyn_array_read(i, field)</code>","text":"<p>Reads the requested field from the entry of given index in the dynamic array.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.dyn_array_read_tag_val","title":"<code>dyn_array_read_tag_val(tag)</code>","text":"<p>Reads the <code>d_un</code> field from the entry of given tag in the dynamic array. Must not be a tag that allows multiple entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_entry_count","title":"<code>jmprel_entry_count()</code>","text":"<p>Returns the number of JMPREL entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_has_addend","title":"<code>jmprel_has_addend()</code>","text":"<p>Returns whether the <code>r_addend</code> field is available in entries of JMPREL.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.jmprel_read","title":"<code>jmprel_read(i, field)</code>","text":"<p>Reads the requested field from the entry of the given index in JMPREL.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_entry_count","title":"<code>rel_entry_count()</code>","text":"<p>Returns the number of REL entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rel_read","title":"<code>rel_read(i, field)</code>","text":"<p>Reads the requested field from the entry of the given index in REL.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_entry_count","title":"<code>rela_entry_count()</code>","text":"<p>Returns the number of RELA entries.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.rela_read","title":"<code>rela_read(i, field)</code>","text":"<p>Reads the requested field from the entry of the given index in RELA.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.string","title":"<code>string(i)</code>","text":"<p>Reads the string at index i from the string table.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.DynamicSegment.symtab_read","title":"<code>symtab_read(i, field)</code>","text":"<p>Reads the requested field from the entry of given index in the symbol table.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry","title":"<code>LinkMapEntry</code>","text":"<p>An entry in the link map.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.link_map","title":"<code>link_map = CStruct.link_map()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.link_map_address","title":"<code>link_map_address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.__init__","title":"<code>__init__(address)</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.dynamic","title":"<code>dynamic()</code>","text":"<p>The pointer to the memory mapped dynamic segment of the binary image.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.load_bias","title":"<code>load_bias()</code>","text":"<p>The difference between the addresses in the data structures of the binary image and the actual location of the data being pointed to by them in the address space of the inferior. This number will never be negative.</p> <p>Aditionally, for DYN images, such as PIE executables and shared libraries, this value is the same as the base load address of the image.</p> <p>The term \"load bias\" comes from the ELF binary format loading procedure in the Linux Kernel.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.name","title":"<code>name()</code>","text":"<p>The name of the binary image this entry describes.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.next","title":"<code>next()</code>","text":"<p>The next entry in the chain, if any.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.LinkMapEntry.prev","title":"<code>prev()</code>","text":"<p>The previous entry in the chain, if any.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf32_r_sym","title":"<code>elf32_r_sym(r_info)</code>","text":"<p>Returns the r_sym portion of the r_info relocation field for ELF32.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf32_r_type","title":"<code>elf32_r_type(r_info)</code>","text":"<p>Returns the r_type portion of the r_info relocation field for ELF32.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf64_r_sym","title":"<code>elf64_r_sym(r_info)</code>","text":"<p>Returns the r_sym portion of the r_info relocation field for ELF64.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.elf64_r_type","title":"<code>elf64_r_type(r_info)</code>","text":"<p>Returns the r_type portion of the r_info relocation field for ELF64.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.is_dynamic","title":"<code>is_dynamic()</code>","text":"<p>Returns whether the current inferior is dynamic.</p> <p>Not all programs are dynamically linked, or even need the dynamic loader at all. Since this module is entirely reliant on at least the presence of the dynamic loader, and really only makes sense for dynamic programs, it should not be used at all with programs that don't participate in dynamic linkage, or when there is a dynamic linker, but we have no way to talk to it.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.link_map","title":"<code>link_map()</code>","text":"<p>Iterator over all the entries in the link map.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.link_map_head","title":"<code>link_map_head()</code>","text":"<p>Acquires a reference to the head entry of the link map.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_install_link_map_changed_hook","title":"<code>r_debug_install_link_map_changed_hook()</code>","text":"<p>Installs the r_debug-based hook to the change event of the link map.</p> <p>This function is a bit tricky, because ideally we want it to be run as soon as possible, before even the dynamic linker runs, but after both it and the main binary have been mapped into the address space of the inferior. While doing this manually would be trivial - seeing as there is a command in GDB that gives the user control at the exact place we would like -, there does not seem to be a way of easily doing this from inside Python.</p> <p>Because of this, parts of the code that rely on the hook should try calling this function and firing their own listeners manually at least once.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_link_map_changed_add_listener","title":"<code>r_debug_link_map_changed_add_listener(handler)</code>","text":"<p>Install a callback to be called whenever r_debug signal of there being a change in the link map link map is triggered.</p> <p>Keep in mind this function may be called before the hook that calls the listeners is installed, and, until it is installed, no listener callbacks will actually be triggered. See <code>r_debug_install_link_map_changed_hook</code>.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_link_map_changed_hook","title":"<code>r_debug_link_map_changed_hook()</code>","text":"<p>Hook that gets activated whenever the link map changes.</p> <p>The r_debug structure, in addition to having a refence to the head of the link map, also has, in its ABI-stable part, a reference to an address that can have a breakpoint attached to it, such that whenever the contents of the link map change, that breakpoint will be triggered1.</p> <p>We take advantage of that here, by installing our own breakpoint in that location, and watching for trigger events, so that we can notify other bits of pwndbg that the contents of the <code>link_map()</code> function will be different.</p>"},{"location":"source/aglib/dynamic/#pwndbg.aglib.dynamic.r_debug_link_map_changed_remove_listener","title":"<code>r_debug_link_map_changed_remove_listener(handler)</code>","text":"<p>Removes a listener previously installed with r_debug_link_map_changed_add_listener().</p>"},{"location":"source/aglib/elf/","title":"Elf","text":"<p>This file declares types and methods useful for enumerating all of the address spaces and permissions of an ELF file in memory.</p> <p>This is necessary for when access to /proc is restricted, or when working on a BSD system which simply does not have /proc.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.Ehdr","title":"<code>Ehdr = Union[pwndbg.lib.elftypes.Elf32_Ehdr, pwndbg.lib.elftypes.Elf64_Ehdr]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.Phdr","title":"<code>Phdr = Union[pwndbg.lib.elftypes.Elf32_Phdr, pwndbg.lib.elftypes.Elf64_Phdr]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.T","title":"<code>T = TypeVar('T', Union[pwndbg.lib.elftypes.Elf32_Ehdr, pwndbg.lib.elftypes.Elf64_Ehdr], Union[pwndbg.lib.elftypes.Elf32_Phdr, pwndbg.lib.elftypes.Elf64_Phdr])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ehdr_type_loaded","title":"<code>ehdr_type_loaded = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo","title":"<code>ELFInfo</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>ELF metadata and structures.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.header","title":"<code>header: Dict[str, int | str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.is_pic","title":"<code>is_pic: bool</code>  <code>property</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.is_pie","title":"<code>is_pie: bool</code>  <code>property</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.sections","title":"<code>sections: List[Dict[str, int | str]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.ELFInfo.segments","title":"<code>segments: List[Dict[str, int | str]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(filepath, section_name, try_local_path=False)</code>","text":"<p>Dump the relocation entries of a section from an ELF file, return a generator of Relocation objects.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.dump_section_by_name","title":"<code>dump_section_by_name(filepath, section_name, try_local_path=False)</code>","text":"<p>Dump the content of a section from an ELF file, return the start address, size and content.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.entry","title":"<code>entry()</code>","text":"<p>Return the address of the entry point for the main executable.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.exe","title":"<code>exe()</code>","text":"<p>Return a loaded ELF header object pointing to the Ehdr of the main executable.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_containing_sections","title":"<code>get_containing_sections(elf_filepath, elf_loadaddr, vaddr)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_containing_segments","title":"<code>get_containing_segments(elf_filepath, elf_loadaddr, vaddr)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_ehdr","title":"<code>get_ehdr(pointer)</code>","text":"<p>Returns an ehdr object for the ELF pointer points into.</p> <p>We expect the <code>pointer</code> to be an address from the binary.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_elf_info","title":"<code>get_elf_info(filepath)</code>","text":"<p>Parse and return ELFInfo.</p> <p>Adds various calculated properties to the ELF header, segments and sections. Such added properties are those with prefix 'x_' in the returned dicts.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_elf_info_rebased","title":"<code>get_elf_info_rebased(filepath, vaddr)</code>","text":"<p>Parse and return ELFInfo with all virtual addresses rebased to vaddr</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.get_phdrs","title":"<code>get_phdrs(pointer)</code>","text":"<p>Returns a tuple containing (phnum, phentsize, gdb.Value), where the gdb.Value object is an ELF Program Header with the architecture-appropriate structure type.</p>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.iter_phdrs","title":"<code>iter_phdrs(ehdr)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.load","title":"<code>load(pointer)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.map","title":"<code>map(pointer, objfile='')</code>","text":"<p>Given a pointer into an ELF module, return a list of all loaded sections in the ELF.</p> <p>Returns:</p> Type Description <code>Tuple[Page, ...]</code> <p>A sorted list of pwndbg.lib.memory.Page objects</p> <p>Example:</p> Text Only<pre><code>&gt;&gt;&gt; pwndbg.gdblib.elf.load(pwndbg.gdblib.regs.pc)\n[Page('400000-4ef000 r-xp 0'),\n Page('6ef000-6f0000 r--p ef000'),\n Page('6f0000-6ff000 rw-p f0000')]\n&gt;&gt;&gt; pwndbg.gdblib.elf.load(0x7ffff77a2000)\n[Page('7ffff75e7000-7ffff77a2000 r-xp 0x1bb000 0'),\n Page('7ffff77a2000-7ffff79a2000 ---p 0x200000 1bb000'),\n Page('7ffff79a2000-7ffff79a6000 r--p 0x4000 1bb000'),\n Page('7ffff79a6000-7ffff79ad000 rw-p 0x7000 1bf000')]\n</code></pre>"},{"location":"source/aglib/elf/#pwndbg.aglib.elf.map_inner","title":"<code>map_inner(ei_class, ehdr, objfile)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.read","title":"<code>read(typ, address, blob=None)</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.reset_ehdr_type_loaded","title":"<code>reset_ehdr_type_loaded()</code>","text":""},{"location":"source/aglib/elf/#pwndbg.aglib.elf.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/file/","title":"File","text":"<p>Retrieve files from the debuggee's filesystem.  Useful when debugging a remote process over SSH or similar, where e.g. /proc/FOO/maps is needed from the remote system.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.get","title":"<code>get(path)</code>","text":"<p>Retrieves the contents of the specified file on the system where the current process is being debugged.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>A byte array, or None.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.get_file","title":"<code>get_file(path, try_local_path=False)</code>","text":"<p>Downloads the specified file from the system where the current process is being debugged.</p> <p>If the <code>path</code> is prefixed with \"target:\" the prefix is stripped (to support remote target paths properly).</p> <p>If the <code>try_local_path</code> is set to <code>True</code> and the <code>path</code> exists locally and \"target:\" prefix is not present, it will return the local path instead of downloading the file.</p> <p>Returns:</p> Type Description <code>str</code> <p>The local path to the file</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.get_proc_exe_file","title":"<code>get_proc_exe_file()</code>","text":"<p>Returns the local path to the debugged file name.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.readlink","title":"<code>readlink(path)</code>","text":"<p>readlink(path) -&gt; str</p> <p>Read the link specified by 'path' on the system being debugged.</p> <p>Handles local, qemu-usermode, and remote debugging cases.</p>"},{"location":"source/aglib/file/#pwndbg.aglib.file.remote_files_dir","title":"<code>remote_files_dir()</code>","text":""},{"location":"source/aglib/file/#pwndbg.aglib.file.reset_remote_files","title":"<code>reset_remote_files()</code>","text":""},{"location":"source/aglib/memory/","title":"Memory","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.GdbDict","title":"<code>GdbDict = Dict[str, Union['GdbDict', int]]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.MMAP_MIN_ADDR","title":"<code>MMAP_MIN_ADDR = 32768</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.byte","title":"<code>byte(addr)</code>","text":"<p>byte(addr) -&gt; int</p> <p>Read one byte at the specified address</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.cast_pointer","title":"<code>cast_pointer(type, addr)</code>","text":"<p>Create a Value containing given address and cast it to the pointer of specified type</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.convert_pwndbg_value_to_python_value","title":"<code>convert_pwndbg_value_to_python_value(dbg_value)</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.find_lower_boundary","title":"<code>find_lower_boundary(addr, max_pages=1024)</code>","text":"<p>find_lower_boundary(addr, max_pages=1024) -&gt; int</p> <p>Brute-force search the lower boundary of a memory mapping, by reading the first byte of each page, until an unmapped page is found.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.find_upper_boundary","title":"<code>find_upper_boundary(addr, max_pages=1024)</code>","text":"<p>find_upper_boundary(addr, max_pages=1024) -&gt; int</p> <p>Brute-force search the upper boundary of a memory mapping, by reading the first byte of each page, until an unmapped page is found.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.get_typed_pointer","title":"<code>get_typed_pointer(type, addr)</code>","text":"<p>Look up a type by name if necessary and return a Value of addr cast to that type</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.get_typed_pointer_value","title":"<code>get_typed_pointer_value(type_name, addr)</code>","text":"<p>Read the pointer value of addr cast to type specified by type_name</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.is_readable_address","title":"<code>is_readable_address(address)</code>","text":"<p>is_readable_address(address) -&gt; bool</p> <p>Check if the address can be read by GDB.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to read</p> required <p>Returns:</p> Type Description <code>bool</code> <p>class:<code>bool</code>: Whether the address is readable.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.pack_struct_into_dictionary","title":"<code>pack_struct_into_dictionary(fetched_struct, include_only_fields=None, exclude_fields=None)</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.peek","title":"<code>peek(address)</code>","text":"<p>peek(address) -&gt; str</p> <p>Read one byte from the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to read</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>class:<code>str</code>: A single byte of data, or <code>None</code> if the</p> <code>str | None</code> <p>address cannot be read.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.poke","title":"<code>poke(address)</code>","text":"<p>poke(address)</p> <p>Checks whether an address is writable.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>class:<code>bool</code>: Whether the address is writable.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.pvoid","title":"<code>pvoid(addr)</code>","text":"<p>pvoid(addr) -&gt; int</p> <p>Read one pointer from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.read","title":"<code>read(addr, count, partial=False)</code>","text":"<p>read(addr, count, partial=False) -&gt; bytearray</p> <p>Read memory from the program being debugged.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to read</p> required <code>count(int)</code> <p>Number of bytes to read</p> required <code>partial(bool)</code> <p>Whether less than <code>count</code> bytes can be returned</p> required <p>Returns:</p> Type Description <code>bytearray</code> <p>class:<code>bytearray</code>: The memory at the specified address,</p> <code>bytearray</code> <p>or <code>None</code>.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.readtype","title":"<code>readtype(type, addr)</code>","text":"<p>readtype(type, addr) -&gt; int</p> <p>Reads an integer-type (e.g. <code>uint64</code>) and returns a Python native integer representation of the same.</p> <p>Parameters:</p> Name Type Description Default <code>type(pwndbg.dbg_mod.Type)</code> <p>GDB type to read</p> required <code>addr(int)</code> <p>Address at which the value to be read resides</p> required <p>Returns:</p> Type Description <code>int</code> <p>class:<code>int</code></p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.resolve_renamed_struct_field","title":"<code>resolve_renamed_struct_field(struct_name, possible_field_names)</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s16","title":"<code>s16(addr)</code>","text":"<p>s16(addr) -&gt; int</p> <p>Read one <code>int16_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s32","title":"<code>s32(addr)</code>","text":"<p>s32(addr) -&gt; int</p> <p>Read one <code>int32_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s64","title":"<code>s64(addr)</code>","text":"<p>s64(addr) -&gt; int</p> <p>Read one <code>int64_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.s8","title":"<code>s8(addr)</code>","text":"<p>s8(addr) -&gt; int</p> <p>Read one <code>int8_t</code> from the specified address</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.string","title":"<code>string(addr, max=4096)</code>","text":"<p>Reads a null-terminated string from memory.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to read from</p> required <code>max(int)</code> <p>Maximum string length (default 4096)</p> required <p>Returns:</p> Type Description <code>bytearray</code> <p>An empty bytearray, or a NULL-terminated bytearray.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u","title":"<code>u(addr, size=None)</code>","text":"<p>u(addr, size=None) -&gt; int</p> <p>Read one <code>unsigned</code> integer from the specified address, with the bit-width specified by <code>size</code>, which defaults to the pointer width.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u16","title":"<code>u16(addr)</code>","text":"<p>u16(addr) -&gt; int</p> <p>Read one <code>uint16_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u32","title":"<code>u32(addr)</code>","text":"<p>u32(addr) -&gt; int</p> <p>Read one <code>uint32_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u64","title":"<code>u64(addr)</code>","text":"<p>u64(addr) -&gt; int</p> <p>Read one <code>uint64_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.u8","title":"<code>u8(addr)</code>","text":"<p>u8(addr) -&gt; int</p> <p>Read one <code>uint8_t</code> from the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.uchar","title":"<code>uchar(addr)</code>","text":"<p>uchar(addr) -&gt; int</p> <p>Read one <code>unsigned char</code> at the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.uint","title":"<code>uint(addr)</code>","text":"<p>uint(addr) -&gt; int</p> <p>Read one <code>unsigned int</code> at the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.update_min_addr","title":"<code>update_min_addr()</code>","text":""},{"location":"source/aglib/memory/#pwndbg.aglib.memory.ushort","title":"<code>ushort(addr)</code>","text":"<p>ushort(addr) -&gt; int</p> <p>Read one <code>unisgned short</code> at the specified address.</p>"},{"location":"source/aglib/memory/#pwndbg.aglib.memory.write","title":"<code>write(addr, data)</code>","text":"<p>write(addr, data)</p> <p>Writes data into the memory of the process being debugged.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to write</p> required <code>data(str,bytes,bytearray)</code> <p>Data to write</p> required"},{"location":"source/aglib/nearpc/","title":"Nearpc","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.c","title":"<code>c = ColorConfig('nearpc', [ColorParamSpec('symbol', 'normal', 'color for nearpc command (symbol)'), ColorParamSpec('address', 'normal', 'color for nearpc command (address)'), ColorParamSpec('prefix', 'none', 'color for nearpc command (prefix marker)'), ColorParamSpec('syscall-name', 'red', 'color for nearpc command (resolved syscall name)'), ColorParamSpec('argument', 'bold', 'color for nearpc command (target argument)'), ColorParamSpec('integration-comments', 'bold', 'color for nearpc command (integration comments)'), ColorParamSpec('branch-marker', 'normal', 'color for nearpc command (branch marker line)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc_branch_marker","title":"<code>nearpc_branch_marker = pwndbg.color.theme.add_param('nearpc-branch-marker', '    \u2193', 'branch marker line for nearpc command')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc_branch_marker_contiguous","title":"<code>nearpc_branch_marker_contiguous = pwndbg.color.theme.add_param('nearpc-branch-marker-contiguous', ' ', 'contiguous branch marker line for nearpc command')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc_lines","title":"<code>nearpc_lines = pwndbg.config.add_param('nearpc-lines', 10, 'number of additional lines to print for the nearpc command')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.opcode_separator_bytes","title":"<code>opcode_separator_bytes = pwndbg.config.add_param('nearpc-opcode-separator-bytes', 1, 'number of spaces between opcode bytes', param_class=pwndbg.lib.config.PARAM_ZUINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.show_args","title":"<code>show_args = pwndbg.config.add_param('nearpc-show-args', True, 'whether to show call arguments below instruction')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.show_comments","title":"<code>show_comments = pwndbg.config.add_param('nearpc-integration-comments', True, 'whether to show comments from integration provider')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.show_opcode_bytes","title":"<code>show_opcode_bytes = pwndbg.config.add_param('nearpc-num-opcode-bytes', 0, 'number of opcode bytes to print for each instruction', param_class=pwndbg.lib.config.PARAM_ZUINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.ljust_padding","title":"<code>ljust_padding(lst)</code>","text":""},{"location":"source/aglib/nearpc/#pwndbg.aglib.nearpc.nearpc","title":"<code>nearpc(pc=None, lines=None, emulate=False, repeat=False, use_cache=False, linear=False)</code>","text":"<p>Disassemble near a specified address.</p> <p>The <code>linear</code> argument specifies if we should disassemble linearly in memory, or take jumps into account</p>"},{"location":"source/aglib/proc/","title":"Proc","text":"<p>Provides values which would be available from /proc which are not fulfilled by other modules and some process/gdb flow related information.</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.alive","title":"<code>alive: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.binary_base_addr","title":"<code>binary_base_addr: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.binary_vmmap","title":"<code>binary_vmmap: Tuple[pwndbg.lib.memory.Page, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.exe","title":"<code>exe: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.pid","title":"<code>pid: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.stopped_with_signal","title":"<code>stopped_with_signal: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.tether","title":"<code>tether = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.thread_id","title":"<code>thread_id: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.thread_is_stopped","title":"<code>thread_is_stopped: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.tid","title":"<code>tid: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module","title":"<code>module</code>","text":"<p>               Bases: <code>ModuleType</code></p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.alive","title":"<code>alive: bool</code>  <code>property</code>","text":"<p>Informs whether the process has a thread. However, note that it will still return True for a segfaulted thread. To detect that, consider using the <code>stopped_with_signal</code> method.</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.binary_base_addr","title":"<code>binary_base_addr: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.binary_vmmap","title":"<code>binary_vmmap: Tuple[pwndbg.lib.memory.Page, ...]</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.exe","title":"<code>exe: str | None</code>  <code>property</code>","text":"<p>Returns the executed file path.</p> <p>On remote targets, this path may not exist locally.</p> If you need the locally referenced file use <p><code>gdb.current_process().filename</code></p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.pid","title":"<code>pid: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.thread_id","title":"<code>thread_id: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.tid","title":"<code>tid: int</code>  <code>property</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.OnlyWhenRunning","title":"<code>OnlyWhenRunning(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":"<p>Decorates function to work only with the specified archictectures.</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.dump_elf_data_section","title":"<code>dump_elf_data_section()</code>","text":"<p>Dump .data section of current process's ELF file</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(section_name)</code>","text":"<p>Dump relocations of a section by section name of current process's ELF file</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.module.get_section_address_by_name","title":"<code>get_section_address_by_name(section_name)</code>","text":"<p>Find section address of current process by section name</p>"},{"location":"source/aglib/proc/#pwndbg.aglib.proc.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.OnlyWhenRunning","title":"<code>OnlyWhenRunning(func)</code>","text":""},{"location":"source/aglib/proc/#pwndbg.aglib.proc.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":""},{"location":"source/aglib/qemu/","title":"Qemu","text":"<p>Determine whether the target is being run under QEMU.</p>"},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.exec_file_supported","title":"<code>exec_file_supported()</code>","text":"<p>Returns <code>True</code> if the remote target understands the 'qXfer:exec-file:read' packet. A check for this feature is done in vmmap code, to warn against running legacy Qemu versions.</p>"},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_qemu","title":"<code>is_qemu()</code>","text":""},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_qemu_kernel","title":"<code>is_qemu_kernel()</code>","text":""},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_qemu_usermode","title":"<code>is_qemu_usermode()</code>","text":"<p>Returns <code>True</code> if the target remote is being run under QEMU usermode emulation.</p>"},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.is_usermode","title":"<code>is_usermode()</code>","text":""},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.pid","title":"<code>pid()</code>","text":"<p>Find the PID of the qemu usermode binary which we are talking to.</p>"},{"location":"source/aglib/qemu/#pwndbg.aglib.qemu.root","title":"<code>root()</code>","text":""},{"location":"source/aglib/regs/","title":"Regs","text":"<p>Reading register value from the inferior, and provides a standardized interface to registers like \"sp\" and \"pc\".</p>"},{"location":"source/aglib/regs/#pwndbg.aglib.regs.ARCH_GET_FS","title":"<code>ARCH_GET_FS = 4099</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.ARCH_GET_GS","title":"<code>ARCH_GET_GS = 4100</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.PTRACE_ARCH_PRCTL","title":"<code>PTRACE_ARCH_PRCTL = 30</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.all","title":"<code>all: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.changed","title":"<code>changed: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.common","title":"<code>common: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.current","title":"<code>current: RegisterSet</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.extra_flags","title":"<code>extra_flags: Dict[str, BitFlags]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.fix","title":"<code>fix: Callable[[str], str]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.flags","title":"<code>flags: Dict[str, BitFlags]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.frame","title":"<code>frame: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.fsbase","title":"<code>fsbase: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.gpr","title":"<code>gpr: Tuple[str, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.gsbase","title":"<code>gsbase: int</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.items","title":"<code>items: Callable[[], Generator[Tuple[str, Any], None, None]]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.last","title":"<code>last: Dict[str, int]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.pc","title":"<code>pc: int | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.previous","title":"<code>previous: Dict[str, int]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.retaddr","title":"<code>retaddr: Tuple[str, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.retval","title":"<code>retval: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.stack","title":"<code>stack: str</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.tether","title":"<code>tether = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module","title":"<code>module</code>","text":"<p>               Bases: <code>ModuleType</code></p>"},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.all","title":"<code>all: List[str]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.changed","title":"<code>changed: List[str]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.common","title":"<code>common: List[str]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.current","title":"<code>current: RegisterSet</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.extra_flags","title":"<code>extra_flags: Dict[str, BitFlags]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.flags","title":"<code>flags: Dict[str, BitFlags]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.frame","title":"<code>frame: str | None</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.fsbase","title":"<code>fsbase: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.gpr","title":"<code>gpr: Tuple[str, ...]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.gsbase","title":"<code>gsbase: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.idt","title":"<code>idt: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.idt_limit","title":"<code>idt_limit: int</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.last","title":"<code>last: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.previous","title":"<code>previous: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.reg_sets","title":"<code>reg_sets = reg_sets</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.retaddr","title":"<code>retaddr: Tuple[str, ...]</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.retval","title":"<code>retval: str | None</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.stack","title":"<code>stack: str</code>  <code>property</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__contains__","title":"<code>__contains__(reg)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__getattr__","title":"<code>__getattr__(attr)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__getitem__","title":"<code>__getitem__(item)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.__setattr__","title":"<code>__setattr__(attr, val)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.fix","title":"<code>fix(expression)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.items","title":"<code>items()</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.module.read_reg","title":"<code>read_reg(reg, frame=None)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.get_qemu_register","title":"<code>get_qemu_register(name)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.get_register","title":"<code>get_register(name, frame=None)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.regs_in_frame","title":"<code>regs_in_frame(frame)</code>","text":""},{"location":"source/aglib/regs/#pwndbg.aglib.regs.update_last","title":"<code>update_last()</code>","text":""},{"location":"source/aglib/remote/","title":"Remote","text":"<p>Information about whether the debuggee is local (under GDB) or remote (under GDBSERVER or QEMU stub).</p>"},{"location":"source/aglib/remote/#pwndbg.aglib.remote.is_debug_probe","title":"<code>is_debug_probe()</code>","text":"<p>Returns True if the target is a debug probe for an embedded device. Currently detects the Black Magic Probe and the SEGGER J-Link GDB Server.</p>"},{"location":"source/aglib/remote/#pwndbg.aglib.remote.is_remote","title":"<code>is_remote()</code>","text":""},{"location":"source/aglib/stack/","title":"Stack","text":"<p>Helpers for finding address mappings which are used as a stack.</p> <p>Generally not needed, except under qemu-user and for when binaries do things to remap the stack (e.g. pwnies' postit).</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.callstack","title":"<code>callstack()</code>","text":"<p>Return the address of the return address for the current frame.</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.current","title":"<code>current()</code>","text":"<p>Returns the bounds for the stack for the current thread.</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.find","title":"<code>find(address)</code>","text":"<p>Returns a pwndbg.lib.memory.Page object which corresponds to given address stack or None if it does not exist</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.find_upper_stack_boundary","title":"<code>find_upper_stack_boundary(stack_ptr, max_pages=1024)</code>","text":""},{"location":"source/aglib/stack/#pwndbg.aglib.stack.get","title":"<code>get()</code>","text":"<p>For each running thread, return the known address range for its stack Returns a dict which should never be modified (since its cached)</p>"},{"location":"source/aglib/stack/#pwndbg.aglib.stack.is_executable","title":"<code>is_executable()</code>","text":""},{"location":"source/aglib/strings/","title":"Strings","text":"<p>Functionality for resolving ASCII printable strings within the debuggee's address space.</p>"},{"location":"source/aglib/strings/#pwndbg.aglib.strings.length","title":"<code>length = 15</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/strings/#pwndbg.aglib.strings.get","title":"<code>get(address, maxlen=None, maxread=None)</code>","text":"<p>Returns a printable C-string from address.</p> <p>Returns <code>None</code> if string contains non-printable chars or if the <code>maxlen</code> length data does not end up with a null byte.</p>"},{"location":"source/aglib/strings/#pwndbg.aglib.strings.update_length","title":"<code>update_length()</code>","text":"<p>Unfortunately there's not a better way to get at this info.</p> <p>gdb.execute('show print elements', from_tty=False, to_string=True) 'Limit on string chars or array elements to print is 21.\\n'</p>"},{"location":"source/aglib/tls/","title":"Tls","text":"<p>Getting Thread Local Storage (TLS) information.</p>"},{"location":"source/aglib/tls/#pwndbg.aglib.tls.__call_pthread_self","title":"<code>__call_pthread_self()</code>","text":"<p>Get the address of TLS by calling pthread_self().</p>"},{"location":"source/aglib/tls/#pwndbg.aglib.tls.find_address_with_pthread_self","title":"<code>find_address_with_pthread_self()</code>","text":"<p>Get the address of TLS with pthread_self().</p>"},{"location":"source/aglib/tls/#pwndbg.aglib.tls.find_address_with_register","title":"<code>find_address_with_register()</code>","text":"<p>Get the address of TLS with register.</p>"},{"location":"source/aglib/typeinfo/","title":"Typeinfo","text":"<p>Common types.</p>"},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.char","title":"<code>char: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int16","title":"<code>int16: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int32","title":"<code>int32: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int64","title":"<code>int64: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.int8","title":"<code>int8: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.long","title":"<code>long: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.null","title":"<code>null: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.pchar","title":"<code>pchar: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ppvoid","title":"<code>ppvoid: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ptrdiff","title":"<code>ptrdiff: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ptrsize","title":"<code>ptrsize: int = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.pvoid","title":"<code>pvoid: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.signed","title":"<code>signed: Dict[int, pwndbg.dbg_mod.Type]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.size_t","title":"<code>size_t: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ssize_t","title":"<code>ssize_t: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uchar","title":"<code>uchar: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint","title":"<code>uint: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint16","title":"<code>uint16: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint32","title":"<code>uint32: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint64","title":"<code>uint64: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.uint8","title":"<code>uint8: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ulong","title":"<code>ulong: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.unsigned","title":"<code>unsigned: Dict[int, pwndbg.dbg_mod.Type]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.ushort","title":"<code>ushort: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.void","title":"<code>void: pwndbg.dbg_mod.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.get_type","title":"<code>get_type(size)</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.load","title":"<code>load(name)</code>","text":"<p>Load a symbol; note that new symbols can be added with <code>add-symbol-file</code> functionality</p>"},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.lookup_types","title":"<code>lookup_types(*types)</code>","text":""},{"location":"source/aglib/typeinfo/#pwndbg.aglib.typeinfo.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/vmmap/","title":"Vmmap","text":""},{"location":"source/aglib/vmmap/#pwndbg.aglib.vmmap.find","title":"<code>find(address)</code>","text":""},{"location":"source/aglib/vmmap/#pwndbg.aglib.vmmap.get","title":"<code>get()</code>","text":""},{"location":"source/aglib/disasm/__init__/","title":"init","text":"<p>Functionality for disassmebling code at an address, or at an address \u00b1 a few instructions.</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneArch","title":"<code>CapstoneArch = {'arm': CS_ARCH_ARM, 'armcm': CS_ARCH_ARM, 'aarch64': CS_ARCH_ARM64, 'i386': CS_ARCH_X86, 'i8086': CS_ARCH_X86, 'x86-64': CS_ARCH_X86, 'powerpc': CS_ARCH_PPC, 'mips': CS_ARCH_MIPS, 'sparc': CS_ARCH_SPARC, 'rv32': CS_ARCH_RISCV, 'rv64': CS_ARCH_RISCV}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneEndian","title":"<code>CapstoneEndian = {'little': CS_MODE_LITTLE_ENDIAN, 'big': CS_MODE_BIG_ENDIAN}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneMode","title":"<code>CapstoneMode = {4: CS_MODE_32, 8: CS_MODE_64}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.CapstoneSyntax","title":"<code>CapstoneSyntax = {'intel': CS_OPT_SYNTAX_INTEL, 'att': CS_OPT_SYNTAX_ATT}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.VariableInstructionSizeMax","title":"<code>VariableInstructionSizeMax = {'i386': 16, 'x86-64': 16, 'i8086': 16, 'mips': 8, 'rv32': 22, 'rv64': 22}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.backward_cache","title":"<code>backward_cache: DefaultDict[int, int] = collections.defaultdict(lambda: None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.computed_instruction_cache","title":"<code>computed_instruction_cache: DefaultDict[int, PwndbgInstruction] = collections.defaultdict(lambda: None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.emulated_arm_mode_cache","title":"<code>emulated_arm_mode_cache: DefaultDict[int, int] = collections.defaultdict(lambda: None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.first_time_emulate","title":"<code>first_time_emulate = True</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.next_addresses_cache","title":"<code>next_addresses_cache: Set[int] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.can_run_first_emulate","title":"<code>can_run_first_emulate()</code>","text":"<p>Disable the emulate config variable if we don't have enough memory to use it See https://github.com/pwndbg/pwndbg/issues/1534 And https://github.com/unicorn-engine/unicorn/pull/1743</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.clear_on_reg_mem_change","title":"<code>clear_on_reg_mem_change()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.emulate_one","title":"<code>emulate_one()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.enhance_cache_listener","title":"<code>enhance_cache_listener()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get","title":"<code>get(address, instructions=1, emu=None, enhance=True, from_cache=False, put_cache=False)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get_disassembler","title":"<code>get_disassembler(address)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get_disassembler_cached","title":"<code>get_disassembler_cached(arch, ptrsize, endian, extra=None)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.get_one_instruction","title":"<code>get_one_instruction(address, emu=None, enhance=True, from_cache=False, put_cache=False)</code>","text":"<p>If passed an emulator, this will pass it to the DisassemblyAssistant which will single_step the emulator to determine the operand values before and after the instruction executes.</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.near","title":"<code>near(address, instructions=1, emulate=False, show_prev_insns=True, use_cache=False, linear=False)</code>","text":"<p>Disasms instructions near given <code>address</code>. Passing <code>emulate</code> makes use of unicorn engine to emulate instructions to predict branches that will be taken. <code>show_prev_insns</code> makes this show previously cached instructions (this is mostly used by context's disasm display, so user see what was previously)</p>"},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.no_emulate_one","title":"<code>no_emulate_one()</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.one","title":"<code>one(address=None, emu=None, enhance=True, from_cache=False, put_cache=False, put_backward_cache=True)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.one_raw","title":"<code>one_raw(address=None)</code>","text":""},{"location":"source/aglib/disasm/__init__/#pwndbg.aglib.disasm.one_with_config","title":"<code>one_with_config()</code>","text":"<p>Returns a single Pwndbg Instruction at the current PC.</p> <p>Emulation determined by the <code>pwndbg.config.emulate</code> setting.</p>"},{"location":"source/aglib/disasm/aarch64/","title":"Aarch64","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_BIT_SHIFT_MAP","title":"<code>AARCH64_BIT_SHIFT_MAP: Dict[int, Callable[[int, int, int], int]] = {ARM64_SFT_LSL: bit_math.logical_shift_left, ARM64_SFT_LSR: bit_math.logical_shift_right, ARM64_SFT_ASR: bit_math.arithmetic_shift_right, ARM64_SFT_ROR: bit_math.rotate_right}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_EMULATED_ANNOTATIONS","title":"<code>AARCH64_EMULATED_ANNOTATIONS = CONDITIONAL_SELECT_INSTRUCTIONS | {ARM64_INS_SXTB, ARM64_INS_SXTH, ARM64_INS_SXTW, ARM64_INS_UXTB, ARM64_INS_UXTH, ARM64_INS_UXTW, ARM64_INS_RBIT, ARM64_INS_CLS, ARM64_INS_CLZ, ARM64_INS_BFXIL, ARM64_INS_UBFIZ, ARM64_INS_UBFM, ARM64_INS_UBFX, ARM64_INS_SBFIZ, ARM64_INS_SBFM, ARM64_INS_SBFX, ARM64_INS_BFI, ARM64_INS_NEG, ARM64_INS_NEGS, ARM64_INS_REV, ARM64_INS_BIC, ARM64_INS_BICS}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_EXCLUSIVE_STORE_INSTRUCTIONS","title":"<code>AARCH64_EXCLUSIVE_STORE_INSTRUCTIONS = {ARM64_INS_STXRB: 1, ARM64_INS_STXRH: 2, ARM64_INS_STXR: None, ARM64_INS_STLXRB: 1, ARM64_INS_STLXRH: 2, ARM64_INS_STLXR: None}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_EXTEND_MAP","title":"<code>AARCH64_EXTEND_MAP: Dict[int, Callable[[int], int]] = {ARM64_EXT_UXTB: lambda x: x &amp; 1 &lt;&lt; 8 - 1, ARM64_EXT_UXTH: lambda x: x &amp; 1 &lt;&lt; 16 - 1, ARM64_EXT_UXTW: lambda x: x &amp; 1 &lt;&lt; 32 - 1, ARM64_EXT_UXTX: lambda x: x, ARM64_EXT_SXTB: lambda x: bit_math.to_signed(x, 8), ARM64_EXT_SXTH: lambda x: bit_math.to_signed(x, 16), ARM64_EXT_SXTW: lambda x: bit_math.to_signed(x, 32), ARM64_EXT_SXTX: lambda x: bit_math.to_signed(x, 64)}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_MATH_INSTRUCTIONS","title":"<code>AARCH64_MATH_INSTRUCTIONS = {ARM64_INS_ADD: '+', ARM64_INS_ADDS: '+', ARM64_INS_SUB: '-', ARM64_INS_SUBS: '-', ARM64_INS_AND: '&amp;', ARM64_INS_ANDS: '&amp;', ARM64_INS_ORR: '&amp;', ARM64_INS_ASR: '&gt;&gt;s', ARM64_INS_ASRV: '&gt;&gt;s', ARM64_INS_EOR: '^', ARM64_INS_LSL: '&lt;&lt;', ARM64_INS_LSLV: '&lt;&lt;', ARM64_INS_LSR: '&gt;&gt;', ARM64_INS_LSRV: '&gt;&gt;', ARM64_INS_UDIV: '/', ARM64_INS_SDIV: '/', ARM64_INS_SMULH: '*', ARM64_INS_SMULL: '*', ARM64_INS_UMULH: '*', ARM64_INS_UMULL: '*', ARM64_INS_MUL: '*'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_SINGLE_LOAD_INSTRUCTIONS","title":"<code>AARCH64_SINGLE_LOAD_INSTRUCTIONS: Dict[int, int | None] = {ARM64_INS_LDRB: 1, ARM64_INS_LDURB: 1, ARM64_INS_LDRSB: -1, ARM64_INS_LDURSB: -1, ARM64_INS_LDRH: 2, ARM64_INS_LDURH: 2, ARM64_INS_LDRSH: -2, ARM64_INS_LDURSH: -2, ARM64_INS_LDURSW: -4, ARM64_INS_LDRSW: -4, ARM64_INS_LDUR: None, ARM64_INS_LDR: None, ARM64_INS_LDTRB: 1, ARM64_INS_LDTRSB: -1, ARM64_INS_LDTRH: 2, ARM64_INS_LDTRSH: -2, ARM64_INS_LDTRSW: -4, ARM64_INS_LDTR: None, ARM64_INS_LDXRB: 1, ARM64_INS_LDXRH: 2, ARM64_INS_LDXR: None, ARM64_INS_LDARB: 1, ARM64_INS_LDARH: 2, ARM64_INS_LDAR: None}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.AARCH64_SINGLE_STORE_INSTRUCTIONS","title":"<code>AARCH64_SINGLE_STORE_INSTRUCTIONS: Dict[int, int | None] = {ARM64_INS_STRB: 1, ARM64_INS_STURB: 1, ARM64_INS_STRH: 2, ARM64_INS_STURH: 2, ARM64_INS_STUR: None, ARM64_INS_STR: None, ARM64_INS_STTRB: 1, ARM64_INS_STTRH: 2, ARM64_INS_STTR: None, ARM64_INS_STLRB: 1, ARM64_INS_STLRH: 2, ARM64_INS_STLR: None}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.CONDITIONAL_SELECT_INSTRUCTIONS","title":"<code>CONDITIONAL_SELECT_INSTRUCTIONS = {ARM64_INS_CSEL, ARM64_INS_CSINC, ARM64_INS_CSINV, ARM64_INS_CSNEG, ARM64_INS_CSET, ARM64_INS_CSETM, ARM64_INS_CINC, ARM64_INS_CINV, ARM64_INS_CNEG}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.assistant","title":"<code>assistant = DisassemblyAssistant('aarch64')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {ARM64_INS_MOV: self._common_move_annotator, ARM64_INS_MOVK: self._common_generic_register_destination, ARM64_INS_ADR: self._common_generic_register_destination, ARM64_INS_ADRP: self._handle_adrp, ARM64_INS_CMP: self._common_cmp_annotator_builder('cpsr', '-'), ARM64_INS_CMN: self._common_cmp_annotator_builder('cpsr', '+'), ARM64_INS_TST: self._common_cmp_annotator_builder('cpsr', '&amp;'), ARM64_INS_CCMP: self._common_cmp_annotator_builder('cpsr', ''), ARM64_INS_CCMN: self._common_cmp_annotator_builder('cpsr', '')}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/aarch64/#pwndbg.aglib.disasm.aarch64.resolve_condition","title":"<code>resolve_condition(condition, cpsr)</code>","text":"<p>Given a condition and the NZCV flag bits, determine when the condition is satisfied</p> <p>The condition is a Capstone constant</p>"},{"location":"source/aglib/disasm/arch/","title":"Arch","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DEBUG_ENHANCEMENT","title":"<code>DEBUG_ENHANCEMENT = False</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DO_NOT_EMULATE","title":"<code>DO_NOT_EMULATE = {CS_GRP_INT, CS_GRP_INVALID, CS_GRP_IRET}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.access","title":"<code>access = {v: kfor (k, v) in globals().items() if k.startswith('CS_AC_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.generic_assistant","title":"<code>generic_assistant = DisassemblyAssistant(None)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.groups","title":"<code>groups = {v: kfor (k, v) in globals().items() if k.startswith('CS_GRP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.ops","title":"<code>ops = {v: kfor (k, v) in globals().items() if k.startswith('CS_OP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.assistants","title":"<code>assistants: Dict[str, DisassemblyAssistant] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.op_handlers","title":"<code>op_handlers: Dict[int, Callable[[PwndbgInstruction, EnhancedOperand, Emulator], int | None]] = {CS_OP_IMM: self._parse_immediate, CS_OP_REG: self._parse_register, CS_OP_MEM: self._parse_memory}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.op_names","title":"<code>op_names: Dict[int, Callable[[PwndbgInstruction, EnhancedOperand], str | None]] = {CS_OP_IMM: self._immediate_string, CS_OP_REG: self._register_string, CS_OP_MEM: self._memory_string}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.can_reason_about_process_state","title":"<code>can_reason_about_process_state(instruction)</code>","text":"<p>Determine if the program counter of the process equals the address of the instruction being enhanced. If so, it means we can safely reason and read from registers and memory to enhance values that we can add to the annotation string. This becomes relevent when NOT emulating, and is meant to allow more details when the PC is at the instruction being enhanced</p>"},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.dump","title":"<code>dump(instruction)</code>","text":"<p>Debug-only method.</p>"},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.enhance","title":"<code>enhance(instruction, emu=None)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.DisassemblyAssistant.for_current_arch","title":"<code>for_current_arch()</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.memory_assign","title":"<code>memory_assign(left, right)</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.memory_or_register_assign","title":"<code>memory_or_register_assign(left, right, mem_assign)</code>","text":"<p>Used when we don't know until runtime whether a codepath will annotate a register or memory location.</p>"},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.register_assign","title":"<code>register_assign(left, right)</code>","text":""},{"location":"source/aglib/disasm/arch/#pwndbg.aglib.disasm.arch.syntax_highlight","title":"<code>syntax_highlight(ins)</code>","text":""},{"location":"source/aglib/disasm/arm/","title":"Arm","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_BIT_SHIFT_MAP","title":"<code>ARM_BIT_SHIFT_MAP: Dict[int, Callable[[int, int, int], int]] = {ARM_SFT_ASR: bit_math.arithmetic_shift_right, ARM_SFT_LSL: bit_math.logical_shift_left, ARM_SFT_LSR: bit_math.logical_shift_right, ARM_SFT_ROR: bit_math.rotate_right}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_CAN_WRITE_TO_PC","title":"<code>ARM_CAN_WRITE_TO_PC: Dict[int, Callable[[PwndbgInstruction], bool]] = {ARM_INS_ADD: first_op_is_pc, ARM_INS_SUB: first_op_is_pc, ARM_INS_SUBS: first_op_is_pc, ARM_INS_MOV: first_op_is_pc, ARM_INS_LDR: first_op_is_pc, ARM_INS_POP: ops_contain_pc, ARM_INS_LDM: ops_contain_pc}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_EXCLUSIVE_STORE_INSTRUCTIONS","title":"<code>ARM_EXCLUSIVE_STORE_INSTRUCTIONS = {ARM_INS_STREXB: 1, ARM_INS_STREXH: 2, ARM_INS_STREX: 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_MATH_INSTRUCTIONS","title":"<code>ARM_MATH_INSTRUCTIONS = {ARM_INS_ADD: '+', ARM_INS_ADDW: '+', ARM_INS_SUB: '-', ARM_INS_ORR: '|', ARM_INS_AND: '&amp;', ARM_INS_EOR: '^', ARM_INS_UDIV: '/', ARM_INS_SDIV: '/', ARM_INS_MUL: '*', ARM_INS_UMULL: '*', ARM_INS_SMULL: '*'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_SHIFT_INSTRUCTIONS","title":"<code>ARM_SHIFT_INSTRUCTIONS = {ARM_INS_ASR: '&gt;&gt;s', ARM_INS_LSR: '&gt;&gt;', ARM_INS_LSL: '&lt;&lt;'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_SINGLE_LOAD_INSTRUCTIONS","title":"<code>ARM_SINGLE_LOAD_INSTRUCTIONS = {ARM_INS_LDRB: 1, ARM_INS_LDRSB: -1, ARM_INS_LDRH: 2, ARM_INS_LDRSH: -2, ARM_INS_LDR: 4, ARM_INS_LDRBT: 1, ARM_INS_LDRSBT: -1, ARM_INS_LDRHT: 2, ARM_INS_LDRSHT: -2, ARM_INS_LDRT: 4, ARM_INS_LDREXB: 1, ARM_INS_LDREXH: 2, ARM_INS_LDREX: 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ARM_SINGLE_STORE_INSTRUCTIONS","title":"<code>ARM_SINGLE_STORE_INSTRUCTIONS = {ARM_INS_STRB: 1, ARM_INS_STRH: 2, ARM_INS_STR: 4, ARM_INS_STRBT: 1, ARM_INS_STRHT: 2, ARM_INS_STRT: 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.assistant","title":"<code>assistant = DisassemblyAssistant('armcm', 'xpsr')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {ARM_INS_MOV: self._common_move_annotator, ARM_INS_MOVW: self._common_move_annotator, ARM_INS_MOVT: self._common_generic_register_destination, ARM_INS_MVN: self._common_generic_register_destination, ARM_INS_CMP: self._common_cmp_annotator_builder(flags_reg, '-'), ARM_INS_CMN: self._common_cmp_annotator_builder(flags_reg, '+'), ARM_INS_TST: self._common_cmp_annotator_builder(flags_reg, '&amp;'), ARM_INS_TEQ: self._common_cmp_annotator_builder(flags_reg, '^')}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.flags_reg","title":"<code>flags_reg = flags_reg</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.__init__","title":"<code>__init__(architecture, flags_reg)</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.DisassemblyAssistant.read_thumb_bit","title":"<code>read_thumb_bit(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.first_op_is_pc","title":"<code>first_op_is_pc(i)</code>","text":""},{"location":"source/aglib/disasm/arm/#pwndbg.aglib.disasm.arm.ops_contain_pc","title":"<code>ops_contain_pc(i)</code>","text":""},{"location":"source/aglib/disasm/instruction/","title":"Instruction","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.ALL_JUMP_GROUPS","title":"<code>ALL_JUMP_GROUPS = GENERIC_JUMP_GROUPS | GENERIC_UNCONDITIONAL_JUMP_GROUPS</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.BRANCH_AND_LINK_INSTRUCTIONS","title":"<code>BRANCH_AND_LINK_INSTRUCTIONS: Dict[int, Set[int]] = defaultdict(set)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.CAPSTONE_ARCH_MAPPING_STRING","title":"<code>CAPSTONE_ARCH_MAPPING_STRING = {CS_ARCH_ARM: 'arm', CS_ARCH_ARM64: 'aarch64', CS_ARCH_X86: 'x86', CS_ARCH_PPC: 'powerpc', CS_ARCH_MIPS: 'mips', CS_ARCH_SPARC: 'sparc', CS_ARCH_RISCV: 'RISCV'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.FORWARD_JUMP_GROUP","title":"<code>FORWARD_JUMP_GROUP = {CS_GRP_CALL} | GENERIC_JUMP_GROUPS</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.GENERIC_JUMP_GROUPS","title":"<code>GENERIC_JUMP_GROUPS = {CS_GRP_JUMP, CS_GRP_BRANCH_RELATIVE}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.GENERIC_UNCONDITIONAL_JUMP_GROUPS","title":"<code>GENERIC_UNCONDITIONAL_JUMP_GROUPS = {CS_GRP_CALL, CS_GRP_RET, CS_GRP_IRET}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.UNCONDITIONAL_JUMP_INSTRUCTIONS","title":"<code>UNCONDITIONAL_JUMP_INSTRUCTIONS: Dict[int, Set[int]] = {CS_ARCH_X86: {X86_INS_JMP}, CS_ARCH_MIPS: {MIPS_INS_J, MIPS_INS_JR, MIPS_INS_JAL, MIPS_INS_JALR, MIPS_INS_BAL, MIPS_INS_B}, CS_ARCH_SPARC: {SPARC_INS_JMP, SPARC_INS_JMPL}, CS_ARCH_ARM: {ARM_INS_TBB, ARM_INS_TBH}, CS_ARCH_ARM64: {ARM64_INS_BL, ARM64_INS_BLR, ARM64_INS_BR}, CS_ARCH_RISCV: {RISCV_INS_JAL, RISCV_INS_JALR, RISCV_INS_C_JAL, RISCV_INS_C_JALR, RISCV_INS_C_J, RISCV_INS_C_JR}, CS_ARCH_PPC: {PPC_INS_B, PPC_INS_BA, PPC_INS_BL, PPC_INS_BLA}}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand","title":"<code>EnhancedOperand</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.after_value","title":"<code>after_value: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The value of the operand after the instruction executes. Only set when using emulation.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.after_value_resolved","title":"<code>after_value_resolved: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The 'resolved' value of the operand after the instruction executes.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.before_value","title":"<code>before_value: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The value of the operand before the instruction executes. This is set only if the operand value can be reasoned about.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.before_value_no_modifiers","title":"<code>before_value_no_modifiers: int | None = None</code>  <code>instance-attribute</code>","text":"<p>This is a special field used in some architectures that allow operand modifiers, such as shifts and extends in Arm. Capstone bundles the modifier with the operand, and when we are resolving concrete operand values, we apply the modifier. However, in some annotations we need to un-modified raw register value, which is what this field is for.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.before_value_resolved","title":"<code>before_value_resolved: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The 'resolved' value of the operand that is actually used in the instruction logic, before the instruction executes. This is the same as before_value if it's not a memory operand, in which cases it's the dereferenced value.</p> <p>Helpful for cases like  <code>cmp    byte ptr [rip + 0x166669], 0</code>, where first operand could be a register or a memory value to dereference, and we want the actual value used.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.cs_op","title":"<code>cs_op: typing.Any = cs_op</code>  <code>instance-attribute</code>","text":"<p>Underlying Capstone operand. Takes on a different value depending on the architecture.</p> <p>x86 = capstone.x86.X86Op, arm = capstone.arm.ArmOp, mips = capstone.mips.MipsOp</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.imm","title":"<code>imm: int</code>  <code>property</code>","text":"<p>The immediate value of the operand (if applicable)</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.mem","title":"<code>mem: typing.Any</code>  <code>property</code>","text":"<p>Return the underlying Capstone mem object (if applicable)</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.reg","title":"<code>reg: int</code>  <code>property</code>","text":"<p>The underlying Capstone ID for the register</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.str","title":"<code>str: str | None = ''</code>  <code>instance-attribute</code>","text":"<p>String representing the operand</p> <p>Ex: \"RAX\", or \"[0x7fffffffd9e8]\". None if value cannot be determined.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.symbol","title":"<code>symbol: str | None = None</code>  <code>instance-attribute</code>","text":"<p>Colorized symbol name for this operand, if .before_value is set and symbol exists, else None.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.type","title":"<code>type: int</code>  <code>property</code>","text":"<p>CS_OP_REG | CS_OP_MEM | CS_OP_IMM | CS_OP_INVALID | CS_OP_FP</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.__init__","title":"<code>__init__(cs_op)</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.EnhancedOperand.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition","title":"<code>InstructionCondition</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition.FALSE","title":"<code>FALSE = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition.TRUE","title":"<code>TRUE = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.InstructionCondition.UNDETERMINED","title":"<code>UNDETERMINED = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction","title":"<code>PwndbgInstruction</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.address","title":"<code>address: int = cs_insn.address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.annotation","title":"<code>annotation: str | None = None</code>  <code>instance-attribute</code>","text":"<p>The string is set in the \"DisassemblyAssistant.enhance\" function. It is used in the disasm print view to add context to the instruction, mostly operand value. This string is not used for all cases - if the instruction is a call or a jump, the 'target'. variables is used instead. See 'pwndbg.color.disasm.instruction()' for specific usage.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.annotation_padding","title":"<code>annotation_padding: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The left adjustment padding that was used to previously print this. We retain it so the output is consistent between prints</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.asm_string","title":"<code>asm_string: str = '%-06s %s' % (self.mnemonic, self.op_str)</code>  <code>instance-attribute</code>","text":"<p>The full string representing the instruction - <code>mov    rdi, rsp</code> with appropriate padding.</p> <p>This is syntax highlighted during enhancement.</p> <p>This is additionally modified during enhancement for the purposes of replacing immediate values with their corresponding symbols</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.bytes","title":"<code>bytes: bytearray</code>  <code>property</code>","text":"<p>Raw machine instruction bytes</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.call_like","title":"<code>call_like: bool</code>  <code>property</code>","text":"<p>True if this is a call-like instruction, meaning either it's a CALL or a branch and link.</p> <p>Checking for the CS_GRP_CALL is insufficient, as there are many \"branch and link\" instructions that are not labeled as a call</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.causes_branch_delay","title":"<code>causes_branch_delay: bool = False</code>  <code>instance-attribute</code>","text":"<p>Whether or not this instruction has a single branch delay slot</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.condition","title":"<code>condition: InstructionCondition = InstructionCondition.UNDETERMINED</code>  <code>instance-attribute</code>","text":"<p>Does the condition that the instruction checks for pass?</p> <p>For example, \"JNE\" jumps if Zero Flag is 0, else it does nothing. \"CMOVA\" conditionally performs a move depending on a flag. See 'condition' function in pwndbg.aglib.disasm.x86 for example on setting this.</p> <p>UNDETERMINED if we cannot reason about the condition, or if the instruction always executes unconditionally (most instructions).</p> <p>TRUE if the instruction has a conditional action, and we determine it is taken.</p> <p>FALSE if the instruction has a conditional action, and we know it is not taken.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.cs_insn","title":"<code>cs_insn: CsInsn = cs_insn</code>  <code>instance-attribute</code>","text":"<p>The underlying Capstone instruction, if present. Ideally, only the enhancement code will access the 'cs_insn' property</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.declare_conditional","title":"<code>declare_conditional: bool | None = None</code>  <code>instance-attribute</code>","text":"<p>This field is used to declare if the instruction is a conditional instruction. In most cases, we can determine this purely based on the instruction ID, and this field is irrelevent. However, in some arches, like Arm, the same instruction can be made conditional by certain instruction attributes. Ex:     Arm, <code>bls</code> instruction. This is encoded as a <code>b</code> (Capstone ID 11) under the code, with an additional condition code field.     In this case, sometimes a <code>b</code> instruction (ID 11) is unconditional (always branches), in other cases it is conditional.     We use this field to disambiguate these cases.</p> <p>True if we manually determine this instruction is a conditional instruction False if it's not a conditional instruction None if we don't have a determination (most cases)</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.declare_is_unconditional_jump","title":"<code>declare_is_unconditional_jump: bool = False</code>  <code>instance-attribute</code>","text":"<p>This field is used to declare that this instruction is an unconditional jump. Most of the type, we depend on Capstone groups to check for jump instructions, but sometimes these are lacking, such as in the case of general-purpose instructions where the PC is the destination register, such as Arm <code>add</code>, <code>sub</code>, <code>ldr</code>, and <code>pop</code> instructions.</p> <p>In these cases, we want to forcefully state that this instruction mutates the PC, so we set this attribute to True.</p> <p>This helps in two cases: 1. Disassembly splits 2. Instructions like <code>stepuntilasm</code> work better, as they detect these as branches to stop at.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.emulated","title":"<code>emulated: bool = False</code>  <code>instance-attribute</code>","text":"<p>If the enhancement successfully used emulation for this instruction</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.force_unconditional_jump_target","title":"<code>force_unconditional_jump_target: bool = False</code>  <code>instance-attribute</code>","text":"<p>This asserts that the .target attribute is the real target of the instruction. This is only relevent in the edge case that the target is the next instruction in memory (address + size). The normal check for \"target\" checks that the target is NOT the next address in memory, and here we can assert that even if that is the case, we know that the jump really does just go to where self.target is.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.groups","title":"<code>groups: Set[int] = set(cs_insn.groups)</code>  <code>instance-attribute</code>","text":"<p>Capstone instruction groups that we belong to. Groups that apply to all architectures: CS_GRP_INVALID | CS_GRP_JUMP | CS_GRP_CALL | CS_GRP_RET | CS_GRP_INT | CS_GRP_IRET | CS_GRP_PRIVILEGE | CS_GRP_BRANCH_RELATIVE</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.has_jump_target","title":"<code>has_jump_target: bool</code>  <code>property</code>","text":"<p>True if we have determined that this instruction can explicitly change the program counter, and we have determined the jump target.</p> <p>Edge case - the jump target MAY be the next address in memory - so we check force_unconditional_jump_target</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.id","title":"<code>id: int = cs_insn.id</code>  <code>instance-attribute</code>","text":"<p>The underlying Capstone ID for the instruction Examples: X86_INS_JMP, X86_INS_CALL, RISCV_INS_C_JAL</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.is_conditional_jump","title":"<code>is_conditional_jump: bool</code>  <code>property</code>","text":"<p>True if this instruction can change the program counter conditionally.</p> <p>This is used, in part, to determine if the instruction deserves a \"checkmark\" in the disasm view.</p> <p>This does not imply that we have resolved the .target</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.is_conditional_jump_taken","title":"<code>is_conditional_jump_taken: bool</code>  <code>property</code>","text":"<p>True if this is a conditional jump, and we predicted that we will take the jump</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.is_unconditional_jump","title":"<code>is_unconditional_jump: bool</code>  <code>property</code>","text":"<p>True if we know the instruction can change the program counter, and does so unconditionally.</p> <p>This includes things like RET, CALL, and JMP (in x86).</p> <p>This property is used in enhancement to determine certain codepaths when resolving .next for this instruction.</p> <p>This does not imply that we have resolved the .target</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.jump_like","title":"<code>jump_like: bool</code>  <code>property</code>","text":"<p>True if this instruction is \"jump-like\", such as a JUMP, CALL, or RET. Basically, the PC is set to some target by means of this instruction.</p> <p>It may still be a conditional jump - this property does not indicate whether the jump is taken or not.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.mnemonic","title":"<code>mnemonic: str = cs_insn.mnemonic</code>  <code>instance-attribute</code>","text":"<p>Ex: 'MOV'</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.next","title":"<code>next: int = self.address + self.size</code>  <code>instance-attribute</code>","text":"<p>This is the address that the instruction pointer will be set to after using the \"nexti\" GDB command. This means it is the address of the next instruction to be executed in all cases except \"call\" instructions.</p> <p>Typically, it is <code>self.address + self.size</code> (the next instruction in memory)</p> <p>If it is a jump and we know it is taken, then it is the value of the jump target.</p> <p>Not set to \"call\" instruction targets, to indicate we will eventually (probably) return to this address</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.op_str","title":"<code>op_str: str = cs_insn.op_str</code>  <code>instance-attribute</code>","text":"<p>Ex: 'RAX, RDX'</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.operands","title":"<code>operands: List[EnhancedOperand] = [EnhancedOperand(op) for op in self.cs_insn.operands]</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.size","title":"<code>size: int = cs_insn.size</code>  <code>instance-attribute</code>","text":"<p>Length of the instruction</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.split","title":"<code>split: SplitType = SplitType.NO_SPLIT</code>  <code>instance-attribute</code>","text":"<p>The type of split in the disasm display this instruction causes:</p> Text Only<pre><code>NO_SPLIT            - no extra spacing between this and the next instruction\nBRANCH_TAKEN        - a newline with an arrow pointing down\nBRANCH_NOT_TAKEN    - an empty newline\n</code></pre>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.syscall","title":"<code>syscall: int | None = None</code>  <code>instance-attribute</code>","text":"<p>The syscall number for this instruction, if it is a syscall. Otherwise None.</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.syscall_name","title":"<code>syscall_name: str | None = None</code>  <code>instance-attribute</code>","text":"<p>The syscall name as a string</p> <p>Ex: \"openat\", \"read\"</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.target","title":"<code>target: int = None</code>  <code>instance-attribute</code>","text":"<p>This is target of instructions that change the PC, regardless of if it's conditional or not, and whether or not we take the jump. This includes \"call\" and all other instructions that set the PC</p> <p>If the instruction is not one that changes the PC, target is set to \"next\"</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.target_const","title":"<code>target_const: bool | None = None</code>  <code>instance-attribute</code>","text":"<p>Whether the target is a constant expression</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.target_string","title":"<code>target_string: str | None = None</code>  <code>instance-attribute</code>","text":"<p>String representation of the target address.</p> <p>Colorized symbol if a symbol exists at address, else colorized address</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.__init__","title":"<code>__init__(cs_insn)</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.op_count","title":"<code>op_count(op_type)</code>","text":"<p>Return number of operands having same operand Capstone type 'op_type'</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.PwndbgInstruction.op_find","title":"<code>op_find(op_type, position)</code>","text":"<p>Get the operand at position @position of all operands having the same type @op_type</p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType","title":"<code>SplitType</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType.BRANCH_NOT_TAKEN","title":"<code>BRANCH_NOT_TAKEN = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType.BRANCH_TAKEN","title":"<code>BRANCH_TAKEN = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.SplitType.NO_SPLIT","title":"<code>NO_SPLIT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.boolean_to_instruction_condition","title":"<code>boolean_to_instruction_condition(condition)</code>","text":""},{"location":"source/aglib/disasm/instruction/#pwndbg.aglib.disasm.instruction.make_simple_instruction","title":"<code>make_simple_instruction(address)</code>","text":"<p>Instantiate a PwndbgInstruction for an architecture that Capstone/pwndbg doesn't support (as defined in the CapstoneArch structure)</p>"},{"location":"source/aglib/disasm/mips/","title":"Mips","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.BRANCH_LIKELY_INSTRUCTIONS","title":"<code>BRANCH_LIKELY_INSTRUCTIONS = {MIPS_INS_BC0TL, MIPS_INS_BC1TL, MIPS_INS_BC0FL, MIPS_INS_BC1FL, MIPS_INS_BEQL, MIPS_INS_BGEZALL, MIPS_INS_BGEZL, MIPS_INS_BGTZL, MIPS_INS_BLEZL, MIPS_INS_BLTZALL, MIPS_INS_BLTZL, MIPS_INS_BNEL}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.CONDITION_RESOLVERS","title":"<code>CONDITION_RESOLVERS: Dict[int, Callable[[List[int]], bool]] = {MIPS_INS_BEQZ: lambda ops: ops[0] == 0, MIPS_INS_BNEZ: lambda ops: ops[0] != 0, MIPS_INS_BEQ: lambda ops: ops[0] == ops[1], MIPS_INS_BNE: lambda ops: ops[0] != ops[1], MIPS_INS_BGEZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &gt;= 0, MIPS_INS_BGEZAL: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &gt;= 0, MIPS_INS_BGTZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &gt; 0, MIPS_INS_BLEZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &lt;= 0, MIPS_INS_BLTZAL: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &lt; 0, MIPS_INS_BLTZ: lambda ops: bit_math.to_signed(ops[0], pwndbg.aglib.arch.ptrsize * 8) &lt; 0}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_BINARY_OPERATIONS","title":"<code>MIPS_BINARY_OPERATIONS = {MIPS_INS_ADD: '+', MIPS_INS_ADDI: '+', MIPS_INS_ADDIU: '+', MIPS_INS_ADDU: '+', MIPS_INS_DADD: '+', MIPS_INS_DADDI: '+', MIPS_INS_DADDIU: '+', MIPS_INS_DADDU: '+', MIPS_INS_SUB: '-', MIPS_INS_SUBU: '-', MIPS_INS_DSUB: '-', MIPS_INS_DSUBU: '-', MIPS_INS_ANDI: '&amp;', MIPS_INS_AND: '&amp;', MIPS_INS_ORI: '|', MIPS_INS_OR: '|', MIPS_INS_XOR: '^', MIPS_INS_XORI: '^', MIPS_INS_SLL: '&lt;&lt;', MIPS_INS_SLLV: '&lt;&lt;', MIPS_INS_DSLL: '&lt;&lt;', MIPS_INS_DSLLV: '&lt;&lt;', MIPS_INS_SRL: '&gt;&gt;', MIPS_INS_SRLV: '&gt;&gt;', MIPS_INS_DSRL: '&gt;&gt;', MIPS_INS_DSRLV: '&gt;&gt;'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_LOAD_INSTRUCTIONS","title":"<code>MIPS_LOAD_INSTRUCTIONS = {MIPS_INS_LB: -1, MIPS_INS_LBU: 1, MIPS_INS_LH: -2, MIPS_INS_LHU: 2, MIPS_INS_LW: -4, MIPS_INS_LWU: 4, MIPS_INS_LWPC: -4, MIPS_INS_LWUPC: 4, MIPS_INS_LD: -8, MIPS_INS_LDPC: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_SIMPLE_DESTINATION_INSTRUCTIONS","title":"<code>MIPS_SIMPLE_DESTINATION_INSTRUCTIONS = {MIPS_INS_CLO, MIPS_INS_CLZ, MIPS_INS_DCLO, MIPS_INS_DCLZ, MIPS_INS_LSA, MIPS_INS_DLSA, MIPS_INS_MFHI, MIPS_INS_MFLO, MIPS_INS_SEB, MIPS_INS_SEH, MIPS_INS_WSBH, MIPS_INS_SLT, MIPS_INS_SLTI, MIPS_INS_SLTIU, MIPS_INS_SLTU, MIPS_INS_MOVN, MIPS_INS_LDL, MIPS_INS_LDR, MIPS_INS_LWL, MIPS_INS_LWR}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.MIPS_STORE_INSTRUCTIONS","title":"<code>MIPS_STORE_INSTRUCTIONS = {MIPS_INS_SB: 1, MIPS_INS_SH: 2, MIPS_INS_SW: 4, MIPS_INS_SD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.assistant","title":"<code>assistant = DisassemblyAssistant('mips')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {MIPS_INS_MOVE: self._common_move_annotator, MIPS_INS_LI: self._common_move_annotator, MIPS_INS_LUI: self._lui_annotator}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/mips/#pwndbg.aglib.disasm.mips.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/ppc/","title":"Ppc","text":""},{"location":"source/aglib/disasm/riscv/","title":"Riscv","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_COMPRESSED_LOAD_INSTRUCTIONS","title":"<code>RISCV_COMPRESSED_LOAD_INSTRUCTIONS = {RISCV_INS_C_LW: -4, RISCV_INS_C_LD: 8, RISCV_INS_C_LDSP: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_COMPRESSED_STORE_INSTRUCTIONS","title":"<code>RISCV_COMPRESSED_STORE_INSTRUCTIONS = {RISCV_INS_C_SW: 4, RISCV_INS_C_SWSP: 4, RISCV_INS_C_SD: 8, RISCV_INS_C_SDSP: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_EMULATED_ANNOTATIONS","title":"<code>RISCV_EMULATED_ANNOTATIONS = {RISCV_INS_SLT, RISCV_INS_SLTU, RISCV_INS_SLTI, RISCV_INS_SLTIU}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_LOAD_INSTRUCTIONS","title":"<code>RISCV_LOAD_INSTRUCTIONS = {RISCV_INS_LB: -1, RISCV_INS_LH: -2, RISCV_INS_LW: -4, RISCV_INS_LBU: 1, RISCV_INS_LHU: 2, RISCV_INS_LWU: 4, RISCV_INS_LD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_MATH_INSTRUCTIONS","title":"<code>RISCV_MATH_INSTRUCTIONS = {RISCV_INS_ADDI: '+', RISCV_INS_ADD: '+', RISCV_INS_C_ADDI: '+', RISCV_INS_C_ADD: '+', RISCV_INS_SUB: '-', RISCV_INS_C_SUB: '-', RISCV_INS_XORI: '^', RISCV_INS_XOR: '^', RISCV_INS_C_XOR: '^', RISCV_INS_ORI: '|', RISCV_INS_OR: '|', RISCV_INS_C_OR: '|', RISCV_INS_ANDI: '&amp;', RISCV_INS_C_ANDI: '&amp;', RISCV_INS_AND: '&amp;', RISCV_INS_C_AND: '&amp;', RISCV_INS_SLLI: '&lt;&lt;', RISCV_INS_C_SLLI: '&lt;&lt;', RISCV_INS_SLL: '&lt;&lt;', RISCV_INS_SRLI: '&gt;&gt;', RISCV_INS_C_SRLI: '&gt;&gt;', RISCV_INS_SRL: '&gt;&gt;', RISCV_INS_SRAI: '&gt;&gt;s', RISCV_INS_C_SRAI: '&gt;&gt;s', RISCV_INS_SRA: '&gt;&gt;s', RISCV_INS_MUL: '*', RISCV_INS_MULH: '*', RISCV_INS_MULHSU: '*', RISCV_INS_MULHU: '*', RISCV_INS_DIV: '/', RISCV_INS_DIVU: '/', RISCV_INS_REM: '%', RISCV_INS_REMU: '%', RISCV_INS_C_ADDI4SPN: '+', RISCV_INS_C_ADDI16SP: '+', RISCV_INS_ADDIW: '+', RISCV_INS_ADDW: '+', RISCV_INS_SUBW: '-', RISCV_INS_SLLIW: '&lt;&lt;', RISCV_INS_SLLW: '&lt;&lt;', RISCV_INS_SRLIW: '&gt;&gt;', RISCV_INS_SRLW: '&gt;&gt;', RISCV_INS_SRAIW: '&gt;&gt;s', RISCV_INS_SRAW: '&gt;&gt;s', RISCV_INS_MULW: '*', RISCV_INS_DIVW: '/', RISCV_INS_DIVUW: '/', RISCV_INS_REMW: '%', RISCV_INS_REMUW: '%', RISCV_INS_C_ADDIW: '+', RISCV_INS_C_ADDW: '+', RISCV_INS_C_SUBW: '-'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.RISCV_STORE_INSTRUCTIONS","title":"<code>RISCV_STORE_INSTRUCTIONS = {RISCV_INS_SB: 1, RISCV_INS_SH: 2, RISCV_INS_SW: 4, RISCV_INS_SD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.assistant_rv32","title":"<code>assistant_rv32 = DisassemblyAssistant('rv32')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.assistant_rv64","title":"<code>assistant_rv64 = DisassemblyAssistant('rv64')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {RISCV_INS_AUIPC: self._auipc_annotator, RISCV_INS_C_MV: self._common_move_annotator, RISCV_INS_C_LI: self._common_move_annotator, RISCV_INS_LUI: self._lui_annotator, RISCV_INS_C_LUI: self._lui_annotator}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant.architecture","title":"<code>architecture = architecture</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/riscv/#pwndbg.aglib.disasm.riscv.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/sparc/","title":"Sparc","text":""},{"location":"source/aglib/disasm/sparc/#pwndbg.aglib.disasm.sparc.SPARC_LOAD_INSTRUCTIONS","title":"<code>SPARC_LOAD_INSTRUCTIONS = {SPARC_INS_LDUB: 1, SPARC_INS_LDSB: 1, SPARC_INS_LDUH: 2, SPARC_INS_LDSH: 2, SPARC_INS_LD: 4, SPARC_INS_LDD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/sparc/#pwndbg.aglib.disasm.sparc.SPARC_STORE_INSTRUCTIONS","title":"<code>SPARC_STORE_INSTRUCTIONS = {SPARC_INS_STB: 1, SPARC_INS_STH: 2, SPARC_INS_ST: 4, SPARC_INS_STD: 8}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/","title":"X86","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.X86_MATH_INSTRUCTIONS","title":"<code>X86_MATH_INSTRUCTIONS = {X86_INS_ADD: '+', X86_INS_SUB: '-', X86_INS_AND: '&amp;', X86_INS_OR: '|'}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.access","title":"<code>access = {v: kfor (k, v) in globals().items() if k.startswith('CS_AC_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.assistant","title":"<code>assistant = DisassemblyAssistant('x86-64')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.groups","title":"<code>groups = {v: kfor (k, v) in globals().items() if k.startswith('X86_GRP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.ops","title":"<code>ops = {v: kfor (k, v) in globals().items() if k.startswith('X86_OP_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.regs","title":"<code>regs = {v: kfor (k, v) in globals().items() if k.startswith('X86_REG_')}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant","title":"<code>DisassemblyAssistant</code>","text":"<p>               Bases: <code>DisassemblyAssistant</code></p>"},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.annotation_handlers","title":"<code>annotation_handlers: Dict[int, Callable[[PwndbgInstruction, Emulator], None]] = {X86_INS_MOV: self.handle_mov, X86_INS_MOVABS: self.handle_mov, X86_INS_MOVZX: self.handle_mov, X86_INS_MOVD: self.handle_mov, X86_INS_MOVQ: self.handle_mov, X86_INS_MOVSXD: self.handle_mov, X86_INS_MOVSX: self.handle_mov, X86_INS_MOVAPS: self.handle_vmovaps, X86_INS_VMOVAPS: self.handle_vmovaps, X86_INS_LEA: self.handle_lea, X86_INS_XCHG: self.handle_xchg, X86_INS_POP: self.handle_pop, X86_INS_CMP: self._common_cmp_annotator_builder('eflags', '-'), X86_INS_TEST: self._common_cmp_annotator_builder('eflags', '&amp;'), X86_INS_XOR: self.handle_xor, X86_INS_INC: self.handle_inc, X86_INS_DEC: self.handle_dec}</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.__init__","title":"<code>__init__(architecture)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_dec","title":"<code>handle_dec(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_inc","title":"<code>handle_inc(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_lea","title":"<code>handle_lea(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_mov","title":"<code>handle_mov(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_pop","title":"<code>handle_pop(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_vmovaps","title":"<code>handle_vmovaps(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_xchg","title":"<code>handle_xchg(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.handle_xor","title":"<code>handle_xor(instruction, emu)</code>","text":""},{"location":"source/aglib/disasm/x86/#pwndbg.aglib.disasm.x86.DisassemblyAssistant.memory_string_with_components_resolved","title":"<code>memory_string_with_components_resolved(instruction, op)</code>","text":""},{"location":"source/aglib/heap/__init__/","title":"init","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.current","title":"<code>current: pwndbg.aglib.heap.heap.MemoryAllocator | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.global_max_fast","title":"<code>global_max_fast = add_heap_param('global-max-fast', '0', 'the address of global_max_fast')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.heap_chain_limit","title":"<code>heap_chain_limit = add_heap_param('heap-dereference-limit', 8, 'number of chunks to dereference in each bin', param_class=pwndbg.lib.config.PARAM_UINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.heap_corruption_check_limit","title":"<code>heap_corruption_check_limit = add_heap_param('heap-corruption-check-limit', 64, 'amount of chunks to traverse (forwards and backwards) for the bin corruption check', param_class=pwndbg.lib.config.PARAM_UINTEGER)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.main_arena","title":"<code>main_arena = add_heap_param('main-arena', '0', 'the address of main_arena')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.mp_","title":"<code>mp_ = add_heap_param('mp', '0', 'the address of mp_')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.resolve_heap_via_heuristic","title":"<code>resolve_heap_via_heuristic = add_heap_param('resolve-heap-via-heuristic', 'auto', 'the strategy to resolve heap via heuristic', help_docstring=\"resolve-heap-via-heuristic can be:\\nauto    - pwndbg will try to use heuristics if debug symbols are missing\\nforce   - pwndbg will always try to use heuristics, even if debug symbols are available\\nnever   - pwndbg will never use heuristics to resolve the heap\\n\\nIf the output of the heap related command produces errors with heuristics, you can try manually setting the libc symbol addresses.\\nFor this, see the `heap_config` command output and set the `main_arena`, `mp_`, `global_max_fast`, `tcache` and `thread_arena` addresses.\\n\\nNote: pwndbg will generate more reliable results with proper debug symbols.\\nTherefore, when debug symbols are missing, you should try to install them first if you haven't already.\\n\\nThey can probably be installed via the package manager of your choice.\\nSee also: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html\\n\\nE.g. on Ubuntu/Debian you might need to do the following steps (for 64-bit and 32-bit binaries):\\nsudo apt-get install libc6-dbg\\nsudo dpkg --add-architecture i386\\nsudo apt-get install libc-dbg:i386\\n\\nIf you used setup.sh on Arch based distro you'll need to do a power cycle or set environment variable manually like this: export DEBUGINFOD_URLS=https://debuginfod.archlinux.org\\n\", param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['auto', 'force', 'never'])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.symbol_list","title":"<code>symbol_list = [main_arena, thread_arena, mp_, tcache, global_max_fast]</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.tcache","title":"<code>tcache = add_heap_param('tcache', '0', 'the address pointed by tcache')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.thread_arena","title":"<code>thread_arena = add_heap_param('thread-arena', '0', 'the address pointed by thread_arena')</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.add_heap_param","title":"<code>add_heap_param(name, default, set_show_doc, *, help_docstring='', param_class=None, enum_sequence=None)</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.reset","title":"<code>reset()</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.resolve_heap","title":"<code>resolve_heap(is_first_run=False)</code>","text":""},{"location":"source/aglib/heap/__init__/#pwndbg.aglib.heap.update","title":"<code>update()</code>","text":""},{"location":"source/aglib/heap/heap/","title":"Heap","text":""},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator","title":"<code>MemoryAllocator</code>","text":"<p>Heap abstraction layer.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.containing","title":"<code>containing(address)</code>","text":"<p>Returns the address of the allocation which contains 'address'.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to look up.</p> required <p>Returns:</p> Type Description <code>int</code> <p>An integer.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.is_initialized","title":"<code>is_initialized()</code>","text":"<p>Returns whether the allocator is initialized or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p>A boolean.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.libc_has_debug_syms","title":"<code>libc_has_debug_syms()</code>","text":"<p>Returns whether the libc has debug symbols or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p>A boolean.</p>"},{"location":"source/aglib/heap/heap/#pwndbg.aglib.heap.heap.MemoryAllocator.summarize","title":"<code>summarize(address, **kwargs)</code>","text":"<p>Returns a textual summary of the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address of the heap block to summarize.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string.</p>"},{"location":"source/aglib/heap/ptmalloc/","title":"Ptmalloc","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BINMAPSIZE","title":"<code>BINMAPSIZE = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HEAP_MAX_SIZE","title":"<code>HEAP_MAX_SIZE: int = None</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.IS_MMAPPED","title":"<code>IS_MMAPPED = 2</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NBINS","title":"<code>NBINS = 128</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NFASTBINS","title":"<code>NFASTBINS = 10</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NONCONTIGUOUS_BIT","title":"<code>NONCONTIGUOUS_BIT = 2</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NON_MAIN_ARENA","title":"<code>NON_MAIN_ARENA = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.NSMALLBINS","title":"<code>NSMALLBINS = 64</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.PREV_INUSE","title":"<code>PREV_INUSE = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SIZE_BITS","title":"<code>SIZE_BITS = PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.TCACHE_MAX_BINS","title":"<code>TCACHE_MAX_BINS = 64</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.TheType","title":"<code>TheType = TypeVar('TheType', pwndbg.dbg_mod.Type, typing.Type[pwndbg.aglib.heap.structs.CStruct2GDB])</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.TheValue","title":"<code>TheValue = TypeVar('TheValue', pwndbg.dbg_mod.Value, pwndbg.aglib.heap.structs.CStruct2GDB)</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena","title":"<code>Arena</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.__slots__","title":"<code>__slots__ = ('_gdbValue', 'address', '_is_main_arena', '_top', '_active_heap', '_heaps', '_mutex', '_flags', '_non_contiguous', '_have_fastchunks', '_fastbinsY', '_bins', '_binmap', '_next', '_next_free', '_system_mem')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.active_heap","title":"<code>active_heap: Heap</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.address","title":"<code>address = int(self._gdbValue.address)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.binmap","title":"<code>binmap: List[int]</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.bins","title":"<code>bins: List[int]</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.fastbinsY","title":"<code>fastbinsY: List[int]</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.flags","title":"<code>flags: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.have_fastchunks","title":"<code>have_fastchunks: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.heaps","title":"<code>heaps</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.is_main_arena","title":"<code>is_main_arena: bool</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.mutex","title":"<code>mutex: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.next","title":"<code>next: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.next_free","title":"<code>next_free: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.non_contiguous","title":"<code>non_contiguous: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.system_mem","title":"<code>system_mem: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.top","title":"<code>top: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.__init__","title":"<code>__init__(addr)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Arena.fastbins","title":"<code>fastbins()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin","title":"<code>Bin</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.bk_chain","title":"<code>bk_chain = bk_chain</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.count","title":"<code>count = count</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.fd_chain","title":"<code>fd_chain = fd_chain</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.is_corrupted","title":"<code>is_corrupted = is_corrupted</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.__init__","title":"<code>__init__(fd_chain, bk_chain=None, count=None, is_corrupted=False)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.contains_chunk","title":"<code>contains_chunk(chunk)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bin.size_to_display_name","title":"<code>size_to_display_name(size)</code>  <code>staticmethod</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType","title":"<code>BinType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.FAST","title":"<code>FAST = 'fastbins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.LARGE","title":"<code>LARGE = 'largebins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.NOT_IN_BIN","title":"<code>NOT_IN_BIN = 'not_in_bin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.SMALL","title":"<code>SMALL = 'smallbins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.TCACHE","title":"<code>TCACHE = 'tcachebins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.UNSORTED","title":"<code>UNSORTED = 'unsortedbin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.BinType.valid_fields","title":"<code>valid_fields()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins","title":"<code>Bins</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.bin_type","title":"<code>bin_type = bin_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.bins","title":"<code>bins: OrderedDictType[int | str, Bin] = OrderedDict()</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.__init__","title":"<code>__init__(bin_type)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Bins.contains_chunk","title":"<code>contains_chunk(size, chunk)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk","title":"<code>Chunk</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__slots__","title":"<code>__slots__ = ('_gdbValue', 'address', '_prev_size', '_size', '_real_size', '_flags', '_non_main_arena', '_is_mmapped', '_prev_inuse', '_fd', '_bk', '_fd_nextsize', '_bk_nextsize', '_heap', '_arena', '_is_top_chunk')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.address","title":"<code>address = int(self._gdbValue.address)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.arena","title":"<code>arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.bk","title":"<code>bk</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.bk_nextsize","title":"<code>bk_nextsize</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.fd","title":"<code>fd</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.fd_nextsize","title":"<code>fd_nextsize</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.flags","title":"<code>flags: Dict[str, bool] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.heap","title":"<code>heap: Heap</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.is_mmapped","title":"<code>is_mmapped: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.is_top_chunk","title":"<code>is_top_chunk</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.non_main_arena","title":"<code>non_main_arena: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.prev_inuse","title":"<code>prev_inuse: bool | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.prev_size","title":"<code>prev_size: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.real_size","title":"<code>real_size: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.size","title":"<code>size: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__contains__","title":"<code>__contains__(addr)</code>","text":"<p>This allow us to avoid extra constructions like 'if strart_addr &lt;= ptr &lt;= end_addr', etc.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__init__","title":"<code>__init__(addr, heap=None, arena=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.__match_renamed_field","title":"<code>__match_renamed_field(field)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Chunk.next_chunk","title":"<code>next_chunk()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField","title":"<code>ChunkField</code>","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.BK","title":"<code>BK = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.BK_NEXTSIZE","title":"<code>BK_NEXTSIZE = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.FD","title":"<code>FD = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.FD_NEXTSIZE","title":"<code>FD_NEXTSIZE = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.PREV_SIZE","title":"<code>PREV_SIZE = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.ChunkField.SIZE","title":"<code>SIZE = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap","title":"<code>DebugSymsHeap</code>","text":"<p>               Bases: <code>GlibcMemoryAllocator[Type, Value]</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.can_be_resolved","title":"<code>can_be_resolved = GlibcMemoryAllocator.libc_has_debug_syms</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.global_max_fast","title":"<code>global_max_fast: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.heap_info","title":"<code>heap_info: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.main_arena","title":"<code>main_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.mallinfo","title":"<code>mallinfo: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.malloc_chunk","title":"<code>malloc_chunk: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.malloc_par","title":"<code>malloc_par: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.malloc_state","title":"<code>malloc_state: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.mp","title":"<code>mp: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.tcache_entry","title":"<code>tcache_entry: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.tcache_perthread_struct","title":"<code>tcache_perthread_struct: pwndbg.dbg_mod.Type | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.thread_arena","title":"<code>thread_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.thread_cache","title":"<code>thread_cache: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":"<p>Locate a thread's tcache struct. If it doesn't have one, use the main thread's tcache.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.get_heap","title":"<code>get_heap(addr)</code>","text":"<p>Find &amp; read the heap_info struct belonging to the chunk at 'addr'.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.get_sbrk_heap_region","title":"<code>get_sbrk_heap_region()</code>","text":"<p>Return a Page object representing the sbrk heap region. Ensure the region's start address is aligned to SIZE_SZ * 2, which compensates for the presence of GLIBC_TUNABLES.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.get_tcache","title":"<code>get_tcache(tcache_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.has_tcache","title":"<code>has_tcache()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.DebugSymsHeap.is_initialized","title":"<code>is_initialized()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator","title":"<code>GlibcMemoryAllocator</code>","text":"<p>               Bases: <code>MemoryAllocator</code>, <code>Generic[TheType, TheValue]</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.arenas","title":"<code>arenas: Tuple[Arena, ...]</code>  <code>property</code>","text":"<p>Return a tuple of all current arenas.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.global_max_fast","title":"<code>global_max_fast: int | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.heap_info","title":"<code>heap_info: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup_32","title":"<code>largebin_reverse_lookup_32 = (512, 576, 640, 704, 768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 3072, 3584, 4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728, 10240, 10752, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 65536, 98304, 131072, 163840, 262144, 524288)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup_32_big","title":"<code>largebin_reverse_lookup_32_big = (1008, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 2944, 3072, 3584, 4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728, 10240, 10752, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 65536, 98304, 131072, 163840, 262144, 524288)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup_64","title":"<code>largebin_reverse_lookup_64 = (1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 3008, 3072, 3136, 3584, 4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728, 10240, 10752, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 65536, 98304, 131072, 163840, 262144, 524288)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.main_arena","title":"<code>main_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.mallinfo","title":"<code>mallinfo: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_align_mask","title":"<code>malloc_align_mask: int</code>  <code>property</code>","text":"<p>Corresponds to MALLOC_ALIGN_MASK in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_alignment","title":"<code>malloc_alignment: int</code>  <code>property</code>","text":"<p>Corresponds to MALLOC_ALIGNMENT in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_chunk","title":"<code>malloc_chunk: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_par","title":"<code>malloc_par: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.malloc_state","title":"<code>malloc_state: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.min_chunk_size","title":"<code>min_chunk_size: int</code>  <code>property</code>","text":"<p>Corresponds to MIN_CHUNK_SIZE in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.minsize","title":"<code>minsize: int</code>  <code>property</code>","text":"<p>Corresponds to MINSIZE in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.mp","title":"<code>mp: TheValue | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.multithreaded","title":"<code>multithreaded: bool</code>  <code>property</code>","text":"<p>Is malloc operating within a multithreaded environment.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.size_sz","title":"<code>size_sz: int</code>  <code>property</code>","text":"<p>Corresponds to SIZE_SZ in glibc malloc.c</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcache_entry","title":"<code>tcache_entry: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcache_next_offset","title":"<code>tcache_next_offset: int</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcache_perthread_struct","title":"<code>tcache_perthread_struct: TheType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.thread_arena","title":"<code>thread_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.thread_cache","title":"<code>thread_cache: TheValue | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.bin_at","title":"<code>bin_at(index, arena_addr=None)</code>","text":"<p>Modeled after glibc's bin_at function - so starts indexing from 1 https://bazaar.launchpad.net/~ubuntu-branches/ubuntu/trusty/eglibc/trusty-security/view/head:/malloc/malloc.c#L1394</p> <p>bin_at(1) returns the unsorted bin</p> <p>Bin 1          - Unsorted BiN Bin 2 to 63    - Smallbins Bin 64 to 126  - Largebins</p> <p>Returns: tuple(chain_from_bin_fd, chain_from_bin_bk, is_chain_corrupted) or None</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.can_be_resolved","title":"<code>can_be_resolved()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.check_chain_corrupted","title":"<code>check_chain_corrupted(chain_fd, chain_bk)</code>","text":"<p>Checks if the doubly linked list (of a {unsorted, small, large} bin) defined by chain_fd, chain_bk is corrupted.</p> <p>Even if the chains do not cover the whole bin, they still are expected to be of the same length.</p> <p>Returns True if the bin is certainly corrupted, otherwise False.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.chunk_flags","title":"<code>chunk_flags(size)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.chunk_key_offset","title":"<code>chunk_key_offset(key)</code>","text":"<p>Find the index of a field in the malloc_chunk struct.</p> 64bit example <p>prev_size == 0 size      == 8 fd        == 16 bk        == 24 ...</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.fastbin_index","title":"<code>fastbin_index(size)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.fastbins","title":"<code>fastbins(arena_addr=None)</code>","text":"<p>Returns: chain or None</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_bins","title":"<code>get_bins(bin_type, addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_heap","title":"<code>get_heap(addr)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_region","title":"<code>get_region(addr)</code>","text":"<p>Find the memory map containing 'addr'.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_sbrk_heap_region","title":"<code>get_sbrk_heap_region()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.get_tcache","title":"<code>get_tcache(tcache_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.has_tcache","title":"<code>has_tcache()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.is_initialized","title":"<code>is_initialized()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.is_statically_linked","title":"<code>is_statically_linked()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index","title":"<code>largebin_index(sz)</code>","text":"<p>Pick the appropriate largebin_index_ function for this architecture.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index_32","title":"<code>largebin_index_32(sz)</code>","text":"<p>Modeled on the GLIBC malloc largebin_index_32 macro.</p> <p>https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=f7cd29bc2f93e1082ee77800bd64a4b2a2897055;hb=9ea3686266dca3f004ba874745a4087a89682617#l1414</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index_32_big","title":"<code>largebin_index_32_big(sz)</code>","text":"<p>Modeled on the GLIBC malloc largebin_index_32_big macro.</p> <p>https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=f7cd29bc2f93e1082ee77800bd64a4b2a2897055;hb=9ea3686266dca3f004ba874745a4087a89682617#l1422</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_index_64","title":"<code>largebin_index_64(sz)</code>","text":"<p>Modeled on the GLIBC malloc largebin_index_64 macro.</p> <p>https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=f7cd29bc2f93e1082ee77800bd64a4b2a2897055;hb=9ea3686266dca3f004ba874745a4087a89682617#l1433</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_reverse_lookup","title":"<code>largebin_reverse_lookup(index)</code>","text":"<p>Pick the appropriate largebin_reverse_lookup_ function for this architecture.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebin_size_range_from_index","title":"<code>largebin_size_range_from_index(index)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.largebins","title":"<code>largebins(arena_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.libc_has_debug_syms","title":"<code>libc_has_debug_syms()</code>","text":"<p>The <code>struct malloc_chunk</code> comes from debugging symbols and it will not be there for statically linked binaries</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.smallbins","title":"<code>smallbins(arena_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.tcachebins","title":"<code>tcachebins(tcache_addr=None)</code>","text":"<p>Returns: tuple(chain, count) or None</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.GlibcMemoryAllocator.unsortedbin","title":"<code>unsortedbin(arena_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap","title":"<code>Heap</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__slots__","title":"<code>__slots__ = ('_gdbValue', 'arena', '_memory_region', 'start', 'end', '_prev', 'first_chunk')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.arena","title":"<code>arena = main_arena if arena is None else arena</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.end","title":"<code>end: int = self._memory_region.end</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.first_chunk","title":"<code>first_chunk = Chunk(self.start)</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.prev","title":"<code>prev</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.start","title":"<code>start: int = self._memory_region.start</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__contains__","title":"<code>__contains__(addr)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__init__","title":"<code>__init__(addr, arena=None)</code>","text":"<p>Build a Heap object given an address on that heap. Heap regions are treated differently depending on their arena: 1) main_arena - uses the sbrk heap 2) non-main arena - heap starts after its heap_info struct (and possibly an arena) 3) non-contiguous main_arena - just a memory region 4) no arena - for fake/mmapped chunks</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.Heap.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap","title":"<code>HeuristicHeap</code>","text":"<p>               Bases: <code>GlibcMemoryAllocator[Type['pwndbg.aglib.heap.structs.CStruct2GDB'], 'pwndbg.aglib.heap.structs.CStruct2GDB']</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.global_max_fast","title":"<code>global_max_fast: int</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.heap_info","title":"<code>heap_info: Type['pwndbg.aglib.heap.structs.HeapInfo'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.main_arena","title":"<code>main_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.mallinfo","title":"<code>mallinfo: Type['pwndbg.aglib.heap.structs.CStruct2GDB'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.malloc_chunk","title":"<code>malloc_chunk: Type['pwndbg.aglib.heap.structs.MallocChunk'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.malloc_par","title":"<code>malloc_par: Type['pwndbg.aglib.heap.structs.MallocPar'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.malloc_state","title":"<code>malloc_state: Type['pwndbg.aglib.heap.structs.MallocState'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.mp","title":"<code>mp: 'pwndbg.aglib.heap.structs.CStruct2GDB'</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.struct_module","title":"<code>struct_module: types.ModuleType | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.tcache_entry","title":"<code>tcache_entry: Type['pwndbg.aglib.heap.structs.TcacheEntry'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.tcache_perthread_struct","title":"<code>tcache_perthread_struct: Type['pwndbg.aglib.heap.structs.TcachePerthreadStruct'] | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.thread_arena","title":"<code>thread_arena: Arena | None</code>  <code>property</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.thread_cache","title":"<code>thread_cache: 'pwndbg.aglib.heap.structs.TcachePerthreadStruct' | None</code>  <code>property</code>","text":"<p>Locate a thread's tcache struct. We try to find its address in Thread Local Storage (TLS) first, and if that fails, we guess it's at the first chunk of the heap.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.brute_force_thread_local_variable_near_tls_base","title":"<code>brute_force_thread_local_variable_near_tls_base(tls_address, validator)</code>","text":"<p>Brute force the thread-local variable near the TLS base address that can pass the validator.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.brute_force_tls_reference_in_got_section","title":"<code>brute_force_tls_reference_in_got_section(tls_address, validator)</code>","text":"<p>Brute force the TLS-reference in the .got section to that can pass the validator.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.can_be_resolved","title":"<code>can_be_resolved()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.get_heap","title":"<code>get_heap(addr)</code>","text":"<p>Find &amp; read the heap_info struct belonging to the chunk at 'addr'.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.get_sbrk_heap_region","title":"<code>get_sbrk_heap_region()</code>","text":"<p>Return a Page object representing the sbrk heap region. Ensure the region's start address is aligned to SIZE_SZ * 2, which compensates for the presence of GLIBC_TUNABLES. This heuristic version requires some sanity checks and may raise SymbolUnresolvableError if malloc's <code>mp_</code> struct can't be resolved.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.get_tcache","title":"<code>get_tcache(tcache_addr=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.has_tcache","title":"<code>has_tcache()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.is_initialized","title":"<code>is_initialized()</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.prompt_for_brute_force_thread_arena_permission","title":"<code>prompt_for_brute_force_thread_arena_permission()</code>","text":"<p>Check if the user wants to brute force the thread_arena's value.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.prompt_for_brute_force_thread_cache_permission","title":"<code>prompt_for_brute_force_thread_cache_permission()</code>","text":"<p>Check if the user wants to brute force the tcache's value.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.HeuristicHeap.prompt_for_tls_address","title":"<code>prompt_for_tls_address()</code>","text":"<p>Check if we can determine the TLS address and return it.</p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SymbolUnresolvableError","title":"<code>SymbolUnresolvableError</code>","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SymbolUnresolvableError.symbol","title":"<code>symbol = symbol</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.SymbolUnresolvableError.__init__","title":"<code>__init__(symbol)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.fetch_chunk_metadata","title":"<code>fetch_chunk_metadata(address, include_only_fields=None)</code>","text":""},{"location":"source/aglib/heap/ptmalloc/#pwndbg.aglib.heap.ptmalloc.heap_for_ptr","title":"<code>heap_for_ptr(ptr)</code>","text":"<p>Round a pointer to a chunk down to find its corresponding heap_info struct, the pointer must point inside a heap which does not belong to the main arena.</p>"},{"location":"source/aglib/heap/structs/","title":"Structs","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.BINMAPSIZE","title":"<code>BINMAPSIZE = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.C2GDB_MAPPING","title":"<code>C2GDB_MAPPING = {ctypes.c_char: pwndbg.aglib.typeinfo.char, ctypes.c_int8: pwndbg.aglib.typeinfo.int8, ctypes.c_int16: pwndbg.aglib.typeinfo.int16, ctypes.c_int32: pwndbg.aglib.typeinfo.int32, ctypes.c_int64: pwndbg.aglib.typeinfo.int64, ctypes.c_uint8: pwndbg.aglib.typeinfo.uint8, ctypes.c_uint16: pwndbg.aglib.typeinfo.uint16, ctypes.c_uint32: pwndbg.aglib.typeinfo.uint32, ctypes.c_uint64: pwndbg.aglib.typeinfo.uint64, c_pvoid: pwndbg.aglib.typeinfo.pvoid, c_size_t: pwndbg.aglib.typeinfo.size_t}</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_MMAP_MAX","title":"<code>DEFAULT_MMAP_MAX = 65536</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_MMAP_THRESHOLD","title":"<code>DEFAULT_MMAP_THRESHOLD = 128 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_MP_","title":"<code>DEFAULT_MP_ = MallocPar._c_struct()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_PAGE_SIZE","title":"<code>DEFAULT_PAGE_SIZE = 4096</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_TOP_PAD","title":"<code>DEFAULT_TOP_PAD = 131072</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.DEFAULT_TRIM_THRESHOLD","title":"<code>DEFAULT_TRIM_THRESHOLD = 128 * 1024</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.GLIBC_VERSION","title":"<code>GLIBC_VERSION = pwndbg.glibc.get_version()</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MALLOC_ALIGN","title":"<code>MALLOC_ALIGN = 16</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MALLOC_ALIGN_MASK","title":"<code>MALLOC_ALIGN_MASK = MALLOC_ALIGN - 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MAX_FAST_SIZE","title":"<code>MAX_FAST_SIZE = 80 * SIZE_SZ // 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MINSIZE","title":"<code>MINSIZE = pwndbg.aglib.arch.ptrsize * 4</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.NBINS","title":"<code>NBINS = 128</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.NFASTBINS","title":"<code>NFASTBINS = fastbin_index(request2size(MAX_FAST_SIZE)) + 1</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.PTR","title":"<code>PTR = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.SIZE_SZ","title":"<code>SIZE_SZ = pwndbg.aglib.arch.ptrsize</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.SIZE_T","title":"<code>SIZE_T = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TCACHE_FILL_COUNT","title":"<code>TCACHE_FILL_COUNT = 7</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TCACHE_MAX_BINS","title":"<code>TCACHE_MAX_BINS = 64</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.long_double_alignment","title":"<code>long_double_alignment = pwndbg.aglib.typeinfo.lookup_types('long double').alignof</code>  <code>module-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB","title":"<code>CStruct2GDB</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.address","title":"<code>address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.code","title":"<code>code = pwndbg.dbg_mod.TypeCode.STRUCT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.type","title":"<code>type</code>  <code>property</code>","text":"<p>Returns type(self) to make it compatible with the <code>pwndbg.dbg_mod.Value</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__getattr__","title":"<code>__getattr__(key)</code>","text":"<p>Returns the value of the specified field as a <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Returns the value of the specified field as a <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__init__","title":"<code>__init__(address)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__int__","title":"<code>__int__()</code>","text":"<p>Returns the address of the C struct.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the C struct like <code>pwndbg.dbg_mod.Value</code> does.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.fields","title":"<code>fields()</code>  <code>classmethod</code>","text":"<p>Return fields of the struct to make it compatible with the <code>pwndbg.dbg_mod.Type</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.get_field_address","title":"<code>get_field_address(field)</code>","text":"<p>Returns the address of the specified field.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.get_field_offset","title":"<code>get_field_offset(field)</code>  <code>classmethod</code>","text":"<p>Returns the offset of the specified field.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.has_field","title":"<code>has_field(field)</code>  <code>classmethod</code>","text":"<p>Checks whether a field exists to make it compatible with the <code>pwndbg.dbg_mod.Type</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.items","title":"<code>items()</code>","text":"<p>Returns a tuple of (field name, field value) pairs.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.keys","title":"<code>keys()</code>  <code>classmethod</code>","text":"<p>Return a list of the names of the fields in the struct to make it compatible with the <code>pwndbg.dbg_mod.Type</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.read_field","title":"<code>read_field(field)</code>","text":"<p>Returns the value of the specified field as a <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.CStruct2GDB.unqualified","title":"<code>unqualified()</code>  <code>classmethod</code>","text":"<p>Returns cls to make it compatible with the <code>gdb.types.has_field()</code> interface.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField","title":"<code>FakeGDBField</code>","text":"<p>Fake gdb.Field for compatibility</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.artificial","title":"<code>artificial = artificial</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.bitpos","title":"<code>bitpos = bitpos</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.bitsize","title":"<code>bitsize = bitsize</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.enumval","title":"<code>enumval = enumval</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.is_base_class","title":"<code>is_base_class = is_base_class</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.parent_type","title":"<code>parent_type = parent_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.type","title":"<code>type = type</code>  <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.FakeGDBField.__init__","title":"<code>__init__(bitpos, name, type, parent_type, enumval=None, artificial=False, is_base_class=False, bitsize=0)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.HeapInfo","title":"<code>HeapInfo</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents heap_info struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.HeapInfo.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocChunk","title":"<code>MallocChunk</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents malloc_chunk struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocChunk.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocPar","title":"<code>MallocPar</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents the malloc_par struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocPar.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocState","title":"<code>MallocState</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents malloc_state struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.MallocState.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcacheEntry","title":"<code>TcacheEntry</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents the tcache_entry struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcacheEntry.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcachePerthreadStruct","title":"<code>TcachePerthreadStruct</code>","text":"<p>               Bases: <code>CStruct2GDB</code></p> <p>This class represents tcache_perthread_struct with interface compatible with <code>pwndbg.dbg_mod.Value</code>.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.TcachePerthreadStruct.sizeof","title":"<code>sizeof = ctypes.sizeof(_c_struct)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_heap_info","title":"<code>c_heap_info</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents heap_info struct as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/arena.c#L53</p> <p>typedef struct _heap_info {     mstate ar_ptr; /* Arena for this heap. /     struct _heap_info *prev; / Previous heap. /     size_t size;   / Current size in bytes. /     size_t mprotect_size; / Size in bytes that has been mprotected                             PROT_READ|PROT_WRITE.  /     / Make sure the following data is properly aligned, particularly         that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of         MALLOC_ALIGNMENT. */     char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; } heap_info;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_chunk","title":"<code>c_malloc_chunk</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_chunk struct as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L1154</p> <p>struct malloc_chunk {</p> Text Only<pre><code>INTERNAL_SIZE_T      mchunk_prev_size;  /* Size of previous chunk (if free).  */\nINTERNAL_SIZE_T      mchunk_size;       /* Size in bytes, including overhead. */\n\nstruct malloc_chunk* fd;         /* double links -- used only if free. */\nstruct malloc_chunk* bk;\n\n/* Only used for large blocks: pointer to next larger size.  */\nstruct malloc_chunk* fd_nextsize; /* double links -- used only if free. */\nstruct malloc_chunk* bk_nextsize;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_12","title":"<code>c_malloc_par_2_12</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &lt; 2.15 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.12/malloc/malloc.c#L2402-L2433</p> <p>struct malloc_par { /* Tunable parameters */ unsigned long    trim_threshold; INTERNAL_SIZE_T  top_pad; INTERNAL_SIZE_T  mmap_threshold;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_12--ifdef-per_thread","title":"ifdef PER_THREAD","text":"<p>INTERNAL_SIZE_T  arena_test; INTERNAL_SIZE_T  arena_max;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_12--endif","title":"endif","text":"<p>/* Memory map support / int              n_mmaps; int              n_mmaps_max; int              max_n_mmaps; / the mmap_threshold is dynamic, until the user sets     it manually, at which point we need to disable any     dynamic behavior. */ int              no_dyn_threshold;</p> <p>/* Cache malloc_getpagesize */ unsigned int     pagesize;</p> <p>/* Statistics / INTERNAL_SIZE_T  mmapped_mem; /*INTERNAL_SIZE_T  sbrked_mem;/ /INTERNAL_SIZE_T  max_sbrked_mem;/ INTERNAL_SIZE_T  max_mmapped_mem; INTERNAL_SIZE_T  max_total_mem; /* only kept for NO_THREADS */</p> <p>/* First address handed out by MORECORE/sbrk.  / char            sbrk_base; };</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_23","title":"<code>c_malloc_par_2_23</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &lt; 2.24 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.23/malloc/malloc.c#L1726</p> <p>struct malloc_par { /* Tunable parameters */ unsigned long trim_threshold; INTERNAL_SIZE_T top_pad; INTERNAL_SIZE_T mmap_threshold; INTERNAL_SIZE_T arena_test; INTERNAL_SIZE_T arena_max;</p> <p>/* Memory map support / int n_mmaps; int n_mmaps_max; int max_n_mmaps; / the mmap_threshold is dynamic, until the user sets     it manually, at which point we need to disable any     dynamic behavior. */ int no_dyn_threshold;</p> <p>/* Statistics / INTERNAL_SIZE_T mmapped_mem; /*INTERNAL_SIZE_T  sbrked_mem;/ /INTERNAL_SIZE_T  max_sbrked_mem;/ INTERNAL_SIZE_T max_mmapped_mem; INTERNAL_SIZE_T max_total_mem;  /* only kept for NO_THREADS */</p> <p>/* First address handed out by MORECORE/sbrk.  */ char *sbrk_base; };</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_24","title":"<code>c_malloc_par_2_24</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &gt;= 2.24 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.25/malloc/malloc.c#L1690 https://github.com/bminor/glibc/blob/glibc-2.24/malloc/malloc.c#L1719</p> <p>struct malloc_par {     /* Tunable parameters */     unsigned long trim_threshold;     INTERNAL_SIZE_T top_pad;     INTERNAL_SIZE_T mmap_threshold;     INTERNAL_SIZE_T arena_test;     INTERNAL_SIZE_T arena_max;</p> Text Only<pre><code>/* Memory map support */\nint n_mmaps;\nint n_mmaps_max;\nint max_n_mmaps;\n/* the mmap_threshold is dynamic, until the user sets\n    it manually, at which point we need to disable any\n    dynamic behavior. */\nint no_dyn_threshold;\n\n/* Statistics */\nINTERNAL_SIZE_T mmapped_mem;\nINTERNAL_SIZE_T max_mmapped_mem;\n\n/* First address handed out by MORECORE/sbrk.  */\nchar *sbrk_base;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_26","title":"<code>c_malloc_par_2_26</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &gt;= 2.26 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L1875</p> <p>struct malloc_par {     /* Tunable parameters */     unsigned long trim_threshold;     INTERNAL_SIZE_T top_pad;     INTERNAL_SIZE_T mmap_threshold;     INTERNAL_SIZE_T arena_test;     INTERNAL_SIZE_T arena_max;</p> Text Only<pre><code>/* Memory map support */\nint n_mmaps;\nint n_mmaps_max;\nint max_n_mmaps;\n/* the mmap_threshold is dynamic, until the user sets\n    it manually, at which point we need to disable any\n    dynamic behavior. */\nint no_dyn_threshold;\n\n/* Statistics */\nINTERNAL_SIZE_T mmapped_mem;\nINTERNAL_SIZE_T max_mmapped_mem;\n\n/* First address handed out by MORECORE/sbrk.  */\nchar *sbrk_base;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_26--if-use_tcache","title":"if USE_TCACHE","text":"Text Only<pre><code>/* Maximum number of buckets to use.  */\nsize_t tcache_bins;\nsize_t tcache_max_bytes;\n/* Maximum number of chunks in each bucket.  */\nsize_t tcache_count;\n/* Maximum number of chunks to remove from the unsorted list, which\n    aren't used to prefill the cache.  */\nsize_t tcache_unsorted_limit;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_26--endif","title":"endif","text":"<p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35","title":"<code>c_malloc_par_2_35</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the malloc_par struct for GLIBC &gt;= 2.35 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.35/malloc/malloc.c#L1874</p> <p>struct malloc_par {     /* Tunable parameters */     unsigned long trim_threshold;     INTERNAL_SIZE_T top_pad;     INTERNAL_SIZE_T mmap_threshold;     INTERNAL_SIZE_T arena_test;     INTERNAL_SIZE_T arena_max;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--if-have_tunables","title":"if HAVE_TUNABLES","text":"Text Only<pre><code>/* Transparent Large Page support.  */\nINTERNAL_SIZE_T thp_pagesize;\n/* A value different than 0 means to align mmap allocation to hp_pagesize\n    add hp_flags on flags.  */\nINTERNAL_SIZE_T hp_pagesize;\nint hp_flags;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--endif","title":"endif","text":"Text Only<pre><code>/* Memory map support */\nint n_mmaps;\nint n_mmaps_max;\nint max_n_mmaps;\n/* the mmap_threshold is dynamic, until the user sets\n    it manually, at which point we need to disable any\n    dynamic behavior. */\nint no_dyn_threshold;\n\n/* Statistics */\nINTERNAL_SIZE_T mmapped_mem;\nINTERNAL_SIZE_T max_mmapped_mem;\n\n/* First address handed out by MORECORE/sbrk.  */\nchar *sbrk_base;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--if-use_tcache","title":"if USE_TCACHE","text":"Text Only<pre><code>/* Maximum number of buckets to use.  */\nsize_t tcache_bins;\nsize_t tcache_max_bytes;\n/* Maximum number of chunks in each bucket.  */\nsize_t tcache_count;\n/* Maximum number of chunks to remove from the unsorted list, which\n    aren't used to prefill the cache.  */\nsize_t tcache_unsorted_limit;\n</code></pre>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_par_2_35--endif_1","title":"endif","text":"<p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12","title":"<code>c_malloc_state_2_12</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_state struct for GLIBC &lt; 2.22 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.12/malloc/malloc.c#L2362-L2400</p> <p>struct malloc_state { /* Serialize access.  */ mutex_t mutex;</p> <p>/* Flags (formerly in max_fast).  */ int flags;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--if-thread_stats","title":"if THREAD_STATS","text":"<p>/* Statistics for locking.  Only used if THREAD_STATS is defined.  */ long stat_lock_direct, stat_lock_loop, stat_lock_wait;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--endif","title":"endif","text":"<p>/* Fastbins */ mfastbinptr      fastbinsY[NFASTBINS];</p> <p>/* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr        top;</p> <p>/* The remainder from the most recent split of a small request */ mchunkptr        last_remainder;</p> <p>/* Normal bins packed as described above */ mchunkptr        bins[NBINS * 2 - 2];</p> <p>/* Bitmap of bins */ unsigned int     binmap[BINMAPSIZE];</p> <p>/* Linked list */ struct malloc_state *next;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--ifdef-per_thread","title":"ifdef PER_THREAD","text":"<p>/* Linked list for free arenas.  */ struct malloc_state *next_free;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_12--endif_1","title":"endif","text":"<p>/* Memory allocated from the system in this arena.  */ INTERNAL_SIZE_T system_mem; INTERNAL_SIZE_T max_system_mem; };</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_26","title":"<code>c_malloc_state_2_26</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_state struct for GLIBC &lt; 2.27 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/1c9a5c270d8b66f30dcfaf1cb2d6cf39d3e18369/malloc/malloc.c#L1678-L1716</p> <p>struct malloc_state {     /* Serialize access.  */     __libc_lock_define (, mutex);</p> Text Only<pre><code>/* Flags (formerly in max_fast).  */\nint flags;\n\n/* Fastbins */\nmfastbinptr fastbinsY[NFASTBINS];\n\n/* Base of the topmost chunk -- not otherwise kept in a bin */\nmchunkptr top;\n\n/* The remainder from the most recent split of a small request */\nmchunkptr last_remainder;\n\n/* Normal bins packed as described above */\nmchunkptr bins[NBINS * 2 - 2];\n\n/* Bitmap of bins */\nunsigned int binmap[BINMAPSIZE];\n\n/* Linked list */\nstruct malloc_state *next;\n\n/* Linked list for free arenas.  Access to this field is serialized\n    by free_list_lock in arena.c.  */\nstruct malloc_state *next_free;\n\n/* Number of threads attached to this arena.  0 if the arena is on\n    the free list.  Access to this field is serialized by\n    free_list_lock in arena.c.  */\nINTERNAL_SIZE_T attached_threads;\n\n/* Memory allocated from the system in this arena.  */\nINTERNAL_SIZE_T system_mem;\nINTERNAL_SIZE_T max_system_mem;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_malloc_state_2_27","title":"<code>c_malloc_state_2_27</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents malloc_state struct for GLIBC &gt;= 2.27 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L1831</p> <p>struct malloc_state {     /* Serialize access.  */     __libc_lock_define (, mutex);</p> Text Only<pre><code>/* Flags (formerly in max_fast).  */\nint flags;\n\n/* Set if the fastbin chunks contain recently inserted free blocks.  */\n/* Note this is a bool but not all targets support atomics on booleans.  */\nint have_fastchunks;\n\n/* Fastbins */\nmfastbinptr fastbinsY[NFASTBINS];\n\n/* Base of the topmost chunk -- not otherwise kept in a bin */\nmchunkptr top;\n\n/* The remainder from the most recent split of a small request */\nmchunkptr last_remainder;\n\n/* Normal bins packed as described above */\nmchunkptr bins[NBINS * 2 - 2];\n\n/* Bitmap of bins */\nunsigned int binmap[BINMAPSIZE];\n\n/* Linked list */\nstruct malloc_state *next;\n\n/* Linked list for free arenas.  Access to this field is serialized\n    by free_list_lock in arena.c.  */\nstruct malloc_state *next_free;\n\n/* Number of threads attached to this arena.  0 if the arena is on\n    the free list.  Access to this field is serialized by\n    free_list_lock in arena.c.  */\nINTERNAL_SIZE_T attached_threads;\n\n/* Memory allocated from the system in this arena.  */\nINTERNAL_SIZE_T system_mem;\nINTERNAL_SIZE_T max_system_mem;\n</code></pre> <p>};</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_pvoid","title":"<code>c_pvoid</code>","text":"<p>               Bases: <code>PTR</code></p> <p>Represents a pointer.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_size_t","title":"<code>c_size_t</code>","text":"<p>               Bases: <code>SIZE_T</code></p> <p>Represents a size_t.</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_entry_2_28","title":"<code>c_tcache_entry_2_28</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the tcache_entry struct for GLIBC &lt; 2.29 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.28/malloc/malloc.c#L2888</p> <p>typedef struct tcache_entry {     struct tcache_entry *next; } tcache_entry;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_entry_2_29","title":"<code>c_tcache_entry_2_29</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the tcache_entry struct for GLIBC &gt;= 2.29 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L3013</p> <p>typedef struct tcache_entry {     struct tcache_entry next;     / This field exists to detect double frees.  */     uintptr_t key; } tcache_entry;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_perthread_struct_2_29","title":"<code>c_tcache_perthread_struct_2_29</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents tcache_perthread_struct for GLIBC &lt; 2.30 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.29/malloc/malloc.c#L2916</p> <p>typedef struct tcache_perthread_struct {     char counts[TCACHE_MAX_BINS];     tcache_entry *entries[TCACHE_MAX_BINS]; } tcache_perthread_struct;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.c_tcache_perthread_struct_2_30","title":"<code>c_tcache_perthread_struct_2_30</code>","text":"<p>               Bases: <code>Structure</code></p> <p>This class represents the tcache_perthread_struct for GLIBC &gt;= 2.30 as a ctypes struct.</p> <p>https://github.com/bminor/glibc/blob/glibc-2.34/malloc/malloc.c#L3025</p> <p>typedef struct tcache_perthread_struct {     uint16_t counts[TCACHE_MAX_BINS];     tcache_entry *entries[TCACHE_MAX_BINS]; } tcache_perthread_struct;</p>"},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.fastbin_index","title":"<code>fastbin_index(size)</code>","text":""},{"location":"source/aglib/heap/structs/#pwndbg.aglib.heap.structs.request2size","title":"<code>request2size(req)</code>","text":""},{"location":"source/color/__init__/","title":"init","text":""},{"location":"source/color/__init__/#pwndbg.color.BLACK","title":"<code>BLACK = '\\x1b[30m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.BLUE","title":"<code>BLUE = '\\x1b[34m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.BOLD","title":"<code>BOLD = '\\x1b[1m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.CYAN","title":"<code>CYAN = '\\x1b[36m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.FOREGROUND","title":"<code>FOREGROUND = '\\x1b[39m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.GRAY","title":"<code>GRAY = '\\x1b[90m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.GREEN","title":"<code>GREEN = '\\x1b[32m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.GREY","title":"<code>GREY = '\\x1b[90m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_BLUE","title":"<code>LIGHT_BLUE = '\\x1b[94m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_CYAN","title":"<code>LIGHT_CYAN = '\\x1b[96m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_GRAY","title":"<code>LIGHT_GRAY = '\\x1b[37m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_GREEN","title":"<code>LIGHT_GREEN = '\\x1b[92m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_GREY","title":"<code>LIGHT_GREY = '\\x1b[37m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_PURPLE","title":"<code>LIGHT_PURPLE = '\\x1b[95m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_RED","title":"<code>LIGHT_RED = '\\x1b[91m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.LIGHT_YELLOW","title":"<code>LIGHT_YELLOW = '\\x1b[93m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.NORMAL","title":"<code>NORMAL = '\\x1b[0m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.PURPLE","title":"<code>PURPLE = '\\x1b[35m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.RED","title":"<code>RED = '\\x1b[31m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.UNDERLINE","title":"<code>UNDERLINE = '\\x1b[4m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.WHITE","title":"<code>WHITE = '\\x1b[97m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.YELLOW","title":"<code>YELLOW = '\\x1b[33m'</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ansi_escape_8bit","title":"<code>ansi_escape_8bit = re.compile('(?:\\\\x1B[@-Z\\\\\\\\-_]|[\\\\x80-\\\\x9A\\\\x9C-\\\\x9F]|(?:\\\\x1B\\\\[|\\\\x9B)[0-?]*[ -/]*[@-~])')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.disable_colors","title":"<code>disable_colors = theme.add_param('disable-colors', bool(os.environ.get('PWNDBG_DISABLE_COLORS')), 'whether to color the output or not')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.none","title":"<code>none = str</code>  <code>module-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorConfig","title":"<code>ColorConfig</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorConfig.__getattr__","title":"<code>__getattr__(attr)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorConfig.__init__","title":"<code>__init__(namespace, params)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec","title":"<code>ColorParamSpec</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec.default","title":"<code>default: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec.doc","title":"<code>doc: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ColorParamSpec.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.black","title":"<code>black(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.blue","title":"<code>blue(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.bold","title":"<code>bold(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.colorize","title":"<code>colorize(x, color)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.cyan","title":"<code>cyan(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.foreground","title":"<code>foreground(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.generateColorFunction","title":"<code>generateColorFunction(config, _globals=globals())</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.generateColorFunctionInner","title":"<code>generateColorFunctionInner(old, new)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.gray","title":"<code>gray(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.green","title":"<code>green(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_blue","title":"<code>light_blue(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_cyan","title":"<code>light_cyan(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_gray","title":"<code>light_gray(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_green","title":"<code>light_green(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_purple","title":"<code>light_purple(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_red","title":"<code>light_red(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.light_yellow","title":"<code>light_yellow(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.ljust_colored","title":"<code>ljust_colored(x, length, char=' ')</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.normal","title":"<code>normal(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.purple","title":"<code>purple(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.red","title":"<code>red(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.rjust_colored","title":"<code>rjust_colored(x, length, char=' ')</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.strip","title":"<code>strip(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.terminateWith","title":"<code>terminateWith(x, color)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.underline","title":"<code>underline(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.unstylize","title":"<code>unstylize(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.white","title":"<code>white(x)</code>","text":""},{"location":"source/color/__init__/#pwndbg.color.yellow","title":"<code>yellow(x)</code>","text":""},{"location":"source/color/context/","title":"Context","text":""},{"location":"source/color/context/#pwndbg.color.context.config_banner_color","title":"<code>config_banner_color = theme.add_color_param('banner-color', 'blue', 'color for banner line')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_banner_title","title":"<code>config_banner_title = theme.add_color_param('banner-title-color', 'none', 'color for banner title')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_comment","title":"<code>config_comment = theme.add_color_param('comment-color', 'gray', 'color for comment')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_bracket_color","title":"<code>config_flag_bracket_color = theme.add_color_param('context-flag-bracket-color', 'none', 'color for flags register (bracket)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_changed_color","title":"<code>config_flag_changed_color = theme.add_color_param('context-flag-changed-color', 'underline', 'color for flags register (flag changed)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_set_color","title":"<code>config_flag_set_color = theme.add_color_param('context-flag-set-color', 'green,bold', 'color for flags register (flag set)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_unset_color","title":"<code>config_flag_unset_color = theme.add_color_param('context-flag-unset-color', 'red', 'color for flags register (flag unset)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_flag_value_color","title":"<code>config_flag_value_color = theme.add_color_param('context-flag-value-color', 'none', 'color for flags register (register value)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_highlight_color","title":"<code>config_highlight_color = theme.add_color_param('highlight-color', 'green,bold', 'color added to highlights like source/pc')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_prefix_color","title":"<code>config_prefix_color = theme.add_color_param('code-prefix-color', 'none', \"color for 'context code' command (prefix marker)\")</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_register_changed_color","title":"<code>config_register_changed_color = theme.add_color_param('context-register-changed-color', 'red', 'color for registers label (change marker)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_register_changed_marker","title":"<code>config_register_changed_marker = theme.add_param('context-register-changed-marker', '*', 'change marker for registers label')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.config_register_color","title":"<code>config_register_color = theme.add_color_param('context-register-color', 'bold', 'color for registers label')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.banner","title":"<code>banner(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.banner_title","title":"<code>banner_title(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.comment","title":"<code>comment(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_bracket","title":"<code>flag_bracket(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_changed","title":"<code>flag_changed(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_set","title":"<code>flag_set(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_unset","title":"<code>flag_unset(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.flag_value","title":"<code>flag_value(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.format_flags","title":"<code>format_flags(value, flags, last=None)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.highlight","title":"<code>highlight(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.prefix","title":"<code>prefix(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.register","title":"<code>register(x)</code>","text":""},{"location":"source/color/context/#pwndbg.color.context.register_changed","title":"<code>register_changed(x)</code>","text":""},{"location":"source/color/disasm/","title":"Disasm","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.MIN_SPACING","title":"<code>MIN_SPACING = 5</code>  <code>module-attribute</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.WHITESPACE_LIMIT","title":"<code>WHITESPACE_LIMIT = 20</code>  <code>module-attribute</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.c","title":"<code>c = ColorConfig('disasm', [ColorParamSpec('branch', 'bold', 'color for disasm (branch/call instruction)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.instructions_and_padding","title":"<code>instructions_and_padding(instructions)</code>","text":""},{"location":"source/color/disasm/#pwndbg.color.disasm.one_instruction","title":"<code>one_instruction(ins)</code>","text":""},{"location":"source/color/enhance/","title":"Enhance","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_comment_color","title":"<code>config_comment_color = theme.add_color_param('enhance-comment-color', 'none', 'color of value enhance (comment)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_integer_color","title":"<code>config_integer_color = theme.add_color_param('enhance-integer-value-color', 'none', 'color of value enhance (integer)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_string_color","title":"<code>config_string_color = theme.add_color_param('enhance-string-value-color', 'none', 'color of value enhance (string)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.config_unknown_color","title":"<code>config_unknown_color = theme.add_color_param('enhance-unknown-color', 'none', 'color of value enhance (unknown value)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.comment","title":"<code>comment(x)</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.integer","title":"<code>integer(x)</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.string","title":"<code>string(x)</code>","text":""},{"location":"source/color/enhance/#pwndbg.color.enhance.unknown","title":"<code>unknown(x)</code>","text":""},{"location":"source/color/hexdump/","title":"Hexdump","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_address","title":"<code>config_address = theme.add_color_param('hexdump-address-color', 'none', 'color for hexdump command (address label)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_highlight_group_lsb","title":"<code>config_highlight_group_lsb = theme.add_param('hexdump-highlight-group-lsb', 'underline', 'highlight LSB of each group. Applies only if hexdump-use-big-endian actually changes byte order.')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_normal","title":"<code>config_normal = theme.add_color_param('hexdump-normal-color', 'none', 'color for hexdump command (normal bytes)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_offset","title":"<code>config_offset = theme.add_color_param('hexdump-offset-color', 'none', 'color for hexdump command (offset label)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_printable","title":"<code>config_printable = theme.add_color_param('hexdump-printable-color', 'bold', 'color for hexdump command (printable characters)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_separator","title":"<code>config_separator = theme.add_color_param('hexdump-separator-color', 'none', 'color for hexdump command (group separator)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_special","title":"<code>config_special = theme.add_color_param('hexdump-special-color', 'yellow', 'color for hexdump command (special bytes)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.config_zero","title":"<code>config_zero = theme.add_color_param('hexdump-zero-color', 'red', 'color for hexdump command (zero bytes)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.address","title":"<code>address(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.highlight_group_lsb","title":"<code>highlight_group_lsb(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.normal","title":"<code>normal(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.offset","title":"<code>offset(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.printable","title":"<code>printable(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.separator","title":"<code>separator(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.special","title":"<code>special(x)</code>","text":""},{"location":"source/color/hexdump/#pwndbg.color.hexdump.zero","title":"<code>zero(x)</code>","text":""},{"location":"source/color/memory/","title":"Memory","text":""},{"location":"source/color/memory/#pwndbg.color.memory.ColorFunction","title":"<code>ColorFunction = Callable[[str], str]</code>  <code>module-attribute</code>","text":""},{"location":"source/color/memory/#pwndbg.color.memory.c","title":"<code>c = ColorConfig('memory', [ColorParamSpec('stack', 'yellow', 'color for stack memory'), ColorParamSpec('heap', 'blue', 'color for heap memory'), ColorParamSpec('code', 'red', 'color for executable memory'), ColorParamSpec('data', 'purple', 'color for all other writable memory'), ColorParamSpec('rodata', 'normal', 'color for all read only memory'), ColorParamSpec('wx', 'underline', 'color added to all WX memory'), ColorParamSpec('guard', 'cyan', 'color added to all guard pages (no perms)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/color/memory/#pwndbg.color.memory.attempt_colorized_symbol","title":"<code>attempt_colorized_symbol(address)</code>","text":"<p>Convert address to colorized symbol (if symbol is there), else None</p>"},{"location":"source/color/memory/#pwndbg.color.memory.get","title":"<code>get(address, text=None, prefix=None)</code>","text":"<p>Returns a colorized string representing the provided address.</p> <p>Parameters:</p> Name Type Description Default <code>address(int</code> <code>| pwndbg.dbg_mod.Value</code> <p>Address to look up</p> required <code>text(str</code> <code>| None</code> <p>Optional text to use in place of the address in the return value string.</p> required <code>prefix(str</code> <code>| None</code> <p>Optional text to set at beginning in the return value string.</p> required"},{"location":"source/color/memory/#pwndbg.color.memory.get_address_and_symbol","title":"<code>get_address_and_symbol(address)</code>","text":"<p>Convert and colorize address 0x7ffff7fcecd0 to string <code>0x7ffff7fcecd0 (_dl_fini)</code> If no symbol exists for the address, return colorized address</p>"},{"location":"source/color/memory/#pwndbg.color.memory.get_address_or_symbol","title":"<code>get_address_or_symbol(address)</code>","text":"<p>Convert and colorize address to symbol if it can be resolved, else return colorized address</p>"},{"location":"source/color/memory/#pwndbg.color.memory.legend","title":"<code>legend()</code>","text":""},{"location":"source/color/memory/#pwndbg.color.memory.sym_name","title":"<code>sym_name(address)</code>","text":"<p>Retrieves the name of the symbol at the given address, if it exists</p>"},{"location":"source/color/message/","title":"Message","text":""},{"location":"source/color/message/#pwndbg.color.message.config_breakpoint_color","title":"<code>config_breakpoint_color = theme.add_color_param('message-breakpoint-color', 'yellow', 'color of breakpoint messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_debug_color","title":"<code>config_debug_color = theme.add_color_param('message-debug-color', 'blue', 'color of debug messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_error_color","title":"<code>config_error_color = theme.add_color_param('message-error-color', 'red', 'color of error messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_exit_color","title":"<code>config_exit_color = theme.add_color_param('message-exit-color', 'red', 'color of exit messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_hint_color","title":"<code>config_hint_color = theme.add_color_param('message-hint-color', 'yellow', 'color of hint and marker messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_info_color","title":"<code>config_info_color = theme.add_color_param('message-info-color', 'white', 'color of info messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_notice_color","title":"<code>config_notice_color = theme.add_color_param('message-notice-color', 'purple', 'color of notice messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_prompt_alive_color","title":"<code>config_prompt_alive_color: pwndbg.lib.config.Parameter = theme.add_color_param('prompt-alive-color', 'bold,green', 'prompt alive color')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_prompt_color","title":"<code>config_prompt_color: pwndbg.lib.config.Parameter = theme.add_color_param('prompt-color', 'bold,red', 'prompt color')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_signal_color","title":"<code>config_signal_color = theme.add_color_param('message-signal-color', 'bold,red', 'color of signal messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_status_off_color","title":"<code>config_status_off_color = theme.add_color_param('message-status-off-color', 'red', 'color of off status messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_status_on_color","title":"<code>config_status_on_color = theme.add_color_param('message-status-on-color', 'green', 'color of on status messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_success_color","title":"<code>config_success_color = theme.add_color_param('message-success-color', 'green', 'color of success messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_system_color","title":"<code>config_system_color = theme.add_color_param('message-system-color', 'light-red', 'color of system messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.config_warning_color","title":"<code>config_warning_color = theme.add_color_param('message-warning-color', 'yellow', 'color of warning messages')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.alive_prompt","title":"<code>alive_prompt(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.breakpoint","title":"<code>breakpoint(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.debug","title":"<code>debug(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.error","title":"<code>error(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.exit","title":"<code>exit(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.hint","title":"<code>hint(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.info","title":"<code>info(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.notice","title":"<code>notice(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.off","title":"<code>off(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.on","title":"<code>on(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.prompt","title":"<code>prompt(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.signal","title":"<code>signal(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.success","title":"<code>success(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.system","title":"<code>system(msg)</code>","text":""},{"location":"source/color/message/#pwndbg.color.message.warn","title":"<code>warn(msg)</code>","text":""},{"location":"source/color/syntax_highlight/","title":"Syntax highlight","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.formatter","title":"<code>formatter = pygments.formatters.Terminal256Formatter(style=str(style))</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.lexer_cache","title":"<code>lexer_cache: Dict[str, Any] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.pwntools_lexer","title":"<code>pwntools_lexer = PwntoolsLexer()</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.style","title":"<code>style = theme.add_param('syntax-highlight-style', 'monokai', 'Source code / assembly syntax highlight stylename of pygments module')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.check_style","title":"<code>check_style()</code>","text":""},{"location":"source/color/syntax_highlight/#pwndbg.color.syntax_highlight.syntax_highlight","title":"<code>syntax_highlight(code, filename='.asm')</code>","text":""},{"location":"source/color/telescope/","title":"Telescope","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset_color","title":"<code>offset_color = theme.add_color_param('telescope-offset-color', 'normal', 'color of the telescope command (offset prefix)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset_delimiter_color","title":"<code>offset_delimiter_color = theme.add_color_param('telescope-offset-delimiter-color', 'normal', 'color of the telescope command (offset delimiter)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset_separator_color","title":"<code>offset_separator_color = theme.add_color_param('telescope-offset-separator-color', 'normal', 'color of the telescope command (offset separator)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.register_color","title":"<code>register_color = theme.add_color_param('telescope-register-color', 'bold', 'color of the telescope command (register)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.repeating_marker_color","title":"<code>repeating_marker_color = theme.add_color_param('telescope-repeating-marker-color', 'normal', 'color of the telescope command (repeating values marker)')</code>  <code>module-attribute</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.delimiter","title":"<code>delimiter(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.offset","title":"<code>offset(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.register","title":"<code>register(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.repeating_marker","title":"<code>repeating_marker(x)</code>","text":""},{"location":"source/color/telescope/#pwndbg.color.telescope.separator","title":"<code>separator(x)</code>","text":""},{"location":"source/color/theme/","title":"Theme","text":""},{"location":"source/color/theme/#pwndbg.color.theme.ColorParameter","title":"<code>ColorParameter</code>","text":"<p>               Bases: <code>Parameter</code></p>"},{"location":"source/color/theme/#pwndbg.color.theme.add_color_param","title":"<code>add_color_param(name, default, set_show_doc)</code>","text":""},{"location":"source/color/theme/#pwndbg.color.theme.add_param","title":"<code>add_param(name, default, set_show_doc, color_param=False)</code>","text":""},{"location":"source/commands/__init__/","title":"init","text":""},{"location":"source/commands/__init__/#pwndbg.commands.GDB_BUILTIN_COMMANDS","title":"<code>GDB_BUILTIN_COMMANDS = pwndbg.dbg.commands()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.command_names","title":"<code>command_names: Set[str] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.commands","title":"<code>commands: List[Command] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.pwndbg_is_reloading","title":"<code>pwndbg_is_reloading = False</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand","title":"<code>ArgparsedCommand</code>","text":"<p>Adds documentation and offloads parsing for a Command via argparse</p>"},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.aliases","title":"<code>aliases = aliases</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.category","title":"<code>category = category</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.parser","title":"<code>parser = argparse.ArgumentParser(description=parser_or_desc)</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.__call__","title":"<code>__call__(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.ArgparsedCommand.__init__","title":"<code>__init__(parser_or_desc, aliases=[], command_name=None, category=CommandCategory.MISC)</code>","text":"<p>:param parser_or_desc: <code>argparse.ArgumentParser</code> instance or <code>str</code></p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command","title":"<code>Command</code>","text":"<p>Generic command wrapper</p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command.__name__","title":"<code>__name__ = command_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.aliases","title":"<code>aliases = aliases</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.builtin_override_whitelist","title":"<code>builtin_override_whitelist: Set[str] = {'up', 'down', 'search', 'pwd', 'start', 'ignore'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.category","title":"<code>category = category</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.doc","title":"<code>doc = doc</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.function","title":"<code>function = function</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.handle","title":"<code>handle = pwndbg.dbg.add_command(command_name, _handler, doc)</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.history","title":"<code>history: Dict[int, str] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.is_alias","title":"<code>is_alias = is_alias</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.repeat","title":"<code>repeat = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.shell","title":"<code>shell = shell</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.__call__","title":"<code>__call__(*args, **kwargs)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.__init__","title":"<code>__init__(function, prefix=False, command_name=None, shell=False, is_alias=False, aliases=[], category=CommandCategory.MISC, doc=None)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.Command.check_repeated","title":"<code>check_repeated(argument, from_tty)</code>","text":"<p>Keep a record of all commands which come from the TTY.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this command was executed by the user just hitting \"enter\".</p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command.invoke","title":"<code>invoke(argument, from_tty)</code>","text":"<p>Invoke the command with an argument string</p>"},{"location":"source/commands/__init__/#pwndbg.commands.Command.split_args","title":"<code>split_args(argument)</code>","text":"<p>Split a command-line string from the user into arguments.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>A <code>(tuple, dict)</code>, in the form of <code>*args, **kwargs</code>.</p> <code>Dict[Any, Any]</code> <p>The contents of the tuple/dict are undefined.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory","title":"<code>CommandCategory</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.BREAKPOINT","title":"<code>BREAKPOINT = 'Breakpoint'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.CONTEXT","title":"<code>CONTEXT = 'Context'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.DEV","title":"<code>DEV = 'Developer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.DISASS","title":"<code>DISASS = 'Disassemble'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.HEAP","title":"<code>HEAP = 'Heap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.INTEGRATIONS","title":"<code>INTEGRATIONS = 'Integrations'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.KERNEL","title":"<code>KERNEL = 'Kernel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.LINUX","title":"<code>LINUX = 'Linux/libc/ELF'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.MEMORY","title":"<code>MEMORY = 'Memory'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.MISC","title":"<code>MISC = 'Misc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.NEXT","title":"<code>NEXT = 'Step/Next/Continue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.PROCESS","title":"<code>PROCESS = 'Process'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.PWNDBG","title":"<code>PWNDBG = 'pwndbg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.REGISTER","title":"<code>REGISTER = 'Register'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.SHELL","title":"<code>SHELL = 'Shell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.STACK","title":"<code>STACK = 'Stack'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.START","title":"<code>START = 'Start'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.CommandCategory.WINDBG","title":"<code>WINDBG = 'WinDbg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.AddressExpr","title":"<code>AddressExpr(s)</code>","text":"<p>Parses an address expression. Returns an int.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.HexOrAddressExpr","title":"<code>HexOrAddressExpr(s)</code>","text":"<p>Parses string as hexadecimal int or an address expression. Returns an int. (e.g. '1234' will return 0x1234)</p>"},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenHeapIsInitialized","title":"<code>OnlyWhenHeapIsInitialized(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenPagingEnabled","title":"<code>OnlyWhenPagingEnabled(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenRunning","title":"<code>OnlyWhenRunning(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWhenUserspace","title":"<code>OnlyWhenUserspace(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":"<p>Decorates function to work only with the specified archictectures.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithFile","title":"<code>OnlyWithFile(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithKernelDebugSyms","title":"<code>OnlyWithKernelDebugSyms(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithResolvedHeapSyms","title":"<code>OnlyWithResolvedHeapSyms(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.OnlyWithTcache","title":"<code>OnlyWithTcache(function)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.fix","title":"<code>fix(arg, sloppy=False, quiet=True, reraise=False)</code>","text":"<p>Fix a single command-line argument coming from the CLI.</p> <p>Parameters:</p> Name Type Description Default <code>arg(str)</code> <p>Original string representation (e.g. '0', '\\(rax', '\\)rax+44')</p> required <code>sloppy(bool)</code> <p>If <code>arg</code> cannot be evaluated, return <code>arg</code>. (default: False)</p> required <code>quiet(bool)</code> <p>If an error occurs, suppress it. (default: True)</p> required <code>reraise(bool)</code> <p>If an error occurs, raise the exception. (default: False)</p> required <p>Returns:</p> Type Description <code>str | Value | None</code> <p>Ideally a <code>Value</code> object.  May return a <code>str</code> if <code>sloppy==True</code>.</p> <code>str | Value | None</code> <p>May return <code>None</code> if <code>sloppy == False and reraise == False</code>.</p>"},{"location":"source/commands/__init__/#pwndbg.commands.fix_int","title":"<code>fix_int(*a, **kw)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.fix_int_reraise","title":"<code>fix_int_reraise(*a, **kw)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.fix_reraise","title":"<code>fix_reraise(*a, **kw)</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.load_commands","title":"<code>load_commands()</code>","text":""},{"location":"source/commands/__init__/#pwndbg.commands.sloppy_gdb_parse","title":"<code>sloppy_gdb_parse(s)</code>","text":"<p>This function should be used as <code>argparse.ArgumentParser</code> .add_argument method's <code>type</code> helper.</p> <p>This makes the type being parsed as gdb value and if that parsing fails, a string is returned.</p> <p>:param s: String. :return: Whatever gdb.parse_and_eval returns or string.</p>"},{"location":"source/commands/ai/","title":"Ai","text":"<p>This command sends information on the current debugging context to OpenAI's GPT-3 large language model and asks it a question supplied by the user. It then displays GPT-3's response to that question to the user.</p>"},{"location":"source/commands/ai/#pwndbg.commands.ai.dummy","title":"<code>dummy = False</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_answer","title":"<code>last_answer: List[str] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_command","title":"<code>last_command = None</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_pc","title":"<code>last_pc = None</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.last_question","title":"<code>last_question: List[str] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.parser","title":"<code>parser = argparse.ArgumentParser(description='Ask GPT-3 a question about the current debugging context.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.verbosity","title":"<code>verbosity = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.ai","title":"<code>ai(question, model, temperature, max_tokens, verbose, list_models=False, command=None)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.build_command_prompt_body","title":"<code>build_command_prompt_body(command)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.build_context_prompt_body","title":"<code>build_context_prompt_body()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.build_prompt","title":"<code>build_prompt(question, command=None)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.flatten_prompt","title":"<code>flatten_prompt(conversation)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.get_anthropic_api_key","title":"<code>get_anthropic_api_key()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.get_openai_api_key","title":"<code>get_openai_api_key()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.get_openai_models","title":"<code>get_openai_models()</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query","title":"<code>query(prompt, model='text-davinci-003', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query_anthropic","title":"<code>query_anthropic(prompt, model='claude-v1', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query_openai_chat","title":"<code>query_openai_chat(prompt, model='gpt-3.5-turbo', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.query_openai_completions","title":"<code>query_openai_completions(prompt, model='text-davinci-003', max_tokens=100, temperature=0.0)</code>","text":""},{"location":"source/commands/ai/#pwndbg.commands.ai.set_dummy_mode","title":"<code>set_dummy_mode(d=True)</code>","text":""},{"location":"source/commands/argv/","title":"Argv","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints out the contents of the environment.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argc_function","title":"<code>argc_function</code>","text":"<p>               Bases: <code>Function</code></p> <p>Evaluates to argc.</p>"},{"location":"source/commands/argv/#pwndbg.commands.argv.argc_function.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argc_function.invoke","title":"<code>invoke(*args)</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argv_function","title":"<code>argv_function</code>","text":"<p>               Bases: <code>Function</code></p> <p>Evaluate argv on the supplied value.</p>"},{"location":"source/commands/argv/#pwndbg.commands.argv.argv_function.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argv_function.invoke","title":"<code>invoke(number_value=gdb.Value(0), *args)</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.environ_function","title":"<code>environ_function</code>","text":"<p>               Bases: <code>Function</code></p> <p>Evaluate getenv() on the supplied value.</p>"},{"location":"source/commands/argv/#pwndbg.commands.argv.environ_function.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.environ_function.invoke","title":"<code>invoke(name_value=gdb.Value(''), *args)</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.envp_function","title":"<code>envp_function</code>","text":"<p>               Bases: <code>Function</code></p> <p>Evaluate envp on the supplied value.</p>"},{"location":"source/commands/argv/#pwndbg.commands.argv.envp_function.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.envp_function.invoke","title":"<code>invoke(number_value=gdb.Value(0), *args)</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argc","title":"<code>argc()</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.argv","title":"<code>argv(i=None)</code>","text":""},{"location":"source/commands/argv/#pwndbg.commands.argv.envp","title":"<code>envp(name=None)</code>","text":"<p>Prints out the contents of the environment.</p>"},{"location":"source/commands/aslr/","title":"Aslr","text":""},{"location":"source/commands/aslr/#pwndbg.commands.aslr.options","title":"<code>options = {'on': 'off', 'off': 'on'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/aslr/#pwndbg.commands.aslr.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nCheck the current ASLR status, or turn it on/off.\\n\\nDoes not take effect until the program is restarted.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/aslr/#pwndbg.commands.aslr.aslr","title":"<code>aslr(state=None)</code>","text":""},{"location":"source/commands/asm/","title":"Asm","text":""},{"location":"source/commands/asm/#pwndbg.commands.asm.input_group","title":"<code>input_group = parser.add_mutually_exclusive_group(required=True)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/asm/#pwndbg.commands.asm.parser","title":"<code>parser = argparse.ArgumentParser(description='Assemble shellcode into bytes')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/asm/#pwndbg.commands.asm.asm","title":"<code>asm(shellcode, format, arch, avoid, infile)</code>","text":""},{"location":"source/commands/attachp/","title":"Attachp","text":""},{"location":"source/commands/attachp/#pwndbg.commands.attachp.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Attaches to a given pid, process name, process found with partial argv match or to a device file.\\n\\nThis command wraps the original GDB `attach` command to add the ability\\nto debug a process with a given name or partial name match. In such cases,\\nthe process identifier is fetched via the `pidof &lt;name&gt;` command first. If no\\nmatches are found, then it uses the `ps -eo pid,args` command to search for\\npartial name matches.\\n\\nOriginal GDB attach command help:\\n    Attach to a process or file outside of GDB.\\n    This command attaches to another target, of the same type as your last\\n    \"target\" command (\"info files\" will show your target stack).\\n    The command may take as argument a process id or a device file.\\n    For a process id, you must have permission to send the process a signal,\\n    and it must have the same effective uid as the debugger.\\n    When using \"attach\" with a process id, the debugger finds the\\n    program running in the process, looking first in the current working\\n    directory, or (if not found there) using the source file search path\\n    (see the \"directory\" command).  You can also use the \"file\" command\\n    to specify the program, and to load its symbol table.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/attachp/#pwndbg.commands.attachp.attachp","title":"<code>attachp(target, no_truncate, retry, all, user=None)</code>","text":""},{"location":"source/commands/attachp/#pwndbg.commands.attachp.find_pids","title":"<code>find_pids(target, user, all)</code>","text":""},{"location":"source/commands/auxv/","title":"Auxv","text":""},{"location":"source/commands/auxv/#pwndbg.commands.auxv.auxv","title":"<code>auxv()</code>","text":""},{"location":"source/commands/binder/","title":"Binder","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.addrc","title":"<code>addrc = C.green</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.code_to_name","title":"<code>code_to_name = {getattr(gdb, name): namefor name in codenames}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.codenames","title":"<code>codenames = [x for x in dir(gdb) if 'TYPE_CODE_' in x]</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.entry_field_names","title":"<code>entry_field_names = {'waiting_threads': 'waiting_thread_node', 'todo': 'entry', 'refs': 'node_entry'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.fieldnamec","title":"<code>fieldnamec = C.blue</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.fieldvaluec","title":"<code>fieldvaluec = C.yellow</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.name_to_code","title":"<code>name_to_code = {v: kfor (k, v) in code_to_name.items()}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.node_types","title":"<code>node_types = {'waiting_threads': 'struct binder_thread', 'todo': 'struct binder_work', 'refs': 'struct binder_ref', 'threads': 'struct binder_thread', 'nodes': 'struct binder_node', 'refs_by_node': 'struct binder_ref'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.parser","title":"<code>parser = argparse.ArgumentParser(description='Show Android Binder information')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.rb_node_field_names","title":"<code>rb_node_field_names = {'threads': 'rb_node', 'nodes': 'rb_node', 'refs_by_node': 'rb_node_node'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.typenamec","title":"<code>typenamec = C.red</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor","title":"<code>BinderVisitor</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.addr","title":"<code>addr = pwndbg.gdblib.memory.get_typed_pointer_value(gdb.lookup_type('struct hlist_head'), procs_addr)</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.indent","title":"<code>indent = IndentContextManager()</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.__init__","title":"<code>__init__(procs_addr)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_list","title":"<code>format_list(field, value, typename)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_node","title":"<code>format_node(node)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_proc","title":"<code>format_proc(proc, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_rb_tree","title":"<code>format_rb_tree(field, value)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_ref","title":"<code>format_ref(ref, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_spinlock","title":"<code>format_spinlock(lock)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_thread","title":"<code>format_thread(thread, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_transaction","title":"<code>format_transaction(transaction, only_heading=False)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.format_work","title":"<code>format_work(work)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.print_object","title":"<code>print_object(obj)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.BinderVisitor.visit","title":"<code>visit()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager","title":"<code>IndentContextManager</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.indent","title":"<code>indent = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.__exit__","title":"<code>__exit__(exc_type, exc_value, exc_tb)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.IndentContextManager.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.binder","title":"<code>binder()</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.for_each_hlist_entry","title":"<code>for_each_hlist_entry(head, typename, field)</code>","text":""},{"location":"source/commands/binder/#pwndbg.commands.binder.for_each_transaction","title":"<code>for_each_transaction(addr, field)</code>","text":""},{"location":"source/commands/binja/","title":"Binja","text":""},{"location":"source/commands/binja/#pwndbg.commands.binja.bn_eval","title":"<code>bn_eval(expr)</code>","text":"<p>Parse and evaluate a Binary Ninja expression.</p> <p>Docs: https://api.binary.ninja/binaryninja.binaryview-module.html#binaryninja.binaryview.BinaryView.parse_expression</p> <p>Adds all registers in the current register set as magic variables (e.g. $rip). Also adds a $piebase magic variable with the computed executable base.</p>"},{"location":"source/commands/binja/#pwndbg.commands.binja.bn_sym","title":"<code>bn_sym(name_val)</code>","text":"<p>Lookup a symbol's address by name from Binary Ninja.</p>"},{"location":"source/commands/binja/#pwndbg.commands.binja.bn_sync","title":"<code>bn_sync(*args)</code>","text":"<p>Synchronize Binary Ninja's cursor with GDB</p>"},{"location":"source/commands/binja/#pwndbg.commands.binja.bn_var","title":"<code>bn_var(name_val)</code>","text":"<p>Lookup a stack variable's address by name from Binary Ninja.</p>"},{"location":"source/commands/branch/","title":"Branch","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.parser","title":"<code>parser = argparse.ArgumentParser(description='Breaks on a branch if it is not taken.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch","title":"<code>BreakOnConditionalBranch</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>A breakpoint that only stops the inferior if a given branch is taken or not taken.</p>"},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.instruction","title":"<code>instruction = instruction</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.taken","title":"<code>taken = taken</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.__init__","title":"<code>__init__(instruction, taken)</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.BreakOnConditionalBranch.should_stop","title":"<code>should_stop()</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.break_if_not_taken","title":"<code>break_if_not_taken(branch)</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.break_if_taken","title":"<code>break_if_taken(branch)</code>","text":""},{"location":"source/commands/branch/#pwndbg.commands.branch.install_breakpoint","title":"<code>install_breakpoint(branch, taken)</code>","text":""},{"location":"source/commands/canary/","title":"Canary","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.DEFAULT_NUM_CANARIES_TO_DISPLAY","title":"<code>DEFAULT_NUM_CANARIES_TO_DISPLAY = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.parser","title":"<code>parser = argparse.ArgumentParser(description='Print out the current stack canary.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.canary","title":"<code>canary(all)</code>","text":""},{"location":"source/commands/canary/#pwndbg.commands.canary.canary_value","title":"<code>canary_value()</code>","text":""},{"location":"source/commands/checksec/","title":"Checksec","text":""},{"location":"source/commands/checksec/#pwndbg.commands.checksec.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints out the binary security settings using `checksec`.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/checksec/#pwndbg.commands.checksec.checksec","title":"<code>checksec(file)</code>","text":""},{"location":"source/commands/comments/","title":"Comments","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.file_lists","title":"<code>file_lists: Dict[str, Dict[str, str]] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.parser","title":"<code>parser = argparse.ArgumentParser(description='Put comments in assembly code.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.comm","title":"<code>comm(addr=None, comment=None)</code>","text":""},{"location":"source/commands/comments/#pwndbg.commands.comments.init","title":"<code>init()</code>","text":""},{"location":"source/commands/config/","title":"Config","text":"<p>Dumps all pwndbg-specific configuration points.</p>"},{"location":"source/commands/config/#pwndbg.commands.config.configfile_parser","title":"<code>configfile_parser = argparse.ArgumentParser(description='Generates a configuration file for the current pwndbg options.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows pwndbg-specific theme configuration.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.themefile_parser","title":"<code>themefile_parser = argparse.ArgumentParser(description='Generates a configuration file for the current pwndbg theme options.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.config","title":"<code>config(filter_pattern)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.configfile","title":"<code>configfile(show_all=False)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.configfile_print_scope","title":"<code>configfile_print_scope(scope, show_all=False)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.display_config","title":"<code>display_config(filter_pattern, scope, has_file_command=True)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.extend_value_with_default","title":"<code>extend_value_with_default(value, default)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.get_config_parameters","title":"<code>get_config_parameters(scope, filter_pattern)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.print_row","title":"<code>print_row(name, value, default, set_show_doc, ljust_optname, ljust_value, empty_space=6)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.theme","title":"<code>theme(filter_pattern)</code>","text":""},{"location":"source/commands/config/#pwndbg.commands.config.themefile","title":"<code>themefile(show_all=False)</code>","text":""},{"location":"source/commands/context/","title":"Context","text":""},{"location":"source/commands/context/#pwndbg.commands.context.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.backtrace_frame_label","title":"<code>backtrace_frame_label = theme.add_param('backtrace-frame-label', '', 'frame number label for backtrace')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.backtrace_lines","title":"<code>backtrace_lines = pwndbg.config.add_param('context-backtrace-lines', 8, 'number of lines to print in the backtrace context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.banner_arg","title":"<code>banner_arg = parser.add_argument('banner', type=str, nargs='?', default='both', help='Where a banner should be placed: both, top , bottom, none')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.c","title":"<code>c = ColorConfig('backtrace', [ColorParamSpec('prefix', 'none', 'color for prefix of current backtrace label'), ColorParamSpec('address', 'none', 'color for backtrace (address)'), ColorParamSpec('symbol', 'none', 'color for backtrace (symbol)'), ColorParamSpec('frame-label', 'none', 'color for backtrace (frame label)')])</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_clear_screen","title":"<code>config_clear_screen = pwndbg.config.add_param('context-clear-screen', False, 'whether to clear the screen before printing the context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_context_ghidra","title":"<code>config_context_ghidra = pwndbg.config.add_param('context-ghidra', 'never', 'when to try to decompile the current function with ghidra (slow and requires radare2/r2pipe or rizin/rzpipe) (valid values: always, never, if-no-source)')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_context_sections","title":"<code>config_context_sections = pwndbg.config.add_param('context-sections', 'regs disasm code ghidra stack backtrace expressions threads heap_tracker', 'which context sections are displayed (controls order)')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_max_threads_display","title":"<code>config_max_threads_display = pwndbg.config.add_param('context-max-threads', 4, 'maximum number of threads displayed by the context command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.config_output","title":"<code>config_output = pwndbg.config.add_param('context-output', 'stdout', 'where pwndbg should output (\"stdout\" or file/tty).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_history","title":"<code>context_history: DefaultDict[str, List[List[str]]] = defaultdict(list)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_history_size","title":"<code>context_history_size = pwndbg.config.add_param('context-history-size', 50, 'number of context history entries to store')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_sections","title":"<code>context_sections = {'a': context_args, 'r': context_regs, 'd': context_disasm, 's': context_stack, 'b': context_backtrace, 'c': context_code}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.disasm_lines","title":"<code>disasm_lines = pwndbg.config.add_param('context-disasm-lines', 10, 'number of additional lines to print in the disasm context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.expressions","title":"<code>expressions = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.last_signal","title":"<code>last_signal: List[str] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.output_settings","title":"<code>output_settings: DefaultDict[str, Dict[str, Any]] = defaultdict(dict)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.outputs","title":"<code>outputs: Dict[str, str] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.parser","title":"<code>parser = argparse.ArgumentParser(description='Print out all registers and enhance the information.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.selected_history_index","title":"<code>selected_history_index: Optional[int] = None</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.should_decompile","title":"<code>should_decompile = pwndbg.config.add_param('context-integration-decompile', True, 'whether context should fall back to decompilation with no source code')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.source_disasm_lines","title":"<code>source_disasm_lines = pwndbg.config.add_param('context-code-lines', 10, 'number of source code lines to print by the context command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.stack_lines","title":"<code>stack_lines = pwndbg.config.add_param('context-stack-lines', 8, 'number of lines to print in the stack context')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.thread_status_messages","title":"<code>thread_status_messages = {'running': pwndbg.color.light_green('running'), 'stopped': pwndbg.color.yellow('stopped'), 'exited': pwndbg.color.gray('exited ')}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput","title":"<code>CallOutput</code>","text":"<p>A context manager which calls a function on write</p>"},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.func","title":"<code>func = func</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__exit__","title":"<code>__exit__(*args, **kwargs)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.__init__","title":"<code>__init__(func)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.flush","title":"<code>flush()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.isatty","title":"<code>isatty()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.CallOutput.write","title":"<code>write(data)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput","title":"<code>FileOutput</code>","text":"<p>A context manager wrapper to reopen files on enter</p>"},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.handle","title":"<code>handle = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__exit__","title":"<code>__exit__(*args, **kwargs)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.FileOutput.__init__","title":"<code>__init__(*args)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput","title":"<code>StdOutput</code>","text":"<p>A context manager wrapper to give stdout</p>"},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__exit__","title":"<code>__exit__(*args, **kwargs)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.StdOutput.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.calculate_padding_to_align","title":"<code>calculate_padding_to_align(length, align)</code>","text":"<p>Calculates the number of spaces to append to reach the next alignment. The next alignment point is given by \"x * align &gt;= length\".</p>"},{"location":"source/commands/context/#pwndbg.commands.context.clear_screen","title":"<code>clear_screen(out=sys.stdout)</code>","text":"<p>Clear the screen by moving the cursor to top-left corner and clearing the content. Different terminals may act differently</p>"},{"location":"source/commands/context/#pwndbg.commands.context.compact_regs","title":"<code>compact_regs(regs, width=None, target=sys.stdout)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context","title":"<code>context(subcontext=None, enabled=None)</code>","text":"<p>Print out the current register, instruction, and stack context.</p> <p>Accepts subcommands 'reg', 'disasm', 'code', 'stack', 'backtrace', 'ghidra', 'args', 'threads', 'heap_tracker', 'expressions', and/or 'last_signal'.</p>"},{"location":"source/commands/context/#pwndbg.commands.context.context_args","title":"<code>context_args(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_backtrace","title":"<code>context_backtrace(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_code","title":"<code>context_code(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_disasm","title":"<code>context_disasm(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_expressions","title":"<code>context_expressions(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_ghidra","title":"<code>context_ghidra(target=sys.stdout, with_banner=True, width=None)</code>","text":"<p>Print out the source of the current function decompiled by ghidra.</p> <p>The context-ghidra config parameter is used to configure whether to always, never or only show the context if no source is available.</p>"},{"location":"source/commands/context/#pwndbg.commands.context.context_heap_tracker","title":"<code>context_heap_tracker(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_last_signal","title":"<code>context_last_signal(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_regs","title":"<code>context_regs(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_stack","title":"<code>context_stack(target=sys.stdout, with_banner=True, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.context_threads","title":"<code>context_threads(with_banner=True, target=sys.stdout, width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextnext","title":"<code>contextnext(count)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextoutput","title":"<code>contextoutput(section, path, clearing, banner='both', width=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextprev","title":"<code>contextprev(count)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextsearch","title":"<code>contextsearch(needle, section)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextunwatch","title":"<code>contextunwatch(num)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.contextwatch","title":"<code>contextwatch(expression, cmd)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.get_filename_and_formatted_source","title":"<code>get_filename_and_formatted_source()</code>","text":"<p>Returns formatted, lines limited and highlighted source as list or if it isn't there - an empty list</p>"},{"location":"source/commands/context/#pwndbg.commands.context.get_highlight_source","title":"<code>get_highlight_source(filename)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.get_regs","title":"<code>get_regs(regs=None)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.get_thread_status","title":"<code>get_thread_status(thread)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.history_handle_unchanged_contents","title":"<code>history_handle_unchanged_contents()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.history_size_changed","title":"<code>history_size_changed()</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.output","title":"<code>output(section)</code>","text":"<p>Creates a context manager corresponding to configured context output</p>"},{"location":"source/commands/context/#pwndbg.commands.context.regs","title":"<code>regs(regs=[])</code>","text":"<p>Print out all registers and enhance the information.</p>"},{"location":"source/commands/context/#pwndbg.commands.context.resetcontextoutput","title":"<code>resetcontextoutput(section)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.save_signal","title":"<code>save_signal(signal)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.serve_context_history","title":"<code>serve_context_history(function)</code>","text":""},{"location":"source/commands/context/#pwndbg.commands.context.validate_context_sections","title":"<code>validate_context_sections()</code>","text":""},{"location":"source/commands/cpsr/","title":"Cpsr","text":""},{"location":"source/commands/cpsr/#pwndbg.commands.cpsr.parser","title":"<code>parser = argparse.ArgumentParser(description='Print out ARM CPSR or xPSR register.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cpsr/#pwndbg.commands.cpsr.cpsr","title":"<code>cpsr(cpsr_value=None)</code>","text":""},{"location":"source/commands/cyclic/","title":"Cyclic","text":""},{"location":"source/commands/cyclic/#pwndbg.commands.cyclic.group","title":"<code>group = parser.add_mutually_exclusive_group(required=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cyclic/#pwndbg.commands.cyclic.parser","title":"<code>parser = argparse.ArgumentParser(description='Cyclic pattern creator/finder.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cyclic/#pwndbg.commands.cyclic.cyclic_cmd","title":"<code>cyclic_cmd(alphabet, length, lookup, count=100, filename='')</code>","text":""},{"location":"source/commands/cymbol/","title":"Cymbol","text":"<p>Add, load, show, edit, or delete symbols for custom structures.</p> <p>For the generation of the symbols g++/gcc is being used under the hood.</p> <p>In case of remote debugging a binary which is not native to your architecture it is advised to configure the 'gcc-config-path' config parameter to your own cross-platform gnu gcc compiled toolchain for your target architecture.</p> <p>You are advised to configure the 'cymbol-editor' config parameter to the path of your favorite text editor. Otherwise cymbol exapnds $EDITOR and $VISUAL environment variables to find the path to the default text editor.</p>"},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.cymbol_editor","title":"<code>cymbol_editor = pwndbg.config.add_param('cymbol-editor', '', 'path to the editor for editing custom structures', param_class=pwndbg.lib.config.PARAM_OPTIONAL_FILENAME)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.gcc_compiler_path","title":"<code>gcc_compiler_path = pwndbg.config.add_param('gcc-compiler-path', '', 'path to the gcc/g++ toolchain for generating imported symbols', param_class=pwndbg.lib.config.PARAM_OPTIONAL_FILENAME)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.loaded_symbols","title":"<code>loaded_symbols: Dict[str, str] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.parser","title":"<code>parser = argparse.ArgumentParser(description='Add, show, load, edit, or delete custom structures in plain C.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.pwndbg_cachedir","title":"<code>pwndbg_cachedir = pwndbg.lib.tempfile.cachedir('custom-symbols')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.OnlyWhenStructFileExists","title":"<code>OnlyWhenStructFileExists(func)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.add_custom_structure","title":"<code>add_custom_structure(custom_structure_name)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.cymbol","title":"<code>cymbol(add, remove, edit, load, show)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.edit_custom_structure","title":"<code>edit_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.generate_debug_symbols","title":"<code>generate_debug_symbols(custom_structure_path, pwndbg_debug_symbols_output_file=None)</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.load_custom_structure","title":"<code>load_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.remove_custom_structure","title":"<code>remove_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.show_custom_structure","title":"<code>show_custom_structure(custom_structure_name, custom_structure_path='')</code>","text":""},{"location":"source/commands/cymbol/#pwndbg.commands.cymbol.unload_loaded_symbol","title":"<code>unload_loaded_symbol(custom_structure_name)</code>","text":""},{"location":"source/commands/dev/","title":"Dev","text":""},{"location":"source/commands/dev/#pwndbg.commands.dev.parser","title":"<code>parser = argparse.ArgumentParser(description='Set the log level.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/dev/#pwndbg.commands.dev.dev_dump_instruction","title":"<code>dev_dump_instruction(address=None, force_emulate=False, no_emulate=False)</code>","text":""},{"location":"source/commands/dev/#pwndbg.commands.dev.log_level","title":"<code>log_level(level)</code>","text":""},{"location":"source/commands/distance/","title":"Distance","text":""},{"location":"source/commands/distance/#pwndbg.commands.distance.parser","title":"<code>parser = argparse.ArgumentParser(description=\"Print the distance between the two arguments, or print the offset to the address's page base.\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/distance/#pwndbg.commands.distance.distance","title":"<code>distance(a, b)</code>","text":"<p>Print the distance between the two arguments</p>"},{"location":"source/commands/dt/","title":"Dt","text":""},{"location":"source/commands/dt/#pwndbg.commands.dt.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\n    Dump out information on a type (e.g. ucontext_t).\\n\\n    Optionally overlay that information at an address.\\n    ')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/dt/#pwndbg.commands.dt.dt","title":"<code>dt(typename, address=None)</code>","text":"<p>Dump out information on a type (e.g. ucontext_t).</p> <p>Optionally overlay that information at an address.</p>"},{"location":"source/commands/dumpargs/","title":"Dumpargs","text":""},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints determined arguments for call instruction.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.all_args","title":"<code>all_args()</code>","text":"<p>Returns list of all argument strings for display.</p>"},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.call_args","title":"<code>call_args()</code>","text":"<p>Returns list of resolved call argument strings for display. Attempts to resolve the target and determine the number of arguments. Should be used only when being on a call instruction.</p>"},{"location":"source/commands/dumpargs/#pwndbg.commands.dumpargs.dumpargs","title":"<code>dumpargs(force=False)</code>","text":""},{"location":"source/commands/elf/","title":"Elf","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.elfsections","title":"<code>elfsections()</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.get_section_bounds","title":"<code>get_section_bounds(section_name)</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.get_symbols_in_region","title":"<code>get_symbols_in_region(start, end, filter_text='')</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.gotplt","title":"<code>gotplt()</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.plt","title":"<code>plt()</code>","text":""},{"location":"source/commands/elf/#pwndbg.commands.elf.print_symbols_in_section","title":"<code>print_symbols_in_section(section_name, filter_text='')</code>","text":""},{"location":"source/commands/flags/","title":"Flags","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.description","title":"<code>description = 'Modify the flags register.'</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.epilog","title":"<code>epilog = 'Examples:\\n  On X86/X64:\\n    setflag ZF 1        -- set zero flag\\n    setflag CF 0        -- unset carry flag\\n\\n  On ARM:\\n    setflag Z 0         -- unset the Z cpsr/xpsr flag\\n\\n  To see flags registers:\\n    info reg eflags     -- on x86/x64\\n    info reg cpsr/xpsr  -- on ARM (specific register may vary)\\n\\n(This command supports flags registers that are defined for architectures in the pwndbg/regs.py file)\\n    '</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.parser","title":"<code>parser = argparse.ArgumentParser(description=description, epilog=epilog, formatter_class=RawTextHelpFormatter)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/flags/#pwndbg.commands.flags.setflag","title":"<code>setflag(flag, value)</code>","text":""},{"location":"source/commands/gdt/","title":"Gdt","text":""},{"location":"source/commands/gdt/#pwndbg.commands.gdt.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Decode X86-64 GDT entries at address\\n\\nSee also:\\n* https://wiki.osdev.org/Global_Descriptor_Table\\n* https://wiki.osdev.org/GDT_Tutorial\\n\\nNote:\\nIn 64-bit mode, the Base and Limit values are ignored, each descriptor covers the entire linear address space regardless of what they are set to.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/gdt/#pwndbg.commands.gdt.decode_gdt_entry","title":"<code>decode_gdt_entry(value)</code>","text":""},{"location":"source/commands/gdt/#pwndbg.commands.gdt.gdt","title":"<code>gdt(address, count)</code>","text":""},{"location":"source/commands/ghidra/","title":"Ghidra","text":""},{"location":"source/commands/ghidra/#pwndbg.commands.ghidra.parser","title":"<code>parser = argparse.ArgumentParser(description='Decompile a given function using Ghidra.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ghidra/#pwndbg.commands.ghidra.ghidra","title":"<code>ghidra(func)</code>","text":""},{"location":"source/commands/godbg/","title":"Godbg","text":""},{"location":"source/commands/godbg/#pwndbg.commands.godbg.parser","title":"<code>parser = argparse.ArgumentParser(description='Dumps a Go runtime reflection type at a specified address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/godbg/#pwndbg.commands.godbg.go_dump","title":"<code>go_dump(ty, address, hex, decimals, debug, pretty)</code>","text":""},{"location":"source/commands/godbg/#pwndbg.commands.godbg.go_type","title":"<code>go_type(address)</code>","text":""},{"location":"source/commands/got/","title":"Got","text":""},{"location":"source/commands/got/#pwndbg.commands.got.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got/#pwndbg.commands.got.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Show the state of the Global Offset Table.\\n\\nExamples:\\n    got\\n    got puts\\n    got -p libc\\n    got -a\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got/#pwndbg.commands.got.got","title":"<code>got(path_filter, all_, accept_readonly, symbol_filter)</code>","text":""},{"location":"source/commands/got_tracking/","title":"Got tracking","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.disable","title":"<code>disable = subparsers.add_parser('disable', help='Disable GOT tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.enable","title":"<code>enable = subparsers.add_parser('enable', help='Enable GOT parsing')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.parser","title":"<code>parser = argparse.ArgumentParser(description='Controls GOT tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.report","title":"<code>report = subparsers.add_parser('info', help='Give an overview of the GOT tracker')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.status","title":"<code>status = subparsers.add_parser('query', help='Queries detailed tracking information about a single entry in the GOT')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.subparsers","title":"<code>subparsers = parser.add_subparsers(required=True, description='Used to disable and query information about the tracker')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.columns","title":"<code>columns(rows, colors=None)</code>","text":"<p>Print data formatted into distinct columns.</p>"},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.got_report","title":"<code>got_report(soname='.*', writable=False, fnname='.*')</code>","text":"<p>Prints out a report of the current status of the GOT tracker.</p>"},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.got_tracking_status","title":"<code>got_tracking_status(address)</code>","text":"<p>Prints out information about a single GOT tracking entry.</p>"},{"location":"source/commands/got_tracking/#pwndbg.commands.got_tracking.track_got","title":"<code>track_got(mode=None, soname=None, writable=False, fnname=None, address=None)</code>","text":""},{"location":"source/commands/heap/","title":"Heap","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.VALID_CHARS","title":"<code>VALID_CHARS = list(map(ord, set(printable) - set('\\t\\r\\n\\x0c\\x0b')))</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows heap related configuration.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.try_free_parser","title":"<code>try_free_parser = argparse.ArgumentParser(description='Check what would happen if free was called with given address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.arena","title":"<code>arena(addr=None)</code>","text":"<p>Print the contents of an arena, default to the current thread's arena.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.arenas","title":"<code>arenas()</code>","text":"<p>Lists this process's arenas.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.bin_ascii","title":"<code>bin_ascii(bs)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.bin_labels_mapping","title":"<code>bin_labels_mapping(collections)</code>","text":"<p>Returns all potential bin labels for all potential addresses We precompute all of them because doing this on demand was too slow and inefficient See #1675 for more details</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.bins","title":"<code>bins(addr=None, tcache_addr=None)</code>","text":"<p>Print the contents of all an arena's bins and a thread's tcache, default to the current thread's arena and tcache.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.fastbins","title":"<code>fastbins(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's fastbins, default to the current thread's arena.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.find_fake_fast","title":"<code>find_fake_fast(target_address, max_candidate_size=None, align=False, glibc_fastbin_bug=False)</code>","text":"<p>Find candidate fake fast chunks overlapping the specified address.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.format_bin","title":"<code>format_bin(bins, verbose=False, offset=None)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.heap","title":"<code>heap(addr=None, verbose=False, simple=False)</code>","text":"<p>Iteratively print chunks on a heap, default to the current thread's active heap.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.heap_config","title":"<code>heap_config(filter_pattern)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.hi","title":"<code>hi(addr, verbose=False, simple=False, fake=False)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.largebins","title":"<code>largebins(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's largebins, default to the current thread's arena.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.malloc_chunk","title":"<code>malloc_chunk(addr, fake=False, verbose=False, simple=False, next=0, dump=False)</code>","text":"<p>Print a malloc_chunk struct's contents.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.mp","title":"<code>mp()</code>","text":"<p>Print the mp_ struct's contents.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.print_no_arena_found_error","title":"<code>print_no_arena_found_error(tid=None)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.print_no_tcache_bins_found_error","title":"<code>print_no_tcache_bins_found_error(tid=None)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.read_chunk","title":"<code>read_chunk(addr)</code>","text":"<p>Read a chunk's metadata.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.smallbins","title":"<code>smallbins(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's smallbins, default to the current thread's arena.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.tcache","title":"<code>tcache(addr=None)</code>","text":"<p>Print a thread's tcache contents, default to the current thread's tcache.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.tcachebins","title":"<code>tcachebins(addr=None, verbose=False)</code>","text":"<p>Print the contents of a tcache, default to the current thread's tcache.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.top_chunk","title":"<code>top_chunk(addr=None)</code>","text":"<p>Print relevant information about an arena's top chunk, default to the current thread's arena.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.try_free","title":"<code>try_free(addr)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.try_unlink","title":"<code>try_unlink(addr)</code>","text":""},{"location":"source/commands/heap/#pwndbg.commands.heap.unsortedbin","title":"<code>unsortedbin(addr=None, verbose=False)</code>","text":"<p>Print the contents of an arena's unsortedbin, default to the current thread's arena.</p>"},{"location":"source/commands/heap/#pwndbg.commands.heap.vis_heap_chunks","title":"<code>vis_heap_chunks(addr=None, count=None, beyond_top=False, no_truncate=False, all_chunks=False)</code>","text":"<p>Visualize chunks on a heap, default to the current arena's active heap.</p>"},{"location":"source/commands/heap_tracking/","title":"Heap tracking","text":""},{"location":"source/commands/heap_tracking/#pwndbg.commands.heap_tracking.disable","title":"<code>disable = subparsers.add_parser('disable', help='Disable heap tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap_tracking/#pwndbg.commands.heap_tracking.enable","title":"<code>enable = subparsers.add_parser('enable', help='Enable heap tracking')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap_tracking/#pwndbg.commands.heap_tracking.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Manages the heap tracker.\\n\\nThe heap tracker is a module that tracks usage of the GLibc heap and looks for\\nuser errors such as double frees and use after frees.\\n\\nCurrently, the following errors can be detected:\\n    - Use After Free\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap_tracking/#pwndbg.commands.heap_tracking.subparsers","title":"<code>subparsers = parser.add_subparsers(required=True, description='Used to enable, disable and query information about the tracker')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap_tracking/#pwndbg.commands.heap_tracking.toggle_break","title":"<code>toggle_break = subparsers.add_parser('toggle-break', help='Toggles whether possible UAF conditions will pause execution')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/heap_tracking/#pwndbg.commands.heap_tracking.track_heap","title":"<code>track_heap(mode=None, use_hardware_breakpoints=False)</code>","text":""},{"location":"source/commands/hexdump/","title":"Hexdump","text":""},{"location":"source/commands/hexdump/#pwndbg.commands.hexdump.parser","title":"<code>parser = argparse.ArgumentParser(description='Hexdumps data at the specified address or module name.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/hexdump/#pwndbg.commands.hexdump.address_or_module_name","title":"<code>address_or_module_name(s)</code>","text":""},{"location":"source/commands/hexdump/#pwndbg.commands.hexdump.hexdump","title":"<code>hexdump(address, count=pwndbg.config.hexdump_bytes)</code>","text":""},{"location":"source/commands/ida/","title":"Ida","text":""},{"location":"source/commands/ida/#pwndbg.commands.ida.parser","title":"<code>parser = argparse.ArgumentParser(description='Select and print stack frame called by this one.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ida/#pwndbg.commands.ida.down","title":"<code>down(n=1)</code>","text":"<p>Select and print stack frame called by this one.</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.ida","title":"<code>ida(name)</code>","text":"<p>Evaluate ida.LocByName() on the supplied value.</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.j","title":"<code>j(*args)</code>","text":"<p>Synchronize IDA's cursor with GDB</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.save_ida","title":"<code>save_ida()</code>","text":"<p>Save the IDA database</p>"},{"location":"source/commands/ida/#pwndbg.commands.ida.up","title":"<code>up(n=1)</code>","text":"<p>Select and print stack frame that called this one.</p>"},{"location":"source/commands/ignore/","title":"Ignore","text":"<p>Ignoring a breakpoint</p>"},{"location":"source/commands/ignore/#pwndbg.commands.ignore.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=\"Set ignore-count of breakpoint number N to COUNT.\\n\\nWhile the ignore count is positive, execution will not stop on the breakpoint.\\n\\nBy default, if `N' is ommitted, the last breakpoint (i.e. greatest breakpoint number) will be used.\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ignore/#pwndbg.commands.ignore.ignore","title":"<code>ignore(bpnum, count)</code>","text":""},{"location":"source/commands/integration/","title":"Integration","text":""},{"location":"source/commands/integration/#pwndbg.commands.integration.parser","title":"<code>parser = argparse.ArgumentParser(description='Use the current integration to decompile code near an address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/integration/#pwndbg.commands.integration.decomp","title":"<code>decomp(addr, lines)</code>","text":""},{"location":"source/commands/ipython_interactive/","title":"Ipython interactive","text":"<p>Command to start an interactive IPython prompt.</p>"},{"location":"source/commands/ipython_interactive/#pwndbg.commands.ipython_interactive.ipi","title":"<code>ipi()</code>","text":""},{"location":"source/commands/ipython_interactive/#pwndbg.commands.ipython_interactive.switch_to_ipython_env","title":"<code>switch_to_ipython_env()</code>","text":"<p>We need to change stdout/stderr to the default ones, otherwise we can't use tab or autocomplete</p>"},{"location":"source/commands/kbase/","title":"Kbase","text":""},{"location":"source/commands/kbase/#pwndbg.commands.kbase.parser","title":"<code>parser = argparse.ArgumentParser(description='Finds the kernel virtual base address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kbase/#pwndbg.commands.kbase.kbase","title":"<code>kbase(rebase=False)</code>","text":""},{"location":"source/commands/kchecksec/","title":"Kchecksec","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.parser","title":"<code>parser = argparse.ArgumentParser(description='Checks for kernel hardening configuration options.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option","title":"<code>Option</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option.cmdline_option","title":"<code>cmdline_option: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option.desired","title":"<code>desired: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.Option.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/kchecksec/#pwndbg.commands.kchecksec.kchecksec","title":"<code>kchecksec()</code>","text":""},{"location":"source/commands/kcmdline/","title":"Kcmdline","text":""},{"location":"source/commands/kcmdline/#pwndbg.commands.kcmdline.parser","title":"<code>parser = argparse.ArgumentParser(description='Return the kernel commandline (/proc/cmdline).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kcmdline/#pwndbg.commands.kcmdline.kcmdline","title":"<code>kcmdline()</code>","text":""},{"location":"source/commands/kconfig/","title":"Kconfig","text":""},{"location":"source/commands/kconfig/#pwndbg.commands.kconfig.parser","title":"<code>parser = argparse.ArgumentParser(description='Outputs the kernel config (requires CONFIG_IKCONFIG).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kconfig/#pwndbg.commands.kconfig.kconfig","title":"<code>kconfig(config_name=None)</code>","text":""},{"location":"source/commands/killthreads/","title":"Killthreads","text":""},{"location":"source/commands/killthreads/#pwndbg.commands.killthreads.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Kill all or given threads.\\n\\nSwitches to given threads and calls pthread_exit(0) on them.\\nThis is performed with scheduler-locking to prevent other threads from operating at the same time.\\n\\nKilling all other threads may be useful to use GDB checkpoints, e.g., to test given input &amp; restart the execution to the point of interest (checkpoint).\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/killthreads/#pwndbg.commands.killthreads.killthreads","title":"<code>killthreads(thread_ids=None, all=False)</code>","text":""},{"location":"source/commands/klookup/","title":"Klookup","text":""},{"location":"source/commands/klookup/#pwndbg.commands.klookup.parser","title":"<code>parser = argparse.ArgumentParser(description='Lookup kernel symbols')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/klookup/#pwndbg.commands.klookup.klookup","title":"<code>klookup(symbol)</code>","text":""},{"location":"source/commands/kversion/","title":"Kversion","text":""},{"location":"source/commands/kversion/#pwndbg.commands.kversion.parser","title":"<code>parser = argparse.ArgumentParser(description='Outputs the kernel version (/proc/version).')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/kversion/#pwndbg.commands.kversion.kversion","title":"<code>kversion()</code>","text":""},{"location":"source/commands/leakfind/","title":"Leakfind","text":"<p>Find a chain of leaks given some starting address.</p>"},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nAttempt to find a leak chain given a starting address.\\nScans memory near the given address, looks for pointers, and continues that process to attempt to find leaks.\\n\\nExample: leakfind $rsp --page_name=filename --max_offset=0x48 --max_depth=6. This would look for any chains of leaks that point to a section in filename which begin near $rsp, are never 0x48 bytes further from a known pointer, and are a maximum length of 6.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.dbg_print_map","title":"<code>dbg_print_map(maps)</code>","text":""},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.get_rec_addr_string","title":"<code>get_rec_addr_string(addr, visited_map)</code>","text":""},{"location":"source/commands/leakfind/#pwndbg.commands.leakfind.leakfind","title":"<code>leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0)</code>","text":""},{"location":"source/commands/linkmap/","title":"Linkmap","text":""},{"location":"source/commands/linkmap/#pwndbg.commands.linkmap.parser","title":"<code>parser = argparse.ArgumentParser(description='Show the state of the Link Map')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/linkmap/#pwndbg.commands.linkmap.linkmap","title":"<code>linkmap()</code>","text":""},{"location":"source/commands/memoize/","title":"Memoize","text":""},{"location":"source/commands/memoize/#pwndbg.commands.memoize.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nToggles memoization (caching).\\n\\nUseful for diagnosing caching-related bugs. Decreases performance.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/memoize/#pwndbg.commands.memoize.memoize","title":"<code>memoize()</code>","text":""},{"location":"source/commands/misc/","title":"Misc","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.cat_group","title":"<code>cat_group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints out a list of all pwndbg commands.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.errno_","title":"<code>errno_(err)</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.list_and_filter_commands","title":"<code>list_and_filter_commands(filter_str, pwndbg_cmds=True, shell_cmds=False)</code>","text":""},{"location":"source/commands/misc/#pwndbg.commands.misc.pwndbg_","title":"<code>pwndbg_(filter_pattern, shell, all_, category_, list_categories)</code>","text":""},{"location":"source/commands/mmap/","title":"Mmap","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.flag_dict","title":"<code>flag_dict = {'MAP_SHARED': 1, 'MAP_PRIVATE': 2, 'MAP_SHARED_VALIDATE': 3, 'MAP_FIXED': 16, 'MAP_ANONYMOUS': 32}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nCalls the mmap syscall and prints its resulting address.\\n\\nNote that the mmap syscall may fail for various reasons\\n(see `man mmap`) and, in case of failure, its return value\\nwill not be a valid pointer.\\n\\nPROT values: NONE (0), READ (1), WRITE (2), EXEC (4)\\nMAP values: SHARED (1), PRIVATE (2), SHARED_VALIDATE (3), FIXED (0x10),\\n            ANONYMOUS (0x20)\\n\\nFlags and protection values can be either a string containing the names of the\\nflags or permissions or a single number corresponding to the bitwise OR of the\\nprotection and flag numbers.\\n\\nExamples:\\n    mmap 0x0 4096 PROT_READ|PROT_WRITE|PROT_EXEC MAP_PRIVATE|MAP_ANONYMOUS -1 0\\n     - Maps a new private+anonymous page with RWX permissions at a location\\n       decided by the kernel.\\n\\n    mmap 0x0 4096 PROT_READ MAP_PRIVATE 10 0\\n     - Maps 4096 bytes of the file pointed to by file descriptor number 10 with\\n       read permission at a location decided by the kernel.\\n\\n    mmap 0xdeadbeef 0x1000\\n     - Maps a new private+anonymous page with RWX permissions at a page boundary\\n       near 0xdeadbeef.\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.prot_dict","title":"<code>prot_dict = {'PROT_NONE': 0, 'PROT_READ': 1, 'PROT_WRITE': 2, 'PROT_EXEC': 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.flag_str_to_val","title":"<code>flag_str_to_val(flagstr)</code>","text":"<p>Heuristic to convert MAP_SHARED|MAP_FIXED to integer value.</p>"},{"location":"source/commands/mmap/#pwndbg.commands.mmap.mmap","title":"<code>mmap(addr, length, prot=7, flags=34, fd=-1, offset=0, quiet=False, force=False)</code>","text":""},{"location":"source/commands/mmap/#pwndbg.commands.mmap.parse_str_or_int","title":"<code>parse_str_or_int(val, parser)</code>","text":"<p>Try parsing a string with one of the parsers above or by converting it to an int, or passes the value through if it is already an integer.</p>"},{"location":"source/commands/mmap/#pwndbg.commands.mmap.prot_str_to_val","title":"<code>prot_str_to_val(protstr)</code>","text":"<p>Heuristic to convert PROT_EXEC|PROT_WRITE to integer value.</p>"},{"location":"source/commands/mprotect/","title":"Mprotect","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.SYS_MPROTECT","title":"<code>SYS_MPROTECT = 125</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nCalls the mprotect syscall and prints its result value.\\n\\nNote that the mprotect syscall may fail for various reasons\\n(see `man mprotect`) and a non-zero error return value\\ncan be decoded with the `errno &lt;value&gt;` command.\\n\\nExamples:\\n    mprotect $rsp 4096 PROT_READ|PROT_WRITE|PROT_EXEC\\n    mprotect $rsp 4096 rwx\\n    mprotect $rsp 4096 7\\n    mprotect some_symbol 0x1000 PROT_NONE\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.prot_dict","title":"<code>prot_dict = {'PROT_NONE': 0, 'PROT_READ': 1, 'PROT_WRITE': 2, 'PROT_EXEC': 4}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.mprotect","title":"<code>mprotect(addr, length, prot)</code>","text":""},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.prot_str_to_val","title":"<code>prot_str_to_val(protstr)</code>","text":"<p>Converts a protection string to an integer. Formats include:  - A positive integer, like 3  - A combination of r, w, and x, like rw  - A combination of PROT_READ, PROT_WRITE, and PROT_EXEC, like PROT_READ|PROT_WRITE</p>"},{"location":"source/commands/mprotect/#pwndbg.commands.mprotect.prot_val_to_str","title":"<code>prot_val_to_str(protval)</code>","text":""},{"location":"source/commands/nearpc/","title":"Nearpc","text":""},{"location":"source/commands/nearpc/#pwndbg.commands.nearpc.parser","title":"<code>parser = argparse.ArgumentParser(description='Like nearpc, but will emulate instructions from the current $PC forward.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/nearpc/#pwndbg.commands.nearpc.emulate","title":"<code>emulate(pc=None, lines=None, emulate_=True)</code>","text":"<p>Like nearpc, but will emulate instructions from the current $PC forward.</p>"},{"location":"source/commands/nearpc/#pwndbg.commands.nearpc.nearpc","title":"<code>nearpc(pc=None, lines=None, emulate=False, use_cache=False, linear=True)</code>","text":"<p>Disassemble near a specified address.</p>"},{"location":"source/commands/next/","title":"Next","text":"<p>Stepping until an event occurs</p>"},{"location":"source/commands/next/#pwndbg.commands.next.parser","title":"<code>parser = argparse.ArgumentParser(description='Breaks on the next matching instruction.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/next/#pwndbg.commands.next.nextcall","title":"<code>nextcall(symbol_regex=None)</code>","text":"<p>Breaks at the next call instruction</p>"},{"location":"source/commands/next/#pwndbg.commands.next.nextjmp","title":"<code>nextjmp()</code>","text":"<p>Breaks at the next jump instruction</p>"},{"location":"source/commands/next/#pwndbg.commands.next.nextproginstr","title":"<code>nextproginstr()</code>","text":""},{"location":"source/commands/next/#pwndbg.commands.next.nextret","title":"<code>nextret()</code>","text":"<p>Breaks at next return-like instruction</p>"},{"location":"source/commands/next/#pwndbg.commands.next.nextsyscall","title":"<code>nextsyscall()</code>","text":"<p>Breaks at the next syscall not taking branches.</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepover","title":"<code>stepover(addr=None)</code>","text":"<p>Sets a breakpoint on the instruction after this one</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepret","title":"<code>stepret()</code>","text":"<p>Breaks at next return-like instruction by 'stepping' to it</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepsyscall","title":"<code>stepsyscall()</code>","text":"<p>Breaks at the next syscall by taking branches.</p>"},{"location":"source/commands/next/#pwndbg.commands.next.stepuntilasm","title":"<code>stepuntilasm(mnemonic, op_str)</code>","text":""},{"location":"source/commands/onegadget/","title":"Onegadget","text":""},{"location":"source/commands/onegadget/#pwndbg.commands.onegadget.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Show onegadget\\n\\nExamples:\\n    onegadget\\n    onegadget --show-unsat\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/onegadget/#pwndbg.commands.onegadget.onegadget","title":"<code>onegadget(show_unsat=False, no_unknown=False, verbose=False)</code>","text":""},{"location":"source/commands/p2p/","title":"P2p","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Pointer to pointer chain search. Searches given mapping for all pointers that point to specified mapping.\\n\\nAny chain length greater than 0 is valid. If only one mapping is given it just looks for any pointers in that mapping.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.ts","title":"<code>ts = pwndbg.commands.telescope.telescope</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange","title":"<code>AddrRange</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.begin","title":"<code>begin = begin</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.end","title":"<code>end = end</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.__init__","title":"<code>__init__(begin, end)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.AddrRange.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.address_range","title":"<code>address_range(section)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.address_range_explicit","title":"<code>address_range_explicit(section)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.get_addrrange_any_named","title":"<code>get_addrrange_any_named()</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.maybe_points_to_ranges","title":"<code>maybe_points_to_ranges(ptr, rs)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.p2p","title":"<code>p2p(mapping_names=None)</code>","text":""},{"location":"source/commands/p2p/#pwndbg.commands.p2p.p2p_walk","title":"<code>p2p_walk(addr, ranges, current_level)</code>","text":""},{"location":"source/commands/patch/","title":"Patch","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.parser","title":"<code>parser = argparse.ArgumentParser(description='Patches given instruction with given code or bytes.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.parser2","title":"<code>parser2 = argparse.ArgumentParser(description='Revert patch at given address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.parser3","title":"<code>parser3 = argparse.ArgumentParser(description='List all patches.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patches","title":"<code>patches: Dict[int, Tuple[bytearray, bytearray]] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patch","title":"<code>patch(address, ins, quiet)</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patch_list","title":"<code>patch_list()</code>","text":""},{"location":"source/commands/patch/#pwndbg.commands.patch.patch_revert","title":"<code>patch_revert(address)</code>","text":""},{"location":"source/commands/pcplist/","title":"Pcplist","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.log","title":"<code>log = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.parser","title":"<code>parser = argparse.ArgumentParser(description='Print Per-CPU page list')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.pcplist","title":"<code>pcplist(zone=None, list_num=None)</code>","text":""},{"location":"source/commands/pcplist/#pwndbg.commands.pcplist.print_zone","title":"<code>print_zone(zone, list_num=None)</code>","text":""},{"location":"source/commands/peda/","title":"Peda","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.parser","title":"<code>parser = argparse.ArgumentParser(description='Continue execution until an address or expression.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.xinfo","title":"<code>xinfo = pwndbg.commands.context.context</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.xprint","title":"<code>xprint = pwndbg.commands.telescope.telescope</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.getfile","title":"<code>getfile()</code>","text":""},{"location":"source/commands/peda/#pwndbg.commands.peda.xuntil","title":"<code>xuntil(target)</code>","text":""},{"location":"source/commands/pie/","title":"Pie","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.parser","title":"<code>parser = argparse.ArgumentParser(description='Calculate VA of RVA from PIE base.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.breakrva","title":"<code>breakrva(offset=0, module=None)</code>","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.piebase","title":"<code>piebase(offset=None, module=None)</code>","text":""},{"location":"source/commands/pie/#pwndbg.commands.pie.translate_addr","title":"<code>translate_addr(offset, module)</code>","text":""},{"location":"source/commands/plist/","title":"Plist","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Dumps the elements of a linked list.\\n\\nThis command traverses the linked list beginning at a given element, dumping its\\ncontents and the contents of all the elements that come after it in the list.\\nTraversal is configurable and can handle multiple types of linked lists, but will\\nalways stop when a cycle is detected.\\n\\nThe path to the first element can be any GDB expression that evaluates to either\\nthe first element directly, or a to pointer to it. The next element is the name\\nof the field containing the next pointer, in either the structure itself or in\\nthe structure given by --inner.\\n\\nAn address value may be given with --sentinel that signals the end of the list.\\nBy default, the value used is NULL (0).\\n\\nIf only one field inside each node is desired, it can be printed exclusively by\\nspecifying its name with --field.\\n\\nThis command supports traversing three types of linked lists, classified by how\\nthe next pointer can be found in the structure and what type it is:\\n    1 - Next pointer is field of structure, type is the same as structure.\\n    2 - Next pointer is field of inner nested structure, pointed to type is the\\n        same as outer structure.\\n    3 - Next pointer is field of inner nested structure, pointed to type is the\\n        same as inner structure.\\nTypes 2 and 3 require --inner to be specified.\\n\\nExample 1:\\n\\n```\\nstruct node {\\n    int value;\\n    struct node *next;\\n};\\nstruct node node_c = { 2, NULL };\\nstruct node node_b = { 1, &amp;node_c };\\nstruct node node_a = { 0, &amp;node_b };\\n```\\n\\npwndbg&gt; plist node_a next\\n0x4000011050 &lt;node_a&gt;: {\\n  value = 0,\\n  next = 0x4000011040 &lt;node_b&gt;\\n}\\n0x4000011040 &lt;node_b&gt;: {\\n  value = 1,\\n  next = 0x4000011010 &lt;node_c&gt;\\n}\\n0x4000011010 &lt;node_c&gt;: {\\n  value = 2,\\n  next = 0x0\\n}\\n\\nExample 2:\\n\\n```\\nstruct node_inner_a {\\n    struct node_inner_a *next;\\n};\\nstruct inner_a_node {\\n    int value;\\n    struct node_inner_a inner;\\n};\\nstruct inner_a_node inner_a_node_c = { 2, { NULL } };\\nstruct inner_a_node inner_a_node_b = { 1, { &amp;inner_a_node_c.inner } };\\nstruct inner_a_node inner_a_node_a = { 0, { &amp;inner_a_node_b.inner } };\\n```\\n\\npwndbg&gt; plist inner_a_node_a -i inner next\\n0x4000011070 &lt;inner_a_node_a&gt;: {\\n  value = 0,\\n  inner = {\\n    next = 0x4000011068 &lt;inner_a_node_b+8&gt;\\n  }\\n}\\n0x4000011060 &lt;inner_a_node_b&gt;: {\\n  value = 1,\\n  inner = {\\n    next = 0x4000011028 &lt;inner_a_node_c+8&gt;\\n  }\\n}\\n0x4000011020 &lt;inner_a_node_c&gt;: {\\n  value = 2,\\n  inner = {\\n    next = 0x0\\n  }\\n}\\n\\nExample 3:\\n\\n```\\nstruct inner_b_node;\\nstruct node_inner_b {\\n    struct inner_b_node *next;\\n};\\nstruct inner_b_node {\\n    int value;\\n    struct node_inner_b inner;\\n};\\nstruct inner_b_node inner_b_node_c = { 2, { NULL } };\\nstruct inner_b_node inner_b_node_b = { 1, { &amp;inner_b_node_c } };\\nstruct inner_b_node inner_b_node_a = { 0, { &amp;inner_b_node_b } };\\n```\\n\\npwndbg&gt; plist inner_b_node_a -i inner next\\n0x4000011090 &lt;inner_b_node_a&gt;: {\\n  value = 0,\\n  inner = {\\n    next = 0x4000011080 &lt;inner_b_node_b&gt;\\n  }\\n}\\n0x4000011080 &lt;inner_b_node_b&gt;: {\\n  value = 1,\\n  inner = {\\n    next = 0x4000011030 &lt;inner_b_node_c&gt;\\n  }\\n}\\n0x4000011030 &lt;inner_b_node_c&gt;: {\\n  value = 2,\\n  inner = {\\n    next = 0x0\\n  }\\n}\\n\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.bit_offset_of_field","title":"<code>bit_offset_of_field(struct, field_name, inner_name=None)</code>","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.get_byte_offset","title":"<code>get_byte_offset(bit_offset)</code>","text":""},{"location":"source/commands/plist/#pwndbg.commands.plist.plist","title":"<code>plist(path, next, sentinel, inner_name, field_name, offset, count=None)</code>","text":""},{"location":"source/commands/probeleak/","title":"Probeleak","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='\\nPointer scan for possible offset leaks.\\nExamples:\\n    probeleak $rsp 0x64 - leaks 0x64 bytes starting at stack pointer and search for valid pointers\\n    probeleak $rsp 0x64 --max-dist 0x10 - as above, but pointers may point 0x10 bytes outside of memory page\\n    probeleak $rsp 0x64 --point-to libc --max-ptrs 1 --flags rwx - leaks 0x64 bytes starting at stack pointer and search for one valid pointer which points to a libc rwx page\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.find_module","title":"<code>find_module(addr, max_distance)</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.flags_str2int","title":"<code>flags_str2int(flags_s)</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.probeleak","title":"<code>probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None)</code>","text":""},{"location":"source/commands/probeleak/#pwndbg.commands.probeleak.satisfied_flags","title":"<code>satisfied_flags(require_flags, flags)</code>","text":""},{"location":"source/commands/procinfo/","title":"Procinfo","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.capabilities","title":"<code>capabilities = {0: 'CAP_CHOWN', 1: 'CAP_DAC_OVERRIDE', 2: 'CAP_DAC_READ_SEARCH', 3: 'CAP_FOWNER', 4: 'CAP_FSETID', 5: 'CAP_KILL', 6: 'CAP_SETGID', 7: 'CAP_SETUID', 8: 'CAP_SETPCAP', 9: 'CAP_LINUX_IMMUTABLE', 10: 'CAP_NET_BIND_SERVICE', 11: 'CAP_NET_BROADCAST', 12: 'CAP_NET_ADMIN', 13: 'CAP_NET_RAW', 14: 'CAP_IPC_LOCK', 15: 'CAP_IPC_OWNER', 16: 'CAP_SYS_MODULE', 17: 'CAP_SYS_RAWIO', 18: 'CAP_SYS_CHROOT', 19: 'CAP_SYS_PTRACE', 20: 'CAP_SYS_PACCT', 21: 'CAP_SYS_ADMIN', 22: 'CAP_SYS_BOOT', 23: 'CAP_SYS_NICE', 24: 'CAP_SYS_RESOURCE', 25: 'CAP_SYS_TIME', 26: 'CAP_SYS_TTY_CONFIG', 27: 'CAP_MKNOD', 28: 'CAP_LEASE', 29: 'CAP_AUDIT_WRITE', 30: 'CAP_AUDIT_CONTROL', 31: 'CAP_SETFCAP', 32: 'CAP_MAC_OVERRIDE', 33: 'CAP_MAC_ADMIN', 34: 'CAP_SYSLOG', 35: 'CAP_WAKE_ALARM', 36: 'CAP_BLOCK_SUSPEND'}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process","title":"<code>Process</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.cmdline","title":"<code>cmdline</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.connections","title":"<code>connections</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.cwd","title":"<code>cwd: str</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.open_files","title":"<code>open_files</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.pid","title":"<code>pid = pid</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.selinux","title":"<code>selinux</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.status","title":"<code>status</code>  <code>property</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.tid","title":"<code>tid = tid</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.Process.__init__","title":"<code>__init__(pid=None, tid=None)</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.pid","title":"<code>pid()</code>","text":""},{"location":"source/commands/procinfo/#pwndbg.commands.procinfo.procinfo","title":"<code>procinfo()</code>","text":"<p>Display information about the running process.</p>"},{"location":"source/commands/radare2/","title":"Radare2","text":""},{"location":"source/commands/radare2/#pwndbg.commands.radare2.parser","title":"<code>parser = argparse.ArgumentParser(description='Execute stateful radare2 commands through r2pipe.', epilog='Example: r2pipe pdf sym.main')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/radare2/#pwndbg.commands.radare2.r2","title":"<code>r2(arguments, no_seek=False, no_rebase=False)</code>","text":""},{"location":"source/commands/radare2/#pwndbg.commands.radare2.r2pipe","title":"<code>r2pipe(arguments)</code>","text":""},{"location":"source/commands/reload/","title":"Reload","text":""},{"location":"source/commands/reload/#pwndbg.commands.reload.reinit_pwndbg","title":"<code>reinit_pwndbg()</code>","text":"<p>Makes pwndbg reinitialize all state.</p>"},{"location":"source/commands/reload/#pwndbg.commands.reload.reload","title":"<code>reload(*a)</code>","text":""},{"location":"source/commands/reload/#pwndbg.commands.reload.rreload","title":"<code>rreload(module, _exclude_mods=None)</code>","text":"<p>Recursively reload modules. Impl based on https://stackoverflow.com/a/66661311/1508881</p>"},{"location":"source/commands/retaddr/","title":"Retaddr","text":""},{"location":"source/commands/retaddr/#pwndbg.commands.retaddr.retaddr","title":"<code>retaddr()</code>","text":""},{"location":"source/commands/rizin/","title":"Rizin","text":""},{"location":"source/commands/rizin/#pwndbg.commands.rizin.parser","title":"<code>parser = argparse.ArgumentParser(description='Execute stateful rizin commands through rzpipe.', epilog='Example: rzpipe pdf sym.main')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/rizin/#pwndbg.commands.rizin.rz","title":"<code>rz(arguments, no_seek=False, no_rebase=False)</code>","text":""},{"location":"source/commands/rizin/#pwndbg.commands.rizin.rzpipe","title":"<code>rzpipe(arguments)</code>","text":""},{"location":"source/commands/rop/","title":"Rop","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.parser","title":"<code>parser = argparse.ArgumentParser(description=\"Dump ROP gadgets with Jon Salwan's ROPgadget tool.\", epilog=\"Example: rop --grep 'pop rdi' -- --nojop\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/rop/#pwndbg.commands.rop.rop","title":"<code>rop(grep, argument)</code>","text":""},{"location":"source/commands/ropper/","title":"Ropper","text":""},{"location":"source/commands/ropper/#pwndbg.commands.ropper.parser","title":"<code>parser = argparse.ArgumentParser(description='ROP gadget search with ropper.', epilog=\"Example: ropper -- --console; ropper -- --search 'mov e?x'\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/ropper/#pwndbg.commands.ropper.ropper","title":"<code>ropper(argument)</code>","text":""},{"location":"source/commands/search/","title":"Search","text":""},{"location":"source/commands/search/#pwndbg.commands.search.auto_save","title":"<code>auto_save = pwndbg.config.add_param('auto-save-search', False, 'automatically pass --save to \"search\" command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/search/#pwndbg.commands.search.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=\"Search memory for byte sequences, strings, pointers, and integer values.\\n\\nBy default search results are cached. If you want to cache all results, but only print a subset, use --trunc-out. If you want to cache only a subset of results, and print the results immediately, use --limit. The latter is specially useful if you're searching a huge section of memory.\\n\\n\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/search/#pwndbg.commands.search.saved","title":"<code>saved: Set[int] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/search/#pwndbg.commands.search.print_search_hit","title":"<code>print_search_hit(address)</code>","text":"<p>Prints out a single search hit.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to print</p> required"},{"location":"source/commands/search/#pwndbg.commands.search.search","title":"<code>search(type, arch, asmbp, hex, executable, writable, step, limit, aligned, value, mapping_name, save, next, trunc_out)</code>","text":""},{"location":"source/commands/segments/","title":"Segments","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.segment","title":"<code>segment</code>","text":"<p>               Bases: <code>Function</code></p> <p>Get the flat address of memory based off of the named segment register.</p>"},{"location":"source/commands/segments/#pwndbg.commands.segments.segment.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.segment.__init__","title":"<code>__init__(name)</code>","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.segment.invoke","title":"<code>invoke(arg=gdb.Value(0), *args)</code>","text":""},{"location":"source/commands/segments/#pwndbg.commands.segments.fsbase","title":"<code>fsbase()</code>","text":"<p>Prints out the FS base address. See also $fsbase.</p>"},{"location":"source/commands/segments/#pwndbg.commands.segments.gsbase","title":"<code>gsbase()</code>","text":"<p>Prints out the GS base address. See also $gsbase.</p>"},{"location":"source/commands/shell/","title":"Shell","text":"<p>Wrapper for shell commands.</p>"},{"location":"source/commands/shell/#pwndbg.commands.shell.pwncmd_names","title":"<code>pwncmd_names = ['constgrep', 'disasm', 'pwn', 'unhex']</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.pwncmds","title":"<code>pwncmds = list(filter(which, pwncmd_names))</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.shellcmd_names","title":"<code>shellcmd_names = ['awk', 'bash', 'cat', 'chattr', 'chmod', 'chown', 'cp', 'date', 'diff', 'egrep', 'grep', 'htop', 'id', 'less', 'ls', 'man', 'mkdir', 'mktemp', 'more', 'mv', 'nano', 'nc', 'ping', 'pkill', 'ps', 'pstree', 'pwd', 'rm', 'sed', 'sh', 'sort', 'ssh', 'sudo', 'tail', 'top', 'touch', 'uniq', 'vi', 'vim', 'w', 'wget', 'who', 'whoami', 'zsh']</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.shellcmds","title":"<code>shellcmds = list(filter(which, shellcmd_names))</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/shell/#pwndbg.commands.shell.register_shell_function","title":"<code>register_shell_function(cmd, deprecated=False)</code>","text":""},{"location":"source/commands/sigreturn/","title":"Sigreturn","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.SIGRETURN_CORE_REGISTER","title":"<code>SIGRETURN_CORE_REGISTER: Dict[str, Set[str]] = {'x86-64': {*amd64.gpr, amd64.frame, amd64.stack, amd64.pc}, 'i386': {*i386.gpr, i386.frame, i386.stack, i386.pc}, 'aarch64': {*aarch64.gpr, 'sp', 'pc'}, 'arm': {*arm.gpr, 'fp', 'ip', 'sp', 'lr', 'pc'}}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.SIGRETURN_FRAME_LAYOUTS","title":"<code>SIGRETURN_FRAME_LAYOUTS: Dict[str, List[Tuple[int, str]]] = {'x86-64': sorted([(-8, '&amp;pretcode')] + list(pwnlib.rop.srop.registers['amd64'].items())), 'i386': sorted(pwnlib.rop.srop.registers['i386'].items()), 'aarch64': sorted(pwnlib.rop.srop.registers['aarch64'].items()), 'arm': sorted(pwnlib.rop.srop.registers['arm'].items())}</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.parser","title":"<code>parser = argparse.ArgumentParser(description='Display the SigreturnFrame at the specific address')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.print_value","title":"<code>print_value(string, address, print_address)</code>","text":""},{"location":"source/commands/sigreturn/#pwndbg.commands.sigreturn.sigreturn","title":"<code>sigreturn(address=None, display_all=False, print_address=False)</code>","text":""},{"location":"source/commands/slab/","title":"Slab","text":"<p>Commands for dealing with Linux kernel slab allocator. Currently, only SLUB is supported.</p> <p>Some of the code here was inspired from https://github.com/NeatMonster/slabdbg Some of the code here was inspired from https://github.com/osandov/drgn</p>"},{"location":"source/commands/slab/#pwndbg.commands.slab.parser","title":"<code>parser = argparse.ArgumentParser(description='Prints information about the slab allocator')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.parser_contains","title":"<code>parser_contains = subparsers.add_parser('contains', prog='slab contains')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.parser_info","title":"<code>parser_info = subparsers.add_parser('info', prog='slab info')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.parser_list","title":"<code>parser_list = subparsers.add_parser('list', prog='slab list')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.subparsers","title":"<code>subparsers = parser.add_subparsers(dest='command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager","title":"<code>IndentContextManager</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.indent","title":"<code>indent = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.__enter__","title":"<code>__enter__()</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.__exit__","title":"<code>__exit__(exc_type, exc_value, exc_tb)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.IndentContextManager.print","title":"<code>print(*a, **kw)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.print_cpu_cache","title":"<code>print_cpu_cache(cpu_cache, verbose, indent)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.print_node_cache","title":"<code>print_node_cache(node_cache, verbose, indent)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.print_slab","title":"<code>print_slab(slab, indent, verbose)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.slab","title":"<code>slab(command, filter_=None, names=None, verbose=False, addresses=None)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.slab_contains","title":"<code>slab_contains(address)</code>","text":"<p>prints the slab_cache associated with the provided address</p>"},{"location":"source/commands/slab/#pwndbg.commands.slab.slab_info","title":"<code>slab_info(name, verbose)</code>","text":""},{"location":"source/commands/slab/#pwndbg.commands.slab.slab_list","title":"<code>slab_list(filter_)</code>","text":""},{"location":"source/commands/spray/","title":"Spray","text":""},{"location":"source/commands/spray/#pwndbg.commands.spray.parser","title":"<code>parser = argparse.ArgumentParser(description='Spray memory with cyclic() generated values')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/spray/#pwndbg.commands.spray.spray","title":"<code>spray(addr, length, value, only_funcptrs)</code>","text":""},{"location":"source/commands/start/","title":"Start","text":"<p>Launches the target process after setting a breakpoint at a convenient entry point.</p>"},{"location":"source/commands/start/#pwndbg.commands.start.break_on_first_instruction","title":"<code>break_on_first_instruction = False</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter, description='\\nStart the debugged program stopping at its entrypoint address.\\n\\nNote that the entrypoint may not be the first instruction executed\\nby the program. If you want to stop on the first executed instruction,\\nuse the GDB\\'s `starti` command.\\n\\nArgs may include \"*\", or \"[...]\"; they are expanded using the\\nshell that will start the program (specified by the \"$SHELL\" environment\\nvariable).  Input and output redirection with \"&gt;\", \"&lt;\", or \"&gt;&gt;\"\\nare also allowed.\\n\\nWith no arguments, uses arguments last specified (with \"run\" or\\n\"set args\").  To cancel previous arguments and run with no arguments,\\nuse \"set args\" without arguments.\\n\\nTo start the inferior without using a shell, use \"set startup-with-shell off\".\\n')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.entry","title":"<code>entry(args=[])</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.on_start","title":"<code>on_start()</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.sstart","title":"<code>sstart()</code>","text":""},{"location":"source/commands/start/#pwndbg.commands.start.start","title":"<code>start(args=None)</code>","text":""},{"location":"source/commands/telescope/","title":"Telescope","text":"<p>Prints out pointer chains starting at some address in memory.</p> <p>Generally used to print out the stack or register values.</p>"},{"location":"source/commands/telescope/#pwndbg.commands.telescope.offset_delimiter","title":"<code>offset_delimiter = theme.add_param('telescope-offset-delimiter', ':', 'offset delimiter of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.offset_separator","title":"<code>offset_separator = theme.add_param('telescope-offset-separator', '\u2502', 'offset separator of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.parser","title":"<code>parser = argparse.ArgumentParser(description='Dereferences on stack data, printing the entire stack frame with specified count and offset .')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.print_framepointer_offset","title":"<code>print_framepointer_offset = pwndbg.config.add_param('telescope-framepointer-offset', True, 'print offset to framepointer for each address, if sufficiently small')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.repeating_marker","title":"<code>repeating_marker = theme.add_param('telescope-repeating-marker', '... \u2193', 'repeating values marker of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.skip_repeating_values","title":"<code>skip_repeating_values = pwndbg.config.add_param('telescope-skip-repeating-val', True, 'whether to skip repeating values of the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.skip_repeating_values_minimum","title":"<code>skip_repeating_values_minimum = pwndbg.config.add_param('telescope-skip-repeating-val-minimum', 3, 'minimum amount of repeated values before skipping lines')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.telescope_lines","title":"<code>telescope_lines = pwndbg.config.add_param('telescope-lines', 8, 'number of lines to printed by the telescope command')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.regs_or_frame_offset","title":"<code>regs_or_frame_offset(addr, bp, regs, longest_regs)</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.stack","title":"<code>stack(count, offset, frame, inverse)</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.stackf","title":"<code>stackf(count, offset)</code>","text":""},{"location":"source/commands/telescope/#pwndbg.commands.telescope.telescope","title":"<code>telescope(address=None, count=telescope_lines, to_string=False, reverse=False, frame=False, inverse=False)</code>","text":"<p>Recursively dereferences pointers starting at the specified address ($sp by default)</p>"},{"location":"source/commands/tips/","title":"Tips","text":""},{"location":"source/commands/tips/#pwndbg.commands.tips.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows tips.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/tips/#pwndbg.commands.tips.tips","title":"<code>tips(all)</code>","text":""},{"location":"source/commands/tls/","title":"Tls","text":"<p>Command to print the information of the current Thread Local Storage (TLS).</p>"},{"location":"source/commands/tls/#pwndbg.commands.tls.group","title":"<code>group = parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/tls/#pwndbg.commands.tls.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='List all threads belonging to the selected inferior.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/tls/#pwndbg.commands.tls.threads","title":"<code>threads(num_threads, respect_config)</code>","text":""},{"location":"source/commands/tls/#pwndbg.commands.tls.tls","title":"<code>tls(pthread_self=False)</code>","text":""},{"location":"source/commands/valist/","title":"Valist","text":""},{"location":"source/commands/valist/#pwndbg.commands.valist.parser","title":"<code>parser = argparse.ArgumentParser(description='Dumps the arguments of a va_list.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/valist/#pwndbg.commands.valist.valist","title":"<code>valist(addr, count)</code>","text":""},{"location":"source/commands/version/","title":"Version","text":"<p>Displays gdb, python and pwndbg versions.</p>"},{"location":"source/commands/version/#pwndbg.commands.version.bugreport_group","title":"<code>bugreport_group = bugreport_parser.add_mutually_exclusive_group()</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.bugreport_parser","title":"<code>bugreport_parser = argparse.ArgumentParser(description='Generate a bug report.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.all_versions","title":"<code>all_versions()</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.bugreport","title":"<code>bugreport(run_browser=False, use_gh=False)</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.capstone_version","title":"<code>capstone_version()</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.unicorn_version","title":"<code>unicorn_version()</code>","text":""},{"location":"source/commands/version/#pwndbg.commands.version.version","title":"<code>version()</code>","text":"<p>Displays GDB, Python, and pwndbg versions.</p>"},{"location":"source/commands/vmmap/","title":"Vmmap","text":"<p>Command to print the virtual memory map a la /proc/self/maps.</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.integer_types","title":"<code>integer_types = (int, pwndbg.dbg_mod.Value)</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.parser","title":"<code>parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='Print virtual memory map pages.\\n\\nUnnamed mappings are named as [anon_%#x] where %#x is high part of their start address. This is useful for filtering with `vmmap` or `search` commands.\\n\\nKnown issues with vmmap:\\nFor QEMU user targets, the QEMU\\'s gdbstub does not provide memory maps information to GDB until [0] is finished &amp; merged. We try to deal with it without parsing the QEMU process\\' /proc/$pid/maps file, but if our approach fails, we simply create a [0, 0xffff...] vmmap which is not great and may result in lack of proper colors or inability to search memory with the `search` command.\\n\\nFor QEMU kernel, we use gdb-pt-dump that parses page tables from the guest by reading /proc/$pid/mem of QEMU process. If this does not work for you, use `set kernel-vmmap-via-page-tables off` to refer to our old method of reading vmmap info from `monitor info mem` command exposed by QEMU. Note that the latter may be slower and will not give full vmmaps permission information.\\n\\nFor coredump debugging, GDB also lacks all vmmap info but we do our best to get it back by using the `info proc mappings` and `maintenance info sections` commands.\\n\\nAs a last resort, we sometimes try to explore the addresses in CPU registers and if they are readable by GDB, we determine their bounds and create an \"&lt;explored&gt;\" vmmap. However, this method is slow and is not used on each GDB stop.\\n\\nMemory pages can also be added manually with the use of vmmap_add, vmmap_clear and vmmap_load commands. This may be useful for bare metal debugging.\\n\\n[0] https://lore.kernel.org/all/20220221030910.3203063-1-dominik.b.czarnota@gmail.com/')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.calculate_total_memory","title":"<code>calculate_total_memory(pages)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.gap_text","title":"<code>gap_text(page)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.pages_filter","title":"<code>pages_filter(gdbval_or_str)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_adjacent_map","title":"<code>print_adjacent_map(map_start, map_end)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_gap","title":"<code>print_gap(current, last_map)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_guard","title":"<code>print_guard(page)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_map","title":"<code>print_map(page)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_vmmap_gaps","title":"<code>print_vmmap_gaps(pages)</code>","text":"<p>Indicates the size of adjacent memory regions and unmapped gaps between them in process memory</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_vmmap_gaps_table_header","title":"<code>print_vmmap_gaps_table_header()</code>","text":"<p>Prints the table header for the vmmap --gaps command.</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.print_vmmap_table_header","title":"<code>print_vmmap_table_header()</code>","text":"<p>Prints the table header for the vmmap command.</p>"},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap","title":"<code>vmmap(gdbval_or_str=None, writable=False, executable=False, lines_after=1, lines_before=1, gaps=False)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_add","title":"<code>vmmap_add(start, size, flags, offset)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_clear","title":"<code>vmmap_clear()</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_explore","title":"<code>vmmap_explore(address)</code>","text":""},{"location":"source/commands/vmmap/#pwndbg.commands.vmmap.vmmap_load","title":"<code>vmmap_load(filename)</code>","text":""},{"location":"source/commands/windbg/","title":"Windbg","text":"<p>Compatibility functionality for Windbg users.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.da_parser","title":"<code>da_parser = argparse.ArgumentParser(description='Dump a string at the specified address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ds_parser","title":"<code>ds_parser = argparse.ArgumentParser(description='Dump a string at the specified address.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.parser","title":"<code>parser = argparse.ArgumentParser(description='List the symbols nearest to the provided value.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bc","title":"<code>bc(which='*')</code>","text":"<p>Clear the breakpoint with the specified index.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bd","title":"<code>bd(which='*')</code>","text":"<p>Disable the breakpoint with the specified index.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.be","title":"<code>be(which='*')</code>","text":"<p>Enable the breakpoint with the specified index.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bl","title":"<code>bl()</code>","text":"<p>List breakpoints</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.bp","title":"<code>bp(where)</code>","text":"<p>Set a breakpoint at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dX","title":"<code>dX(size, address, count, to_string=False, repeat=False)</code>","text":"<p>Traditionally, windbg will display 16 bytes of data per line.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.da","title":"<code>da(address, max)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.db","title":"<code>db(address, count=64)</code>","text":"<p>Starting at the specified address, dump N bytes (default 64).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dc","title":"<code>dc(address, count=8)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dd","title":"<code>dd(address, count=16)</code>","text":"<p>Starting at the specified address, dump N dwords (default 16).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dds","title":"<code>dds(addr)</code>","text":"<p>Dump pointers and symbols at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dq","title":"<code>dq(address, count=8)</code>","text":"<p>Starting at the specified address, dump N qwords (default 8).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ds","title":"<code>ds(address, max)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.dw","title":"<code>dw(address, count=32)</code>","text":"<p>Starting at the specified address, dump N words (default 32).</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eX","title":"<code>eX(size, address, data, hex=True)</code>","text":"<p>This relies on windbg's default hex encoding being enforced</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eb","title":"<code>eb(address, data)</code>","text":"<p>Write hex bytes at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ed","title":"<code>ed(address, data)</code>","text":"<p>Write hex dwords at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.enhex","title":"<code>enhex(size, value)</code>","text":""},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eq","title":"<code>eq(address, data)</code>","text":"<p>Write hex qwords at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ew","title":"<code>ew(address, data)</code>","text":"<p>Write hex words at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ez","title":"<code>ez(address, data)</code>","text":"<p>Write a character at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.eza","title":"<code>eza(address, data)</code>","text":"<p>Write a string at the specified address.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.go","title":"<code>go()</code>","text":"<p>Windbg compatibility alias for 'continue' command.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.k","title":"<code>k()</code>","text":"<p>Print a backtrace (alias 'bt')</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.ln","title":"<code>ln(value=None)</code>","text":"<p>List the symbols nearest to the provided value.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.pc","title":"<code>pc()</code>","text":"<p>Windbg compatibility alias for 'nextcall' command.</p>"},{"location":"source/commands/windbg/#pwndbg.commands.windbg.peb","title":"<code>peb()</code>","text":""},{"location":"source/commands/xinfo/","title":"Xinfo","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.parser","title":"<code>parser = argparse.ArgumentParser(description='Shows offsets of the specified address from various useful locations.')</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.print_line","title":"<code>print_line(name, addr, first, second, op, width=20)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo","title":"<code>xinfo(address=None)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo_default","title":"<code>xinfo_default(page, addr)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo_mmap_file","title":"<code>xinfo_mmap_file(page, addr)</code>","text":""},{"location":"source/commands/xinfo/#pwndbg.commands.xinfo.xinfo_stack","title":"<code>xinfo_stack(page, addr)</code>","text":""},{"location":"source/commands/xor/","title":"Xor","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.parser","title":"<code>parser = argparse.ArgumentParser(description=\"Memfrobs a region of memory (xor with '*').\")</code>  <code>module-attribute</code>","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.memfrob","title":"<code>memfrob(address, count)</code>","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.xor","title":"<code>xor(address, key, count)</code>","text":""},{"location":"source/commands/xor/#pwndbg.commands.xor.xor_memory","title":"<code>xor_memory(address, key, count)</code>","text":"<p>Helper function for xorring memory in gdb</p>"},{"location":"source/dbg/__init__/","title":"init","text":"<p>The abstracted debugger interface.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.dbg","title":"<code>dbg: Debugger = None</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch","title":"<code>Arch</code>","text":"<p>The definition of an architecture.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch.endian","title":"<code>endian: Literal['little', 'big']</code>  <code>property</code>","text":"<p>Wether code in this module is little or big.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the architecture.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Arch.ptrsize","title":"<code>ptrsize: int</code>  <code>property</code>","text":"<p>Length of the pointer in this module.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.BreakpointLocation","title":"<code>BreakpointLocation</code>","text":"<p>This is the location specification for a breakpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.BreakpointLocation.address","title":"<code>address: int = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.BreakpointLocation.__init__","title":"<code>__init__(address)</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.CommandHandle","title":"<code>CommandHandle</code>","text":"<p>An opaque handle to an installed command.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.CommandHandle.remove","title":"<code>remove()</code>","text":"<p>Removes this command from the command palette of the debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger","title":"<code>Debugger</code>","text":"<p>The base class representing a debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.add_command","title":"<code>add_command(name, handler, doc)</code>","text":"<p>Adds a command with the given name to the debugger, that invokes the given function every time it is called.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.addrsz","title":"<code>addrsz(address)</code>","text":"<p>Format the given address value.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.commands","title":"<code>commands()</code>","text":"<p>List the commands available in this session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.event_handler","title":"<code>event_handler(ty)</code>","text":"<p>Sets up the given function to be called when an event of the given type gets fired. Returns a callable that corresponds to the wrapped function. This function my be used as a decorator.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":"<p>The size of the command window, in characters, if available.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.has_event_type","title":"<code>has_event_type(ty)</code>","text":"<p>Whether the given event type is supported by this debugger. Indicates that a user either can or cannot register an event handler of this type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.history","title":"<code>history(last=10)</code>","text":"<p>The command history of the interactive session in this debugger.</p> <p>This function returns the last <code>last</code> items in the command history, as an oldest-to-youngest-sorted list of tuples, where the first element in each tuple is the index of the command in the history, and the second element is a string giving the command itself.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.is_gdblib_available","title":"<code>is_gdblib_available()</code>","text":"<p>Whether gdblib is available under this debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.lex_args","title":"<code>lex_args(command_line)</code>","text":"<p>Lexes the given command line into a list of arguments, according to the conventions of the debugger being used and of the interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.selected_frame","title":"<code>selected_frame()</code>","text":"<p>The stack frame currently being focused on in this interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.selected_inferior","title":"<code>selected_inferior()</code>","text":"<p>The inferior process currently being focused on in this interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.selected_thread","title":"<code>selected_thread()</code>","text":"<p>The thread currently being focused on in this interactive session.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.set_python_diagnostics","title":"<code>set_python_diagnostics(enabled)</code>","text":"<p>Enables or disables Python diagnostic messages for this debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.set_sysroot","title":"<code>set_sysroot(sysroot)</code>","text":"<p>Sets the system root for this debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.setup","title":"<code>setup(*args)</code>","text":"<p>Perform debugger-specific initialization.</p> <p>This method should be run immediately after <code>pwndbg.dbg</code> is set to an instance of this class, and, as such, is allowed to run code that depends on it being set.</p> <p>Because we can't really know what a given debugger object will need as part of its setup process, we allow for as many arguments as desired to be passed in, and leave it up to the implementations to decide what they need. This shouldn't be a problem, seeing as, unlike other methods in this class, this should only be called as part of the debugger-specific bringup code.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.string_limit","title":"<code>string_limit()</code>","text":"<p>The maximum size of a string.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.supports_breakpoint_creation_during_stop_handler","title":"<code>supports_breakpoint_creation_during_stop_handler()</code>","text":"<p>Whether breakpoint or watchpoint creation through <code>break_at</code> is supported during breakpoint stop handlers.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Debugger.x86_disassembly_flavor","title":"<code>x86_disassembly_flavor()</code>","text":"<p>The flavor of disassembly to use for x86 targets.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction","title":"<code>DisassembledInstruction</code>","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction.addr","title":"<code>addr: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction.asm","title":"<code>asm: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.DisassembledInstruction.length","title":"<code>length: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Error","title":"<code>Error</code>","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType","title":"<code>EventType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Events that can be listened for and reacted to in a debugger.</p> The events types listed here are defined as follows <ul> <li><code>START</code>: This event is fired some time between the creation of or   attachment to the process to be debugged, and the start of its   execution.</li> <li><code>STOP</code>: This event is fired after execution of the process has been   suspended, but before control is returned to the user for interactive   debugging.</li> <li><code>EXIT</code>: This event is fired after the process being debugged has been   detached from or has finished executing.</li> <li><code>MEMORY_CHANGED</code>: This event is fired when the user interactively makes   changes to the memory of the process being debugged.</li> <li><code>REGISTER_CHANGED</code>: Like <code>MEMORY_CHANGED</code>, but for registers.</li> <li><code>CONTINUE</code>: This event is fired after the user has requested for   process execution to continue after it had been previously suspended.</li> <li><code>NEW_MODULE</code>: This event is fired when a new application module has   been encountered by the debugger. This usually happens when a new   application module is loaded into the memory space of the process being   debugged. In GDB terminology, these are called <code>objfile</code>s.</li> </ul>"},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.CONTINUE","title":"<code>CONTINUE = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.EXIT","title":"<code>EXIT = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.MEMORY_CHANGED","title":"<code>MEMORY_CHANGED = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.NEW_MODULE","title":"<code>NEW_MODULE = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.REGISTER_CHANGED","title":"<code>REGISTER_CHANGED = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.START","title":"<code>START = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.EventType.STOP","title":"<code>STOP = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.ExecutionController","title":"<code>ExecutionController</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.ExecutionController.cont","title":"<code>cont(until)</code>","text":"<p>Continues execution until the given breakpoint or whatchpoint is hit.</p> <p>Throws <code>CancelledError</code> if a breakpoint or watchpoint is hit that is not the one given in <code>until</code>, the program exits, or if any other unexpected event happens.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.ExecutionController.single_step","title":"<code>single_step()</code>","text":"<p>Steps to the next instruction.</p> <p>Throws <code>CancelledError</code> if a breakpoint or watchpoint is hit, the program exits, or if any other unexpected event that diverts execution happens while fulfulling the step.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame","title":"<code>Frame</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.__eq__","title":"<code>__eq__(rhs)</code>","text":"<p>Whether this frame is the same as the given frame. Two frames are the same if they point to the same stack frame and have the same execution context.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.child","title":"<code>child()</code>","text":"<p>The child frame of this frame, if it exists.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.evaluate_expression","title":"<code>evaluate_expression(expression, lock_scheduler=False)</code>","text":"<p>Evaluate the given expression in the context of this frame, and return a <code>Value</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.evaluate_expression--lock_scheduler","title":"<code>lock_scheduler</code>","text":"<p>Additionally, callers of this function might specify that they want to enable scheduler locking during the evaluation of this expression. This is a GDB-only option, and is intended for cases in which the result would be incorrect without it enabled, when running in GDB. Other debuggers should ignore this parameter.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.parent","title":"<code>parent()</code>","text":"<p>The parent frame of this frame, if it exists.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.pc","title":"<code>pc()</code>","text":"<p>The value of the program counter for this frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.reg_write","title":"<code>reg_write(name, val)</code>","text":"<p>Sets the value of the register with the given name to the given value. Returns true if the register exists, false othewise. Throws an exception if the register exists but cannot be written to.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.regs","title":"<code>regs()</code>","text":"<p>Access the values of the registers in this frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.sal","title":"<code>sal()</code>","text":"<p>The filename of the source code file associated with this frame, and the line number associated with it, if available.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Frame.sp","title":"<code>sp()</code>","text":"<p>The value of the stack pointer for this frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.MemoryMap","title":"<code>MemoryMap</code>","text":"<p>A wrapper around a sequence of memory ranges</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.MemoryMap.has_reliable_perms","title":"<code>has_reliable_perms()</code>","text":"<p>Returns whether the permissions in this memory map are reliable.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.MemoryMap.is_qemu","title":"<code>is_qemu()</code>","text":"<p>Returns whether this memory map was generated from a QEMU target.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.MemoryMap.ranges","title":"<code>ranges()</code>","text":"<p>Returns all ranges in this memory map.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process","title":"<code>Process</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.alive","title":"<code>alive()</code>","text":"<p>Returns whether this process is alive.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.arch","title":"<code>arch()</code>","text":"<p>The default architecture of this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.break_at","title":"<code>break_at(location, stop_handler=None, one_shot=False, internal=False)</code>","text":"<p>Install a breakpoint or watchpoint at the given location.</p> <p>The type of the location determines whether the newly created object is a watchpoint or a breakpoint. <code>BreakpointLocation</code> locations yield breakpoints, while <code>WatchpointLocation</code> locations yield watchpoints.</p> <p>Aditionally, one may specify a stop handler function, to be run when the breakpoint or whatchpoint is hit, and that determines whether execution should stop. With a return value of <code>True</code> being interpreted as a signal to stop, and a return value of <code>False</code> being interpreted as a signal to continue execution. The extent of the actions that may be taken during the stop handler is determined by the debugger.</p> <p>Breakpoints and watchpoints marked as <code>one_shot</code> are removed after they are first triggered. For the purposes of <code>one_shot</code>, a breakpoint or watchpoint that has a stop handler is only considered to be triggered when its stop handler returns <code>True</code>.</p> <p>Marking a breakpoint or watchpoint as <code>internal</code> hints to the implementation that the created breakpoint or watchpoint should not be directly nameable by the user, and that it should not print any messages upon being triggered. Implementations should try to honor this hint, but they are not required to in case honoring it is either not possible or comes at a significant impact to performance.</p> <p>This function returns a handle to the newly created breakpoint or watchpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.create_value","title":"<code>create_value(value, type=None)</code>","text":"<p>Create a new value in the context of this process, with the given value and, optionally, type. If no type is provided, one will be chosen automatically.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.disasm","title":"<code>disasm(address)</code>","text":"<p>Returns the disassembled instruction at the given address in the address space of the running process, or <code>None</code> if there's no valid instruction at that address.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.dispatch_execution_controller","title":"<code>dispatch_execution_controller(procedure)</code>","text":"<p>Queues up the given execution controller-based coroutine for execution, sometime between the calling of this function and the</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.download_remote_file","title":"<code>download_remote_file(remote_path, local_path)</code>","text":"<p>Downloads the given file from the remote host and saves it to the local given path. Should only be called if <code>is_remote()</code> is true.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.evaluate_expression","title":"<code>evaluate_expression(expression)</code>","text":"<p>Evaluate the given expression in the context of the current process, and return a <code>Value</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.find_in_memory","title":"<code>find_in_memory(pattern, start, size, align, max_matches=-1, step=-1)</code>","text":"<p>Searches for a bit pattern in the memory space of the process. The bit pattern can be searched for in a given memory range, and with a given alignment. The maximum number of matches that will be generated is given by <code>max_matches</code>. A value of <code>max_matches</code> of <code>-1</code> will generate all matches.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_dynamically_linked","title":"<code>is_dynamically_linked()</code>","text":"<p>Returns whether this process makes use of dynamically linked libraries.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_dynamically_linked--dynamically-linked","title":"<code>\"dynamically linked\"</code>","text":"<p>What exactly it means to be \"dynamically linked\" here is a little ill-defined. Ideally, this function should return true if the process uses the default dynamic linker for the system, as that would better reflect whether the process uses dynamic linking.</p> <p>Currently, though, Pwndbg expects it to behave the same as a check for the string \"No shared libraries loaded at this time.\" in the output of the <code>info dll</code> GDB command, which checks for the presence of other modules in the address space of the process, rather than whether or not the dynamic linker is used.</p> <p>We should probably sort this out in the future.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_linux","title":"<code>is_linux()</code>","text":"<p>Returns whether the current ABI is GNU/Linux.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.is_remote","title":"<code>is_remote()</code>","text":"<p>Returns whether this process is a remote process connected to using the GDB remote debugging protocol.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.main_module_entry","title":"<code>main_module_entry()</code>","text":"<p>Returns the entry point of the main module.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.main_module_name","title":"<code>main_module_name()</code>","text":"<p>Returns the name of the main module.</p> <p>On remote targets, this may be prefixed with \"target:\" string.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.module_section_locations","title":"<code>module_section_locations()</code>","text":"<p>Return a list of (address, size, section_name, module_name) tuples for the loaded sections in every module of this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.pid","title":"<code>pid()</code>","text":"<p>Returns the process ID of this process if it is alive.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.read_memory","title":"<code>read_memory(address, size, partial=False)</code>","text":"<p>Reads the requested number of bytes from the address given in the memory space of this process. Will read as many bytes as possible starting at that location, and returns how many were read.</p> <p>Throws an exception if reading fails and partial is False.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.send_monitor","title":"<code>send_monitor(cmd)</code>","text":"<p>Sends the given monitor command to the GDB remote debugging protocol server. Should only be called if <code>is_remote()</code> is true.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.send_remote","title":"<code>send_remote(packet)</code>","text":"<p>Sends the given packet to the GDB remote debugging protocol server. Should only be called if <code>is_remote()</code> is true.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.symbol_address_from_name","title":"<code>symbol_address_from_name(name, prefer_static=False)</code>","text":"<p>Returns the address of a symbol, given its name. Optionally, the user may specify that they want to prioritize symbols in the static block, if supported by the debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.symbol_name_at_address","title":"<code>symbol_name_at_address(address)</code>","text":"<p>Returns the name of the symbol at the given address in the program, if one exists.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.threads","title":"<code>threads()</code>","text":"<p>Returns a list containing the threads in this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.types_with_name","title":"<code>types_with_name(name)</code>","text":"<p>Returns a list of all types in this process that match the given name.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.vmmap","title":"<code>vmmap()</code>","text":"<p>Returns the virtual memory map of this process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Process.write_memory","title":"<code>write_memory(address, data, partial=False)</code>","text":"<p>Writes as many bytes from the given data buffer as possible into the given address in the memory space of this process.</p> <p>Throws an exception if writing fails and partial is False.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Registers","title":"<code>Registers</code>","text":"<p>A handle to the register values in a frame.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Registers.by_name","title":"<code>by_name(name)</code>","text":"<p>Gets the value of a register if it exists, None otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.StopPoint","title":"<code>StopPoint</code>","text":"<p>The handle to either an insalled breakpoint or watchpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.StopPoint.remove","title":"<code>remove()</code>","text":"<p>Removes the breakpoint associated with this handle.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.StopPoint.set_enabled","title":"<code>set_enabled(enabled)</code>","text":"<p>Enables or disables this breakpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread","title":"<code>Thread</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread.bottom_frame","title":"<code>bottom_frame()</code>","text":"<p>Frame at the bottom of the call stack for this thread.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread.index","title":"<code>index()</code>","text":"<p>The unique index of this thread from the perspective of the debugger.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Thread.ptid","title":"<code>ptid()</code>","text":"<p>The PTID of this thread, if available.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type","title":"<code>Type</code>","text":"<p>Class representing a type in the context of an inferior process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.alignof","title":"<code>alignof: int</code>  <code>property</code>","text":"<p>The alignment of this type, in bytes.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.code","title":"<code>code: TypeCode</code>  <code>property</code>","text":"<p>What category of type this object belongs to.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.sizeof","title":"<code>sizeof: int</code>  <code>property</code>","text":"<p>The size of this type, in bytes.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.array","title":"<code>array(count)</code>","text":"<p>Return a type that corresponds to an array whose elements have this type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.fields","title":"<code>fields()</code>","text":"<p>List of all fields in this type, if it is a structured type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.has_field","title":"<code>has_field(name)</code>","text":"<p>Whether this type has a field with the given name.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.keys","title":"<code>keys()</code>","text":"<p>Returns a list containing all the field names of this type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.pointer","title":"<code>pointer()</code>","text":"<p>Return a pointer type that has this type as its pointee.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.strip_typedefs","title":"<code>strip_typedefs()</code>","text":"<p>Return a type that corresponds to the base type after a typedef chain, if this is a typedef. Returns the type itself otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Type.target","title":"<code>target()</code>","text":"<p>Return the target of this reference type, if this is a reference type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode","title":"<code>TypeCode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Broad categories of types.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.ARRAY","title":"<code>ARRAY = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.ENUM","title":"<code>ENUM = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.INT","title":"<code>INT = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.POINTER","title":"<code>POINTER = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.STRUCT","title":"<code>STRUCT = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.TYPEDEF","title":"<code>TYPEDEF = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeCode.UNION","title":"<code>UNION = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField","title":"<code>TypeField</code>","text":"<p>The fields in a structured type.</p> <p>Currently this is just a mirror of <code>gdb.Field</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.artificial","title":"<code>artificial = artificial</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.bitpos","title":"<code>bitpos = bitpos</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.bitsize","title":"<code>bitsize = bitsize</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.enumval","title":"<code>enumval = enumval</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.is_base_class","title":"<code>is_base_class = is_base_class</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.parent_type","title":"<code>parent_type = parent_type</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.type","title":"<code>type = type</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.TypeField.__init__","title":"<code>__init__(bitpos, name, type, parent_type, enumval=None, artificial=False, is_base_class=False, bitsize=0)</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.Value","title":"<code>Value</code>","text":"<p>Class representing a value in the context of an inferior process.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.address","title":"<code>address: Value | None</code>  <code>property</code>","text":"<p>The address of this value, in memory, if addressable, otherwise <code>None</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.is_optimized_out","title":"<code>is_optimized_out: bool</code>  <code>property</code>","text":"<p>Whether this value is present in debugging information, but has been optimized out of the actual program.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.type","title":"<code>type: Type</code>  <code>property</code>","text":"<p>The type associated with this value.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__add__","title":"<code>__add__(rhs)</code>","text":"<p>Adds an integer to this value, if that makes sense. Throws an exception otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__getitem__","title":"<code>__getitem__(idx)</code>","text":"<p>Gets the value with the given name that belongs to this value. For structure types, this is the field with the given name. For array types, this is the field at the given index. For pointer types, this is the value of <code>*(ptr+idx)</code>.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__int__","title":"<code>__int__()</code>","text":"<p>Converts this value to an integer, if possible.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.__sub__","title":"<code>__sub__(rhs)</code>","text":"<p>Subtract an integer from this value, if that makes sense. Throws an exception otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.cast","title":"<code>cast(type)</code>","text":"<p>Returns a new value with the same value as this object, but of the given type.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.dereference","title":"<code>dereference()</code>","text":"<p>If this is a poitner value, dereferences the pointer and returns a new instance of Value, containing the value pointed to by this pointer.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.fetch_lazy","title":"<code>fetch_lazy()</code>","text":"<p>Fetches the value if it is lazy, does nothing otherwise.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.Value.string","title":"<code>string()</code>","text":"<p>If this value is a string, then this method converts it to a Python string.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation","title":"<code>WatchpointLocation</code>","text":"<p>This is the location specification for a watchpoint.</p>"},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.address","title":"<code>address: int = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.size","title":"<code>size: int = size</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.watch_read","title":"<code>watch_read: bool = watch_read</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.watch_write","title":"<code>watch_write: bool = watch_write</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.WatchpointLocation.__init__","title":"<code>__init__(address, size, watch_read, watch_write)</code>","text":""},{"location":"source/dbg/__init__/#pwndbg.dbg.selection","title":"<code>selection(target, get_current, select)</code>","text":"<p>Debuggers have global state. Many of our queries require that we select a given object globally before we make them. When doing that, we must always be careful to return selection to its previous state before exiting. This class automatically manages the selection of a single object type.</p> <p>Upon entrace to the <code>with</code> block, the element given by <code>target</code> will be compared to the object returned by calling <code>get_current</code>. If they compare different, the value previously returned by <code>get_current</code> is saved, and the element given by <code>target</code> will be selected by passing it as an argument to <code>select</code>, and, after execution leaves the <code>with</code> block, the previously saved element will be selected in the same fashion as the first element.</p> <p>If the elements don't compare different, this is a no-op.</p>"},{"location":"source/dbg/gdb/","title":"Gdb","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.BPWP_DEFERRED_DELETE","title":"<code>BPWP_DEFERRED_DELETE: Set[GDBStopPoint] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.BPWP_DEFERRED_DISABLE","title":"<code>BPWP_DEFERRED_DISABLE: Set[GDBStopPoint] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.BPWP_DEFERRED_ENABLE","title":"<code>BPWP_DEFERRED_ENABLE: Set[GDBStopPoint] = set()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.EXECUTION_CONTROLLER","title":"<code>EXECUTION_CONTROLLER = GDBExecutionController()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.BreakpointAdapter","title":"<code>BreakpointAdapter</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.BreakpointAdapter.stop_handler","title":"<code>stop_handler: Callable[[], bool]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.BreakpointAdapter.stop","title":"<code>stop()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB","title":"<code>GDB</code>","text":"<p>               Bases: <code>Debugger</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.add_command","title":"<code>add_command(name, handler, doc)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.addrsz","title":"<code>addrsz(address)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.commands","title":"<code>commands()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.event_handler","title":"<code>event_handler(ty)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":"<p>Get the size of the command window.</p> <p>GDB keeps these parameters up to date with the actual window size of the command output. This is the full terminal size in CLI mode or the size of the cmd window in TUI mode.</p> <p>When the window size is set to be unlimited (0), the parameter is None.</p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.has_event_type","title":"<code>has_event_type(ty)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.history","title":"<code>history(last=10)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.is_gdblib_available","title":"<code>is_gdblib_available()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.lex_args","title":"<code>lex_args(command_line)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.selected_frame","title":"<code>selected_frame()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.selected_inferior","title":"<code>selected_inferior()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.selected_thread","title":"<code>selected_thread()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.set_python_diagnostics","title":"<code>set_python_diagnostics(enabled)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.set_sysroot","title":"<code>set_sysroot(sysroot)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.setup","title":"<code>setup()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.string_limit","title":"<code>string_limit()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.supports_breakpoint_creation_during_stop_handler","title":"<code>supports_breakpoint_creation_during_stop_handler()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDB.x86_disassembly_flavor","title":"<code>x86_disassembly_flavor()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBArch","title":"<code>GDBArch</code>","text":"<p>               Bases: <code>Arch</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBArch.endian","title":"<code>endian: Literal['little', 'big']</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBArch.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBArch.ptrsize","title":"<code>ptrsize: int</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBArch.__init__","title":"<code>__init__(endian, name, ptrsize)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommand","title":"<code>GDBCommand</code>","text":"<p>               Bases: <code>Command</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommand.__doc__","title":"<code>__doc__ = doc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommand.debugger","title":"<code>debugger = debugger</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommand.handler","title":"<code>handler = handler</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommand.__init__","title":"<code>__init__(debugger, name, handler, doc)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommand.invoke","title":"<code>invoke(args, from_tty)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommandHandle","title":"<code>GDBCommandHandle</code>","text":"<p>               Bases: <code>CommandHandle</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommandHandle.command","title":"<code>command = command</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommandHandle.__init__","title":"<code>__init__(command)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBCommandHandle.remove","title":"<code>remove()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBExecutionController","title":"<code>GDBExecutionController</code>","text":"<p>               Bases: <code>ExecutionController</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBExecutionController.cont","title":"<code>cont(until)</code>  <code>async</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBExecutionController.single_step","title":"<code>single_step()</code>  <code>async</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame","title":"<code>GDBFrame</code>","text":"<p>               Bases: <code>Frame</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.__eq__","title":"<code>__eq__(rhs)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.child","title":"<code>child()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.evaluate_expression","title":"<code>evaluate_expression(expression, lock_scheduler=False)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.parent","title":"<code>parent()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.pc","title":"<code>pc()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.reg_write","title":"<code>reg_write(name, val)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.regs","title":"<code>regs()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.sal","title":"<code>sal()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBFrame.sp","title":"<code>sp()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap","title":"<code>GDBMemoryMap</code>","text":"<p>               Bases: <code>MemoryMap</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap.pages","title":"<code>pages = pages</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap.qemu","title":"<code>qemu = qemu</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap.reliable_perms","title":"<code>reliable_perms = reliable_perms</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap.__init__","title":"<code>__init__(reliable_perms, qemu, pages)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap.has_reliable_perms","title":"<code>has_reliable_perms()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap.is_qemu","title":"<code>is_qemu()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBMemoryMap.ranges","title":"<code>ranges()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess","title":"<code>GDBProcess</code>","text":"<p>               Bases: <code>Process</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.in_bpwp_stop_handler","title":"<code>in_bpwp_stop_handler: bool = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.alive","title":"<code>alive()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.arch","title":"<code>arch()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.break_at","title":"<code>break_at(location, stop_handler=None, one_shot=False, internal=False)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.create_value","title":"<code>create_value(value, type=None)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.disasm","title":"<code>disasm(address)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.dispatch_execution_controller","title":"<code>dispatch_execution_controller(procedure)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.download_remote_file","title":"<code>download_remote_file(remote_path, local_path)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.evaluate_expression","title":"<code>evaluate_expression(expression)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.find_in_memory","title":"<code>find_in_memory(pattern, start, size, align, max_matches=-1, step=-1)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.is_dynamically_linked","title":"<code>is_dynamically_linked()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.is_linux","title":"<code>is_linux()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.is_remote","title":"<code>is_remote()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.main_module_entry","title":"<code>main_module_entry()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.main_module_name","title":"<code>main_module_name()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.module_section_locations","title":"<code>module_section_locations()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.pid","title":"<code>pid()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.read_memory","title":"<code>read_memory(address, size, partial=False)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.send_monitor","title":"<code>send_monitor(cmd)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.send_remote","title":"<code>send_remote(packet)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.symbol_address_from_name","title":"<code>symbol_address_from_name(name, prefer_static=False)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.symbol_name_at_address","title":"<code>symbol_name_at_address(address)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.threads","title":"<code>threads()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.types_with_name","title":"<code>types_with_name(name)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.vmmap","title":"<code>vmmap()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBProcess.write_memory","title":"<code>write_memory(address, data, partial=False)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBRegisters","title":"<code>GDBRegisters</code>","text":"<p>               Bases: <code>Registers</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBRegisters.frame","title":"<code>frame = frame</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBRegisters.__init__","title":"<code>__init__(frame)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBRegisters.by_name","title":"<code>by_name(name)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBStopPoint","title":"<code>GDBStopPoint</code>","text":"<p>               Bases: <code>StopPoint</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBStopPoint.inner","title":"<code>inner: gdb.Breakpoint = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBStopPoint.inner_stop","title":"<code>inner_stop: Callable[[], bool] | None = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBStopPoint.proc","title":"<code>proc: GDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBStopPoint.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBStopPoint.remove","title":"<code>remove()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBStopPoint.set_enabled","title":"<code>set_enabled(enabled)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBThread","title":"<code>GDBThread</code>","text":"<p>               Bases: <code>Thread</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBThread.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBThread.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBThread.bottom_frame","title":"<code>bottom_frame()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBThread.index","title":"<code>index()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBThread.ptid","title":"<code>ptid()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType","title":"<code>GDBType</code>","text":"<p>               Bases: <code>Type</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.CODE_MAPPING","title":"<code>CODE_MAPPING = {gdb.TYPE_CODE_INT: pwndbg.dbg_mod.TypeCode.INT, gdb.TYPE_CODE_UNION: pwndbg.dbg_mod.TypeCode.UNION, gdb.TYPE_CODE_STRUCT: pwndbg.dbg_mod.TypeCode.STRUCT, gdb.TYPE_CODE_ENUM: pwndbg.dbg_mod.TypeCode.ENUM, gdb.TYPE_CODE_TYPEDEF: pwndbg.dbg_mod.TypeCode.TYPEDEF, gdb.TYPE_CODE_PTR: pwndbg.dbg_mod.TypeCode.POINTER, gdb.TYPE_CODE_ARRAY: pwndbg.dbg_mod.TypeCode.ARRAY}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.alignof","title":"<code>alignof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.code","title":"<code>code: pwndbg.dbg_mod.TypeCode</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.sizeof","title":"<code>sizeof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.array","title":"<code>array(count)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.fields","title":"<code>fields()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.has_field","title":"<code>has_field(name)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.keys","title":"<code>keys()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.pointer","title":"<code>pointer()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.strip_typedefs","title":"<code>strip_typedefs()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBType.target","title":"<code>target()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue","title":"<code>GDBValue</code>","text":"<p>               Bases: <code>Value</code></p>"},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.address","title":"<code>address: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.is_optimized_out","title":"<code>is_optimized_out: bool</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.type","title":"<code>type: pwndbg.dbg_mod.Type</code>  <code>property</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.__add__","title":"<code>__add__(rhs)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.__sub__","title":"<code>__sub__(rhs)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.cast","title":"<code>cast(type)</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.dereference","title":"<code>dereference()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.fetch_lazy","title":"<code>fetch_lazy()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.GDBValue.string","title":"<code>string()</code>","text":""},{"location":"source/dbg/gdb/#pwndbg.dbg.gdb.parse_and_eval","title":"<code>parse_and_eval(expression, global_context)</code>","text":"<p>Same as <code>gdb.parse_and_eval</code>, but only uses <code>global_context</code> if it is supported by the current version of GDB.</p> <p><code>global_context</code> was introduced in GDB 14.</p>"},{"location":"source/dbg/lldb/__init__/","title":"init","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.EXECUTION_CONTROLLER","title":"<code>EXECUTION_CONTROLLER = LLDBExecutionController()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB_VERSION","title":"<code>LLDB_VERSION: Tuple[int, int] = None</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB","title":"<code>LLDB</code>","text":"<p>               Bases: <code>Debugger</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.controllers","title":"<code>controllers: List[Tuple[LLDBProcess, Coroutine[Any, Any, None]]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.event_handlers","title":"<code>event_handlers: Dict[pwndbg.dbg_mod.EventType, List[Callable[..., T]]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.exec_states","title":"<code>exec_states: List[lldb.SBExecutionState]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.prompt_hook","title":"<code>prompt_hook: Callable[[], None]</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.add_command","title":"<code>add_command(command_name, handler, doc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.addrsz","title":"<code>addrsz(address)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.commands","title":"<code>commands()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.event_handler","title":"<code>event_handler(ty)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.get_cmd_window_size","title":"<code>get_cmd_window_size()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.has_event_type","title":"<code>has_event_type(ty)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.history","title":"<code>history(last=10)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.is_gdblib_available","title":"<code>is_gdblib_available()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.lex_args","title":"<code>lex_args(command_line)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.selected_frame","title":"<code>selected_frame()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.selected_inferior","title":"<code>selected_inferior()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.selected_thread","title":"<code>selected_thread()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.set_python_diagnostics","title":"<code>set_python_diagnostics(enabled)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.set_sysroot","title":"<code>set_sysroot(sysroot)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.setup","title":"<code>setup(*args, **kwargs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.string_limit","title":"<code>string_limit()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.supports_breakpoint_creation_during_stop_handler","title":"<code>supports_breakpoint_creation_during_stop_handler()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDB.x86_disassembly_flavor","title":"<code>x86_disassembly_flavor()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch","title":"<code>LLDBArch</code>","text":"<p>               Bases: <code>Arch</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.endian","title":"<code>endian: Literal['little', 'big']</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.ptrsize","title":"<code>ptrsize: int</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBArch.__init__","title":"<code>__init__(name, ptrsize, endian)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand","title":"<code>LLDBCommand</code>","text":"<p>               Bases: <code>CommandHandle</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand.command_name","title":"<code>command_name = command_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand.handler_name","title":"<code>handler_name = handler_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBCommand.__init__","title":"<code>__init__(handler_name, command_name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBExecutionController","title":"<code>LLDBExecutionController</code>","text":"<p>               Bases: <code>ExecutionController</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBExecutionController.cont","title":"<code>cont(target)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBExecutionController.single_step","title":"<code>single_step()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame","title":"<code>LLDBFrame</code>","text":"<p>               Bases: <code>Frame</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.inner","title":"<code>inner: lldb.SBFrame = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.__eq__","title":"<code>__eq__(rhs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.child","title":"<code>child()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.evaluate_expression","title":"<code>evaluate_expression(expression, lock_scheduler=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.parent","title":"<code>parent()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.pc","title":"<code>pc()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.reg_write","title":"<code>reg_write(name, val)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.regs","title":"<code>regs()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.sal","title":"<code>sal()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBFrame.sp","title":"<code>sp()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap","title":"<code>LLDBMemoryMap</code>","text":"<p>               Bases: <code>MemoryMap</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.pages","title":"<code>pages = pages</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.__init__","title":"<code>__init__(pages)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.has_reliable_perms","title":"<code>has_reliable_perms()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.is_qemu","title":"<code>is_qemu()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBMemoryMap.ranges","title":"<code>ranges()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess","title":"<code>LLDBProcess</code>","text":"<p>               Bases: <code>Process</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.dbg","title":"<code>dbg = dbg</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.process","title":"<code>process = process</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.target","title":"<code>target = target</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.__init__","title":"<code>__init__(dbg, process, target, is_gdb_remote)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.alive","title":"<code>alive()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.arch","title":"<code>arch()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.break_at","title":"<code>break_at(location, stop_handler=None, one_shot=False, internal=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.create_value","title":"<code>create_value(value, type=None)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.dispatch_execution_controller","title":"<code>dispatch_execution_controller(procedure)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.download_remote_file","title":"<code>download_remote_file(remote_path, local_path)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.evaluate_expression","title":"<code>evaluate_expression(expression)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.find_in_memory","title":"<code>find_in_memory(pattern, start, size, align, max_matches=-1, step=-1)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.find_largest_range_len","title":"<code>find_largest_range_len(min_search, max_search, test)</code>","text":"<p>Finds the largest memory range given a minimum and a maximum value for the size of the rage. This is a binary search, so it should do on the order of log2(max_search - min_search) attempts before it arrives at an answer.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.is_dynamically_linked","title":"<code>is_dynamically_linked()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.is_linux","title":"<code>is_linux()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.is_remote","title":"<code>is_remote()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.main_module_entry","title":"<code>main_module_entry()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.main_module_name","title":"<code>main_module_name()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.module_section_locations","title":"<code>module_section_locations()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.pid","title":"<code>pid()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.read_memory","title":"<code>read_memory(address, size, partial=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.send_monitor","title":"<code>send_monitor(cmd)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.send_remote","title":"<code>send_remote(packet)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.symbol_address_from_name","title":"<code>symbol_address_from_name(name, prefer_static=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.symbol_name_at_address","title":"<code>symbol_name_at_address(address)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.threads","title":"<code>threads()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.types_with_name","title":"<code>types_with_name(name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.vmmap","title":"<code>vmmap()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBProcess.write_memory","title":"<code>write_memory(address, data, partial=False)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters","title":"<code>LLDBRegisters</code>","text":"<p>               Bases: <code>Registers</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.groups","title":"<code>groups: lldb.SBValueList = groups</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.__init__","title":"<code>__init__(groups, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBRegisters.by_name","title":"<code>by_name(name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint","title":"<code>LLDBStopPoint</code>","text":"<p>               Bases: <code>StopPoint</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.inner","title":"<code>inner: lldb.SBBreakpoint | lldb.SBWatchpoint = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.stop_handler_name","title":"<code>stop_handler_name: str | None = stop_handler_name</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.__init__","title":"<code>__init__(inner, proc, stop_handler_name)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.remove","title":"<code>remove()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBStopPoint.set_enabled","title":"<code>set_enabled(enabled)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread","title":"<code>LLDBThread</code>","text":"<p>               Bases: <code>Thread</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.inner","title":"<code>inner: lldb.SBThread = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.proc","title":"<code>proc: LLDBProcess = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.bottom_frame","title":"<code>bottom_frame()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.index","title":"<code>index()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBThread.ptid","title":"<code>ptid()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType","title":"<code>LLDBType</code>","text":"<p>               Bases: <code>Type</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.alignof","title":"<code>alignof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.code","title":"<code>code: pwndbg.dbg_mod.TypeCode</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.inner","title":"<code>inner: lldb.SBType = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.sizeof","title":"<code>sizeof: int</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.array","title":"<code>array(count)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.fields","title":"<code>fields()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.pointer","title":"<code>pointer()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.strip_typedefs","title":"<code>strip_typedefs()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBType.target","title":"<code>target()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue","title":"<code>LLDBValue</code>","text":"<p>               Bases: <code>Value</code></p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.address","title":"<code>address: pwndbg.dbg_mod.Value | None</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.inner","title":"<code>inner = inner</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.is_optimized_out","title":"<code>is_optimized_out: bool</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.proc","title":"<code>proc = proc</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.type","title":"<code>type: pwndbg.dbg_mod.Type</code>  <code>property</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__add__","title":"<code>__add__(rhs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__init__","title":"<code>__init__(inner, proc)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.__sub__","title":"<code>__sub__(rhs)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.cast","title":"<code>cast(type)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.dereference","title":"<code>dereference()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.fetch_lazy","title":"<code>fetch_lazy()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.LLDBValue.string","title":"<code>string()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable","title":"<code>OneShotAwaitable</code>","text":"<p>Used as part of the logic for the execution controller. This is an Awaitable object that yields the value passed to its constructor exactly once.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable.value","title":"<code>value = value</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable.__await__","title":"<code>__await__()</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.OneShotAwaitable.__init__","title":"<code>__init__(value)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldContinue","title":"<code>YieldContinue</code>","text":"<p>Continues execution of the process until the breakpoint or watchpoint given in the constructor is hit or the operation is cancelled.</p> <p>This class is part of the execution controller system, so it is intented to be yielded by the async function with access to an execution controller, and caught and hanlded by the event loop in the LLDB Pwndbg CLI.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldContinue.target","title":"<code>target: LLDBStopPoint = target</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldContinue.__init__","title":"<code>__init__(target)</code>","text":""},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.YieldSingleStep","title":"<code>YieldSingleStep</code>","text":"<p>Moves execution of the process being debugged forward by one instruction.</p> <p>This class is part of the execution controller system, so it is intented to be yielded by the async function with access to an execution controller, and caught and hanlded by the event loop in the LLDB Pwndbg CLI.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.map_type_code","title":"<code>map_type_code(type)</code>","text":"<p>Determines the type code of a given LLDB SBType.</p>"},{"location":"source/dbg/lldb/__init__/#pwndbg.dbg.lldb.rename_register","title":"<code>rename_register(name, proc)</code>","text":"<p>Some register names differ between Pwndbg/GDB and LLDB. This function takes in a register name in the Pwndbg/GDB convention and returns the equivalent LLDB name for the register.</p>"},{"location":"source/dbg/lldb/hooks/","title":"Hooks","text":"<p>Code that sets up hooks for LLDB events.</p>"},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.dbg","title":"<code>dbg: LLDB = pwndbg.dbg</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.should_show_context","title":"<code>should_show_context = False</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.on_exit","title":"<code>on_exit()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.on_start","title":"<code>on_start()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.on_stop","title":"<code>on_stop()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.prompt_hook","title":"<code>prompt_hook()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.renew_show_context","title":"<code>renew_show_context()</code>","text":""},{"location":"source/dbg/lldb/hooks/#pwndbg.dbg.lldb.hooks.update_typeinfo","title":"<code>update_typeinfo()</code>","text":""},{"location":"source/dbg/lldb/pset/","title":"Pset","text":""},{"location":"source/dbg/lldb/pset/#pwndbg.dbg.lldb.pset.parser","title":"<code>parser = argparse.ArgumentParser(description='Changes a Pwndbg setting.')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/pset/#pwndbg.dbg.lldb.pset.InvalidParse","title":"<code>InvalidParse</code>","text":"<p>               Bases: <code>Exception</code></p>"},{"location":"source/dbg/lldb/pset/#pwndbg.dbg.lldb.pset.parse_value","title":"<code>parse_value(param, expression)</code>","text":""},{"location":"source/dbg/lldb/pset/#pwndbg.dbg.lldb.pset.pset","title":"<code>pset(name, value)</code>","text":""},{"location":"source/dbg/lldb/util/","title":"Util","text":""},{"location":"source/dbg/lldb/util/#pwndbg.dbg.lldb.util.system_decode","title":"<code>system_decode(b)</code>","text":"<p>LLDB requires Python strings in many places where it makes sense to accept bytes values. This is mostly an artifact of how Swig maps C <code>char*</code> to <code>str</code> in Python, but since Swig will refuse bytes objects, we have to figure out a way to pass this data as a regular string object, even if that's nonsensical in Python terms.</p> <p>This function tries its best to resolve that by decoding it with the same decoder the filesystem uses, and, failing that, ASCII.</p>"},{"location":"source/dbg/lldb/repl/__init__/","title":"init","text":"<p>The Pwndbg REPL that is the interface to all debugging on LLDB.</p> <p>Pwndbg has an event system that allows it to react to events in the process being debugged, such as when new executable modules get added to the its address space, when the value of memory and registers change, and pretty much all possible changes to its execution state. We'd like to have the event system work the same way under LLDB as it does under GDB.</p> <p>Fortunately for us, the events types that are native to LLDB map really well to the event types in GDB and Pwndbg. Very, very unfortunately for us, however, that's basically where our luck ends.</p> <p>LLDB, as of version 18, only provides two ways to capture events: registering directly with the broadcaster, or registering globally. The former is not available to us in the standard LLDB REPL, as we don't get access to the process object until after it's been launched1. Likewise for the latter, as the interactive debugger will register to receive the global process state change events before everyone else, and LLDB doesn't allow for multiple listeners for the same event bits in the same event class2.</p> <p>This leaves us with handling process management ourselves as the only option we really have to implement event dispatch in Pwndbg. Easy, right? We can just hijack the commands that deal with target and process creation, and leave everything else untouched. Unfortunately for us, again, shadowing builtin commands is simply not allowed3.</p> <p>So, really, all that's left for us is either implement our own REPL, or get rid of the event system.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.LLDB_EXCLUSIVE","title":"<code>LLDB_EXCLUSIVE = [('script', lambda cmd: cmd.startswith('sc') and 'script'.startswith(cmd)), ('expression', lambda cmd: cmd.startswith('e') and 'expression'.startswith(cmd))]</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.continue_ap","title":"<code>continue_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.continue_unsupported","title":"<code>continue_unsupported = ['ignore-count']</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.gdb_remote_ap","title":"<code>gdb_remote_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_connect_ap","title":"<code>process_connect_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_launch_ap","title":"<code>process_launch_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_launch_unsupported","title":"<code>process_launch_unsupported = ['disable-aslr', 'script-class', 'environment', 'plugin', 'shell-expand-args', 'arch', 'shell', 'stderr', 'stdin', 'structured-data-key', 'no-stdio', 'stdout', 'tty', 'structured-data-value', 'working-dir']</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.show_tip","title":"<code>show_tip = pwndbg.config.add_param('show-tips', True, 'whether to display the tip of the day on startup')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.target_create_ap","title":"<code>target_create_ap = argparse.ArgumentParser(add_help=False)</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.target_create_unsupported","title":"<code>target_create_unsupported = ['sysroot', 'arch', 'build', 'core', 'no-dependents', 'platform', 'remote-file', 'symfile', 'version']</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay","title":"<code>EventRelay</code>","text":"<p>               Bases: <code>EventHandler</code></p> <p>The event system that is sensible for the REPL process driver to use isn't an exact match with the one used by the rest of Pwndbg. They're close, but there's a bit of work we have to do to properly convey certain events.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.dbg","title":"<code>dbg = dbg</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.ignore_resumed","title":"<code>ignore_resumed = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.__init__","title":"<code>__init__(dbg)</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.created","title":"<code>created()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.exited","title":"<code>exited()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.modules_loaded","title":"<code>modules_loaded()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.resumed","title":"<code>resumed()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.EventRelay.suspended","title":"<code>suspended()</code>","text":""},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.continue_process","title":"<code>continue_process(driver, args, dbg)</code>","text":"<p>Continues the execution of a process.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.gdb_remote","title":"<code>gdb_remote(driver, relay, args, dbg)</code>","text":"<p>Like <code>process_connect</code>, but more lenient with the remote URL format.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.lex_args","title":"<code>lex_args(args)</code>","text":"<p>Splits the arguments, respecting quotation marks.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.make_pty","title":"<code>make_pty()</code>","text":"<p>We need to make a pseudo-terminal ourselves if we want the process to handle naturally for the user. Returns a tuple with the filaname and the file descriptor if successful.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.parse","title":"<code>parse(args, parser, unsupported)</code>","text":"<p>Parses a list of string arguments into an object containing the parsed data.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_connect","title":"<code>process_connect(driver, relay, args, dbg)</code>","text":"<p>Connects to the given remote process.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.process_launch","title":"<code>process_launch(driver, relay, args, dbg)</code>","text":"<p>Launches a process with the given arguments.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.run","title":"<code>run(startup=None, debug=False)</code>","text":"<p>Runs the Pwndbg REPL under LLDB. Optionally enters the commands given in <code>startup</code> as part of the startup process.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.show_greeting","title":"<code>show_greeting()</code>","text":"<p>Show the Pwndbg greeting, the same way the GDB version of Pwndbg would. This one is considerably simpler than the GDB version, however, as we control the lifetime of the program, we know exactly when the greeting needs to be shown, so we don't bother with any of the lifetime checks.</p>"},{"location":"source/dbg/lldb/repl/__init__/#pwndbg.dbg.lldb.repl.target_create","title":"<code>target_create(args, dbg)</code>","text":"<p>Creates a new target, registers it with the Pwndbg LLDB implementation, and sets up listeners for it.</p>"},{"location":"source/dbg/lldb/repl/io/","title":"Io","text":"<p>For our REPL, we need to drive our own I/O with the process being debugged. This module contains all the strategies we have for doing that.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.LIVE_PSEUDO_TERMINAL_OBJECTS","title":"<code>LIVE_PSEUDO_TERMINAL_OBJECTS = False</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.PTY_AVAILABLE","title":"<code>PTY_AVAILABLE = True</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.SELECT_AVAILABLE","title":"<code>SELECT_AVAILABLE = True</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.TC_LFLAG","title":"<code>TC_LFLAG = 3</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.TERM_CONTROL_AVAILABLE","title":"<code>TERM_CONTROL_AVAILABLE = True</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver","title":"<code>IODriver</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.on_output_event","title":"<code>on_output_event()</code>","text":"<p>Hints that there might be data in either the standard output or the standard error streams. This should be called when an <code>eBroadcastBitSTDOUT</code> or <code>eBroadcastBitSTDERR</code> is encountered by the event loop.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.on_process_start","title":"<code>on_process_start(proc)</code>","text":"<p>Allow the I/O driver an opportunity to change aspects of the process after it has been launched, but before it has started executing, if it so wishes.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.start","title":"<code>start(process)</code>","text":"<p>Starts the handling of I/O by this driver on the given process.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.stdio","title":"<code>stdio()</code>","text":"<p>The names for the stdin, stdout and stderr files, respectively. These will get passed as arguments to <code>SBTarget.Launch</code></p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriver.stop","title":"<code>stop()</code>","text":"<p>Stops the handling of I/O by this driver.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText","title":"<code>IODriverPlainText</code>","text":"<p>               Bases: <code>IODriver</code></p> <p>Plaintext-based I/O driver. It simply copies input from our standard input to the standard input of a given process, and copies output from the standard output of a given process to out standard output.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.in_thr","title":"<code>in_thr: threading.Thread</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.likely_output","title":"<code>likely_output: threading.BoundedSemaphore = threading.BoundedSemaphore(1)</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.out_thr","title":"<code>out_thr: threading.Thread</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.process","title":"<code>process: lldb.SBProcess = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.stop_requested","title":"<code>stop_requested: threading.Event = threading.Event()</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.on_output_event","title":"<code>on_output_event()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.on_process_start","title":"<code>on_process_start(proc)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.start","title":"<code>start(process)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.stdio","title":"<code>stdio()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPlainText.stop","title":"<code>stop()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal","title":"<code>IODriverPseudoTerminal</code>","text":"<p>               Bases: <code>IODriver</code></p> <p>pty-based I/O driver. Forwards input from standard input and has support for terminal width and height, and for terminal-based file operations on the program being debugged.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.has_terminal_control","title":"<code>has_terminal_control: bool</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.input_buffer","title":"<code>input_buffer: bytes = b''</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.io_thread","title":"<code>io_thread: threading.Thread</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.manager","title":"<code>manager: int = manager</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.process","title":"<code>process: lldb.SBProcess = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.stop_requested","title":"<code>stop_requested: threading.Event = threading.Event()</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.termcontrol","title":"<code>termcontrol: OpportunisticTerminalControl = OpportunisticTerminalControl()</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.worker","title":"<code>worker: str = worker</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.__init__","title":"<code>__init__(manager, worker)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.on_output_event","title":"<code>on_output_event()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.on_process_start","title":"<code>on_process_start(proc)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.start","title":"<code>start(process)</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.stdio","title":"<code>stdio()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.IODriverPseudoTerminal.stop","title":"<code>stop()</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl","title":"<code>OpportunisticTerminalControl</code>","text":"<p>Handles optional terminal control for a given file descriptor. Crucially, all the functions in this class should work regardless of whether terminal control is actually supported on not, but should do nothing in case it is not supported.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.fd","title":"<code>fd: int = fd</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.supported","title":"<code>supported: bool = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.__init__","title":"<code>__init__(fd=-1)</code>","text":"<p>Creates an opportunistic terminal control object for the given file descriptor. If no file descriptor is given, this class will try to open '/dev/tty', and use that.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.get_echo","title":"<code>get_echo()</code>","text":"<p>Gets the current state of echoing for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.get_line_buffering","title":"<code>get_line_buffering()</code>","text":"<p>Gets the current state of line buffering for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.set_echo","title":"<code>set_echo(enabled)</code>","text":"<p>Enables or disables echoing for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.OpportunisticTerminalControl.set_line_buffering","title":"<code>set_line_buffering(enabled)</code>","text":"<p>Enables or disables line buffering for this terminal.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.get_io_driver","title":"<code>get_io_driver()</code>","text":"<p>Instances a new IODriver using the best strategy available in the current system. Meaning a PTY on Unix and plain text on Windows.</p>"},{"location":"source/dbg/lldb/repl/io/#pwndbg.dbg.lldb.repl.io.make_pty","title":"<code>make_pty()</code>","text":"<p>We need to make a pseudo-terminal ourselves if we want the process to handle naturally for the user. Returns a tuple with the path of the worker device and the file descriptor of the manager device if successful.</p>"},{"location":"source/dbg/lldb/repl/proc/","title":"Proc","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler","title":"<code>EventHandler</code>","text":"<p>The event types that make sense for us to track in the process driver aren't the same as the ones in the rest of Pwndbg, so we just expose the native events in process driver, and let the rest of the REPL deal with any complexities that might arise from the translation.</p> <p>This is mostly intended to keep the complexity of generating the START and NEW_THREAD events correctly out of the process driver.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.created","title":"<code>created()</code>","text":"<p>This function is called when a process is created or attached to.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.exited","title":"<code>exited()</code>","text":"<p>This function is called when a process terminates or is detached from.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.modules_loaded","title":"<code>modules_loaded()</code>","text":"<p>This function is called when a new modules have been loaded.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.resumed","title":"<code>resumed()</code>","text":"<p>This function is called when the execution of a process is resumed.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.EventHandler.suspended","title":"<code>suspended()</code>","text":"<p>This function is called when the execution of a process is suspended.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver","title":"<code>ProcessDriver</code>","text":"<p>Drives the execution of a process, responding to its events and handling its I/O, and exposes a simple synchronous interface to the REPL interface.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.debug","title":"<code>debug: bool = debug</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.eh","title":"<code>eh: EventHandler = event_handler</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.io","title":"<code>io: IODriver = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.listener","title":"<code>listener: lldb.SBListener = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.process","title":"<code>process: lldb.SBProcess = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.__init__","title":"<code>__init__(event_handler, debug=False)</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.connect","title":"<code>connect(target, io, url, plugin)</code>","text":"<p>Connects to a remote proces with the given URL using the plugin with the given name, and attaches to the process until LLDB issues a start event to us.</p> <p>Potentially fires all types of events, as it is not known when LLDB will return control of the process to us.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.cont","title":"<code>cont()</code>","text":"<p>Continues execution of the process this object is driving, and returns whenever the process stops.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.has_process","title":"<code>has_process()</code>","text":"<p>Whether there's an active process in this driver.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.interrupt","title":"<code>interrupt()</code>","text":""},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.launch","title":"<code>launch(target, io, env, args, working_dir)</code>","text":"<p>Launches the process and handles startup events. Always stops on first opportunity, and returns immediately after the process has stopped.</p> <p>Fires the created() event.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.run_coroutine","title":"<code>run_coroutine(coroutine)</code>","text":"<p>Runs the given coroutine and allows it to control the execution of the process in this driver. Returns <code>True</code> if the coroutine ran to completion, and <code>False</code> if it was cancelled.</p>"},{"location":"source/dbg/lldb/repl/proc/#pwndbg.dbg.lldb.repl.proc.ProcessDriver.run_lldb_command","title":"<code>run_lldb_command(command)</code>","text":"<p>Runs the given LLDB command and ataches I/O if necessary.</p>"},{"location":"source/dbg/lldb/repl/readline/","title":"Readline","text":"<p>Readline interface for the Pwndbg LLDB REPL.</p> <p>Mostly concerns itself with argument completion.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.PROMPT","title":"<code>PROMPT = message.prompt('pwndbg-lldb&gt; ')</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.complete_descrs","title":"<code>complete_descrs = lldb.SBStringList()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.complete_values","title":"<code>complete_values = lldb.SBStringList()</code>  <code>module-attribute</code>","text":""},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.complete","title":"<code>complete(dbg, text, state)</code>","text":"<p>Runs the tab autocompletion function for readline based on the values returned by <code>SBCommandInterpreter.HandleCompletion</code>.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.disable_readline","title":"<code>disable_readline()</code>","text":"<p>Disables the readline functionality.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.display_completions","title":"<code>display_completions(substitutions, matches, longest_match_len)</code>","text":"<p>Display the completions found by <code>complete</code> in the style of LLDB.</p>"},{"location":"source/dbg/lldb/repl/readline/#pwndbg.dbg.lldb.repl.readline.enable_readline","title":"<code>enable_readline(dbg)</code>","text":"<p>Enables the readline functionality.</p>"},{"location":"source/emu/__init__/","title":"init","text":""},{"location":"source/emu/emulator/","title":"Emulator","text":"<p>Emulation assistance from Unicorn.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.ARM_BANNED_INSTRUCTIONS","title":"<code>ARM_BANNED_INSTRUCTIONS = {C.arm.ARM_INS_MRC, C.arm.ARM_INS_MRRC, C.arm.ARM_INS_MRC2, C.arm.ARM_INS_MRRC2}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.BANNED_INSTRUCTIONS","title":"<code>BANNED_INSTRUCTIONS = {'mips': {C.mips.MIPS_INS_RDHWR}, 'arm': ARM_BANNED_INSTRUCTIONS, 'armcm': ARM_BANNED_INSTRUCTIONS}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.DEBUG","title":"<code>DEBUG = NO_DEBUG</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_SYSCALL","title":"<code>arch_to_SYSCALL = {U.UC_ARCH_X86: [C.x86_const.X86_INS_SYSCALL, C.x86_const.X86_INS_SYSENTER, C.x86_const.X86_INS_SYSEXIT, C.x86_const.X86_INS_SYSRET, C.x86_const.X86_INS_IRET, C.x86_const.X86_INS_IRETD, C.x86_const.X86_INS_IRETQ, C.x86_const.X86_INS_INT, C.x86_const.X86_INS_INT1, C.x86_const.X86_INS_INT3], U.UC_ARCH_MIPS: [C.mips_const.MIPS_INS_SYSCALL], U.UC_ARCH_SPARC: [C.sparc_const.SPARC_INS_T], U.UC_ARCH_ARM: [C.arm_const.ARM_INS_SVC], U.UC_ARCH_ARM64: [C.arm64_const.ARM64_INS_SVC], U.UC_ARCH_PPC: [C.ppc_const.PPC_INS_SC], U.UC_ARCH_RISCV: [C.riscv_const.RISCV_INS_ECALL]}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_UC","title":"<code>arch_to_UC = {'i386': U.UC_ARCH_X86, 'x86-64': U.UC_ARCH_X86, 'mips': U.UC_ARCH_MIPS, 'sparc': U.UC_ARCH_SPARC, 'arm': U.UC_ARCH_ARM, 'armcm': U.UC_ARCH_ARM, 'aarch64': U.UC_ARCH_ARM64, 'rv32': U.UC_ARCH_RISCV, 'rv64': U.UC_ARCH_RISCV}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_UC_consts","title":"<code>arch_to_UC_consts = {'i386': parse_consts(U.x86_const), 'x86-64': parse_consts(U.x86_const), 'mips': parse_consts(U.mips_const), 'sparc': parse_consts(U.sparc_const), 'arm': parse_consts(U.arm_const), 'armcm': parse_consts(U.arm_const), 'aarch64': parse_consts(U.arm64_const), 'rv32': parse_consts(U.riscv_const), 'rv64': parse_consts(U.riscv_const)}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.arch_to_reg_const_map","title":"<code>arch_to_reg_const_map = {'i386': create_reg_to_const_map(arch_to_UC_consts['i386']), 'x86-64': create_reg_to_const_map(arch_to_UC_consts['x86-64'], {'FSBASE': U.x86_const.UC_X86_REG_FS_BASE, 'GSBASE': U.x86_const.UC_X86_REG_GS_BASE}), 'mips': create_reg_to_const_map(arch_to_UC_consts['mips']), 'sparc': create_reg_to_const_map(arch_to_UC_consts['sparc']), 'arm': create_reg_to_const_map(arch_to_UC_consts['arm']), 'armcm': create_reg_to_const_map(arch_to_UC_consts['armcm']), 'aarch64': create_reg_to_const_map(arch_to_UC_consts['aarch64'], {'CPSR': U.arm64_const.UC_ARM64_REG_NZCV}), 'rv32': create_reg_to_const_map(arch_to_UC_consts['rv32']), 'rv64': create_reg_to_const_map(arch_to_UC_consts['rv64'])}</code>  <code>module-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.blacklisted_regs","title":"<code>blacklisted_regs = ['ip', 'cs', 'ds', 'es', 'fs', 'gs', 'ss']</code>  <code>module-attribute</code>","text":"<p>e = pwndbg.emu.emulator.Emulator() e.until_jump()</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator","title":"<code>Emulator</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.arch","title":"<code>arch = pwndbg.aglib.arch.current</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.const_regs","title":"<code>const_regs = arch_to_reg_const_map[self.arch]</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.last_pc","title":"<code>last_pc = None</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.last_single_step_result","title":"<code>last_single_step_result = InstructionExecutedResult(None, None)</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.last_step_succeeded","title":"<code>last_step_succeeded: bool</code>  <code>property</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.regs","title":"<code>regs: pwndbg.lib.regs.RegisterSet = pwndbg.gdblib.regs.current</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.uc","title":"<code>uc = U.Uc(arch_to_UC[self.arch], self.uc_mode)</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.uc_mode","title":"<code>uc_mode = self.get_uc_mode()</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.valid","title":"<code>valid = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.__getattr__","title":"<code>__getattr__(name)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.dumpregs","title":"<code>dumpregs()</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.emu_start","title":"<code>emu_start(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.emu_stop","title":"<code>emu_stop(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.emulate_with_hook","title":"<code>emulate_with_hook(hook, count=512)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.format_telescope","title":"<code>format_telescope(address, limit)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.format_telescope_list","title":"<code>format_telescope_list(chain, limit, enhance_string_len=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.get_reg_enum","title":"<code>get_reg_enum(reg)</code>","text":"<p>Returns the Unicorn Emulator enum code for the named register.</p> <p>Also supports general registers like 'sp' and 'pc'.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.get_uc_mode","title":"<code>get_uc_mode()</code>","text":"<p>Retrieve the mode used by Unicorn for the current architecture.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_add","title":"<code>hook_add(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_del","title":"<code>hook_del(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_intr","title":"<code>hook_intr(uc, intno, user_data)</code>","text":"<p>We never want to emulate through an interrupt.  Just stop.</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.hook_mem_invalid","title":"<code>hook_mem_invalid(uc, access, address, size, value, user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.map_page","title":"<code>map_page(page)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.mem_read","title":"<code>mem_read(*a, **kw)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.memory_read_string","title":"<code>memory_read_string(address, max_string_len=None, max_read=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.read_memory","title":"<code>read_memory(address, size)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.read_register","title":"<code>read_register(name)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.read_thumb_bit","title":"<code>read_thumb_bit()</code>","text":"<p>Return 0 or 1, representing the status of the Thumb bit in the current Arm architecture</p> <p>This reads from the emulator itself, meaning this can be read to determine a state transitions between non-Thumb and Thumb mode</p> <p>Return None if the Thumb bit is not relevent to the current architecture</p> <p>Mimics the <code>read_thumb_bit</code> function defined in gdblib/arch.py</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.single_step","title":"<code>single_step(pc=None)</code>","text":"<p>Steps one instruction.</p> <p>Yields:</p> Type Description <code>int</code> <p>Each iteration, yields a tuple of (address_just_executed, instruction_size).</p> <code>int</code> <p>Returns (None, None) upon failure to execute the instruction</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.single_step_hook_code","title":"<code>single_step_hook_code(_uc, address, instruction_size, _user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.single_step_iter","title":"<code>single_step_iter(pc=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.telescope","title":"<code>telescope(address, limit, read_size=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.telescope_enhance","title":"<code>telescope_enhance(value, code=True, enhance_string_len=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.trace_hook","title":"<code>trace_hook(_uc, address, instruction_size, _user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_call","title":"<code>until_call(pc=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_jump","title":"<code>until_jump(pc=None)</code>","text":"<p>Emulates instructions starting at the specified address until the program counter is set to an address which does not linearly follow the previously-emulated instruction.</p> <p>Parameters:</p> Name Type Description Default <code>pc(int)</code> <p>Address to start at.  If <code>None</code>, uses the current instruction.</p> required <code>types(list,set)</code> <p>List of instruction groups to stop at. By default, it stops at all jumps, calls, and returns.</p> required Return <p>Returns a tuple containing the address of the jump instruction, and its target in the format (address, target).</p> <p>If emulation is forced to stop (e.g., because of a syscall or invalid memory access) then address is the instruction which could not be emulated through, and target will be None.</p> Notes <p>This routine does not consider 'call $+5'</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_jump_hook_code","title":"<code>until_jump_hook_code(_uc, address, instruction_size, _user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_syscall","title":"<code>until_syscall(pc=None)</code>","text":"<p>Emulates instructions starting at the specified address until the program counter points at a syscall instruction (int 0x80, svc, etc.).</p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.until_syscall_hook_code","title":"<code>until_syscall_hook_code(uc, address, size, user_data)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.Emulator.update_pc","title":"<code>update_pc(pc=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.InstructionExecutedResult","title":"<code>InstructionExecutedResult</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/emu/emulator/#pwndbg.emu.emulator.InstructionExecutedResult.address","title":"<code>address: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.InstructionExecutedResult.size","title":"<code>size: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.create_reg_to_const_map","title":"<code>create_reg_to_const_map(base_consts, additional_mapping=None)</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.debug","title":"<code>debug(debug_type, fmt, args=())</code>","text":""},{"location":"source/emu/emulator/#pwndbg.emu.emulator.parse_consts","title":"<code>parse_consts(u_consts)</code>","text":"<p>Unicorn \"consts\" is a python module consisting of a variable definition for each known entity. We repack it here as a dict for performance.</p> <p>Maps \"UC_*\" -&gt; integer value of the constant</p>"},{"location":"source/gdblib/__init__/","title":"init","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.__all__","title":"<code>__all__ = ['ctypes', 'memory', 'typeinfo']</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.gdb_version","title":"<code>gdb_version = tuple(map(int, re.search('(\\\\d+)[^\\\\d]+(\\\\d+)', gdb.VERSION).groups()))</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/__init__/#pwndbg.gdblib.load_gdblib","title":"<code>load_gdblib()</code>","text":"<p>Import all gdblib modules that need to run code on import</p>"},{"location":"source/gdblib/abi/","title":"Abi","text":""},{"location":"source/gdblib/abi/#pwndbg.gdblib.abi.D","title":"<code>D = TypeVar('D')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/abi/#pwndbg.gdblib.abi.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/abi/#pwndbg.gdblib.abi.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/abi/#pwndbg.gdblib.abi.abi","title":"<code>abi: str | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/abi/#pwndbg.gdblib.abi.linux","title":"<code>linux = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/abi/#pwndbg.gdblib.abi.LinuxOnly","title":"<code>LinuxOnly(default=None)</code>","text":"<p>Create a decorator that the function will be called when ABI is Linux. Otherwise, return <code>default</code>.</p>"},{"location":"source/gdblib/abi/#pwndbg.gdblib.abi.update","title":"<code>update()</code>","text":""},{"location":"source/gdblib/android/","title":"Android","text":""},{"location":"source/gdblib/android/#pwndbg.gdblib.android.is_android","title":"<code>is_android()</code>","text":""},{"location":"source/gdblib/android/#pwndbg.gdblib.android.sysroot","title":"<code>sysroot()</code>","text":""},{"location":"source/gdblib/argv/","title":"Argv","text":""},{"location":"source/gdblib/argv/#pwndbg.gdblib.argv.argc","title":"<code>argc = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/argv/#pwndbg.gdblib.argv.argv","title":"<code>argv = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/argv/#pwndbg.gdblib.argv.envc","title":"<code>envc = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/argv/#pwndbg.gdblib.argv.envp","title":"<code>envp = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/argv/#pwndbg.gdblib.argv.update","title":"<code>update()</code>","text":""},{"location":"source/gdblib/bpoint/","title":"Bpoint","text":""},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.REGISTERED_BP_EVENTS","title":"<code>REGISTERED_BP_EVENTS: Dict[int, BreakpointEvent] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.Breakpoint","title":"<code>Breakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>Breakpoint class, similar to gdb.Breakpoint, but clears the caches associated with the stop event before determining whether it should stop the inferior or not.</p> <p>Unlike gdb.Breakpoint, users of this class should override <code>should_stop()</code>, instead of <code>stop()</code>, as the latter is used to do cache invalidation.</p>"},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.Breakpoint.should_stop","title":"<code>should_stop()</code>","text":"<p>This function is called whenever this breakpoint is hit in the code and its return value determines whether the inferior will be stopped.</p>"},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.Breakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.BreakpointEvent","title":"<code>BreakpointEvent</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>Breakpoint class, similar to gdb.Breakpoint, but executes a given callback when, or very shortly after, a the breakpoint is hit, but does not stop the execution of the inferior.</p> <p>This allows us to execute code that changes the state of the inferior safely after a breakpoint is hit.</p>"},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.BreakpointEvent.commands","title":"<code>commands = f'python pwndbg.gdblib.bpoint.REGISTERED_BP_EVENTS[{id(self)}].on_breakpoint_hit()'</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.BreakpointEvent.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":""},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.BreakpointEvent.delete","title":"<code>delete()</code>","text":""},{"location":"source/gdblib/bpoint/#pwndbg.gdblib.bpoint.BreakpointEvent.on_breakpoint_hit","title":"<code>on_breakpoint_hit()</code>","text":"<p>This function is called whenever this breakpoint is hit in the code.</p>"},{"location":"source/gdblib/config/","title":"Config","text":"<p>Dynamic configuration system for pwndbg, using GDB's built-in Parameter mechanism.</p> <p>To create a new pwndbg configuration point, call <code>pwndbg.config.add_param</code>.</p> <p>Parameters should be declared in the module in which they are primarily used, or in this module for general-purpose parameters.</p> <p>All pwndbg Parameter types are accessible via property access on this module, for example:</p> Text Only<pre><code>&gt;&gt;&gt; pwndbg.config.add_param('example-value', 7, 'an example')\n&gt;&gt;&gt; int(pwndbg.config.example_value)\n7\n</code></pre>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.CLASS_MAPPING","title":"<code>CLASS_MAPPING = {pwndbg.lib.config.PARAM_BOOLEAN: gdb.PARAM_BOOLEAN, pwndbg.lib.config.PARAM_AUTO_BOOLEAN: gdb.PARAM_AUTO_BOOLEAN, pwndbg.lib.config.PARAM_ZINTEGER: gdb.PARAM_ZINTEGER, pwndbg.lib.config.PARAM_STRING: gdb.PARAM_STRING, pwndbg.lib.config.PARAM_ZUINTEGER: gdb.PARAM_ZUINTEGER, pwndbg.lib.config.PARAM_ENUM: gdb.PARAM_ENUM, pwndbg.lib.config.PARAM_OPTIONAL_FILENAME: gdb.PARAM_OPTIONAL_FILENAME, pwndbg.lib.config.PARAM_ZUINTEGER_UNLIMITED: gdb.PARAM_ZUINTEGER_UNLIMITED, pwndbg.lib.config.PARAM_INTEGER: gdb.PARAM_INTEGER, pwndbg.lib.config.PARAM_UINTEGER: gdb.PARAM_UINTEGER}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter","title":"<code>Parameter</code>","text":"<p>               Bases: <code>Parameter</code></p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.__doc__","title":"<code>__doc__ = param.help_docstring or None</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.native_default","title":"<code>native_default</code>  <code>property</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.native_value","title":"<code>native_value</code>  <code>property</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.param","title":"<code>param = param</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.set_doc","title":"<code>set_doc = 'Set ' + param.set_show_doc + '.'</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.show_doc","title":"<code>show_doc = 'Show ' + param.set_show_doc + '.'</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.value","title":"<code>value = param.value</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.__init__","title":"<code>__init__(param)</code>","text":""},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.get_set_string","title":"<code>get_set_string()</code>","text":"<p>Handles the GDB <code>set &lt;param&gt;</code></p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.get_show_string","title":"<code>get_show_string(svalue)</code>","text":"<p>Handles the GDB <code>show &lt;param&gt;</code></p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.Parameter.init_super","title":"<code>init_super(param)</code>","text":"<p>Initializes the super class for GDB &gt;= 9</p>"},{"location":"source/gdblib/config/#pwndbg.gdblib.config.init_params","title":"<code>init_params()</code>","text":""},{"location":"source/gdblib/ctypes/","title":"Ctypes","text":"<p>On-the-fly endianness switching for ctypes structures.</p> <p>We cannot make use of ctypes.LittleEndianStructure and ctypes.BigEndianStructure, since these use metaclass hooks to catch fields being set when the class is declared.</p> <p>We need to catch on the fly.  We do this by swapping out the base classes of the Structure type, and incurring a performance penalty for foreign-endianness targets.</p>"},{"location":"source/gdblib/ctypes/#pwndbg.gdblib.ctypes.Structure","title":"<code>Structure = ctypes.LittleEndianStructure</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ctypes/#pwndbg.gdblib.ctypes.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/ctypes/#pwndbg.gdblib.ctypes.update","title":"<code>update()</code>","text":""},{"location":"source/gdblib/dt/","title":"Dt","text":"<p>Prints structures in a manner similar to Windbg's \"dt\" command.</p>"},{"location":"source/gdblib/dt/#pwndbg.gdblib.dt.dt","title":"<code>dt(name='', addr=None, obj=None)</code>","text":"<p>Dump out a structure type Windbg style.</p>"},{"location":"source/gdblib/dt/#pwndbg.gdblib.dt.get_arrsize","title":"<code>get_arrsize(f)</code>","text":""},{"location":"source/gdblib/dt/#pwndbg.gdblib.dt.get_field_by_name","title":"<code>get_field_by_name(obj, field)</code>","text":""},{"location":"source/gdblib/dt/#pwndbg.gdblib.dt.get_type","title":"<code>get_type(v)</code>","text":""},{"location":"source/gdblib/dt/#pwndbg.gdblib.dt.get_typename","title":"<code>get_typename(t)</code>","text":""},{"location":"source/gdblib/dt/#pwndbg.gdblib.dt.happy","title":"<code>happy(typename)</code>","text":""},{"location":"source/gdblib/elf/","title":"Elf","text":"<p>This file declares types and methods useful for enumerating all of the address spaces and permissions of an ELF file in memory.</p> <p>This is necessary for when access to /proc is restricted, or when working on a BSD system which simply does not have /proc.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.Ehdr","title":"<code>Ehdr = Union[pwndbg.lib.elftypes.Elf32_Ehdr, pwndbg.lib.elftypes.Elf64_Ehdr]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.Phdr","title":"<code>Phdr = Union[pwndbg.lib.elftypes.Elf32_Phdr, pwndbg.lib.elftypes.Elf64_Phdr]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.T","title":"<code>T = TypeVar('T', Union[pwndbg.lib.elftypes.Elf32_Ehdr, pwndbg.lib.elftypes.Elf64_Ehdr], Union[pwndbg.lib.elftypes.Elf32_Phdr, pwndbg.lib.elftypes.Elf64_Phdr])</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.ehdr_type_loaded","title":"<code>ehdr_type_loaded = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.ELFInfo","title":"<code>ELFInfo</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>ELF metadata and structures.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.ELFInfo.header","title":"<code>header: Dict[str, int | str]</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.ELFInfo.is_pic","title":"<code>is_pic: bool</code>  <code>property</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.ELFInfo.is_pie","title":"<code>is_pie: bool</code>  <code>property</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.ELFInfo.sections","title":"<code>sections: List[Dict[str, int | str]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.ELFInfo.segments","title":"<code>segments: List[Dict[str, int | str]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(filepath, section_name, try_local_path=False)</code>","text":"<p>Dump the relocation entries of a section from an ELF file, return a generator of Relocation objects.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.dump_section_by_name","title":"<code>dump_section_by_name(filepath, section_name, try_local_path=False)</code>","text":"<p>Dump the content of a section from an ELF file, return the start address, size and content.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.entry","title":"<code>entry()</code>","text":"<p>Return the address of the entry point for the main executable.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.exe","title":"<code>exe()</code>","text":"<p>Return a loaded ELF header object pointing to the Ehdr of the main executable.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.get_containing_sections","title":"<code>get_containing_sections(elf_filepath, elf_loadaddr, vaddr)</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.get_containing_segments","title":"<code>get_containing_segments(elf_filepath, elf_loadaddr, vaddr)</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.get_ehdr","title":"<code>get_ehdr(pointer)</code>","text":"<p>Returns an ehdr object for the ELF pointer points into.</p> <p>We expect the <code>pointer</code> to be an address from the binary.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.get_elf_info","title":"<code>get_elf_info(filepath)</code>","text":"<p>Parse and return ELFInfo.</p> <p>Adds various calculated properties to the ELF header, segments and sections. Such added properties are those with prefix 'x_' in the returned dicts.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.get_elf_info_rebased","title":"<code>get_elf_info_rebased(filepath, vaddr)</code>","text":"<p>Parse and return ELFInfo with all virtual addresses rebased to vaddr</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.get_phdrs","title":"<code>get_phdrs(pointer)</code>","text":"<p>Returns a tuple containing (phnum, phentsize, gdb.Value), where the gdb.Value object is an ELF Program Header with the architecture-appropriate structure type.</p>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.iter_phdrs","title":"<code>iter_phdrs(ehdr)</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.load","title":"<code>load(pointer)</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.map","title":"<code>map(pointer, objfile='')</code>","text":"<p>Given a pointer into an ELF module, return a list of all loaded sections in the ELF.</p> <p>Returns:</p> Type Description <code>Tuple[Page, ...]</code> <p>A sorted list of pwndbg.lib.memory.Page objects</p> <p>Example:</p> Text Only<pre><code>&gt;&gt;&gt; pwndbg.gdblib.elf.load(pwndbg.gdblib.regs.pc)\n[Page('400000-4ef000 r-xp 0'),\n Page('6ef000-6f0000 r--p ef000'),\n Page('6f0000-6ff000 rw-p f0000')]\n&gt;&gt;&gt; pwndbg.gdblib.elf.load(0x7ffff77a2000)\n[Page('7ffff75e7000-7ffff77a2000 r-xp 0x1bb000 0'),\n Page('7ffff77a2000-7ffff79a2000 ---p 0x200000 1bb000'),\n Page('7ffff79a2000-7ffff79a6000 r--p 0x4000 1bb000'),\n Page('7ffff79a6000-7ffff79ad000 rw-p 0x7000 1bf000')]\n</code></pre>"},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.map_inner","title":"<code>map_inner(ei_class, ehdr, objfile)</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.read","title":"<code>read(typ, address, blob=None)</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.reset_ehdr_type_loaded","title":"<code>reset_ehdr_type_loaded()</code>","text":""},{"location":"source/gdblib/elf/#pwndbg.gdblib.elf.update","title":"<code>update()</code>","text":""},{"location":"source/gdblib/events/","title":"Events","text":"<p>Enables callbacks into functions to be automatically invoked when various events occur to the debuggee (e.g. STOP on SIGINT) by using a decorator.</p>"},{"location":"source/gdblib/events/#pwndbg.gdblib.events.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.connected","title":"<code>connected = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.debug","title":"<code>debug = config.add_param('debug-events', False, 'display internal event debugging info')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.objfile_cache","title":"<code>objfile_cache: Dict[str, Set[str]] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.paused","title":"<code>paused = defaultdict(bool)</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.registered","title":"<code>registered: Dict[Any, Dict[HandlerPriority, List[Callable[..., Any]]]] = {gdb.events.exited: {}, gdb.events.cont: {}, gdb.events.new_objfile: {}, gdb.events.stop: {}, gdb.events.start: {}, gdb.events.new_thread: {}, gdb.events.before_prompt: {}, gdb.events.memory_changed: {}, gdb.events.register_changed: {}}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.HandlerPriority","title":"<code>HandlerPriority</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A priority level for an event handler, ordered from highest to lowest priority.</p>"},{"location":"source/gdblib/events/#pwndbg.gdblib.events.HandlerPriority.CACHE_CLEAR","title":"<code>CACHE_CLEAR = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.HandlerPriority.LOW","title":"<code>LOW = auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent","title":"<code>StartEvent</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.registered","title":"<code>registered: List[Callable[..., Any]] = []</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.running","title":"<code>running = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.connect","title":"<code>connect(function)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.disconnect","title":"<code>disconnect(function)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.on_exited","title":"<code>on_exited()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.on_new_objfile","title":"<code>on_new_objfile()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.StartEvent.on_stop","title":"<code>on_stop()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.after_reload","title":"<code>after_reload(start=True)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.before_prompt","title":"<code>before_prompt(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.connect","title":"<code>connect(func, event_handler, name='', priority=HandlerPriority.LOW)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.cont","title":"<code>cont(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.exit","title":"<code>exit(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.invoke_event","title":"<code>invoke_event(event, *args, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.log_objfiles","title":"<code>log_objfiles(ofile=None)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.mem_changed","title":"<code>mem_changed(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.new_objfile","title":"<code>new_objfile(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.on_reload","title":"<code>on_reload()</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.pause","title":"<code>pause(event_registry)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.reg_changed","title":"<code>reg_changed(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.start","title":"<code>start(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.stop","title":"<code>stop(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.thread","title":"<code>thread(func, **kwargs)</code>","text":""},{"location":"source/gdblib/events/#pwndbg.gdblib.events.unpause","title":"<code>unpause(event_registry)</code>","text":""},{"location":"source/gdblib/file/","title":"File","text":"<p>Retrieve files from the debuggee's filesystem.  Useful when debugging a remote process over SSH or similar, where e.g. /proc/FOO/maps is needed from the remote system.</p>"},{"location":"source/gdblib/file/#pwndbg.gdblib.file.get","title":"<code>get(path)</code>","text":"<p>Retrieves the contents of the specified file on the system where the current process is being debugged.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>A byte array, or None.</p>"},{"location":"source/gdblib/file/#pwndbg.gdblib.file.get_file","title":"<code>get_file(path, try_local_path=False)</code>","text":"<p>Downloads the specified file from the system where the current process is being debugged.</p> <p>If the <code>path</code> is prefixed with \"target:\" the prefix is stripped (to support remote target paths properly).</p> <p>If the <code>try_local_path</code> is set to <code>True</code> and the <code>path</code> exists locally and \"target:\" prefix is not present, it will return the local path instead of downloading the file.</p> <p>Returns:</p> Type Description <code>str</code> <p>The local path to the file</p>"},{"location":"source/gdblib/file/#pwndbg.gdblib.file.get_proc_exe_file","title":"<code>get_proc_exe_file()</code>","text":"<p>Returns the local path to the debugged file name.</p>"},{"location":"source/gdblib/file/#pwndbg.gdblib.file.readlink","title":"<code>readlink(path)</code>","text":"<p>readlink(path) -&gt; str</p> <p>Read the link specified by 'path' on the system being debugged.</p> <p>Handles local, qemu-usermode, and remote debugging cases.</p>"},{"location":"source/gdblib/file/#pwndbg.gdblib.file.remote_files_dir","title":"<code>remote_files_dir()</code>","text":""},{"location":"source/gdblib/file/#pwndbg.gdblib.file.reset_remote_files","title":"<code>reset_remote_files()</code>","text":""},{"location":"source/gdblib/functions/","title":"Functions","text":"<p>Put all functions defined for gdb in here.</p> <p>This file might be changed into a module in the future.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.functions","title":"<code>functions: List[_GdbFunction] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.GdbFunction","title":"<code>GdbFunction(only_when_running=False)</code>","text":""},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.base","title":"<code>base(name_pattern)</code>","text":"<p>Return base address of the first memory mapping containing the given name.</p>"},{"location":"source/gdblib/functions/#pwndbg.gdblib.functions.rebase","title":"<code>rebase(addr)</code>","text":"<p>Return rebased address.</p>"},{"location":"source/gdblib/godbg/","title":"Godbg","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.debug_color","title":"<code>debug_color = theme.add_color_param('go-dump-debug', 'blue', \"color for 'go-dump' command's debug info when --debug is specified\")</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.hex_digits","title":"<code>hex_digits = set('0123456789abcdefABCDEFxX')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.indent_amount","title":"<code>indent_amount = pwndbg.config.add_param('go-dump-indent-amount', 4, 'the indent amount for go-dump pretty printing')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.line_width","title":"<code>line_width = pwndbg.config.add_param('go-dump-line-width', 80, 'the soft line width for go-dump pretty printing')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType","title":"<code>ArrayType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>An array type in Go, notated as [count]inner.</p> <p>Arrays are laid out as contiguous data.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType.count","title":"<code>count: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType.inner","title":"<code>inner: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType.__init__","title":"<code>__init__(meta, inner, count)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.ArrayType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BackrefType","title":"<code>BackrefType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A temporary placeholder type used when dumping recursive types, e.g. type a []a</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BackrefType.key","title":"<code>key: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BackrefType.__init__","title":"<code>__init__(meta, key)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BackrefType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BackrefType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BackrefType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType","title":"<code>BasicType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A primitive Go type.</p> <p>Complex numbers are laid out as a real and imaginary part (both floats). Strings are laid out as a pointer and a length.</p> <p>Methodless interfaces (the interface{} type) are denoted as any, and interfaces with methods are denoted as interface.</p> <p>Function pointers are denoted as funcptr.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.extra_meta","title":"<code>extra_meta: List[str] = dataclasses.field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.sz","title":"<code>sz: int = dataclasses.field(init=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.__init__","title":"<code>__init__(meta, name, extra_meta=list())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.__post_init__","title":"<code>__post_init__()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.BasicType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts","title":"<code>FormatOpts</code>  <code>dataclass</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.debug","title":"<code>debug: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.float_decimals","title":"<code>float_decimals: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.int_hex","title":"<code>int_hex: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.pretty","title":"<code>pretty: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.__init__","title":"<code>__init__(int_hex=False, debug=False, pretty=False, float_decimals=None)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.fmt_bytes","title":"<code>fmt_bytes(val)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.fmt_debug","title":"<code>fmt_debug(val, default='')</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.fmt_elems","title":"<code>fmt_elems(elems)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.fmt_float","title":"<code>fmt_float(val)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.fmt_int","title":"<code>fmt_int(val)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.fmt_ptr","title":"<code>fmt_ptr(val)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.FormatOpts.fmt_str","title":"<code>fmt_str(val)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind","title":"<code>GoTypeKind</code>","text":"<p>               Bases: <code>IntEnum</code></p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.ARRAY","title":"<code>ARRAY = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.BOOL","title":"<code>BOOL = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.CHAN","title":"<code>CHAN = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.COMPLEX128","title":"<code>COMPLEX128 = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.COMPLEX64","title":"<code>COMPLEX64 = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.FLOAT32","title":"<code>FLOAT32 = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.FLOAT64","title":"<code>FLOAT64 = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.FUNC","title":"<code>FUNC = 19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.INT","title":"<code>INT = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.INT16","title":"<code>INT16 = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.INT32","title":"<code>INT32 = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.INT64","title":"<code>INT64 = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.INT8","title":"<code>INT8 = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.INTERFACE","title":"<code>INTERFACE = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.INVALID","title":"<code>INVALID = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.MAP","title":"<code>MAP = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.POINTER","title":"<code>POINTER = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.SLICE","title":"<code>SLICE = 23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.STRING","title":"<code>STRING = 24</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.STRUCT","title":"<code>STRUCT = 25</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.UINT","title":"<code>UINT = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.UINT16","title":"<code>UINT16 = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.UINT32","title":"<code>UINT32 = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.UINT64","title":"<code>UINT64 = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.UINT8","title":"<code>UINT8 = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.UINTPTR","title":"<code>UINTPTR = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.UNSAFEPOINTER","title":"<code>UNSAFEPOINTER = 26</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeKind.get_simple_name","title":"<code>get_simple_name()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta","title":"<code>GoTypeMeta</code>  <code>dataclass</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta.addr","title":"<code>addr: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta.align","title":"<code>align: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta.direct_iface","title":"<code>direct_iface: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta.kind","title":"<code>kind: GoTypeKind</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta.size","title":"<code>size: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.GoTypeMeta.__init__","title":"<code>__init__(name, kind, addr, size=0, align=1, direct_iface=False)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType","title":"<code>MapType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A map type in Go, notated as map[key]val.</p> <p>Note that maps in Go are actually pointers to the inner map, but the map type printer here directly prints the inner map.</p> <p>Maps don't have a simple layout, and may reasonably change, but the last change was in 2017, so it probably won't.</p> <p>The layout assumed is as follows (taken from src/runtime/map.go commit 1b4f1dc):</p> <p>type hmap struct {     count      int     flags      uint8     B          uint8     noverflow  uint16     hash0      uint32     buckets    unsafe.Pointer     oldbuckets unsafe.Pointer     nevacuate  uintptr     extra      *mapextra }</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.key","title":"<code>key: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.val","title":"<code>val: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.__init__","title":"<code>__init__(meta, key, val)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.field_offsets","title":"<code>field_offsets()</code>  <code>staticmethod</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.MapType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.PointerType","title":"<code>PointerType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A pointer type in Go, notated as *inner.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.PointerType.inner","title":"<code>inner: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.PointerType.__init__","title":"<code>__init__(meta, inner)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.PointerType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.PointerType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.PointerType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.PointerType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.RuntimeType","title":"<code>RuntimeType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A value of a runtime reflection type in Go, notated as runtime(SIZE)ADDRESS, where SIZE is the size of the type's value in bytes, and ADDRESS is the address of the type.</p> <p>This type is useful for serializing cyclic types.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.RuntimeType.addr","title":"<code>addr: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.RuntimeType.sz","title":"<code>sz: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.RuntimeType.__init__","title":"<code>__init__(meta, sz, addr)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.RuntimeType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.RuntimeType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.RuntimeType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.SliceType","title":"<code>SliceType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A slice type in Go, notated as []inner.</p> <p>Slices are laid out as a pointer, length, and capacity.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.SliceType.inner","title":"<code>inner: Type</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.SliceType.__init__","title":"<code>__init__(meta, inner)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.SliceType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.SliceType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.SliceType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.SliceType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType","title":"<code>StructType</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Type</code></p> <p>A struct type in Go, notated as struct(SIZE){FIELDS}, where SIZE is the size of the struct in bytes, and FIELDS is a semicolon-separated list of OFFSET:NAME:TYPE fields.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.fields","title":"<code>fields: List[Tuple[str, Type | str, int]]</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.sz","title":"<code>sz: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.__init__","title":"<code>__init__(meta, fields, sz, name=None)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.additional_metadata","title":"<code>additional_metadata()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.get_typename","title":"<code>get_typename()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.StructType.size","title":"<code>size()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type","title":"<code>Type</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.meta","title":"<code>meta: GoTypeMeta | None</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.__init__","title":"<code>__init__(meta)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.additional_metadata","title":"<code>additional_metadata()</code>","text":"<p>Returns a list of lines of additional metadata to dump from the <code>go-type</code> command.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.dump","title":"<code>dump(addr, fmt=FormatOpts())</code>  <code>abstractmethod</code>","text":"<p>Dump a type from memory given an address and format.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.get_typename","title":"<code>get_typename()</code>  <code>abstractmethod</code>","text":"<p>Returns the typename of a type. Should be reparsable via _parse_ty.</p> <p>Also used to get the string representation.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.is_cyclic","title":"<code>is_cyclic()</code>","text":"<p>Checks if a type is cyclic (contains references to itself), e.g. type a []a</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.Type.size","title":"<code>size()</code>  <code>abstractmethod</code>","text":"<p>Returns the size of a type in bytes.</p> <p>Used for computing array and struct layouts.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.compute_named_offsets","title":"<code>compute_named_offsets(fields)</code>","text":"<p>Like compute_offsets, but takes in field names and returns a dictionary mapping field name to offset instead.</p> <p>Also maps in a special $size field with the size of the struct.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.compute_offsets","title":"<code>compute_offsets(fields)</code>","text":"<p>Given a list of (size, alignment) for struct field types, returns a list of field offsets for the struct. The last element will be the offset of the struct's end (the struct size).</p> <p>Layout computation taken from src/go/types/sizes.go commit 1b4f1dc</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.decode_runtime_type","title":"<code>decode_runtime_type(addr, keep_backrefs=False)</code>","text":"<p>Decodes a runtime reflection type from memory, returning a (meta, type) tuplee.</p> <p>The layout assumed is as follows (taken from src/internal/abi/type.go commit 1b4f1dc):</p> <p>type Type struct {     Size_       uintptr     PtrBytes    uintptr     Hash        uint32     TFlag       TFlag     Align_      uint8     FieldAlign_ uint8     Kind_       Kind     Equal       func(unsafe.Pointer, unsafe.Pointer) bool     GCData      *byte     Str         NameOff     PtrToThis   TypeOff }</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.emit_warning","title":"<code>emit_warning(msg)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.get_elf","title":"<code>get_elf()</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.get_go_version","title":"<code>get_go_version()</code>","text":"<p>Try to determine the Go version used to compile the binary.</p> <p>None can be returned if the version couldn't be inferred, at which point it's probably best to assume latest version.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.get_type_start","title":"<code>get_type_start(addr=None)</code>","text":"<p>Given the address to a type, try to find the moduledata types section containing it.</p> <p>Necessary to determine the base address that the type name is offset by.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.load_float","title":"<code>load_float(data)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.load_int","title":"<code>load_int(data)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.load_uint","title":"<code>load_uint(data, endian=None)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.parse_type","title":"<code>parse_type(ty)</code>","text":""},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.read_buildversion","title":"<code>read_buildversion(addr)</code>","text":"<p>Reads a Go runtime.buildVersion string to extract the version.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.read_type_name","title":"<code>read_type_name(addr)</code>","text":"<p>Reads a Go type name given the address to the name.</p> <p>Go type names are stored as a 1 byte bitfield followed by a varint length prefixed string after 1.17.</p> <p>Prior to 1.17, they were stored as a 1 byte bitfield followed by a 2 byte length prefixed string.</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.read_varint_str","title":"<code>read_varint_str(addr)</code>","text":"<p>Read a length-prefix string encoded with Go's variable length encoding.</p> <p>Implementation taken from https://github.com/golang/go/blob/9d33956503c0d96c0c5666d374173f7ac9756d98/src/internal/abi/type.go#L640-L649</p>"},{"location":"source/gdblib/godbg/#pwndbg.gdblib.godbg.word_size","title":"<code>word_size()</code>","text":"<p>Gets the Go word size for the current architecture.</p> <p>Values taken from https://github.com/golang/go/blob/20b79fd5775c39061d949569743912ad5e58b0e7/src/go/types/sizes.go#L233-L252</p>"},{"location":"source/gdblib/got/","title":"Got","text":"<p>Global Offset Table Tracker</p> <p>Subsystem for tracking accesses to external function calls made through pointers in an inferior's Global Offset Table, such as those made by the stubs in the Procedure Linkage Table.</p> <p>Currently, it does this by attatching watchpoints to the entries in the GOT and taking note of where the call came from, but it could be done much faster by injecting our own code into the program space to track this.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.GOT_TRACKING","title":"<code>GOT_TRACKING = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.INSTALLED_WATCHPOINTS","title":"<code>INSTALLED_WATCHPOINTS: Dict[int, Tuple[Tracker, Patcher]] = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.IRELATIVE_SLOTS","title":"<code>IRELATIVE_SLOTS = {'x86-64': {RelocTypes.R_X86_64_IRELATIVE}, 'i386': {RelocTypes.R_386_IRELATIVE}, 'aarch64': {RelocTypes.R_AARCH64_P32_IRELATIVE, RelocTypes.R_AARCH64_IRELATIVE}, 'mips': set(), 'powerpc': {RelocTypes.R_PPC_IRELATIVE}, 'sparc': {RelocTypes.R_SPARC_IRELATIVE}, 'arm': {RelocTypes.R_ARM_IRELATIVE}, 'armcm': {RelocTypes.R_ARM_IRELATIVE}, 'rv32': {RelocTypes.R_RISCV_IRELATIVE}, 'rv64': {RelocTypes.R_RISCV_IRELATIVE}}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.JUMP_SLOTS","title":"<code>JUMP_SLOTS = {'x86-64': {RelocTypes.R_X86_64_JUMP_SLOT}, 'i386': {RelocTypes.R_386_JMP_SLOT}, 'aarch64': {RelocTypes.R_AARCH64_JUMP_SLOT}, 'mips': {RelocTypes.R_MIPS_JUMP_SLOT}, 'powerpc': {RelocTypes.R_PPC_JMP_SLOT}, 'sparc': {RelocTypes.R_SPARC_JMP_SLOT}, 'arm': {RelocTypes.R_ARM_JUMP_SLOT}, 'armcm': {RelocTypes.R_ARM_JUMP_SLOT}, 'rv32': {RelocTypes.R_RISCV_JUMP_SLOT}, 'rv64': {RelocTypes.R_RISCV_JUMP_SLOT}}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TRAP_ALLOCATOR","title":"<code>TRAP_ALLOCATOR = TrapAllocator()</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher","title":"<code>Patcher</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>Watches for changes made by program code to the GOT and fixes them up.</p> <p>This class is paired with Tracker, and instances of both classes always function together.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.entry","title":"<code>entry = entry</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.init","title":"<code>init = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.silent","title":"<code>silent = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.tracker","title":"<code>tracker = tracker</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.__init__","title":"<code>__init__(entry, tracker)</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Patcher.should_stop","title":"<code>should_stop()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes","title":"<code>RelocTypes</code>","text":"<p>This class contains all the relocation type constants so that one may interpret the relocations types present in the DYNAMIC segment. These constants are defined in each of the processors' SystemV R4 psABI document, or equivalent, and should stay the same across all implementations of libc on systems that adhere to that ABI, such as Linux.</p> <p>Most of these were sourced from GLibc, which conveniently lists all of the relocations types in a single file1.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_386_IRELATIVE","title":"<code>R_386_IRELATIVE = 42</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_386_JMP_SLOT","title":"<code>R_386_JMP_SLOT = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_390_IRELATIVE","title":"<code>R_390_IRELATIVE = 61</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_390_JMP_SLOT","title":"<code>R_390_JMP_SLOT = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_68K_JMP_SLOT","title":"<code>R_68K_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_AARCH64_IRELATIVE","title":"<code>R_AARCH64_IRELATIVE = 1032</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_AARCH64_JUMP_SLOT","title":"<code>R_AARCH64_JUMP_SLOT = 1026</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_AARCH64_P32_IRELATIVE","title":"<code>R_AARCH64_P32_IRELATIVE = 188</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ALPHA_JMP_SLOT","title":"<code>R_ALPHA_JMP_SLOT = 26</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ARC_JMP_SLOT","title":"<code>R_ARC_JMP_SLOT = 55</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ARM_IRELATIVE","title":"<code>R_ARM_IRELATIVE = 160</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_ARM_JUMP_SLOT","title":"<code>R_ARM_JUMP_SLOT = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_CKCORE_JUMP_SLOT","title":"<code>R_CKCORE_JUMP_SLOT = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_CRIS_JUMP_SLOT","title":"<code>R_CRIS_JUMP_SLOT = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_M32R_JMP_SLOT","title":"<code>R_M32R_JMP_SLOT = 52</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_METAG_JMP_SLOT","title":"<code>R_METAG_JMP_SLOT = 44</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_MICROBLAZE_JUMP_SLOT","title":"<code>R_MICROBLAZE_JUMP_SLOT = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_MIPS_JUMP_SLOT","title":"<code>R_MIPS_JUMP_SLOT = 127</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_MN10300_JMP_SLOT","title":"<code>R_MN10300_JMP_SLOT = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_NDS32_JMP_SLOT","title":"<code>R_NDS32_JMP_SLOT = 41</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_NIOS2_JUMP_SLOT","title":"<code>R_NIOS2_JUMP_SLOT = 38</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_OR1K_JMP_SLOT","title":"<code>R_OR1K_JMP_SLOT = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC64_IRELATIVE","title":"<code>R_PPC64_IRELATIVE = 248</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC64_JMP_SLOT","title":"<code>R_PPC64_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC_IRELATIVE","title":"<code>R_PPC_IRELATIVE = 248</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_PPC_JMP_SLOT","title":"<code>R_PPC_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_RISCV_IRELATIVE","title":"<code>R_RISCV_IRELATIVE = 58</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_RISCV_JUMP_SLOT","title":"<code>R_RISCV_JUMP_SLOT = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_SH_JMP_SLOT","title":"<code>R_SH_JMP_SLOT = 164</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_SPARC_IRELATIVE","title":"<code>R_SPARC_IRELATIVE = 249</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_SPARC_JMP_SLOT","title":"<code>R_SPARC_JMP_SLOT = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_TILEGX_JMP_SLOT","title":"<code>R_TILEGX_JMP_SLOT = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_TILEPRO_JMP_SLOT","title":"<code>R_TILEPRO_JMP_SLOT = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_X86_64_IRELATIVE","title":"<code>R_X86_64_IRELATIVE = 37</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.RelocTypes.R_X86_64_JUMP_SLOT","title":"<code>R_X86_64_JUMP_SLOT = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker","title":"<code>Tracker</code>","text":"<p>               Bases: <code>Breakpoint</code></p> <p>Class that tracks the accesses made to the entries in the GOT.</p> <p>This class is paired with Patcher, and instances of both classes always function together.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.dynamic_section","title":"<code>dynamic_section = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.hits","title":"<code>hits: Dict[Tuple[int, ...], int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.link_map_entry","title":"<code>link_map_entry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.relocation_fn","title":"<code>relocation_fn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.relocation_index","title":"<code>relocation_index = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.silent","title":"<code>silent = True</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.target","title":"<code>target = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.total_hits","title":"<code>total_hits = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.trapped_address","title":"<code>trapped_address = TRAP_ALLOCATOR.alloc()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.delete","title":"<code>delete()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.Tracker.should_stop","title":"<code>should_stop()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator","title":"<code>TrapAllocator</code>","text":"<p>Utility that allocates and manages executable addresses in the space of the executing program that we can trap.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.block_capacity","title":"<code>block_capacity = 4096</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.slot_size","title":"<code>slot_size = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.alloc","title":"<code>alloc()</code>","text":"<p>Allocates a new address to where program execution can be diverted.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.clear","title":"<code>clear()</code>","text":"<p>Deletes all memory mappings and frees all addresses.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.TrapAllocator.free","title":"<code>free(address)</code>","text":"<p>Indicates that an address obtained from alloc() can be recycled.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.all_tracked_entries","title":"<code>all_tracked_entries()</code>","text":"<p>Return an iterator over all of the GOT whose accesses are being tracked.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.disable_got_call_tracking","title":"<code>disable_got_call_tracking()</code>","text":"<p>Disable the analysis of calls made through the GOT.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.display_name","title":"<code>display_name(name, basename=False)</code>","text":"<p>Return the display name for a symbol or objfile.</p> <p>Ideally, we'd like to display all of the names of the symbols as text, but there is really nothing stopping symbol names from being stored in some fairly wacky encoding or really from having names that aren't text at all.</p> <p>We should try our best to turn whatever the symbol name is into text, but not so much that non-text entries or entries in unknown encodings become unrecognizable.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.enable_got_call_tracking","title":"<code>enable_got_call_tracking(disable_hardware_whatchpoints=True)</code>","text":"<p>Enable the analysis of calls made through the GOT.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.is_mmap_error","title":"<code>is_mmap_error(ptr)</code>","text":"<p>Checks whether the return value of an mmap of indicates an error.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.jump_slots_for","title":"<code>jump_slots_for(dynamic)</code>","text":"<p>Returns the jump slot addresses described by the given dynamic section.</p>"},{"location":"source/gdblib/got/#pwndbg.gdblib.got.tracked_entry_by_address","title":"<code>tracked_entry_by_address(address)</code>","text":"<p>Return the tracker associated with the entry at the given address, if any.</p>"},{"location":"source/gdblib/heap_tracking/","title":"Heap tracking","text":"<p>Heap Tracking</p> <p>This module implements runtime tracking of the heap, allowing pwndbg to detect heap related misbehavior coming from an inferior in real time, which lets us catch UAF bugs, double frees (and more), and report them to the user.</p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking--approach","title":"Approach","text":"<p>The approach used starting with using breakpoints to hook into the following libc symbols: <code>malloc</code>, <code>free</code>, <code>calloc</code>, and <code>realloc</code>. Each hook has a reference to a shared instance of the <code>Tracker</code> class, which is responsible for handling the tracking of the chunks of memory from the heap.</p> <p>The tracker keeps two sorted maps of chunks, for freed and in use chunks, keyed by their base address. Newly allocated chunks are added to the map of in use chunks right before an allocating call returns, and newly freed chunks are moved from the map of in use chunks to the map of free ones right before a freeing call returns. The tracker is also responsible for installing watchpoints for free chunks when they're added to the free chunk map and deleting them when their corresponding chunks are removed from the map.</p> <p>Additionally, because going through the data structures inside of libc to determine whether a chunk is free or not is, more often than not, a fairly slow operation, this module will only do so when it determines its view of the chunks has diverged from the one in libc in a way that would affect behavior. When such a diffence is detected, this module will rebuild the chunk maps in the range it determines to have been affected.</p> <p>Currently, the way it does this is by deleting and querying from libc the new status of all chunks that overlap the region of a new allocation when it detects that allocation overlaps chunks it previously considered free.</p> <p>This approach lets us avoid a lot of the following linked lists that comes with trying to answer the allocation status of a chunk, by keeping at hand as much known-good information as possible about them. Keep in mind that, although it is much faster than going to libc every time we need to know the allocation status of a chunk, this approach does have drawbacks when it comes to memory usage.</p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking--compatibility","title":"Compatibility","text":"<p>Currently module assumes the inferior is using GLibc.</p> <p>There are points along the code in this module where the assumptions it makes are explicitly documented and checked to be valid for the current inferior, so that it may be immediately clear to the user that something has gone wrong if they happen to not be valid. However, be aware that there may be assumptions that were not made explicit.</p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.CALLOC_NAME","title":"<code>CALLOC_NAME = 'calloc'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FREE_NAME","title":"<code>FREE_NAME = 'free'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.LIBC_NAME","title":"<code>LIBC_NAME = 'libc.so.6'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.MALLOC_NAME","title":"<code>MALLOC_NAME = 'malloc'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.PRINT_DEBUG","title":"<code>PRINT_DEBUG = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.REALLOC_NAME","title":"<code>REALLOC_NAME = 'realloc'</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.calloc_enter","title":"<code>calloc_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.free_enter","title":"<code>free_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.last_issue","title":"<code>last_issue: str | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.malloc_enter","title":"<code>malloc_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.realloc_enter","title":"<code>realloc_enter = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.stop_on_error","title":"<code>stop_on_error = True</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocChunkWatchpoint","title":"<code>AllocChunkWatchpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocChunkWatchpoint.chunk","title":"<code>chunk = chunk</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocChunkWatchpoint.__init__","title":"<code>__init__(chunk)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocChunkWatchpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocExitBreakpoint","title":"<code>AllocExitBreakpoint</code>","text":"<p>               Bases: <code>FinishBreakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocExitBreakpoint.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocExitBreakpoint.requested_size","title":"<code>requested_size = requested_size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocExitBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocExitBreakpoint.__init__","title":"<code>__init__(tracker, requested_size, name)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocExitBreakpoint.out_of_scope","title":"<code>out_of_scope()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.AllocExitBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.CallocEnterBreakpoint","title":"<code>CallocEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.CallocEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.CallocEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.CallocEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Chunk","title":"<code>Chunk</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Chunk.address","title":"<code>address = address</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Chunk.flags","title":"<code>flags = flags</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Chunk.requested_size","title":"<code>requested_size = requested_size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Chunk.size","title":"<code>size = size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Chunk.__init__","title":"<code>__init__(address, size, requested_size, flags)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeChunkWatchpoint","title":"<code>FreeChunkWatchpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeChunkWatchpoint.chunk","title":"<code>chunk = chunk</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeChunkWatchpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeChunkWatchpoint.__init__","title":"<code>__init__(chunk, tracker)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeChunkWatchpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeEnterBreakpoint","title":"<code>FreeEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeExitBreakpoint","title":"<code>FreeExitBreakpoint</code>","text":"<p>               Bases: <code>FinishBreakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeExitBreakpoint.ptr","title":"<code>ptr = ptr</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeExitBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeExitBreakpoint.__init__","title":"<code>__init__(tracker, ptr)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeExitBreakpoint.out_of_scope","title":"<code>out_of_scope()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.FreeExitBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.MallocEnterBreakpoint","title":"<code>MallocEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.MallocEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.MallocEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.MallocEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocEnterBreakpoint","title":"<code>ReallocEnterBreakpoint</code>","text":"<p>               Bases: <code>Breakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocEnterBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocEnterBreakpoint.__init__","title":"<code>__init__(address, tracker)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocEnterBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocExitBreakpoint","title":"<code>ReallocExitBreakpoint</code>","text":"<p>               Bases: <code>FinishBreakpoint</code></p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocExitBreakpoint.freed_ptr","title":"<code>freed_ptr = freed_ptr</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocExitBreakpoint.requested_size","title":"<code>requested_size = requested_size</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocExitBreakpoint.tracker","title":"<code>tracker = tracker</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocExitBreakpoint.__init__","title":"<code>__init__(tracker, freed_ptr, requested_size)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocExitBreakpoint.out_of_scope","title":"<code>out_of_scope()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.ReallocExitBreakpoint.stop","title":"<code>stop()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker","title":"<code>Tracker</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.alloc_chunks","title":"<code>alloc_chunks: SortedDict[int, Chunk] = SortedDict()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.free_chunks","title":"<code>free_chunks: SortedDict[int, Chunk] = SortedDict()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.free_watchpoints","title":"<code>free_watchpoints: Dict[int, FreeChunkWatchpoint] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.memory_management_calls","title":"<code>memory_management_calls: Dict[int, bool] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.enter_memory_management","title":"<code>enter_memory_management(name)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.exit_memory_management","title":"<code>exit_memory_management()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.free","title":"<code>free(address)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.is_performing_memory_management","title":"<code>is_performing_memory_management()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.Tracker.malloc","title":"<code>malloc(chunk)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.get_chunk","title":"<code>get_chunk(address, requested_size)</code>","text":"<p>Reads a chunk from a given address.</p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.in_program_code_stack","title":"<code>in_program_code_stack()</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.install","title":"<code>install(disable_hardware_watchpoints=True)</code>","text":""},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.is_enabled","title":"<code>is_enabled()</code>","text":"<p>Whether the heap tracker in enabled.</p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.resolve_address","title":"<code>resolve_address(name)</code>","text":"<p>Checks whether a given symbol is available and part of libc, and returns its address.</p>"},{"location":"source/gdblib/heap_tracking/#pwndbg.gdblib.heap_tracking.uninstall","title":"<code>uninstall()</code>","text":""},{"location":"source/gdblib/hooks/","title":"Hooks","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.init","title":"<code>init()</code>","text":"<p>Calls all GDB hook functions that need to be called when GDB/pwndbg itself is loaded, as opposed to when an actual hook event occurs</p>"},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.on_exit","title":"<code>on_exit()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.on_start","title":"<code>on_start()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.on_stop","title":"<code>on_stop()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.reset_config","title":"<code>reset_config()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.update_arch","title":"<code>update_arch()</code>","text":""},{"location":"source/gdblib/hooks/#pwndbg.gdblib.hooks.update_typeinfo","title":"<code>update_typeinfo()</code>","text":""},{"location":"source/gdblib/info/","title":"Info","text":"<p>Runs a few useful commands which are available under \"info\".</p>"},{"location":"source/gdblib/info/#pwndbg.gdblib.info.address","title":"<code>address(symbol)</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.auxv","title":"<code>auxv()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.files","title":"<code>files()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.parsed_sharedlibrary","title":"<code>parsed_sharedlibrary()</code>","text":"<p>Returns a dictionary of shared libraries with their .text section from and to addresses.</p>"},{"location":"source/gdblib/info/#pwndbg.gdblib.info.proc_mappings","title":"<code>proc_mappings()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.sharedlibrary","title":"<code>sharedlibrary()</code>","text":""},{"location":"source/gdblib/info/#pwndbg.gdblib.info.sharedlibrary_paths","title":"<code>sharedlibrary_paths()</code>","text":"<p>Get the paths of all shared libraries loaded in the process by parsing the output of \"info sharedlibrary\".</p>"},{"location":"source/gdblib/info/#pwndbg.gdblib.info.target","title":"<code>target()</code>","text":""},{"location":"source/gdblib/memory/","title":"Memory","text":"<p>Reading, writing, and describing memory.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.GdbDict","title":"<code>GdbDict = Dict[str, Union['GdbDict', int]]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.MMAP_MIN_ADDR","title":"<code>MMAP_MIN_ADDR = 32768</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.byte","title":"<code>byte(addr)</code>","text":"<p>byte(addr) -&gt; int</p> <p>Read one byte at the specified address</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.cast_pointer","title":"<code>cast_pointer(type, addr)</code>","text":"<p>Create a gdb.Value at given address and cast it to the pointer of specified type</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.convert_gdb_value_to_python_value","title":"<code>convert_gdb_value_to_python_value(gdb_value)</code>","text":""},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.fetch_struct_as_dictionary","title":"<code>fetch_struct_as_dictionary(struct_name, struct_address, include_only_fields=None, exclude_fields=None)</code>","text":""},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.find_lower_boundary","title":"<code>find_lower_boundary(addr, max_pages=1024)</code>","text":"<p>find_lower_boundary(addr, max_pages=1024) -&gt; int</p> <p>Brute-force search the lower boundary of a memory mapping, by reading the first byte of each page, until an unmapped page is found.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.find_upper_boundary","title":"<code>find_upper_boundary(addr, max_pages=1024)</code>","text":"<p>find_upper_boundary(addr, max_pages=1024) -&gt; int</p> <p>Brute-force search the upper boundary of a memory mapping, by reading the first byte of each page, until an unmapped page is found.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.get_typed_pointer","title":"<code>get_typed_pointer(type, addr)</code>","text":"<p>Look up a type by name if necessary and return a gdb.Value of addr cast to that type</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.get_typed_pointer_value","title":"<code>get_typed_pointer_value(type_name, addr)</code>","text":"<p>Read the pointer value of addr cast to type specified by type_name</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.is_readable_address","title":"<code>is_readable_address(address)</code>","text":"<p>is_readable_address(address) -&gt; bool</p> <p>Check if the address can be read by GDB.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to read</p> required <p>Returns:</p> Type Description <code>bool</code> <p>class:<code>bool</code>: Whether the address is readable.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.pack_struct_into_dictionary","title":"<code>pack_struct_into_dictionary(fetched_struct, include_only_fields=None, exclude_fields=None)</code>","text":""},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.peek","title":"<code>peek(address)</code>","text":"<p>peek(address) -&gt; str</p> <p>Read one byte from the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to read</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>class:<code>str</code>: A single byte of data, or <code>None</code> if the</p> <code>str | None</code> <p>address cannot be read.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.poke","title":"<code>poke(address)</code>","text":"<p>poke(address)</p> <p>Checks whether an address is writable.</p> <p>Parameters:</p> Name Type Description Default <code>address(int)</code> <p>Address to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>class:<code>bool</code>: Whether the address is writable.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.pvoid","title":"<code>pvoid(addr)</code>","text":"<p>pvoid(addr) -&gt; int</p> <p>Read one pointer from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.read","title":"<code>read(addr, count, partial=False)</code>","text":"<p>read(addr, count, partial=False) -&gt; bytearray</p> <p>Read memory from the program being debugged.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to read</p> required <code>count(int)</code> <p>Number of bytes to read</p> required <code>partial(bool)</code> <p>Whether less than <code>count</code> bytes can be returned</p> required <p>Returns:</p> Type Description <code>bytearray</code> <p>class:<code>bytearray</code>: The memory at the specified address,</p> <code>bytearray</code> <p>or <code>None</code>.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.readtype","title":"<code>readtype(gdb_type, addr)</code>","text":"<p>readtype(gdb_type, addr) -&gt; int</p> <p>Reads an integer-type (e.g. <code>uint64</code>) and returns a Python native integer representation of the same.</p> <p>Parameters:</p> Name Type Description Default <code>gdb_type(gdb.Type)</code> <p>GDB type to read</p> required <code>addr(int)</code> <p>Address at which the value to be read resides</p> required <p>Returns:</p> Type Description <code>int</code> <p>class:<code>int</code></p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.resolve_renamed_struct_field","title":"<code>resolve_renamed_struct_field(struct_name, possible_field_names)</code>","text":""},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.s16","title":"<code>s16(addr)</code>","text":"<p>s16(addr) -&gt; int</p> <p>Read one <code>int16_t</code> from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.s32","title":"<code>s32(addr)</code>","text":"<p>s32(addr) -&gt; int</p> <p>Read one <code>int32_t</code> from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.s64","title":"<code>s64(addr)</code>","text":"<p>s64(addr) -&gt; int</p> <p>Read one <code>int64_t</code> from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.s8","title":"<code>s8(addr)</code>","text":"<p>s8(addr) -&gt; int</p> <p>Read one <code>int8_t</code> from the specified address</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.string","title":"<code>string(addr, max=4096)</code>","text":"<p>Reads a null-terminated string from memory.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to read from</p> required <code>max(int)</code> <p>Maximum string length (default 4096)</p> required <p>Returns:</p> Type Description <code>bytearray</code> <p>An empty bytearray, or a NULL-terminated bytearray.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.u","title":"<code>u(addr, size=None)</code>","text":"<p>u(addr, size=None) -&gt; int</p> <p>Read one <code>unsigned</code> integer from the specified address, with the bit-width specified by <code>size</code>, which defaults to the pointer width.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.u16","title":"<code>u16(addr)</code>","text":"<p>u16(addr) -&gt; int</p> <p>Read one <code>uint16_t</code> from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.u32","title":"<code>u32(addr)</code>","text":"<p>u32(addr) -&gt; int</p> <p>Read one <code>uint32_t</code> from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.u64","title":"<code>u64(addr)</code>","text":"<p>u64(addr) -&gt; int</p> <p>Read one <code>uint64_t</code> from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.u8","title":"<code>u8(addr)</code>","text":"<p>u8(addr) -&gt; int</p> <p>Read one <code>uint8_t</code> from the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.uchar","title":"<code>uchar(addr)</code>","text":"<p>uchar(addr) -&gt; int</p> <p>Read one <code>unsigned char</code> at the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.uint","title":"<code>uint(addr)</code>","text":"<p>uint(addr) -&gt; int</p> <p>Read one <code>unsigned int</code> at the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.update_min_addr","title":"<code>update_min_addr()</code>","text":""},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.ushort","title":"<code>ushort(addr)</code>","text":"<p>ushort(addr) -&gt; int</p> <p>Read one <code>unisgned short</code> at the specified address.</p>"},{"location":"source/gdblib/memory/#pwndbg.gdblib.memory.write","title":"<code>write(addr, data)</code>","text":"<p>write(addr, data)</p> <p>Writes data into the memory of the process being debugged.</p> <p>Parameters:</p> Name Type Description Default <code>addr(int)</code> <p>Address to write</p> required <code>data(str,bytes,bytearray)</code> <p>Data to write</p> required"},{"location":"source/gdblib/nearpc/","title":"Nearpc","text":""},{"location":"source/gdblib/nearpc/#pwndbg.gdblib.nearpc.ljust_padding","title":"<code>ljust_padding(lst)</code>","text":""},{"location":"source/gdblib/nearpc/#pwndbg.gdblib.nearpc.nearpc","title":"<code>nearpc(pc=None, lines=None, emulate=False, repeat=False, use_cache=False, linear=False)</code>","text":"<p>Disassemble near a specified address.</p> <p>The <code>linear</code> argument specifies if we should disassemble linearly in memory, or take jumps into account</p>"},{"location":"source/gdblib/net/","title":"Net","text":""},{"location":"source/gdblib/net/#pwndbg.gdblib.net.netlink","title":"<code>netlink()</code>","text":""},{"location":"source/gdblib/net/#pwndbg.gdblib.net.tcp","title":"<code>tcp()</code>","text":"<p>It will first list all listening TCP sockets, and next list all established TCP connections. A typical entry of /proc/net/tcp would look like this (split up into 3 parts because of the length of the line):</p>"},{"location":"source/gdblib/net/#pwndbg.gdblib.net.unix","title":"<code>unix()</code>","text":""},{"location":"source/gdblib/next/","title":"Next","text":"<p>Commands for setting temporary breakpoints on the next instruction of some type (call, branch, etc.)</p>"},{"location":"source/gdblib/next/#pwndbg.gdblib.next.interrupts","title":"<code>interrupts = {capstone.CS_GRP_INT}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.break_next_branch","title":"<code>break_next_branch(address=None)</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.break_next_call","title":"<code>break_next_call(symbol_regex=None)</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.break_next_interrupt","title":"<code>break_next_interrupt(address=None)</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.break_next_ret","title":"<code>break_next_ret(address=None)</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.break_on_next","title":"<code>break_on_next(address=None)</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.break_on_next_matching_instruction","title":"<code>break_on_next_matching_instruction(mnemonic=None, op_str=None)</code>","text":"<p>Breaks on next instuction that matches the arguments.</p>"},{"location":"source/gdblib/next/#pwndbg.gdblib.next.break_on_program_code","title":"<code>break_on_program_code()</code>","text":"<p>Breaks on next instruction that belongs to process' objfile code</p> <p>:return: True for success, False when process ended or when pc is not at the code or if a signal occurred</p>"},{"location":"source/gdblib/next/#pwndbg.gdblib.next.clear_temp_breaks","title":"<code>clear_temp_breaks()</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.next_branch","title":"<code>next_branch(address=None)</code>","text":""},{"location":"source/gdblib/next/#pwndbg.gdblib.next.next_int","title":"<code>next_int(address=None)</code>","text":"<p>If there is a syscall in the current basic black, return the instruction of the one closest to $PC.</p> <p>Otherwise, return None.</p>"},{"location":"source/gdblib/next/#pwndbg.gdblib.next.next_matching_until_branch","title":"<code>next_matching_until_branch(address=None, mnemonic=None, op_str=None)</code>","text":"<p>Finds the next instruction that matches the arguments between the given address and the branch closest to it.</p>"},{"location":"source/gdblib/onegadget/","title":"Onegadget","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.ADDRESS_WRITABLE_PATTERN","title":"<code>ADDRESS_WRITABLE_PATTERN = re.compile('address(?:es)? (.*) (?:is|are) writable')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CAST_DEREF_MAPPING","title":"<code>CAST_DEREF_MAPPING = {'(u16)': pwndbg.gdblib.memory.u16, '(s16)': pwndbg.gdblib.memory.s16, '(u32)': pwndbg.gdblib.memory.u32, '(s32)': pwndbg.gdblib.memory.s32, '(u64)': pwndbg.gdblib.memory.u64, '(s64)': pwndbg.gdblib.memory.s64}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CAST_MAPPING","title":"<code>CAST_MAPPING = {'(u16)': lambda x: ctypes.c_uint16(x).value, '(s16)': lambda x: ctypes.c_int16(x).value, '(u32)': lambda x: ctypes.c_uint32(x).value, '(s32)': lambda x: ctypes.c_int32(x).value, '(u64)': lambda x: ctypes.c_uint64(x).value, '(s64)': lambda x: ctypes.c_int64(x).value}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CAST_PATTERN","title":"<code>CAST_PATTERN = re.compile('^\\\\([s|u]\\\\d+\\\\)')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CONSTRAINT_SEPARATOR","title":"<code>CONSTRAINT_SEPARATOR = ' || '</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.EQUAL_NULL_PATTERN","title":"<code>EQUAL_NULL_PATTERN = re.compile('(.*) == NULL')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.IS_ALIGNED_PATTERN","title":"<code>IS_ALIGNED_PATTERN = re.compile('(.+) &amp; 0xf == (\\\\d+)')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.IS_GOT_ADDRESS_PATTERN","title":"<code>IS_GOT_ADDRESS_PATTERN = re.compile('(.+) is the GOT address of libc')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.ONEGADGET_CACHEDIR","title":"<code>ONEGADGET_CACHEDIR = pwndbg.lib.tempfile.cachedir('onegadget')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.ONEGADGET_COLOR","title":"<code>ONEGADGET_COLOR = {'light_green': lambda x: colorize(x, '\\x1b[38;5;82m'), 'light_purple': lambda x: colorize(x, '\\x1b[38;5;153m')}</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.SAT","title":"<code>SAT = CheckSatResult.SAT</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.UNKNOWN","title":"<code>UNKNOWN = CheckSatResult.UNKNOWN</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.UNSAT","title":"<code>UNSAT = CheckSatResult.UNSAT</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.VALID_ARGV_PATTERN","title":"<code>VALID_ARGV_PATTERN = re.compile('(.+) is a valid argv')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.VALID_ENVP_PATTERN","title":"<code>VALID_ENVP_PATTERN = re.compile('(.+) is a valid envp')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.VALID_POSIX_SPAWN_FILE_ACTIONS_PATTERN","title":"<code>VALID_POSIX_SPAWN_FILE_ACTIONS_PATTERN = re.compile('(.*) &lt;= 0')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.WRITABLE_COLON_PATTERN","title":"<code>WRITABLE_COLON_PATTERN = re.compile('writable: (.*)')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.XMM_SHIFT","title":"<code>XMM_SHIFT = ' &gt;&gt; '</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CheckSatResult","title":"<code>CheckSatResult</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CheckSatResult.SAT","title":"<code>SAT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CheckSatResult.UNKNOWN","title":"<code>UNKNOWN = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CheckSatResult.UNSAT","title":"<code>UNSAT = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CheckSatResult.__and__","title":"<code>__and__(other)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CheckSatResult.__or__","title":"<code>__or__(other)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.CheckSatResult.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda","title":"<code>Lambda</code>","text":"<p>Modified from onegadget's Lambda class</p> <p>https://github.com/david942j/one_gadget/blob/65ce1dade70bf89e7496346ccf452ce5b2d139b3/lib/one_gadget/emulators/lambda.rb#L13</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.color_str","title":"<code>color_str: str</code>  <code>property</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.deref_count","title":"<code>deref_count = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.gdb_expr","title":"<code>gdb_expr: str</code>  <code>property</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.immi","title":"<code>immi = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.obj","title":"<code>obj = obj</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.__add__","title":"<code>__add__(other)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.__init__","title":"<code>__init__(obj)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.__sub__","title":"<code>__sub__(other)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.deref","title":"<code>deref()</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.deref_","title":"<code>deref_()</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.evaluate","title":"<code>evaluate(context)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.mem_obj","title":"<code>mem_obj(arg)</code>  <code>staticmethod</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.parse","title":"<code>parse(argument, predefined={})</code>  <code>staticmethod</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.Lambda.ref","title":"<code>ref()</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.check_argv","title":"<code>check_argv(expr)</code>","text":"<p>Check argv, return the result and the message</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.check_constraint","title":"<code>check_constraint(constraint)</code>","text":"<p>Parse constraint, return the result and the message</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.check_envp","title":"<code>check_envp(expr)</code>","text":"<p>Check envp, return the result and the message</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.check_gadget","title":"<code>check_gadget(gadget, show_unsat=False, no_unknown=False, verbose=False)</code>","text":"<p>Check status of each gadget, return the gadget's status</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.check_non_stack_argv","title":"<code>check_non_stack_argv(expr)</code>","text":"<p>Check argv that's not on the stack, return the result and the message</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.check_stack_argv","title":"<code>check_stack_argv(expr)</code>","text":"<p>Check argv that's on the stack, return the result and the message</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.colorize_integer","title":"<code>colorize_integer(x)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.colorize_psuedo_code","title":"<code>colorize_psuedo_code(code)</code>","text":"<p>Colorize the pseudo code of onegadget</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.colorize_reg","title":"<code>colorize_reg(x)</code>","text":""},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.compute_file_hash","title":"<code>compute_file_hash(filename)</code>","text":"<p>Compute the MD5 hash of the file, return the hash</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.find_gadgets","title":"<code>find_gadgets(show_unsat=False, no_unknown=False, verbose=False)</code>","text":"<p>Find gadgets by parsing the output of onegadget, return there's any valid gadget</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.parse_expression","title":"<code>parse_expression(expr)</code>","text":"<p>Parse expression, return the result, colorized string and error message</p>"},{"location":"source/gdblib/onegadget/#pwndbg.gdblib.onegadget.run_onegadget","title":"<code>run_onegadget()</code>","text":"<p>Run onegadget and return the output</p>"},{"location":"source/gdblib/proc/","title":"Proc","text":"<p>Provides values which would be available from /proc which are not fulfilled by other modules and some process/gdb flow related information.</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.alive","title":"<code>alive: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.binary_base_addr","title":"<code>binary_base_addr: int</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.binary_vmmap","title":"<code>binary_vmmap: Tuple[pwndbg.lib.memory.Page, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.exe","title":"<code>exe: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.pid","title":"<code>pid: int</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.stopped_with_signal","title":"<code>stopped_with_signal: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.tether","title":"<code>tether = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.thread_id","title":"<code>thread_id: int</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.thread_is_stopped","title":"<code>thread_is_stopped: bool</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.tid","title":"<code>tid: int</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module","title":"<code>module</code>","text":"<p>               Bases: <code>ModuleType</code></p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.alive","title":"<code>alive: bool</code>  <code>property</code>","text":"<p>Informs whether the process has a thread. However, note that it will still return True for a segfaulted thread. To detect that, consider using the <code>stopped_with_signal</code> method.</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.binary_base_addr","title":"<code>binary_base_addr: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.binary_vmmap","title":"<code>binary_vmmap: Tuple[pwndbg.lib.memory.Page, ...]</code>  <code>property</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.exe","title":"<code>exe: str | None</code>  <code>property</code>","text":"<p>Returns the executed file path.</p> <p>On remote targets, this path may not exist locally.</p> If you need the locally referenced file use <p><code>gdb.current_process().filename</code></p> <p>info proc exe is the only command to actually get the executed file path. The gdb <code>file</code> command overwrites all internal references, this includes: + <code>filename</code> + <code>executable_filename</code> + <code>symbol_file</code> + <code>objfiles</code> <code>run</code> executes the current file</p> <p>If you find a better solution please create a PR &lt;3.</p> <p>Also refer to pwngdb.dbg.gdb.main_module_name</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.pid","title":"<code>pid: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.stopped_with_signal","title":"<code>stopped_with_signal: bool</code>  <code>property</code>","text":"<p>Returns whether the program has stopped with a signal</p> <p>Can be used to detect segfaults (but will also detect other signals)</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.thread_id","title":"<code>thread_id: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.thread_is_stopped","title":"<code>thread_is_stopped: bool</code>  <code>property</code>","text":"<p>This detects whether selected thread is stopped. It is not stopped in situations when gdb is executing commands that are attached to a breakpoint by <code>command</code> command.</p> <p>For more info see issue #229 ( https://github.com/pwndbg/pwndbg/issues/299 ) :return: Whether gdb executes commands attached to bp with <code>command</code> command.</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.tid","title":"<code>tid: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(func)</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.OnlyWhenRunning","title":"<code>OnlyWhenRunning(func)</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":"<p>Decorates function to work only with the specified archictectures.</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.dump_elf_data_section","title":"<code>dump_elf_data_section()</code>","text":"<p>Dump .data section of current process's ELF file</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.dump_relocations_by_section_name","title":"<code>dump_relocations_by_section_name(section_name)</code>","text":"<p>Dump relocations of a section by section name of current process's ELF file</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.module.get_section_address_by_name","title":"<code>get_section_address_by_name(section_name)</code>","text":"<p>Find section address of current process by section name</p>"},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.OnlyWhenQemuKernel","title":"<code>OnlyWhenQemuKernel(func)</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.OnlyWhenRunning","title":"<code>OnlyWhenRunning(func)</code>","text":""},{"location":"source/gdblib/proc/#pwndbg.gdblib.proc.OnlyWithArch","title":"<code>OnlyWithArch(arch_names)</code>","text":""},{"location":"source/gdblib/prompt/","title":"Prompt","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.context_shown","title":"<code>context_shown = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.cur","title":"<code>cur: Tuple[gdb.Inferior, gdb.InferiorThread] | None = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.last_alive_state","title":"<code>last_alive_state = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.show_tip","title":"<code>show_tip = pwndbg.config.add_param('show-tips', True, 'whether to display the tip of the day on startup')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.initial_hook","title":"<code>initial_hook(*a)</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.prompt_hook","title":"<code>prompt_hook(*a)</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.reset_context_shown","title":"<code>reset_context_shown(*a)</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.set_prompt","title":"<code>set_prompt()</code>","text":""},{"location":"source/gdblib/prompt/#pwndbg.gdblib.prompt.show_hint","title":"<code>show_hint()</code>","text":""},{"location":"source/gdblib/qemu/","title":"Qemu","text":"<p>Determine whether the target is being run under QEMU.</p>"},{"location":"source/gdblib/qemu/#pwndbg.gdblib.qemu.exec_file_supported","title":"<code>exec_file_supported()</code>","text":"<p>Returns <code>True</code> if the remote target understands the 'qXfer:exec-file:read' packet. A check for this feature is done in vmmap code, to warn against running legacy Qemu versions.</p>"},{"location":"source/gdblib/qemu/#pwndbg.gdblib.qemu.is_qemu","title":"<code>is_qemu()</code>","text":""},{"location":"source/gdblib/qemu/#pwndbg.gdblib.qemu.is_qemu_kernel","title":"<code>is_qemu_kernel()</code>","text":""},{"location":"source/gdblib/qemu/#pwndbg.gdblib.qemu.is_qemu_usermode","title":"<code>is_qemu_usermode()</code>","text":"<p>Returns <code>True</code> if the target remote is being run under QEMU usermode emulation.</p>"},{"location":"source/gdblib/qemu/#pwndbg.gdblib.qemu.is_usermode","title":"<code>is_usermode()</code>","text":""},{"location":"source/gdblib/qemu/#pwndbg.gdblib.qemu.pid","title":"<code>pid()</code>","text":"<p>Find the PID of the qemu usermode binary which we are talking to.</p>"},{"location":"source/gdblib/qemu/#pwndbg.gdblib.qemu.root","title":"<code>root()</code>","text":""},{"location":"source/gdblib/regs/","title":"Regs","text":"<p>Reading register value from the inferior, and provides a standardized interface to registers like \"sp\" and \"pc\".</p>"},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.ARCH_GET_FS","title":"<code>ARCH_GET_FS = 4099</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.ARCH_GET_GS","title":"<code>ARCH_GET_GS = 4100</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.PTRACE_ARCH_PRCTL","title":"<code>PTRACE_ARCH_PRCTL = 30</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.all","title":"<code>all: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.changed","title":"<code>changed: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.common","title":"<code>common: List[str]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.current","title":"<code>current: RegisterSet</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.extra_flags","title":"<code>extra_flags: Dict[str, BitFlags]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.fix","title":"<code>fix: Callable[[str], str]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.flags","title":"<code>flags: Dict[str, BitFlags]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.frame","title":"<code>frame: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.fsbase","title":"<code>fsbase: int</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.gpr","title":"<code>gpr: Tuple[str, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.gsbase","title":"<code>gsbase: int</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.items","title":"<code>items: Callable[[], Generator[Tuple[str, Any], None, None]]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.last","title":"<code>last: Dict[str, int]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.pc","title":"<code>pc: int | None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.previous","title":"<code>previous: Dict[str, int]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.retaddr","title":"<code>retaddr: Tuple[str, ...]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.retval","title":"<code>retval: str | None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.stack","title":"<code>stack: str</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.tether","title":"<code>tether = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module","title":"<code>module</code>","text":"<p>               Bases: <code>ModuleType</code></p>"},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.all","title":"<code>all: List[str]</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.changed","title":"<code>changed: List[str]</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.common","title":"<code>common: List[str]</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.current","title":"<code>current: RegisterSet</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.extra_flags","title":"<code>extra_flags: Dict[str, BitFlags]</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.flags","title":"<code>flags: Dict[str, BitFlags]</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.frame","title":"<code>frame: str | None</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.fsbase","title":"<code>fsbase: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.gpr","title":"<code>gpr: Tuple[str, ...]</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.gsbase","title":"<code>gsbase: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.idt","title":"<code>idt: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.idt_limit","title":"<code>idt_limit: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.last","title":"<code>last: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.previous","title":"<code>previous: Dict[str, int] = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.reg_sets","title":"<code>reg_sets = reg_sets</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.retaddr","title":"<code>retaddr: Tuple[str, ...]</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.retval","title":"<code>retval: str | None</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.stack","title":"<code>stack: str</code>  <code>property</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.__contains__","title":"<code>__contains__(reg)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.__getattr__","title":"<code>__getattr__(attr)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.__getitem__","title":"<code>__getitem__(item)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.__setattr__","title":"<code>__setattr__(attr, val)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.fix","title":"<code>fix(expression)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.items","title":"<code>items()</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.module.read_reg","title":"<code>read_reg(reg, frame=None)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.gdb_get_register","title":"<code>gdb_get_register(name, frame=None)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.get_qemu_register","title":"<code>get_qemu_register(name)</code>","text":""},{"location":"source/gdblib/regs/#pwndbg.gdblib.regs.update_last","title":"<code>update_last()</code>","text":""},{"location":"source/gdblib/remote/","title":"Remote","text":"<p>Information about whether the debuggee is local (under GDB) or remote (under GDBSERVER or QEMU stub).</p>"},{"location":"source/gdblib/remote/#pwndbg.gdblib.remote.is_debug_probe","title":"<code>is_debug_probe()</code>","text":"<p>Returns True if the target is a debug probe for an embedded device. Currently detects the Black Magic Probe and the SEGGER J-Link GDB Server.</p>"},{"location":"source/gdblib/remote/#pwndbg.gdblib.remote.is_remote","title":"<code>is_remote()</code>","text":""},{"location":"source/gdblib/scheduler/","title":"Scheduler","text":""},{"location":"source/gdblib/scheduler/#pwndbg.gdblib.scheduler.lock_scheduler","title":"<code>lock_scheduler()</code>","text":"<p>This context manager can be used to run GDB commands with threads scheduling being locked which means that other threads will be stopped during execution.</p> <p>This is useful to prevent bugs where e.g.: gdb.parse_and_eval(\"(int)foo()\") would execute foo() on the current debugee thread but would also unlock other threads for being executed and those other threads may for example hit a breakpoint we set previously which would be confusing for the user.</p> <p>See also: https://sourceware.org/gdb/onlinedocs/gdb/All_002dStop-Mode.html</p>"},{"location":"source/gdblib/scheduler/#pwndbg.gdblib.scheduler.parse_and_eval_with_scheduler_lock","title":"<code>parse_and_eval_with_scheduler_lock(expr)</code>","text":""},{"location":"source/gdblib/shellcode/","title":"Shellcode","text":"<p>Shellcode</p> <p>This module implements functionality that allows for the execution of a small amount of code in the context of the inferior.</p>"},{"location":"source/gdblib/shellcode/#pwndbg.gdblib.shellcode.exec_shellcode","title":"<code>exec_shellcode(blob, restore_context=True, capture=None, disable_breakpoints=False)</code>","text":"<p>Tries executing the given blob of machine code in the current context of the inferior, optionally restoring the values of the registers as they were before the shellcode ran, as a means to allow for execution of the inferior to continue uninterrupted. The value of the program counter is always restored.</p> <p>Additionally, the caller may specify an object to be called before the context is restored, so that information stored in the registers after the shellcode finishes can be retrieved. The return value of that call will be returned by this function.</p>"},{"location":"source/gdblib/shellcode/#pwndbg.gdblib.shellcode.exec_shellcode--safety","title":"Safety","text":"<p>Seeing as this function injects code directly into the inferior and runs it, the caller must be careful to inject code that will (1) terminate and (2) not cause the inferior to misbehave. Otherwise, it is fairly easy to crash or currupt the memory in the inferior.</p>"},{"location":"source/gdblib/shellcode/#pwndbg.gdblib.shellcode.exec_syscall","title":"<code>exec_syscall(syscall, arg0=None, arg1=None, arg2=None, arg3=None, arg4=None, arg5=None, arg6=None, disable_breakpoints=False)</code>","text":"<p>Tries executing the given syscall in the context of the inferior.</p>"},{"location":"source/gdblib/stack/","title":"Stack","text":"<p>Helpers for finding address mappings which are used as a stack.</p> <p>Generally not needed, except under qemu-user and for when binaries do things to remap the stack (e.g. pwnies' postit).</p>"},{"location":"source/gdblib/stack/#pwndbg.gdblib.stack.callstack","title":"<code>callstack()</code>","text":"<p>Return the address of the return address for the current frame.</p>"},{"location":"source/gdblib/stack/#pwndbg.gdblib.stack.current","title":"<code>current()</code>","text":"<p>Returns the bounds for the stack for the current thread.</p>"},{"location":"source/gdblib/stack/#pwndbg.gdblib.stack.find","title":"<code>find(address)</code>","text":"<p>Returns a pwndbg.lib.memory.Page object which corresponds to given address stack or None if it does not exist</p>"},{"location":"source/gdblib/stack/#pwndbg.gdblib.stack.find_upper_stack_boundary","title":"<code>find_upper_stack_boundary(stack_ptr, max_pages=1024)</code>","text":""},{"location":"source/gdblib/stack/#pwndbg.gdblib.stack.get","title":"<code>get()</code>","text":"<p>For each running thread, return the known address range for its stack Returns a dict which should never be modified (since its cached)</p>"},{"location":"source/gdblib/stack/#pwndbg.gdblib.stack.is_executable","title":"<code>is_executable()</code>","text":""},{"location":"source/gdblib/strings/","title":"Strings","text":"<p>Functionality for resolving ASCII printable strings within the debuggee's address space.</p>"},{"location":"source/gdblib/strings/#pwndbg.gdblib.strings.length","title":"<code>length = 15</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/strings/#pwndbg.gdblib.strings.get","title":"<code>get(address, maxlen=None, maxread=None)</code>","text":"<p>Returns a printable C-string from address.</p> <p>Returns <code>None</code> if string contains non-printable chars or if the <code>maxlen</code> length data does not end up with a null byte.</p>"},{"location":"source/gdblib/strings/#pwndbg.gdblib.strings.update_length","title":"<code>update_length()</code>","text":"<p>Unfortunately there's not a better way to get at this info.</p> <p>gdb.execute('show print elements', from_tty=False, to_string=True) 'Limit on string chars or array elements to print is 21.\\n'</p>"},{"location":"source/gdblib/symbol/","title":"Symbol","text":"<p>Looking up addresses for function names / symbols, and vice-versa.</p> <p>Uses IDA when available if there isn't sufficient symbol information available.</p>"},{"location":"source/gdblib/symbol/#pwndbg.gdblib.symbol.skipped_exceptions","title":"<code>skipped_exceptions = ('No frame selected', 'Cannot find thread-local', 'Symbol requires a frame to compute its value')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/symbol/#pwndbg.gdblib.symbol.address","title":"<code>address(symbol)</code>","text":"<p>Get the address for <code>symbol</code></p>"},{"location":"source/gdblib/symbol/#pwndbg.gdblib.symbol.get","title":"<code>get(address, gdb_only=False)</code>","text":"<p>Retrieve the name for the symbol located at <code>address</code> - either from GDB or from integration provider Passing <code>gdb_only=True</code></p> <p>Empty string if no symbol</p>"},{"location":"source/gdblib/symbol/#pwndbg.gdblib.symbol.parse_and_eval","title":"<code>parse_and_eval(expression)</code>","text":"<p>Error handling wrapper for GDBs parse_and_eval function</p>"},{"location":"source/gdblib/symbol/#pwndbg.gdblib.symbol.selected_frame_source_absolute_filename","title":"<code>selected_frame_source_absolute_filename()</code>","text":"<p>Retrieve the symbol table\u2019s source absolute file name from the selected frame.</p> <p>In case of missing symbol table or frame information, None is returned.</p>"},{"location":"source/gdblib/symbol/#pwndbg.gdblib.symbol.static_linkage_symbol_address","title":"<code>static_linkage_symbol_address(symbol)</code>","text":"<p>Get the address for static linkage <code>symbol</code></p>"},{"location":"source/gdblib/tls/","title":"Tls","text":"<p>Getting Thread Local Storage (TLS) information.</p>"},{"location":"source/gdblib/tls/#pwndbg.gdblib.tls.__call_pthread_self","title":"<code>__call_pthread_self()</code>","text":"<p>Get the address of TLS by calling pthread_self().</p>"},{"location":"source/gdblib/tls/#pwndbg.gdblib.tls.find_address_with_pthread_self","title":"<code>find_address_with_pthread_self()</code>","text":"<p>Get the address of TLS with pthread_self().</p>"},{"location":"source/gdblib/tls/#pwndbg.gdblib.tls.find_address_with_register","title":"<code>find_address_with_register()</code>","text":"<p>Get the address of TLS with register.</p>"},{"location":"source/gdblib/typeinfo/","title":"Typeinfo","text":"<p>Common types, and routines for manually loading types from file via GCC.</p>"},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.char","title":"<code>char: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.int16","title":"<code>int16: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.int32","title":"<code>int32: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.int64","title":"<code>int64: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.int8","title":"<code>int8: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.long","title":"<code>long: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.module","title":"<code>module = sys.modules[__name__]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.null","title":"<code>null: gdb.Value</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.pchar","title":"<code>pchar: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.ppvoid","title":"<code>ppvoid: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.ptrdiff","title":"<code>ptrdiff: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.ptrsize","title":"<code>ptrsize: int</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.pvoid","title":"<code>pvoid: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.signed","title":"<code>signed: Dict[int, gdb.Type]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.size_t","title":"<code>size_t: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.ssize_t","title":"<code>ssize_t: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.uchar","title":"<code>uchar: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.uint","title":"<code>uint: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.uint16","title":"<code>uint16: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.uint32","title":"<code>uint32: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.uint64","title":"<code>uint64: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.uint8","title":"<code>uint8: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.ulong","title":"<code>ulong: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.unsigned","title":"<code>unsigned: Dict[int, gdb.Type]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.ushort","title":"<code>ushort: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.void","title":"<code>void: gdb.Type</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.get_type","title":"<code>get_type(size)</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.load","title":"<code>load(name)</code>","text":"<p>Load a GDB symbol; note that new symbols can be added with <code>add-symbol-file</code> functionality</p>"},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.lookup_types","title":"<code>lookup_types(*types)</code>","text":""},{"location":"source/gdblib/typeinfo/#pwndbg.gdblib.typeinfo.update","title":"<code>update()</code>","text":""},{"location":"source/gdblib/vmmap/","title":"Vmmap","text":"<p>Routines to enumerate mapped memory, and attempt to associate address ranges with various ELF files and permissions.</p> <p>The reason that we need robustness is that not every operating system has /proc/$$/maps, which backs 'info proc mapping'.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.auto_explore","title":"<code>auto_explore = pwndbg.config.add_param('auto-explore-pages', 'yes', 'whether to try to infer page permissions when memory maps missing (can cause errors)', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['yes', 'warn', 'no'])</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.custom_pages","title":"<code>custom_pages: List[pwndbg.lib.memory.Page] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.explored_pages","title":"<code>explored_pages: List[pwndbg.lib.memory.Page] = []</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.inside_no_proc_maps_search","title":"<code>inside_no_proc_maps_search = False</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap","title":"<code>kernel_vmmap = pwndbg.config.add_param('kernel-vmmap', 'page-tables', 'the method to get vmmap information when debugging via QEMU kernel', help_docstring=\"kernel-vmmap can be:\\npage-tables    - read /proc/$qemu-pid/mem to parse kernel page tables to render vmmap\\nmonitor        - use QEMU's `monitor info mem` to render vmmap\\nnone           - disable vmmap rendering; useful if rendering is particularly slow\\n\\nNote that the page-tables method will require the QEMU kernel process to be on the same machine and within the same PID namespace. Running QEMU kernel and GDB in different Docker containers will not work. Consider running both containers with --pid=host (meaning they will see and so be able to interact with all processes on the machine).\\n\", param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['page-tables', 'monitor', 'none'])</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_pt","title":"<code>kernel_vmmap_via_pt = pwndbg.config.add_param('kernel-vmmap-via-page-tables', 'deprecated', 'the deprecated config of the method get kernel vmmap', help_docstring='Deprecated in favor of `kernel-vmmap`')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.monitor_info_mem_not_warned","title":"<code>monitor_info_mem_not_warned = True</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.add_custom_page","title":"<code>add_custom_page(page)</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.check_aslr","title":"<code>check_aslr()</code>","text":"<p>Detects the ASLR status. Returns True, False or None.</p> <p>None is returned when we can't detect ASLR.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.clear_custom_page","title":"<code>clear_custom_page()</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.clear_explored_pages","title":"<code>clear_explored_pages()</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.clear_warn_cache","title":"<code>clear_warn_cache()</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.coredump_maps","title":"<code>coredump_maps()</code>","text":"<p>Parses <code>info proc mappings</code> and <code>maintenance info sections</code> and tries to make sense out of the result :)</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.explore","title":"<code>explore(address_maybe)</code>","text":"<p>Given a potential address, check to see what permissions it has.</p> <p>Returns:</p> Type Description <code>Page | None</code> <p>Page object</p> Note <p>Adds the Page object to a persistent list of pages which are only reset when the process dies.  This means pages which are added this way will not be removed when unmapped.</p> <p>Also assumes the entire contiguous section has the same permission.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.explore_registers","title":"<code>explore_registers()</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.find","title":"<code>find(address, *, should_explore=None)</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.find_boundaries","title":"<code>find_boundaries(addr, name='', min=0)</code>","text":"<p>Given a single address, find all contiguous pages which are mapped.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.get","title":"<code>get()</code>","text":"<p>Returns a tuple of <code>Page</code> objects representing the memory mappings of the target, sorted by virtual address ascending.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.get_known_maps","title":"<code>get_known_maps()</code>","text":"<p>Similar to <code>vmmap.get()</code>, except only returns maps in cases where the mappings are known, like if it's a coredump, or if process mappings are available.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_auxv","title":"<code>info_auxv(skip_exe=False)</code>","text":"<p>Extracts the name of the executable from the output of the command \"info auxv\". Note that if the executable path is a symlink, it is not dereferenced by <code>info auxv</code> and we also don't dereference it.</p> <p>Parameters:</p> Name Type Description Default <code>skip_exe(bool)</code> <p>Do not return any mappings that belong to the exe.</p> required <p>Returns:</p> Type Description <code>Tuple[Page, ...]</code> <p>A list of pwndbg.lib.memory.Page objects.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_files","title":"<code>info_files()</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_proc_maps","title":"<code>info_proc_maps(parse_flags=True)</code>","text":"<p>Parse the result of info proc mappings.</p> <p>Example output:</p> Text Only<pre><code>    Start Addr           End Addr       Size     Offset  Perms  objfile\n      0x400000           0x401000     0x1000        0x0  r--p   /root/hello_world/main\n      0x401000           0x497000    0x96000     0x1000  r-xp   /root/hello_world/main\n      0x497000           0x4be000    0x27000    0x97000  r--p   /root/hello_world/main\n      0x4be000           0x4c3000     0x5000    0xbd000  r--p   /root/hello_world/main\n      0x4c3000           0x4c5000     0x2000    0xc2000  rw-p   /root/hello_world/main\n      0x4c5000           0x4cb000     0x6000        0x0  rw-p\n      0x4cb000           0x4ed000    0x22000        0x0  rw-p   [heap]\n0x7ffff7ff9000     0x7ffff7ffd000     0x4000        0x0  r--p   [vvar]\n0x7ffff7ffd000     0x7ffff7fff000     0x2000        0x0  r-xp   [vdso]\n0x7ffffffde000     0x7ffffffff000    0x21000        0x0  rw-p   [stack]\n</code></pre> <p>0xffffffffff600000 0xffffffffff601000     0x1000        0x0  --xp   [vsyscall]</p> <p>Note: this may return no pages due to a bug/behavior of GDB. See https://sourceware.org/bugzilla/show_bug.cgi?id=31207 for more information.</p> <p>Returns:</p> Type Description <code>Page</code> <p>A tuple of pwndbg.lib.memory.Page objects or an empty tuple if</p> <code>...</code> <p>info proc mapping is not supported on the target.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.info_sharedlibrary","title":"<code>info_sharedlibrary()</code>","text":"<p>Parses the output of <code>info sharedlibrary</code>.</p> <p>Specifically, all we really want is any valid pointer into each library, and the path to the library on disk.</p> <p>With this information, we can use the ELF parser to get all of the page permissions for every mapped page in the ELF.</p> <p>Returns:</p> Type Description <code>Tuple[Page, ...]</code> <p>A list of pwndbg.lib.memory.Page objects.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.is_corefile","title":"<code>is_corefile()</code>","text":"For example output use <p>gdb ./tests/binaries/crash_simple.out -ex run -ex 'generate-core-file ./core' -ex 'quit'</p> And then use <p>gdb ./tests/binaries/crash_simple.out -core ./core -ex 'info target'</p> <p>And:     gdb -core ./core</p> <p>As the two differ in output slighty.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_monitor_info_mem","title":"<code>kernel_vmmap_via_monitor_info_mem()</code>","text":"<p>Returns Linux memory maps information by parsing <code>monitor info mem</code> output from QEMU kernel GDB stub. Works only on X86/X64/RISC-V as this is what QEMU supports.</p> <p>Consider using the <code>kernel_vmmap_via_page_tables</code> method as it is probably more reliable/better.</p> <p>See also: https://github.com/pwndbg/pwndbg/pull/685 (TODO: revisit with future QEMU versions)</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_monitor_info_mem--example-output-from-the-command","title":"Example output from the command:","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_monitor_info_mem--pwndbg-monitor-info-mem","title":"pwndbg&gt; monitor info mem","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_monitor_info_mem--ffff903580000000-ffff903580099000-0000000000099000-rw","title":"ffff903580000000-ffff903580099000 0000000000099000 -rw","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_monitor_info_mem--ffff903580099000-ffff90358009b000-0000000000002000-r-","title":"ffff903580099000-ffff90358009b000 0000000000002000 -r-","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_monitor_info_mem--ffff90358009b000-ffff903582200000-0000000002165000-rw","title":"ffff90358009b000-ffff903582200000 0000000002165000 -rw","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_monitor_info_mem--ffff903582200000-ffff903582803000-0000000000603000-r-","title":"ffff903582200000-ffff903582803000 0000000000603000 -r-","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.kernel_vmmap_via_page_tables","title":"<code>kernel_vmmap_via_page_tables()</code>","text":""},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.parse_info_proc_mappings_line","title":"<code>parse_info_proc_mappings_line(line, perms_available, parse_flags)</code>","text":"<p>Parse a line from <code>info proc mappings</code> and return a pwndbg.lib.memory.Page object if the line is valid.</p> Example lines <p>0x4c3000           0x4c5000     0x2000    0xc2000  rw-p   /root/hello_world/main 0x4c5000           0x4cb000     0x6000        0x0  rw-p</p> <p>The objfile column might be empty, and the permissions column is only present in GDB versions &gt;= 12.1 https://github.com/bminor/binutils-gdb/commit/29ef4c0699e1b46d41ade00ae07a54f979ea21cc</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>A line from <code>info proc mappings</code>.</p> required <p>Returns:</p> Type Description <code>Optional[Page]</code> <p>A pwndbg.lib.memory.Page object or None.</p>"},{"location":"source/gdblib/vmmap/#pwndbg.gdblib.vmmap.proc_tid_maps","title":"<code>proc_tid_maps()</code>","text":"<p>Parse the contents of /proc/$TID/maps on the server. (TID == Thread Identifier. We do not use PID since it may not be correct)</p> <p>Returns:</p> Type Description <code>Tuple[Page, ...] | None</code> <p>A tuple of pwndbg.lib.memory.Page objects or None if</p> <code>Tuple[Page, ...] | None</code> <p>/proc/$tid/maps doesn't exist or when we debug a qemu-user target</p>"},{"location":"source/gdblib/kernel/__init__/","title":"init","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.D","title":"<code>D = TypeVar('D')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops","title":"<code>Aarch64Ops</code>","text":"<p>               Bases: <code>ArchOps</code></p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.PAGE_OFFSET","title":"<code>PAGE_OFFSET = -1 &lt;&lt; self.VA_BITS + 2 ** 64</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.PAGE_SHIFT","title":"<code>PAGE_SHIFT = int(kconfig()['CONFIG_ARM64_PAGE_SHIFT'])</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.PHYS_OFFSET","title":"<code>PHYS_OFFSET = pwndbg.gdblib.memory.u(pwndbg.gdblib.symbol.address('memstart_addr'))</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.STRUCT_PAGE_SHIFT","title":"<code>STRUCT_PAGE_SHIFT = int(math.log2(self.STRUCT_PAGE_SIZE))</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.STRUCT_PAGE_SIZE","title":"<code>STRUCT_PAGE_SIZE = gdb.lookup_type('struct page').sizeof</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.VA_BITS","title":"<code>VA_BITS = int(kconfig()['ARM64_VA_BITS'])</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.VMEMMAP_SHIFT","title":"<code>VMEMMAP_SHIFT = self.PAGE_SHIFT - self.STRUCT_PAGE_SHIFT</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.VMEMMAP_START","title":"<code>VMEMMAP_START = -1 &lt;&lt; self.VA_BITS - self.VMEMMAP_SHIFT % 1 &lt;&lt; 64</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.page_size","title":"<code>page_size()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.paging_enabled","title":"<code>paging_enabled()</code>  <code>staticmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.phys_to_virt","title":"<code>phys_to_virt(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.Aarch64Ops.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps","title":"<code>ArchOps</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.page_size","title":"<code>page_size()</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.page_to_pfn","title":"<code>page_to_pfn(page)</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.page_to_phys","title":"<code>page_to_phys(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.page_to_virt","title":"<code>page_to_virt(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.pfn_to_page","title":"<code>pfn_to_page(phys)</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.pfn_to_virt","title":"<code>pfn_to_virt(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.phys_to_page","title":"<code>phys_to_page(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.phys_to_virt","title":"<code>phys_to_virt(phys)</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.virt_to_page","title":"<code>virt_to_page(virt)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.virt_to_pfn","title":"<code>virt_to_pfn(virt)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.ArchOps.virt_to_phys","title":"<code>virt_to_phys(virt)</code>  <code>abstractmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops","title":"<code>i386Ops</code>","text":"<p>               Bases: <code>x86Ops</code></p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.START_KERNEL_map","title":"<code>START_KERNEL_map = self._PAGE_OFFSET</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.page_offset","title":"<code>page_offset: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.page_shift","title":"<code>page_shift: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.ptr_size","title":"<code>ptr_size: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.i386Ops.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops","title":"<code>x86Ops</code>","text":"<p>               Bases: <code>ArchOps</code></p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.page_offset","title":"<code>page_offset: int</code>  <code>abstractmethod</code> <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.page_shift","title":"<code>page_shift: int</code>  <code>abstractmethod</code> <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.ptr_size","title":"<code>ptr_size: int</code>  <code>abstractmethod</code> <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.page_size","title":"<code>page_size()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.paging_enabled","title":"<code>paging_enabled()</code>  <code>staticmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86Ops.phys_to_virt","title":"<code>phys_to_virt(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops","title":"<code>x86_64Ops</code>","text":"<p>               Bases: <code>x86Ops</code></p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.START_KERNEL_map","title":"<code>START_KERNEL_map = 18446744071562067968</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.STRUCT_PAGE_SHIFT","title":"<code>STRUCT_PAGE_SHIFT = int(math.log2(self.STRUCT_PAGE_SIZE))</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.STRUCT_PAGE_SIZE","title":"<code>STRUCT_PAGE_SIZE = gdb.lookup_type('struct page').sizeof</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.VMEMMAP_START","title":"<code>VMEMMAP_START = 18434359174734282752</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.page_offset","title":"<code>page_offset: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.page_shift","title":"<code>page_shift: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.phys_base","title":"<code>phys_base = 16777216</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.ptr_size","title":"<code>ptr_size: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.cpu_feature_capability","title":"<code>cpu_feature_capability(feature)</code>  <code>staticmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.uses_5lvl_paging","title":"<code>uses_5lvl_paging()</code>  <code>staticmethod</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.x86_64Ops.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.BIT","title":"<code>BIT(shift)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.arch_ops","title":"<code>arch_ops()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.get_first_kernel_ro","title":"<code>get_first_kernel_ro()</code>","text":"<p>Returns the first kernel mapping which contains the linux_banner</p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.get_idt_entries","title":"<code>get_idt_entries()</code>","text":"<p>Retrieves the IDT entries from memory.</p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.has_debug_syms","title":"<code>has_debug_syms()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.is_kaslr_enabled","title":"<code>is_kaslr_enabled()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.kbase","title":"<code>kbase()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.kcmdline","title":"<code>kcmdline()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.kconfig","title":"<code>kconfig()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.krelease","title":"<code>krelease()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.kversion","title":"<code>kversion()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.load_kconfig","title":"<code>load_kconfig()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.nproc","title":"<code>nproc()</code>","text":"<p>Returns the number of processing units available, similar to nproc(1)</p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.num_numa_nodes","title":"<code>num_numa_nodes()</code>","text":"<p>Returns the number of NUMA nodes that are online on the system</p>"},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.page_size","title":"<code>page_size()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.page_to_pfn","title":"<code>page_to_pfn(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.page_to_phys","title":"<code>page_to_phys(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.page_to_virt","title":"<code>page_to_virt(page)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.paging_enabled","title":"<code>paging_enabled()</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.per_cpu","title":"<code>per_cpu(addr, cpu=None)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.pfn_to_page","title":"<code>pfn_to_page(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.pfn_to_phys","title":"<code>pfn_to_phys(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.pfn_to_virt","title":"<code>pfn_to_virt(pfn)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.phys_to_page","title":"<code>phys_to_page(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.phys_to_pfn","title":"<code>phys_to_pfn(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.phys_to_virt","title":"<code>phys_to_virt(phys)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.requires_debug_syms","title":"<code>requires_debug_syms(default=None)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.requires_kconfig","title":"<code>requires_kconfig(default=None)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.virt_to_page","title":"<code>virt_to_page(virt)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.virt_to_pfn","title":"<code>virt_to_pfn(virt)</code>","text":""},{"location":"source/gdblib/kernel/__init__/#pwndbg.gdblib.kernel.virt_to_phys","title":"<code>virt_to_phys(virt)</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/","title":"Kallsyms","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms","title":"<code>Kallsyms</code>","text":"<ul> <li>linux_banner &gt;= 6.4</li> <li>... &lt;= 6.4</li> <li>kallsyms_offsets</li> <li>kallsyms_relative_base</li> <li>kallsyms_num_syms</li> <li>kallsyms_names</li> <li>kallsyms_markers</li> <li>kallsyms_token_table</li> <li>kallsyms_token_index</li> <li>kallsyms_offsets &gt;= 6.4</li> <li>kallsyms_relative_base &gt;= 6.4</li> </ul>"},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.is_offsets","title":"<code>is_offsets = False</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.kallsyms","title":"<code>kallsyms = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.kbase","title":"<code>kbase = pwndbg.gdblib.kernel.kbase()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.kernel_addresses","title":"<code>kernel_addresses = self.get_kernel_addresses()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.kernel_ro_mem","title":"<code>kernel_ro_mem = pwndbg.gdblib.memory.read(mapping.vaddr, mapping.memsz)</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.kernel_version","title":"<code>kernel_version = pwndbg.gdblib.kernel.krelease()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.markers","title":"<code>markers = self.find_markers()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.names","title":"<code>names = self.find_names()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.num_syms","title":"<code>num_syms = self.find_num_syms()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.offsets","title":"<code>offsets = self.find_offsets()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.r_base","title":"<code>r_base = mapping.vaddr</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.rbase_offset","title":"<code>rbase_offset = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.token_index","title":"<code>token_index = self.find_token_index()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.token_table","title":"<code>token_table = self.find_token_table()</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.find_markers","title":"<code>find_markers()</code>","text":"<p>This function searches for the kallsyms_markers structure in the kernel memory starting at kallsyms_token_table and search backwards. The markers table contains offsets to the corresponding symbol name for each kernel symbol. The kallsyms_markers table is typically located immediately before the kallsyms_token_table in the kernel's read-only data section. Example structure: 0xffffffff827b2430:     0x00000000      0x00000b2a      0x00001762      0x000023f6 0xffffffff827b2440:     0x00002fe4      0x00003c9d      0x0000487c      0x000056fd 0xffffffff827b2450:     0x00006597      0x000073b9      0x000081be      0x00008f21 0xffffffff827b2460:     0x00009c94      0x0000a958      0x0000b632      0x0000c193 0xffffffff827b2470:     0x0000ce0b      0x0000db98      0x0000ea3e      0x0000f80a 0xffffffff827b2480:     0x000105be      0x000112d3      0x00011f8c      0x00012d75 0xffffffff827b2490:     0x0001384d      0x0001446e      0x00015138      0x00015d8c</p>"},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.find_names","title":"<code>find_names()</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.find_num_syms","title":"<code>find_num_syms()</code>","text":"<p>This function searches for the kallsyms_num_syms variable in the kernel memory starting at kallsyms_markers. The kallsyms_num_syms holds the number of kernel symbols in the symbol table. The kallsyms_num_syms variable is typically located before the kallsyms_names table in the kernel's read-only data section. In newer kernel versions the kallsyms_num_syms is immediately behind the linux_banner and in older version its behind kallsyms_base_relative or kallsyms_addresses (it depends on CONFIG_KALLSYMS_BASE_RELATIVE y/n)</p>"},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.find_offsets","title":"<code>find_offsets()</code>","text":"<p>This function searches for the kallsyms_offsets/kallsyms_addresses table in the kernel memory starting at kallsyms_token_index. The offsets/addresses table containts offsets / addresses of each symbol in the kernel. The kallsyms_addresses is typically located before the kallsyms_num_syms variable in the kernel's read-only data section. Example structure: 0xffffffff827b3488:     0x00000000      0x00000000      0x00001000      0x00002000 0xffffffff827b3498:     0x00006000      0x0000b000      0x0000c000      0x0000d000 0xffffffff827b34a8:     0x00015000      0x00015008      0x00015010      0x00015018 0xffffffff827b34b8:     0x00015020      0x00015022      0x00015030      0x00015050 0xffffffff827b34c8:     0x00015450      0x00015460      0x00015860      0x00015888 0xffffffff827b34d8:     0x00015890      0x00015898      0x000158a0      0x000159c0</p>"},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.find_relative_base","title":"<code>find_relative_base()</code>","text":"<p>This function searches for the kallsyms_relative_base variable in the kernel memory. The relative base is used to calculate the actual virtual addresses of symbols from their offsets in the kallsyms_offsets table. The kallsyms_relative_base variable is typically located after the kallsyms_offsets table in the kernel's read-only data section.</p>"},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.find_token_index","title":"<code>find_token_index()</code>","text":"<p>This function searches for the kallsyms_token_index structure in the kernel memory starting at kallsyms_token_table. The token index table provides offsets into the kallsyms_token_table for each 256 byte-valued sub-table. The kallsyms_token_index is typically located immediately after the kallsyms_token_table in the kernel's read-only data section. Example structure: 0xffffffff827b3288:     0x0000  0x0003  0x0007  0x000a  0x000f  0x0018  0x001f  0x0023 0xffffffff827b3298:     0x0027  0x0031  0x0035  0x0038  0x003b  0x0043  0x0047  0x004a 0xffffffff827b32a8:     0x004f  0x0053  0x0056  0x0059  0x005d  0x0061  0x0067  0x006b 0xffffffff827b32b8:     0x006e  0x0071  0x0076  0x007c  0x0080  0x0088  0x008b  0x008f 0xffffffff827b32c8:     0x0094  0x0098  0x009b  0x009f  0x00a3  0x00a8  0x00ab  0x00b0</p>"},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.find_token_table","title":"<code>find_token_table()</code>","text":"<p>This function searches for the kallsyms_token_table structure in the kernel memory. The kallsyms_token_table contains 256 zero-terminated tokens from which symbol names are built. Example structure: 0xffffffff827b2f00:     \"mm\" 0xffffffff827b2f03:     \"tim\" 0xffffffff827b2f07:     \"bu\" 0xffffffff827b2f0a:     \"ode_\" 0xffffffff827b2f0f:     \"robestub\"  0xffffffff827b2fdb:     \"0\" 0xffffffff827b2fdd:     \"1\" 0xffffffff827b2fdf:     \"2\" 0xffffffff827b2fe1:     \"3\" 0xffffffff827b2fe3:     \"4\" 0xffffffff827b2fe5:     \"5\" 0xffffffff827b2fe7:     \"6\" 0xffffffff827b2fe9:     \"7\" 0xffffffff827b2feb:     \"8\" 0xffffffff827b2fed:     \"9\""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.get_kernel_addresses","title":"<code>get_kernel_addresses()</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.get_token_table","title":"<code>get_token_table()</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.Kallsyms.parse_symbol_table","title":"<code>parse_symbol_table()</code>","text":""},{"location":"source/gdblib/kernel/kallsyms/#pwndbg.gdblib.kernel.kallsyms.get","title":"<code>get()</code>","text":""},{"location":"source/gdblib/kernel/macros/","title":"Macros","text":""},{"location":"source/gdblib/kernel/macros/#pwndbg.gdblib.kernel.macros.compound_head","title":"<code>compound_head(page)</code>","text":"<p>returns the head page of compound pages</p>"},{"location":"source/gdblib/kernel/macros/#pwndbg.gdblib.kernel.macros.container_of","title":"<code>container_of(ptr, typename, fieldname)</code>","text":""},{"location":"source/gdblib/kernel/macros/#pwndbg.gdblib.kernel.macros.for_each_entry","title":"<code>for_each_entry(head, typename, field)</code>","text":""},{"location":"source/gdblib/kernel/macros/#pwndbg.gdblib.kernel.macros.offset_of","title":"<code>offset_of(typename, fieldname)</code>","text":""},{"location":"source/gdblib/kernel/macros/#pwndbg.gdblib.kernel.macros.swab","title":"<code>swab(x)</code>","text":""},{"location":"source/gdblib/kernel/rbtree/","title":"Rbtree","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_node_type","title":"<code>rb_node_type = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_root_type","title":"<code>rb_root_type = None</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.for_each_rb_entry","title":"<code>for_each_rb_entry(root, typename, fieldname)</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.init","title":"<code>init()</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_empty_node","title":"<code>rb_empty_node(node)</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_first","title":"<code>rb_first(root)</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_last","title":"<code>rb_last(root)</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_next","title":"<code>rb_next(node)</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_parent","title":"<code>rb_parent(node)</code>","text":""},{"location":"source/gdblib/kernel/rbtree/#pwndbg.gdblib.kernel.rbtree.rb_prev","title":"<code>rb_prev(node)</code>","text":""},{"location":"source/gdblib/kernel/slab/","title":"Slab","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.OO_MASK","title":"<code>OO_MASK = 1 &lt;&lt; OO_SHIFT - 1</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.OO_SHIFT","title":"<code>OO_SHIFT = 16</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache","title":"<code>CpuCache</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache.active_slab","title":"<code>active_slab: Slab | None</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache.address","title":"<code>address: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache.cpu","title":"<code>cpu = cpu</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache.freelist","title":"<code>freelist: Freelist</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache.partial_slabs","title":"<code>partial_slabs: List[Slab]</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache.slab_cache","title":"<code>slab_cache = slab_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.CpuCache.__init__","title":"<code>__init__(cpu_cache, slab_cache, cpu)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist","title":"<code>Freelist</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.offset","title":"<code>offset = offset</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.random","title":"<code>random = random</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.start_addr","title":"<code>start_addr = start_addr</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.__init__","title":"<code>__init__(start_addr, offset, random=0)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.__len__","title":"<code>__len__()</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Freelist.find_next","title":"<code>find_next(addr)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.NodeCache","title":"<code>NodeCache</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.NodeCache.address","title":"<code>address: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.NodeCache.node","title":"<code>node = node</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.NodeCache.partial_slabs","title":"<code>partial_slabs: List[Slab]</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.NodeCache.slab_cache","title":"<code>slab_cache = slab_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.NodeCache.__init__","title":"<code>__init__(node_cache, slab_cache, node)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab","title":"<code>Slab</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.cpu_cache","title":"<code>cpu_cache = cpu_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.free_objects","title":"<code>free_objects: Set[int]</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.freelist","title":"<code>freelist: Freelist</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.freelists","title":"<code>freelists: List[Freelist]</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.frozen","title":"<code>frozen: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.inuse","title":"<code>inuse: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.is_partial","title":"<code>is_partial = is_partial</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.object_count","title":"<code>object_count: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.objects","title":"<code>objects: Generator[int, None, None]</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.pobjects","title":"<code>pobjects: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.slab_address","title":"<code>slab_address: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.slab_cache","title":"<code>slab_cache = slab_cache</code>  <code>instance-attribute</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.slabs","title":"<code>slabs: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.virt_address","title":"<code>virt_address: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.Slab.__init__","title":"<code>__init__(slab, cpu_cache, slab_cache, is_partial=False)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache","title":"<code>SlabCache</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.__oo_x","title":"<code>__oo_x: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.address","title":"<code>address: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.align","title":"<code>align: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.cpu_cache","title":"<code>cpu_cache: CpuCache</code>  <code>property</code>","text":"<p>returns cpu cache associated to current thread</p>"},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.cpu_caches","title":"<code>cpu_caches: Generator[CpuCache, None, None]</code>  <code>property</code>","text":"<p>returns cpu caches for all cpus</p>"},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.cpu_partial","title":"<code>cpu_partial: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.flags","title":"<code>flags: List[str]</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.inuse","title":"<code>inuse: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.node_caches","title":"<code>node_caches: Generator[NodeCache, None, None]</code>  <code>property</code>","text":"<p>returns node caches for all NUMA nodes</p>"},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.object_size","title":"<code>object_size: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.offset","title":"<code>offset: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.oo_objects","title":"<code>oo_objects</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.oo_order","title":"<code>oo_order</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.random","title":"<code>random: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.size","title":"<code>size: int</code>  <code>property</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.SlabCache.__init__","title":"<code>__init__(slab_cache)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.caches","title":"<code>caches()</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.find_containing_slab_cache","title":"<code>find_containing_slab_cache(addr)</code>","text":"<p>Find the slab cache associated with the provided address.</p>"},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.get_cache","title":"<code>get_cache(target_name)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.get_flags_list","title":"<code>get_flags_list(flags)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.oo_objects","title":"<code>oo_objects(x)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.oo_order","title":"<code>oo_order(x)</code>","text":""},{"location":"source/gdblib/kernel/slab/#pwndbg.gdblib.kernel.slab.slab_struct_type","title":"<code>slab_struct_type()</code>","text":""},{"location":"source/gdblib/tui/__init__/","title":"init","text":""},{"location":"source/gdblib/tui/__init__/#pwndbg.gdblib.tui.setup","title":"<code>setup()</code>","text":""},{"location":"source/gdblib/tui/context/","title":"Context","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.sections","title":"<code>sections = ['legend'] + [section.__name__.replace('context_', '') for section in context_sections.values()]</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.target_func","title":"<code>target_func: Callable[..., gdb._Window] = lambda window, section_name=section_name: ContextTUIWindow(window, section_name)</code>  <code>module-attribute</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow","title":"<code>ContextTUIWindow</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.__init__","title":"<code>__init__(tui_window, section)</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.click","title":"<code>click(x, y, button)</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.close","title":"<code>close()</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.hscroll","title":"<code>hscroll(num)</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.render","title":"<code>render()</code>","text":""},{"location":"source/gdblib/tui/context/#pwndbg.gdblib.tui.context.ContextTUIWindow.vscroll","title":"<code>vscroll(num)</code>","text":""},{"location":"source/gdblib/tui/control/","title":"Control","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow","title":"<code>ControlTUIWindow</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.__init__","title":"<code>__init__(tui_window)</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.click","title":"<code>click(x, y, button)</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.close","title":"<code>close()</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.hscroll","title":"<code>hscroll(num)</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.render","title":"<code>render()</code>","text":""},{"location":"source/gdblib/tui/control/#pwndbg.gdblib.tui.control.ControlTUIWindow.vscroll","title":"<code>vscroll(num)</code>","text":""},{"location":"source/integration/__init__/","title":"init","text":""},{"location":"source/integration/__init__/#pwndbg.integration.function_lookup","title":"<code>function_lookup = pwndbg.config.add_param('integration-function-lookup', True, 'whether to use integration to look up function type signatures')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.provider","title":"<code>provider: IntegrationProvider = IntegrationProvider()</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.provider_name","title":"<code>provider_name = pwndbg.config.add_param('integration-provider', 'none', 'which provider to use for integration features', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['none', 'binja', 'ida'])</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.smart_enhance","title":"<code>smart_enhance = pwndbg.config.add_param('integration-smart-enhance', True, 'whether to use integration to determine if code should be disassembled during enhancing')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.symbol_lookup","title":"<code>symbol_lookup = pwndbg.config.add_param('integration-symbol-lookup', True, 'whether to use integration to look up unknown symbols')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider","title":"<code>ConfigurableProvider</code>  <code>dataclass</code>","text":"<p>               Bases: <code>IntegrationProvider</code></p> <p>A wrapper around an IntegrationProvider that skips calling functions if disabled in config.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.inner","title":"<code>inner: IntegrationProvider</code>  <code>instance-attribute</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.__init__","title":"<code>__init__(inner)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_stack_var_name","title":"<code>get_stack_var_name(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.get_versions","title":"<code>get_versions()</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.ConfigurableProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":""},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider","title":"<code>IntegrationProvider</code>","text":"<p>A class representing an integration that provides intelligence external to GDB.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":"<p>Decompiles the code near an address given a line count.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":"<p>Gets any comments attached to an instruction.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":"<p>Gets the type signature of a function, used for argument labeling.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_stack_var_name","title":"<code>get_stack_var_name(addr)</code>","text":"<p>Gets the name of a stack variable based on only the address of the variable.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":"<p>Get a symbol at an address, or an offset from a symbol.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.get_versions","title":"<code>get_versions()</code>","text":"<p>Gets any version strings relevant to the integration, which are used when displaying the <code>version</code> command.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.IntegrationProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":"<p>Checks if integration thinks that an address is in a function, which is used to determine if <code>tel</code> should try to disassemble something.</p> <p>If uncertain, it's better to default to True than to False.</p>"},{"location":"source/integration/__init__/#pwndbg.integration.switch_providers","title":"<code>switch_providers()</code>","text":""},{"location":"source/integration/binja/","title":"Binja","text":"<p>Talks to an XMLRPC server running inside of an active Binary Ninja instance, in order to query it about the database. Allows symbol resolution and interactive debugging.</p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.K","title":"<code>K = TypeVar('K')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_autosync","title":"<code>bn_autosync = pwndbg.config.add_param('bn-autosync', False, 'whether to automatically run bn-sync every step')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_il_level","title":"<code>bn_il_level = pwndbg.config.add_param('bn-il-level', 'hlil', 'the IL level to use when displaying Binary Ninja decompilation', param_class=pwndbg.lib.config.PARAM_ENUM, enum_sequence=['disasm', 'llil', 'mlil', 'hlil'])</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_rpc_host","title":"<code>bn_rpc_host = pwndbg.config.add_param('bn-rpc-host', '127.0.0.1', 'Binary Ninja XML-RPC server host')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_rpc_port","title":"<code>bn_rpc_port = pwndbg.config.add_param('bn-rpc-port', 31337, 'Binary Ninja XML-RPC server port')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_timeout","title":"<code>bn_timeout = pwndbg.config.add_param('bn-timeout', 2, 'time to wait for Binary Ninja XML-RPC, in seconds')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.style","title":"<code>style = theme.add_param('bn-decomp-style', 'dark', f'Decompilation highlight theme for Binary Ninja (valid values are {', '.join(themes.keys())})')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.themes","title":"<code>themes = {}</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider","title":"<code>BinjaProvider</code>","text":"<p>               Bases: <code>IntegrationProvider</code></p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_stack_var_name","title":"<code>get_stack_var_name(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.get_versions","title":"<code>get_versions()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.BinjaProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.DarkTheme","title":"<code>DarkTheme</code>","text":"<p>               Bases: <code>Style</code></p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.DarkTheme.styles","title":"<code>styles = bn_to_pygment_theme({'TextToken': '#e0e0e0', 'InstructionToken': '#eddfb3', 'OperandSeparatorToken': '#e0e0e0', 'RegisterToken': '#e0e0e0', 'IntegerToken': '#a2d9af', 'PossibleAddressToken': '#a2d9af', 'BeginMemoryOperandToken': '#e0e0e0', 'EndMemoryOperandToken': '#e0e0e0', 'FloatingPointToken': '#a2d9af', 'AnnotationToken': '#dac4d1', 'CodeRelativeAddressToken': '#a2d9af', 'ArgumentNameToken': '#e0e0e0', 'HexDumpByteValueToken': '#e0e0e0', 'HexDumpSkippedByteToken': '#e0e0e0', 'HexDumpInvalidByteToken': '#909090', 'HexDumpTextToken': '#e0e0e0', 'OpcodeToken': '#909090', 'StringToken': '#dac4d1', 'CharacterConstantToken': '#dac4d1', 'KeywordToken': '#eddfb3', 'TypeNameToken': '#edbd81', 'FieldNameToken': '#b0dde4', 'NameSpaceToken': '#80c6e9', 'NameSpaceSeparatorToken': '#80c6e9', 'TagToken': '#e0e0e0', 'StructOffsetToken': '#b0dde4', 'StructOffsetByteValueToken': '#e0e0e0', 'StructureHexDumpTextToken': '#e0e0e0', 'GotoLabelToken': '#80c6e9', 'CommentToken': '#dac4d1', 'PossibleValueToken': '#e0e0e0', 'PossibleValueTypeToken': '#e0e0e0', 'ArrayIndexToken': '#a2d9af', 'IndentationToken': '#5d5d5d', 'UnknownMemoryToken': '#909090', 'EnumerationMemberToken': '#eddfb3', 'OperationToken': '#89a4b1', 'BaseStructureNameToken': '#dac4d1', 'BaseStructureSeparatorToken': '#dac4d1', 'BraceToken': '#e0e0e0', 'CodeSymbolToken': '#80c6e9', 'DataSymbolToken': '#8ee6ed', 'LocalVariableToken': '#e0e0e0', 'ImportToken': '#edbd81', 'AddressDisplayToken': '#a2d9af', 'IndirectImportToken': '#edbd81', 'ExternalSymbolToken': '#edbd81', 'StackVariableToken': '#c1dcc7', 'AddressSeparatorToken': '#e0e0e0'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.LightTheme","title":"<code>LightTheme</code>","text":"<p>               Bases: <code>Style</code></p>"},{"location":"source/integration/binja/#pwndbg.integration.binja.LightTheme.styles","title":"<code>styles = bn_to_pygment_theme({'TextToken': '#1f1f1f', 'InstructionToken': '#8d8d2d', 'OperandSeparatorToken': '#1f1f1f', 'RegisterToken': '#1f1f1f', 'IntegerToken': '#30820d', 'PossibleAddressToken': '#30820d', 'BeginMemoryOperandToken': '#1f1f1f', 'EndMemoryOperandToken': '#1f1f1f', 'FloatingPointToken': '#30820d', 'AnnotationToken': '#bf2624', 'CodeRelativeAddressToken': '#30820d', 'ArgumentNameToken': '#1f1f1f', 'HexDumpByteValueToken': '#1f1f1f', 'HexDumpSkippedByteToken': '#1f1f1f', 'HexDumpInvalidByteToken': '#7a7a7a', 'HexDumpTextToken': '#1f1f1f', 'OpcodeToken': '#7a7a7a', 'StringToken': '#203635', 'CharacterConstantToken': '#203635', 'KeywordToken': '#8d8d2d', 'TypeNameToken': '#e07c35', 'FieldNameToken': '#35dae0', 'NameSpaceToken': '#00a4c7', 'NameSpaceSeparatorToken': '#00a4c7', 'TagToken': '#1f1f1f', 'StructOffsetToken': '#35dae0', 'StructOffsetByteValueToken': '#1f1f1f', 'StructureHexDumpTextToken': '#1f1f1f', 'GotoLabelToken': '#00a4c7', 'CommentToken': '#bf2624', 'PossibleValueToken': '#1f1f1f', 'PossibleValueTypeToken': '#1f1f1f', 'ArrayIndexToken': '#30820d', 'IndentationToken': '#bcbcbc', 'UnknownMemoryToken': '#7a7a7a', 'EnumerationMemberToken': '#8d8d2d', 'OperationToken': '#5b848d', 'BaseStructureNameToken': '#bf2624', 'BaseStructureSeparatorToken': '#bf2624', 'BraceToken': '#1f1f1f', 'CodeSymbolToken': '#00a4c7', 'DataSymbolToken': '#278cad', 'LocalVariableToken': '#1f1f1f', 'ImportToken': '#e07c35', 'AddressDisplayToken': '#30820d', 'IndirectImportToken': '#e07c35', 'ExternalSymbolToken': '#e07c35', 'StackVariableToken': '#275016', 'AddressSeparatorToken': '#1f1f1f'})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.auto_clear_pc","title":"<code>auto_clear_pc()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.auto_update_bp","title":"<code>auto_update_bp()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.auto_update_pc","title":"<code>auto_update_pc()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.available","title":"<code>available()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.base","title":"<code>base()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_to_pygment_theme","title":"<code>bn_to_pygment_theme(theme)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.bn_to_pygment_tok","title":"<code>bn_to_pygment_tok(tok)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.can_connect","title":"<code>can_connect()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.init_bn_rpc_client","title":"<code>init_bn_rpc_client()</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.l2r","title":"<code>l2r(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.navigate_to","title":"<code>navigate_to(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.r2l","title":"<code>r2l(addr)</code>","text":""},{"location":"source/integration/binja/#pwndbg.integration.binja.with_bn","title":"<code>with_bn(fallback=None)</code>","text":""},{"location":"source/integration/ida/","title":"Ida","text":"<p>Talks to an XMLRPC server running inside of an active IDA Pro instance, in order to query it about the database.  Allows symbol resolution and interactive debugging.</p>"},{"location":"source/integration/ida/#pwndbg.integration.ida.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.colored_pc","title":"<code>colored_pc = None</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_replacements","title":"<code>ida_replacements = {'__int64': 'signed long long int', '__int32': 'signed int', '__int16': 'signed short', '__int8': 'signed char', '__uint64': 'unsigned long long int', '__uint32': 'unsigned int', '__uint16': 'unsigned short', '__uint8': 'unsigned char', '_BOOL_1': 'unsigned char', '_BOOL_2': 'unsigned short', '_BOOL_4': 'unsigned int', '_BYTE': 'unsigned char', '_WORD': 'unsigned short', '_DWORD': 'unsigned int', '_QWORD': 'unsigned long long', '__pure': '', '__hidden': '', '__return_ptr': '', '__struct_ptr': '', '__array_ptr': '', '__fastcall': '', '__cdecl': '', '__thiscall': '', '__userpurge': ''}</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_rpc_host","title":"<code>ida_rpc_host = pwndbg.config.add_param('ida-rpc-host', '127.0.0.1', 'ida xmlrpc server address')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_rpc_port","title":"<code>ida_rpc_port = pwndbg.config.add_param('ida-rpc-port', 31337, 'ida xmlrpc server port')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ida_timeout","title":"<code>ida_timeout = pwndbg.config.add_param('ida-timeout', 2, 'time to wait for ida xmlrpc in seconds')</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.idc","title":"<code>idc = IDC()</code>  <code>module-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IDC","title":"<code>IDC</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IDC.query","title":"<code>query = \"{k:v for k,v in globals()['idc'].__dict__.items() if type(v) in (int,long)}\"</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IDC.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider","title":"<code>IdaProvider</code>","text":"<p>               Bases: <code>IntegrationProvider</code></p>"},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.decompile","title":"<code>decompile(addr, lines)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_comment_lines","title":"<code>get_comment_lines(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_func_type","title":"<code>get_func_type(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_symbol","title":"<code>get_symbol(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.get_versions","title":"<code>get_versions()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.IdaProvider.is_in_function","title":"<code>is_in_function(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Anterior","title":"<code>Anterior(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.ArgCount","title":"<code>ArgCount(address)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Auto_Color_PC","title":"<code>Auto_Color_PC()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Auto_UnColor_PC","title":"<code>Auto_UnColor_PC()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Comment","title":"<code>Comment(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetBptEA","title":"<code>GetBptEA(i)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetBptQty","title":"<code>GetBptQty()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetBreakpoints","title":"<code>GetBreakpoints()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetFlags","title":"<code>GetFlags(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetFuncOffset","title":"<code>GetFuncOffset(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetFunctionName","title":"<code>GetFunctionName(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetIdbPath","title":"<code>GetIdbPath()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberFlag","title":"<code>GetMemberFlag(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberId","title":"<code>GetMemberId(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberName","title":"<code>GetMemberName(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberQty","title":"<code>GetMemberQty(sid)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetMemberSize","title":"<code>GetMemberSize(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucId","title":"<code>GetStrucId(idx)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucName","title":"<code>GetStrucName(sid)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucNextOff","title":"<code>GetStrucNextOff(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucQty","title":"<code>GetStrucQty()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetStrucSize","title":"<code>GetStrucSize(sid)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.GetType","title":"<code>GetType(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Jump","title":"<code>Jump(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.LocByName","title":"<code>LocByName(name)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.Name","title":"<code>Name(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.NextHead","title":"<code>NextHead(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.PrevHead","title":"<code>PrevHead(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.SaveBase","title":"<code>SaveBase(path)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.SetColor","title":"<code>SetColor(pc, color)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.UpdateBreakpoints","title":"<code>UpdateBreakpoints()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.available","title":"<code>available()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.base","title":"<code>base()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.can_connect","title":"<code>can_connect()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.decompile","title":"<code>decompile(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.decompile_context","title":"<code>decompile_context(pc, context_lines)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.get_ida_versions","title":"<code>get_ida_versions()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.has_cached_cfunc","title":"<code>has_cached_cfunc(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.here","title":"<code>here()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.init_ida_rpc_client","title":"<code>init_ida_rpc_client()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.isASCII","title":"<code>isASCII(flags)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.l2r","title":"<code>l2r(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.print_member","title":"<code>print_member(sid, offset)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.print_structs","title":"<code>print_structs()</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.r2l","title":"<code>r2l(addr)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.remote","title":"<code>remote(function)</code>","text":"<p>Runs the provided function in IDA's interpreter.</p> <p>The function must be self-contained and not reference any global variables.</p>"},{"location":"source/integration/ida/#pwndbg.integration.ida.returns_address","title":"<code>returns_address(function)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.takes_address","title":"<code>takes_address(function)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.withHexrays","title":"<code>withHexrays(func)</code>","text":""},{"location":"source/integration/ida/#pwndbg.integration.ida.withIDA","title":"<code>withIDA(func)</code>","text":""},{"location":"source/lib/__init__/","title":"init","text":""},{"location":"source/lib/abi/","title":"Abi","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.DEFAULT_ABIS","title":"<code>DEFAULT_ABIS: Dict[Tuple[int, str, str], ABI] = {(32, 'i386', 'linux'): linux_i386, (64, 'x86-64', 'linux'): linux_amd64, (64, 'aarch64', 'linux'): linux_aarch64, (32, 'arm', 'linux'): linux_arm, (32, 'thumb', 'linux'): linux_arm, (32, 'mips', 'linux'): linux_mips, (64, 'mips', 'linux'): linux_mips64, (32, 'powerpc', 'linux'): linux_ppc, (64, 'powerpc', 'linux'): linux_ppc64, (32, 'rv32', 'linux'): linux_riscv32, (64, 'rv64', 'linux'): linux_riscv64}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SIGRETURN_ABIS","title":"<code>SIGRETURN_ABIS: Dict[Tuple[int, str, str], SigreturnABI] = {(32, 'i386', 'linux'): linux_i386_sigreturn, (64, 'x86-64', 'linux'): linux_amd64_sigreturn, (32, 'arm', 'linux'): linux_arm_sigreturn, (32, 'thumb', 'linux'): linux_arm_sigreturn}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SYSCALL_ABIS","title":"<code>SYSCALL_ABIS: Dict[Tuple[int, str, str], SyscallABI] = {(32, 'i386', 'linux'): linux_i386_syscall, (64, 'x86-64', 'linux'): linux_amd64_syscall, (64, 'aarch64', 'linux'): linux_aarch64_syscall, (32, 'arm', 'linux'): linux_arm_syscall, (32, 'thumb', 'linux'): linux_arm_syscall, (32, 'mips', 'linux'): linux_mips_syscall, (64, 'mips', 'linux'): linux_mips64_syscall, (32, 'powerpc', 'linux'): linux_ppc_syscall, (64, 'powerpc', 'linux'): linux_ppc64_syscall, (32, 'rv32', 'linux'): linux_riscv32_syscall, (64, 'rv64', 'linux'): linux_riscv64_syscall}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_aarch64","title":"<code>linux_aarch64 = ABI(['x0', 'x1', 'x2', 'x3'], 16, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_aarch64_syscall","title":"<code>linux_aarch64_syscall = SyscallABI(['x8', 'x0', 'x1', 'x2', 'x3', 'x4', 'x5'], 16, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64","title":"<code>linux_amd64 = ABI(['rdi', 'rsi', 'rdx', 'rcx', 'r8', 'r9'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64_sigreturn","title":"<code>linux_amd64_sigreturn = SigreturnABI(['rax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64_srop","title":"<code>linux_amd64_srop = ABI(['rax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_amd64_syscall","title":"<code>linux_amd64_syscall = SyscallABI(['rax', 'rdi', 'rsi', 'rdx', 'r10', 'r8', 'r9'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm","title":"<code>linux_arm = ABI(['r0', 'r1', 'r2', 'r3'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm_sigreturn","title":"<code>linux_arm_sigreturn = SigreturnABI(['r7'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm_srop","title":"<code>linux_arm_srop = ABI(['r7'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_arm_syscall","title":"<code>linux_arm_syscall = SyscallABI(['r7', 'r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386","title":"<code>linux_i386 = ABI([], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386_sigreturn","title":"<code>linux_i386_sigreturn = SigreturnABI(['eax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386_srop","title":"<code>linux_i386_srop = ABI(['eax'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_i386_syscall","title":"<code>linux_i386_syscall = SyscallABI(['eax', 'ebx', 'ecx', 'edx', 'esi', 'edi', 'ebp'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips","title":"<code>linux_mips = ABI(['$a0', '$a1', '$a2', '$a3'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips64","title":"<code>linux_mips64 = ABI(['$a0', '$a1', '$a2', '$a3', '$a4', '$a5', '$a6', '$a7'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips64_syscall","title":"<code>linux_mips64_syscall = SyscallABI(['$v0', '$a0', '$a1', '$a2', '$a3', '$a4', '$a5'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_mips_syscall","title":"<code>linux_mips_syscall = SyscallABI(['$v0', '$a0', '$a1', '$a2', '$a3'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc","title":"<code>linux_ppc = ABI(['r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc64","title":"<code>linux_ppc64 = ABI(['r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc64_syscall","title":"<code>linux_ppc64_syscall = SyscallABI(['r0', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_ppc_syscall","title":"<code>linux_ppc_syscall = SyscallABI(['r0', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv32","title":"<code>linux_riscv32 = ABI(['a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv32_syscall","title":"<code>linux_riscv32_syscall = SyscallABI(['a7', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6'], 4, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv64","title":"<code>linux_riscv64 = ABI(['a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.linux_riscv64_syscall","title":"<code>linux_riscv64_syscall = SyscallABI(['a7', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6'], 8, 0)</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI","title":"<code>ABI</code>","text":"<p>Encapsulates information about a calling convention.</p>"},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.arg_alignment","title":"<code>arg_alignment = align</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.register_arguments","title":"<code>register_arguments: List[str] = regs</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.returns","title":"<code>returns = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.stack_minimum","title":"<code>stack_minimum = minimum</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.__init__","title":"<code>__init__(regs, align, minimum)</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.default","title":"<code>default()</code>  <code>staticmethod</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.sigreturn","title":"<code>sigreturn()</code>  <code>staticmethod</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.ABI.syscall","title":"<code>syscall()</code>  <code>staticmethod</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SigreturnABI","title":"<code>SigreturnABI</code>","text":"<p>               Bases: <code>SyscallABI</code></p> <p>The sigreturn ABI is similar to the syscall ABI, except that both PC and SP are loaded from the stack.  Because of this, there is no 'return' slot necessary on the stack.</p>"},{"location":"source/lib/abi/#pwndbg.lib.abi.SigreturnABI.returns","title":"<code>returns = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SyscallABI","title":"<code>SyscallABI</code>","text":"<p>               Bases: <code>ABI</code></p> <p>The syscall ABI treats the syscall number as the zeroth argument, which must be loaded into the specified register.</p>"},{"location":"source/lib/abi/#pwndbg.lib.abi.SyscallABI.syscall_register","title":"<code>syscall_register = register_arguments.pop(0)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/abi/#pwndbg.lib.abi.SyscallABI.__init__","title":"<code>__init__(register_arguments, *a, **kw)</code>","text":""},{"location":"source/lib/android/","title":"Android","text":""},{"location":"source/lib/android/#pwndbg.lib.android.KNOWN_AIDS","title":"<code>KNOWN_AIDS = {0: 'AID_ROOT', 1000: 'AID_SYSTEM', 1001: 'AID_RADIO', 1002: 'AID_BLUETOOTH', 1003: 'AID_GRAPHICS', 1004: 'AID_INPUT', 1005: 'AID_AUDIO', 1006: 'AID_CAMERA', 1007: 'AID_LOG', 1008: 'AID_COMPASS', 1009: 'AID_MOUNT', 1010: 'AID_WIFI', 1011: 'AID_ADB', 1012: 'AID_INSTALL', 1013: 'AID_MEDIA', 1014: 'AID_DHCP', 1015: 'AID_SDCARD_RW', 1016: 'AID_VPN', 1017: 'AID_KEYSTORE', 1018: 'AID_USB', 1019: 'AID_DRM', 1020: 'AID_MDNSR', 1021: 'AID_GPS', 1022: 'AID_UNUSED1', 1023: 'AID_MEDIA_RW', 1024: 'AID_MTP', 1025: 'AID_UNUSED2', 1026: 'AID_DRMRPC', 1027: 'AID_NFC', 1028: 'AID_SDCARD_R', 1029: 'AID_CLAT', 1030: 'AID_LOOP_RADIO', 1031: 'AID_MEDIA_DRM', 1032: 'AID_PACKAGE_INFO', 1033: 'AID_SDCARD_PICS', 1034: 'AID_SDCARD_AV', 1035: 'AID_SDCARD_ALL', 1036: 'AID_LOGD', 1037: 'AID_SHARED_RELRO', 1038: 'AID_DBUS', 1039: 'AID_TLSDATE', 1040: 'AID_MEDIA_EX', 1041: 'AID_AUDIOSERVER', 1042: 'AID_METRICS_COLL', 1043: 'AID_METRICSD', 1044: 'AID_WEBSERV', 1045: 'AID_DEBUGGERD', 1046: 'AID_MEDIA_CODEC', 1047: 'AID_CAMERASERVER', 1048: 'AID_FIREWALL', 1049: 'AID_TRUNKS', 1050: 'AID_NVRAM', 2001: 'AID_CACHE', 2002: 'AID_DIAG', 2900: 'AID_OEM_RESERVED_START', 2999: 'AID_OEM_RESERVED_END', 3001: 'AID_NET_BT_ADMIN', 3002: 'AID_NET_BT', 3003: 'AID_INET', 3004: 'AID_NET_RAW', 3005: 'AID_NET_ADMIN', 3006: 'AID_NET_BW_STATS', 3007: 'AID_NET_BW_ACCT', 3008: 'AID_NET_BT_STACK', 3009: 'AID_READPROC', 3010: 'AID_WAKELOCK', 5000: 'AID_OEM_RESERVED_2_START', 5999: 'AID_OEM_RESERVED_2_END', 9997: 'AID_EVERYBODY', 9998: 'AID_MISC', 9999: 'AID_NOBODY', 10000: 'AID_APP', 50000: 'AID_SHARED_GID_START', 59999: 'AID_SHARED_GID_END', 99000: 'AID_ISOLATED_START', 99999: 'AID_ISOLATED_END', 100000: 'AID_USER'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/android/#pwndbg.lib.android.aid_name","title":"<code>aid_name(uid)</code>","text":""},{"location":"source/lib/arch/","title":"Arch","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.FMT_BIG_ENDIAN","title":"<code>FMT_BIG_ENDIAN = {1: 'B', 2: '&gt;H', 4: '&gt;I', 8: '&gt;Q'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.FMT_LITTLE_ENDIAN","title":"<code>FMT_LITTLE_ENDIAN = {1: 'B', 2: '&lt;H', 4: '&lt;I', 8: '&lt;Q'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch","title":"<code>Arch</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.native_endian","title":"<code>native_endian = str(sys.byteorder)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.__init__","title":"<code>__init__(arch_name, ptrsize, endian)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.pack","title":"<code>pack(integer)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.pack_size","title":"<code>pack_size(integer, size)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.unpack","title":"<code>unpack(data)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.unpack_size","title":"<code>unpack_size(data, size)</code>","text":""},{"location":"source/lib/arch/#pwndbg.lib.arch.Arch.update","title":"<code>update(arch_name, ptrsize, endian)</code>","text":""},{"location":"source/lib/cache/","title":"Cache","text":"<p>Caches return values until some event in the inferior happens, e.g. execution stops because of a SIGINT or breakpoint, or a new library/objfile are loaded, etc.</p>"},{"location":"source/lib/cache/#pwndbg.lib.cache.Cache","title":"<code>Cache = Union[Dict[Tuple[Any, ...], Any], DebugCacheDict]</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.IS_CACHING","title":"<code>IS_CACHING = True</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.IS_CACHING_DISABLED_FOR","title":"<code>IS_CACHING_DISABLED_FOR: Dict[str, bool] = {'stop': False, 'exit': False, 'objfile': False, 'start': False, 'cont': False, 'thread': False, 'prompt': False, 'forever': False}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.debug","title":"<code>debug = NO_DEBUG</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.debug_name","title":"<code>debug_name = 'regs'</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict","title":"<code>DebugCacheDict</code>","text":"<p>               Bases: <code>UserDict</code></p>"},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.func","title":"<code>func = func</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.hits","title":"<code>hits = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.misses","title":"<code>misses = 0</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.name","title":"<code>name = f'{func.__module__.split('.')[-1]}.{func.__name__}'</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.__init__","title":"<code>__init__(func, *args, **kwargs)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.__setitem__","title":"<code>__setitem__(key, value)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.DebugCacheDict.clear","title":"<code>clear()</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.cache_until","title":"<code>cache_until(*event_names)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.clear_cache","title":"<code>clear_cache(cache_name)</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.clear_caches","title":"<code>clear_caches()</code>","text":""},{"location":"source/lib/cache/#pwndbg.lib.cache.connect_clear_caching_events","title":"<code>connect_clear_caching_events(event_dicts, **kwargs)</code>","text":"<p>Connect given debugger event hooks to correspoonding _CacheUntilEvent instances</p>"},{"location":"source/lib/config/","title":"Config","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_AUTO_BOOLEAN","title":"<code>PARAM_AUTO_BOOLEAN = 6</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_BOOLEAN","title":"<code>PARAM_BOOLEAN = 0</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_CLASSES","title":"<code>PARAM_CLASSES = {bool: PARAM_BOOLEAN, int: PARAM_ZINTEGER, str: PARAM_STRING}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ENUM","title":"<code>PARAM_ENUM = 4</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_INTEGER","title":"<code>PARAM_INTEGER = 8</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_OPTIONAL_FILENAME","title":"<code>PARAM_OPTIONAL_FILENAME = 5</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_STRING","title":"<code>PARAM_STRING = 2</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_UINTEGER","title":"<code>PARAM_UINTEGER = 9</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ZINTEGER","title":"<code>PARAM_ZINTEGER = 1</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ZUINTEGER","title":"<code>PARAM_ZUINTEGER = 3</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.PARAM_ZUINTEGER_UNLIMITED","title":"<code>PARAM_ZUINTEGER_UNLIMITED = 7</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config","title":"<code>Config</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.params","title":"<code>params: Dict[str, Parameter] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.triggers","title":"<code>triggers: DefaultDict[str, List[Callable[..., Any]]] = defaultdict(list)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.__getattr__","title":"<code>__getattr__(name)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.__init__","title":"<code>__init__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.add_param","title":"<code>add_param(name, default, set_show_doc, *, help_docstring='', param_class=None, enum_sequence=None, scope='config')</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.add_param_obj","title":"<code>add_param_obj(p)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.get_params","title":"<code>get_params(scope)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Config.trigger","title":"<code>trigger(*params)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter","title":"<code>Parameter</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.default","title":"<code>default = default</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.enum_sequence","title":"<code>enum_sequence = enum_sequence</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.help_docstring","title":"<code>help_docstring = help_docstring.strip()</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.is_changed","title":"<code>is_changed: bool</code>  <code>property</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.param_class","title":"<code>param_class = param_class or PARAM_CLASSES[type(default)]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.scope","title":"<code>scope = scope</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.set_show_doc","title":"<code>set_show_doc = set_show_doc.strip()</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.value","title":"<code>value = default</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__add__","title":"<code>__add__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__bool__","title":"<code>__bool__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__div__","title":"<code>__div__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__floordiv__","title":"<code>__floordiv__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__getattr__","title":"<code>__getattr__(name)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__init__","title":"<code>__init__(name, default, set_show_doc, *, help_docstring='', param_class=None, enum_sequence=None, scope='config')</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__int__","title":"<code>__int__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__len__","title":"<code>__len__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__lt__","title":"<code>__lt__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__mod__","title":"<code>__mod__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__mul__","title":"<code>__mul__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__pow__","title":"<code>__pow__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__radd__","title":"<code>__radd__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__rmul__","title":"<code>__rmul__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__rsub__","title":"<code>__rsub__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.__sub__","title":"<code>__sub__(other)</code>","text":""},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.attr_name","title":"<code>attr_name()</code>","text":"<p>Returns the attribute name associated with this config option, i.e. <code>my-config</code> has the attribute name <code>my_config</code></p>"},{"location":"source/lib/config/#pwndbg.lib.config.Parameter.revert_default","title":"<code>revert_default()</code>","text":""},{"location":"source/lib/elftypes/","title":"Elftypes","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.AT_CONSTANTS","title":"<code>AT_CONSTANTS: Dict[int, str] = {0: 'AT_NULL', 1: 'AT_IGNORE', 2: 'AT_EXECFD', 3: 'AT_PHDR', 4: 'AT_PHENT', 5: 'AT_PHNUM', 6: 'AT_PAGESZ', 7: 'AT_BASE', 8: 'AT_FLAGS', 9: 'AT_ENTRY', 10: 'AT_NOTELF', 11: 'AT_UID', 12: 'AT_EUID', 13: 'AT_GID', 14: 'AT_EGID', 15: 'AT_PLATFORM', 16: 'AT_HWCAP', 17: 'AT_CLKTCK', 18: 'AT_FPUCW', 19: 'AT_DCACHEBSIZE', 20: 'AT_ICACHEBSIZE', 21: 'AT_UCACHEBSIZE', 22: 'AT_IGNOREPPC', 23: 'AT_SECURE', 24: 'AT_BASE_PLATFORM', 25: 'AT_RANDOM', 31: 'AT_EXECFN', 32: 'AT_SYSINFO', 33: 'AT_SYSINFO_EHDR', 34: 'AT_L1I_CACHESHAPE', 35: 'AT_L1D_CACHESHAPE', 36: 'AT_L2_CACHESHAPE', 37: 'AT_L3_CACHESHAPE'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Addr","title":"<code>Elf32_Addr = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Half","title":"<code>Elf32_Half = ctypes.c_uint16</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Off","title":"<code>Elf32_Off = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Sword","title":"<code>Elf32_Sword = ctypes.c_int32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Word","title":"<code>Elf32_Word = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Addr","title":"<code>Elf64_Addr = ctypes.c_uint64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Half","title":"<code>Elf64_Half = ctypes.c_uint16</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Off","title":"<code>Elf64_Off = ctypes.c_uint64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_SHalf","title":"<code>Elf64_SHalf = ctypes.c_int16</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Sword","title":"<code>Elf64_Sword = ctypes.c_int32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Sxword","title":"<code>Elf64_Sxword = ctypes.c_int64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Word","title":"<code>Elf64_Word = ctypes.c_uint32</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Xword","title":"<code>Elf64_Xword = ctypes.c_uint64</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Ehdr","title":"<code>Elf32_Ehdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf32_Phdr","title":"<code>Elf32_Phdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Ehdr","title":"<code>Elf64_Ehdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.Elf64_Phdr","title":"<code>Elf64_Phdr</code>","text":"<p>               Bases: <code>Structure</code></p>"},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants","title":"<code>constants</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_BASE","title":"<code>AT_BASE = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_BASE_PLATFORM","title":"<code>AT_BASE_PLATFORM = 24</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_CLKTCK","title":"<code>AT_CLKTCK = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_DCACHEBSIZE","title":"<code>AT_DCACHEBSIZE = 19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EGID","title":"<code>AT_EGID = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_ENTRY","title":"<code>AT_ENTRY = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EUID","title":"<code>AT_EUID = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EXECFD","title":"<code>AT_EXECFD = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_EXECFN","title":"<code>AT_EXECFN = 31</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_FLAGS","title":"<code>AT_FLAGS = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_FPUCW","title":"<code>AT_FPUCW = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_GID","title":"<code>AT_GID = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_HWCAP","title":"<code>AT_HWCAP = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_ICACHEBSIZE","title":"<code>AT_ICACHEBSIZE = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_IGNORE","title":"<code>AT_IGNORE = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_IGNOREPPC","title":"<code>AT_IGNOREPPC = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L1D_CACHESHAPE","title":"<code>AT_L1D_CACHESHAPE = 35</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L1I_CACHESHAPE","title":"<code>AT_L1I_CACHESHAPE = 34</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L2_CACHESHAPE","title":"<code>AT_L2_CACHESHAPE = 36</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_L3_CACHESHAPE","title":"<code>AT_L3_CACHESHAPE = 37</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_NOTELF","title":"<code>AT_NOTELF = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_NULL","title":"<code>AT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PAGESZ","title":"<code>AT_PAGESZ = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PHDR","title":"<code>AT_PHDR = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PHENT","title":"<code>AT_PHENT = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PHNUM","title":"<code>AT_PHNUM = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_PLATFORM","title":"<code>AT_PLATFORM = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_RANDOM","title":"<code>AT_RANDOM = 25</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_SECURE","title":"<code>AT_SECURE = 23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_SYSINFO","title":"<code>AT_SYSINFO = 32</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_SYSINFO_EHDR","title":"<code>AT_SYSINFO_EHDR = 33</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_UCACHEBSIZE","title":"<code>AT_UCACHEBSIZE = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.AT_UID","title":"<code>AT_UID = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_DEBUG","title":"<code>DT_DEBUG = 21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_ENCODING","title":"<code>DT_ENCODING = 32</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_FINI","title":"<code>DT_FINI = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_HASH","title":"<code>DT_HASH = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_INIT","title":"<code>DT_INIT = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_JMPREL","title":"<code>DT_JMPREL = 23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_NEEDED","title":"<code>DT_NEEDED = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_NULL","title":"<code>DT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_PLTGOT","title":"<code>DT_PLTGOT = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_PLTREL","title":"<code>DT_PLTREL = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_PLTRELSZ","title":"<code>DT_PLTRELSZ = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_REL","title":"<code>DT_REL = 17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELA","title":"<code>DT_RELA = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELAENT","title":"<code>DT_RELAENT = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELASZ","title":"<code>DT_RELASZ = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELENT","title":"<code>DT_RELENT = 19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RELSZ","title":"<code>DT_RELSZ = 18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_RPATH","title":"<code>DT_RPATH = 15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SONAME","title":"<code>DT_SONAME = 14</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_STRSZ","title":"<code>DT_STRSZ = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_STRTAB","title":"<code>DT_STRTAB = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SYMBOLIC","title":"<code>DT_SYMBOLIC = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SYMENT","title":"<code>DT_SYMENT = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_SYMTAB","title":"<code>DT_SYMTAB = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.DT_TEXTREL","title":"<code>DT_TEXTREL = 22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_ABIVERSION","title":"<code>EI_ABIVERSION = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_CLASS","title":"<code>EI_CLASS = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_DATA","title":"<code>EI_DATA = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG0","title":"<code>EI_MAG0 = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG1","title":"<code>EI_MAG1 = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG2","title":"<code>EI_MAG2 = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_MAG3","title":"<code>EI_MAG3 = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_NIDENT","title":"<code>EI_NIDENT = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_OSABI","title":"<code>EI_OSABI = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_PAD","title":"<code>EI_PAD = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.EI_VERSION","title":"<code>EI_VERSION = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFCLASS32","title":"<code>ELFCLASS32 = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFCLASS64","title":"<code>ELFCLASS64 = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFCLASSNONE","title":"<code>ELFCLASSNONE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFDATA2LSB","title":"<code>ELFDATA2LSB = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFDATA2MSB","title":"<code>ELFDATA2MSB = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFDATANONE","title":"<code>ELFDATANONE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG0","title":"<code>ELFMAG0 = 127</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG1","title":"<code>ELFMAG1 = ord('E')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG2","title":"<code>ELFMAG2 = ord('L')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ELFMAG3","title":"<code>ELFMAG3 = ord('F')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_CORE","title":"<code>ET_CORE = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_DYN","title":"<code>ET_DYN = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_EXEC","title":"<code>ET_EXEC = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_NONE","title":"<code>ET_NONE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.ET_REL","title":"<code>ET_REL = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_386_IOPERM","title":"<code>NT_386_IOPERM = 513</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_386_TLS","title":"<code>NT_386_TLS = 512</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_HW_BREAK","title":"<code>NT_ARM_HW_BREAK = 1026</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_HW_WATCH","title":"<code>NT_ARM_HW_WATCH = 1027</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_TLS","title":"<code>NT_ARM_TLS = 1025</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_ARM_VFP","title":"<code>NT_ARM_VFP = 1024</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_AUXV","title":"<code>NT_AUXV = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_FILE","title":"<code>NT_FILE = 1179208773</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_METAG_CBUF","title":"<code>NT_METAG_CBUF = 1280</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_METAG_RPIPE","title":"<code>NT_METAG_RPIPE = 1281</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_METAG_TLS","title":"<code>NT_METAG_TLS = 1282</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PPC_SPE","title":"<code>NT_PPC_SPE = 257</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PPC_VMX","title":"<code>NT_PPC_VMX = 256</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PPC_VSX","title":"<code>NT_PPC_VSX = 258</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRFPREG","title":"<code>NT_PRFPREG = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRPSINFO","title":"<code>NT_PRPSINFO = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRSTATUS","title":"<code>NT_PRSTATUS = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_PRXFPREG","title":"<code>NT_PRXFPREG = 1189489535</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_CTRS","title":"<code>NT_S390_CTRS = 772</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_HIGH_GPRS","title":"<code>NT_S390_HIGH_GPRS = 768</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_LAST_BREAK","title":"<code>NT_S390_LAST_BREAK = 774</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_PREFIX","title":"<code>NT_S390_PREFIX = 773</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_SYSTEM_CALL","title":"<code>NT_S390_SYSTEM_CALL = 775</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TDB","title":"<code>NT_S390_TDB = 776</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TIMER","title":"<code>NT_S390_TIMER = 769</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TODCMP","title":"<code>NT_S390_TODCMP = 770</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_S390_TODPREG","title":"<code>NT_S390_TODPREG = 771</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_SIGINFO","title":"<code>NT_SIGINFO = 1397311305</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_TASKSTRUCT","title":"<code>NT_TASKSTRUCT = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.NT_X86_XSTATE","title":"<code>NT_X86_XSTATE = 514</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_DYNAMIC","title":"<code>PT_DYNAMIC = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_INTERP","title":"<code>PT_INTERP = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_LOAD","title":"<code>PT_LOAD = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_NOTE","title":"<code>PT_NOTE = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_NULL","title":"<code>PT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_PHDR","title":"<code>PT_PHDR = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_SHLIB","title":"<code>PT_SHLIB = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.PT_TLS","title":"<code>PT_TLS = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_DYNAMIC","title":"<code>SHT_DYNAMIC = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_DYNSYM","title":"<code>SHT_DYNSYM = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_HASH","title":"<code>SHT_HASH = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NOBITS","title":"<code>SHT_NOBITS = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NOTE","title":"<code>SHT_NOTE = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NULL","title":"<code>SHT_NULL = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_NUM","title":"<code>SHT_NUM = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_PROGBITS","title":"<code>SHT_PROGBITS = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_REL","title":"<code>SHT_REL = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_RELA","title":"<code>SHT_RELA = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_SHLIB","title":"<code>SHT_SHLIB = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_STRTAB","title":"<code>SHT_STRTAB = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.SHT_SYMTAB","title":"<code>SHT_SYMTAB = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_COMMON","title":"<code>STT_COMMON = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_FILE","title":"<code>STT_FILE = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_FUNC","title":"<code>STT_FUNC = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_NOTYPE","title":"<code>STT_NOTYPE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_OBJECT","title":"<code>STT_OBJECT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_SECTION","title":"<code>STT_SECTION = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/elftypes/#pwndbg.lib.elftypes.constants.STT_TLS","title":"<code>STT_TLS = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/funcparser/","title":"Funcparser","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.CAstNode","title":"<code>CAstNode = Union[c_ast.EllipsisParam, c_ast.PtrDecl, c_ast.ArrayDecl, c_ast.FuncDecl, c_ast.Struct, c_ast.Union, c_ast.Enum]</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.ExtractAllFuncDecls","title":"<code>ExtractAllFuncDecls(ast, verbose=False)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.ExtractFuncDecl","title":"<code>ExtractFuncDecl(node, verbose=False)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.ExtractFuncDeclFromSource","title":"<code>ExtractFuncDeclFromSource(source)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.Stringify","title":"<code>Stringify(X)</code>","text":""},{"location":"source/lib/funcparser/#pwndbg.lib.funcparser.extractTypeAndName","title":"<code>extractTypeAndName(n, defaultName=None)</code>","text":""},{"location":"source/lib/functions/","title":"Functions","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.functions","title":"<code>functions = {'ASN1_BIT_STRING_check': Function(type='int', derefcnt=0, name='ASN1_BIT_STRING_check', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=1, name='flags'), Argument(type='int', derefcnt=0, name='flags_len')]), 'ASN1_BIT_STRING_free': Function(type='void', derefcnt=0, name='ASN1_BIT_STRING_free', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='a')]), 'ASN1_BIT_STRING_get_bit': Function(type='int', derefcnt=0, name='ASN1_BIT_STRING_get_bit', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n')]), 'ASN1_BIT_STRING_name_print': Function(type='int', derefcnt=0, name='ASN1_BIT_STRING_name_print', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='ASN1_BIT_STRING', derefcnt=1, name='bs'), Argument(type='BIT_STRING_BITNAME', derefcnt=1, name='tbl'), Argument(type='int', derefcnt=0, name='indent')]), 'ASN1_BIT_STRING_new': Function(type='ASN1_BIT_STRING', derefcnt=1, name='ASN1_BIT_STRING_new', args=[]), 'ASN1_BIT_STRING_num_asc': Function(type='int', derefcnt=0, name='ASN1_BIT_STRING_num_asc', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='BIT_STRING_BITNAME', derefcnt=1, name='tbl')]), 'ASN1_BIT_STRING_set': Function(type='int', derefcnt=0, name='ASN1_BIT_STRING_set', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='length')]), 'ASN1_BIT_STRING_set_asc': Function(type='int', derefcnt=0, name='ASN1_BIT_STRING_set_asc', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='bs'), Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='value'), Argument(type='BIT_STRING_BITNAME', derefcnt=1, name='tbl')]), 'ASN1_BIT_STRING_set_bit': Function(type='int', derefcnt=0, name='ASN1_BIT_STRING_set_bit', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n'), Argument(type='int', derefcnt=0, name='value')]), 'ASN1_BMPSTRING_free': Function(type='void', derefcnt=0, name='ASN1_BMPSTRING_free', args=[Argument(type='ASN1_BMPSTRING', derefcnt=1, name='a')]), 'ASN1_BMPSTRING_new': Function(type='ASN1_BMPSTRING', derefcnt=1, name='ASN1_BMPSTRING_new', args=[]), 'ASN1_ENUMERATED_free': Function(type='void', derefcnt=0, name='ASN1_ENUMERATED_free', args=[Argument(type='ASN1_ENUMERATED', derefcnt=1, name='a')]), 'ASN1_ENUMERATED_get': Function(type='long', derefcnt=0, name='ASN1_ENUMERATED_get', args=[Argument(type='ASN1_ENUMERATED', derefcnt=1, name='a')]), 'ASN1_ENUMERATED_new': Function(type='ASN1_ENUMERATED', derefcnt=1, name='ASN1_ENUMERATED_new', args=[]), 'ASN1_ENUMERATED_set': Function(type='int', derefcnt=0, name='ASN1_ENUMERATED_set', args=[Argument(type='ASN1_ENUMERATED', derefcnt=1, name='a'), Argument(type='long', derefcnt=0, name='v')]), 'ASN1_ENUMERATED_to_BN': Function(type='BIGNUM', derefcnt=1, name='ASN1_ENUMERATED_to_BN', args=[Argument(type='ASN1_ENUMERATED', derefcnt=1, name='ai'), Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'ASN1_GENERALIZEDTIME_adj': Function(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='ASN1_GENERALIZEDTIME_adj', args=[Argument(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=0, name='t'), Argument(type='int', derefcnt=0, name='offset_day'), Argument(type='long', derefcnt=0, name='offset_sec')]), 'ASN1_GENERALIZEDTIME_check': Function(type='int', derefcnt=0, name='ASN1_GENERALIZEDTIME_check', args=[Argument(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='a')]), 'ASN1_GENERALIZEDTIME_free': Function(type='void', derefcnt=0, name='ASN1_GENERALIZEDTIME_free', args=[Argument(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='a')]), 'ASN1_GENERALIZEDTIME_new': Function(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='ASN1_GENERALIZEDTIME_new', args=[]), 'ASN1_GENERALIZEDTIME_print': Function(type='int', derefcnt=0, name='ASN1_GENERALIZEDTIME_print', args=[Argument(type='BIO', derefcnt=1, name='fp'), Argument(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='a')]), 'ASN1_GENERALIZEDTIME_set': Function(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='ASN1_GENERALIZEDTIME_set', args=[Argument(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=0, name='t')]), 'ASN1_GENERALIZEDTIME_set_string': Function(type='int', derefcnt=0, name='ASN1_GENERALIZEDTIME_set_string', args=[Argument(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='str')]), 'ASN1_GENERALSTRING_free': Function(type='void', derefcnt=0, name='ASN1_GENERALSTRING_free', args=[Argument(type='ASN1_GENERALSTRING', derefcnt=1, name='a')]), 'ASN1_GENERALSTRING_new': Function(type='ASN1_GENERALSTRING', derefcnt=1, name='ASN1_GENERALSTRING_new', args=[]), 'ASN1_IA5STRING_free': Function(type='void', derefcnt=0, name='ASN1_IA5STRING_free', args=[Argument(type='ASN1_IA5STRING', derefcnt=1, name='a')]), 'ASN1_IA5STRING_new': Function(type='ASN1_IA5STRING', derefcnt=1, name='ASN1_IA5STRING_new', args=[]), 'ASN1_INTEGER_cmp': Function(type='int', derefcnt=0, name='ASN1_INTEGER_cmp', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='x'), Argument(type='ASN1_INTEGER', derefcnt=1, name='y')]), 'ASN1_INTEGER_dup': Function(type='ASN1_INTEGER', derefcnt=1, name='ASN1_INTEGER_dup', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='x')]), 'ASN1_INTEGER_free': Function(type='void', derefcnt=0, name='ASN1_INTEGER_free', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='a')]), 'ASN1_INTEGER_get': Function(type='long', derefcnt=0, name='ASN1_INTEGER_get', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='a')]), 'ASN1_INTEGER_new': Function(type='ASN1_INTEGER', derefcnt=1, name='ASN1_INTEGER_new', args=[]), 'ASN1_INTEGER_set': Function(type='int', derefcnt=0, name='ASN1_INTEGER_set', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='a'), Argument(type='long', derefcnt=0, name='v')]), 'ASN1_INTEGER_to_BN': Function(type='BIGNUM', derefcnt=1, name='ASN1_INTEGER_to_BN', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='ai'), Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'ASN1_NULL_free': Function(type='void', derefcnt=0, name='ASN1_NULL_free', args=[Argument(type='ASN1_NULL', derefcnt=1, name='a')]), 'ASN1_NULL_new': Function(type='ASN1_NULL', derefcnt=1, name='ASN1_NULL_new', args=[]), 'ASN1_OBJECT_create': Function(type='ASN1_OBJECT', derefcnt=1, name='ASN1_OBJECT_create', args=[Argument(type='int', derefcnt=0, name='nid'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len'), Argument(type='char', derefcnt=1, name='sn'), Argument(type='char', derefcnt=1, name='ln')]), 'ASN1_OBJECT_free': Function(type='void', derefcnt=0, name='ASN1_OBJECT_free', args=[Argument(type='ASN1_OBJECT', derefcnt=1, name='a')]), 'ASN1_OBJECT_new': Function(type='ASN1_OBJECT', derefcnt=1, name='ASN1_OBJECT_new', args=[]), 'ASN1_OCTET_STRING_cmp': Function(type='int', derefcnt=0, name='ASN1_OCTET_STRING_cmp', args=[Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='a'), Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='b')]), 'ASN1_OCTET_STRING_dup': Function(type='ASN1_OCTET_STRING', derefcnt=1, name='ASN1_OCTET_STRING_dup', args=[Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='a')]), 'ASN1_OCTET_STRING_free': Function(type='void', derefcnt=0, name='ASN1_OCTET_STRING_free', args=[Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='a')]), 'ASN1_OCTET_STRING_new': Function(type='ASN1_OCTET_STRING', derefcnt=1, name='ASN1_OCTET_STRING_new', args=[]), 'ASN1_OCTET_STRING_set': Function(type='int', derefcnt=0, name='ASN1_OCTET_STRING_set', args=[Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='str'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'ASN1_PCTX_free': Function(type='void', derefcnt=0, name='ASN1_PCTX_free', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p')]), 'ASN1_PCTX_get_cert_flags': Function(type='unsigned', derefcnt=0, name='ASN1_PCTX_get_cert_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p')]), 'ASN1_PCTX_get_flags': Function(type='unsigned', derefcnt=0, name='ASN1_PCTX_get_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p')]), 'ASN1_PCTX_get_nm_flags': Function(type='unsigned', derefcnt=0, name='ASN1_PCTX_get_nm_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p')]), 'ASN1_PCTX_get_oid_flags': Function(type='unsigned', derefcnt=0, name='ASN1_PCTX_get_oid_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p')]), 'ASN1_PCTX_get_str_flags': Function(type='unsigned', derefcnt=0, name='ASN1_PCTX_get_str_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p')]), 'ASN1_PCTX_new': Function(type='ASN1_PCTX', derefcnt=1, name='ASN1_PCTX_new', args=[]), 'ASN1_PCTX_set_cert_flags': Function(type='void', derefcnt=0, name='ASN1_PCTX_set_cert_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'ASN1_PCTX_set_flags': Function(type='void', derefcnt=0, name='ASN1_PCTX_set_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'ASN1_PCTX_set_nm_flags': Function(type='void', derefcnt=0, name='ASN1_PCTX_set_nm_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'ASN1_PCTX_set_oid_flags': Function(type='void', derefcnt=0, name='ASN1_PCTX_set_oid_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'ASN1_PCTX_set_str_flags': Function(type='void', derefcnt=0, name='ASN1_PCTX_set_str_flags', args=[Argument(type='ASN1_PCTX', derefcnt=1, name='p'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'ASN1_PRINTABLESTRING_free': Function(type='void', derefcnt=0, name='ASN1_PRINTABLESTRING_free', args=[Argument(type='ASN1_PRINTABLESTRING', derefcnt=1, name='a')]), 'ASN1_PRINTABLESTRING_new': Function(type='ASN1_PRINTABLESTRING', derefcnt=1, name='ASN1_PRINTABLESTRING_new', args=[]), 'ASN1_PRINTABLE_free': Function(type='void', derefcnt=0, name='ASN1_PRINTABLE_free', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a')]), 'ASN1_PRINTABLE_new': Function(type='ASN1_STRING', derefcnt=1, name='ASN1_PRINTABLE_new', args=[]), 'ASN1_PRINTABLE_type': Function(type='int', derefcnt=0, name='ASN1_PRINTABLE_type', args=[Argument(type='unsigned', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='max')]), 'ASN1_STRING_TABLE_add': Function(type='int', derefcnt=0, name='ASN1_STRING_TABLE_add', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='long', derefcnt=0, name='arg1'), Argument(type='long', derefcnt=0, name='arg2'), Argument(type='unsigned', derefcnt=0, name='arg3'), Argument(type='unsigned', derefcnt=0, name='arg4')]), 'ASN1_STRING_TABLE_cleanup': Function(type='void', derefcnt=0, name='ASN1_STRING_TABLE_cleanup', args=[]), 'ASN1_STRING_TABLE_get': Function(type='ASN1_STRING_TABLE', derefcnt=1, name='ASN1_STRING_TABLE_get', args=[Argument(type='int', derefcnt=0, name='nid')]), 'ASN1_STRING_cmp': Function(type='int', derefcnt=0, name='ASN1_STRING_cmp', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a'), Argument(type='ASN1_STRING', derefcnt=1, name='b')]), 'ASN1_STRING_copy': Function(type='int', derefcnt=0, name='ASN1_STRING_copy', args=[Argument(type='ASN1_STRING', derefcnt=1, name='dst'), Argument(type='ASN1_STRING', derefcnt=1, name='str')]), 'ASN1_STRING_data': Function(type='unsigned', derefcnt=1, name='ASN1_STRING_data', args=[Argument(type='ASN1_STRING', derefcnt=1, name='x')]), 'ASN1_STRING_dup': Function(type='ASN1_STRING', derefcnt=1, name='ASN1_STRING_dup', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a')]), 'ASN1_STRING_free': Function(type='void', derefcnt=0, name='ASN1_STRING_free', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a')]), 'ASN1_STRING_get_default_mask': Function(type='unsigned', derefcnt=0, name='ASN1_STRING_get_default_mask', args=[]), 'ASN1_STRING_length': Function(type='int', derefcnt=0, name='ASN1_STRING_length', args=[Argument(type='ASN1_STRING', derefcnt=1, name='x')]), 'ASN1_STRING_length_set': Function(type='void', derefcnt=0, name='ASN1_STRING_length_set', args=[Argument(type='ASN1_STRING', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='n')]), 'ASN1_STRING_new': Function(type='ASN1_STRING', derefcnt=1, name='ASN1_STRING_new', args=[]), 'ASN1_STRING_print': Function(type='int', derefcnt=0, name='ASN1_STRING_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_STRING', derefcnt=1, name='v')]), 'ASN1_STRING_print_ex': Function(type='int', derefcnt=0, name='ASN1_STRING_print_ex', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='ASN1_STRING', derefcnt=1, name='str'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'ASN1_STRING_print_ex_fp': Function(type='int', derefcnt=0, name='ASN1_STRING_print_ex_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='ASN1_STRING', derefcnt=1, name='str'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'ASN1_STRING_set': Function(type='int', derefcnt=0, name='ASN1_STRING_set', args=[Argument(type='ASN1_STRING', derefcnt=1, name='str'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'ASN1_STRING_set0': Function(type='void', derefcnt=0, name='ASN1_STRING_set0', args=[Argument(type='ASN1_STRING', derefcnt=1, name='str'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'ASN1_STRING_set_by_NID': Function(type='ASN1_STRING', derefcnt=1, name='ASN1_STRING_set_by_NID', args=[Argument(type='ASN1_STRING', derefcnt=2, name='out'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='inlen'), Argument(type='int', derefcnt=0, name='inform'), Argument(type='int', derefcnt=0, name='nid')]), 'ASN1_STRING_set_default_mask': Function(type='void', derefcnt=0, name='ASN1_STRING_set_default_mask', args=[Argument(type='unsigned', derefcnt=0, name='mask')]), 'ASN1_STRING_set_default_mask_asc': Function(type='int', derefcnt=0, name='ASN1_STRING_set_default_mask_asc', args=[Argument(type='char', derefcnt=1, name='p')]), 'ASN1_STRING_to_UTF8': Function(type='int', derefcnt=0, name='ASN1_STRING_to_UTF8', args=[Argument(type='unsigned', derefcnt=2, name='out'), Argument(type='ASN1_STRING', derefcnt=1, name='in')]), 'ASN1_STRING_type': Function(type='int', derefcnt=0, name='ASN1_STRING_type', args=[Argument(type='ASN1_STRING', derefcnt=1, name='x')]), 'ASN1_STRING_type_new': Function(type='ASN1_STRING', derefcnt=1, name='ASN1_STRING_type_new', args=[Argument(type='int', derefcnt=0, name='type')]), 'ASN1_T61STRING_free': Function(type='void', derefcnt=0, name='ASN1_T61STRING_free', args=[Argument(type='ASN1_T61STRING', derefcnt=1, name='a')]), 'ASN1_T61STRING_new': Function(type='ASN1_T61STRING', derefcnt=1, name='ASN1_T61STRING_new', args=[]), 'ASN1_TIME_adj': Function(type='ASN1_TIME', derefcnt=1, name='ASN1_TIME_adj', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=0, name='t'), Argument(type='int', derefcnt=0, name='offset_day'), Argument(type='long', derefcnt=0, name='offset_sec')]), 'ASN1_TIME_check': Function(type='int', derefcnt=0, name='ASN1_TIME_check', args=[Argument(type='ASN1_TIME', derefcnt=1, name='t')]), 'ASN1_TIME_free': Function(type='void', derefcnt=0, name='ASN1_TIME_free', args=[Argument(type='ASN1_TIME', derefcnt=1, name='a')]), 'ASN1_TIME_new': Function(type='ASN1_TIME', derefcnt=1, name='ASN1_TIME_new', args=[]), 'ASN1_TIME_print': Function(type='int', derefcnt=0, name='ASN1_TIME_print', args=[Argument(type='BIO', derefcnt=1, name='fp'), Argument(type='ASN1_TIME', derefcnt=1, name='a')]), 'ASN1_TIME_set': Function(type='ASN1_TIME', derefcnt=1, name='ASN1_TIME_set', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=0, name='t')]), 'ASN1_TIME_set_string': Function(type='int', derefcnt=0, name='ASN1_TIME_set_string', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='str')]), 'ASN1_TIME_to_generalizedtime': Function(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='ASN1_TIME_to_generalizedtime', args=[Argument(type='ASN1_TIME', derefcnt=1, name='t'), Argument(type='ASN1_GENERALIZEDTIME', derefcnt=2, name='out')]), 'ASN1_TYPE_cmp': Function(type='int', derefcnt=0, name='ASN1_TYPE_cmp', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='ASN1_TYPE', derefcnt=1, name='b')]), 'ASN1_TYPE_free': Function(type='void', derefcnt=0, name='ASN1_TYPE_free', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a')]), 'ASN1_TYPE_get': Function(type='int', derefcnt=0, name='ASN1_TYPE_get', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a')]), 'ASN1_TYPE_get_int_octetstring': Function(type='int', derefcnt=0, name='ASN1_TYPE_get_int_octetstring', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='long', derefcnt=1, name='num'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='max_len')]), 'ASN1_TYPE_get_octetstring': Function(type='int', derefcnt=0, name='ASN1_TYPE_get_octetstring', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='max_len')]), 'ASN1_TYPE_new': Function(type='ASN1_TYPE', derefcnt=1, name='ASN1_TYPE_new', args=[]), 'ASN1_TYPE_set': Function(type='void', derefcnt=0, name='ASN1_TYPE_set', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='type'), Argument(type='void', derefcnt=1, name='value')]), 'ASN1_TYPE_set1': Function(type='int', derefcnt=0, name='ASN1_TYPE_set1', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='type'), Argument(type='void', derefcnt=1, name='value')]), 'ASN1_TYPE_set_int_octetstring': Function(type='int', derefcnt=0, name='ASN1_TYPE_set_int_octetstring', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='long', derefcnt=0, name='num'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'ASN1_TYPE_set_octetstring': Function(type='int', derefcnt=0, name='ASN1_TYPE_set_octetstring', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'ASN1_UNIVERSALSTRING_free': Function(type='void', derefcnt=0, name='ASN1_UNIVERSALSTRING_free', args=[Argument(type='ASN1_UNIVERSALSTRING', derefcnt=1, name='a')]), 'ASN1_UNIVERSALSTRING_new': Function(type='ASN1_UNIVERSALSTRING', derefcnt=1, name='ASN1_UNIVERSALSTRING_new', args=[]), 'ASN1_UNIVERSALSTRING_to_string': Function(type='int', derefcnt=0, name='ASN1_UNIVERSALSTRING_to_string', args=[Argument(type='ASN1_UNIVERSALSTRING', derefcnt=1, name='s')]), 'ASN1_UTCTIME_adj': Function(type='ASN1_UTCTIME', derefcnt=1, name='ASN1_UTCTIME_adj', args=[Argument(type='ASN1_UTCTIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=0, name='t'), Argument(type='int', derefcnt=0, name='offset_day'), Argument(type='long', derefcnt=0, name='offset_sec')]), 'ASN1_UTCTIME_check': Function(type='int', derefcnt=0, name='ASN1_UTCTIME_check', args=[Argument(type='ASN1_UTCTIME', derefcnt=1, name='a')]), 'ASN1_UTCTIME_cmp_time_t': Function(type='int', derefcnt=0, name='ASN1_UTCTIME_cmp_time_t', args=[Argument(type='ASN1_UTCTIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=0, name='t')]), 'ASN1_UTCTIME_free': Function(type='void', derefcnt=0, name='ASN1_UTCTIME_free', args=[Argument(type='ASN1_UTCTIME', derefcnt=1, name='a')]), 'ASN1_UTCTIME_new': Function(type='ASN1_UTCTIME', derefcnt=1, name='ASN1_UTCTIME_new', args=[]), 'ASN1_UTCTIME_print': Function(type='int', derefcnt=0, name='ASN1_UTCTIME_print', args=[Argument(type='BIO', derefcnt=1, name='fp'), Argument(type='ASN1_UTCTIME', derefcnt=1, name='a')]), 'ASN1_UTCTIME_set': Function(type='ASN1_UTCTIME', derefcnt=1, name='ASN1_UTCTIME_set', args=[Argument(type='ASN1_UTCTIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=0, name='t')]), 'ASN1_UTCTIME_set_string': Function(type='int', derefcnt=0, name='ASN1_UTCTIME_set_string', args=[Argument(type='ASN1_UTCTIME', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='str')]), 'ASN1_UTF8STRING_free': Function(type='void', derefcnt=0, name='ASN1_UTF8STRING_free', args=[Argument(type='ASN1_UTF8STRING', derefcnt=1, name='a')]), 'ASN1_UTF8STRING_new': Function(type='ASN1_UTF8STRING', derefcnt=1, name='ASN1_UTF8STRING_new', args=[]), 'ASN1_VISIBLESTRING_free': Function(type='void', derefcnt=0, name='ASN1_VISIBLESTRING_free', args=[Argument(type='ASN1_VISIBLESTRING', derefcnt=1, name='a')]), 'ASN1_VISIBLESTRING_new': Function(type='ASN1_VISIBLESTRING', derefcnt=1, name='ASN1_VISIBLESTRING_new', args=[]), 'ASN1_add_oid_module': Function(type='void', derefcnt=0, name='ASN1_add_oid_module', args=[]), 'ASN1_bn_print': Function(type='int', derefcnt=0, name='ASN1_bn_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='char', derefcnt=1, name='number'), Argument(type='BIGNUM', derefcnt=1, name='num'), Argument(type='unsigned', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='off')]), 'ASN1_check_infinite_end': Function(type='int', derefcnt=0, name='ASN1_check_infinite_end', args=[Argument(type='unsigned', derefcnt=2, name='p'), Argument(type='long', derefcnt=0, name='len')]), 'ASN1_const_check_infinite_end': Function(type='int', derefcnt=0, name='ASN1_const_check_infinite_end', args=[Argument(type='unsigned', derefcnt=2, name='p'), Argument(type='long', derefcnt=0, name='len')]), 'ASN1_d2i_bio': Function(type='void', derefcnt=1, name='ASN1_d2i_bio', args=[Argument(type='void', derefcnt=1, name='xnew'), Argument(type='d2i_of_void', derefcnt=1, name='d2i'), Argument(type='BIO', derefcnt=1, name='in'), Argument(type='void', derefcnt=2, name='x')]), 'ASN1_d2i_fp': Function(type='void', derefcnt=1, name='ASN1_d2i_fp', args=[Argument(type='void', derefcnt=1, name='xnew'), Argument(type='d2i_of_void', derefcnt=1, name='d2i'), Argument(type='FILE', derefcnt=1, name='in'), Argument(type='void', derefcnt=2, name='x')]), 'ASN1_digest': Function(type='int', derefcnt=0, name='ASN1_digest', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='char', derefcnt=1, name='data'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'ASN1_dup': Function(type='void', derefcnt=1, name='ASN1_dup', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='d2i_of_void', derefcnt=1, name='d2i'), Argument(type='void', derefcnt=1, name='x')]), 'ASN1_generate_nconf': Function(type='ASN1_TYPE', derefcnt=1, name='ASN1_generate_nconf', args=[Argument(type='char', derefcnt=1, name='str'), Argument(type='CONF', derefcnt=1, name='nconf')]), 'ASN1_generate_v3': Function(type='ASN1_TYPE', derefcnt=1, name='ASN1_generate_v3', args=[Argument(type='char', derefcnt=1, name='str'), Argument(type='X509V3_CTX', derefcnt=1, name='cnf')]), 'ASN1_get_object': Function(type='int', derefcnt=0, name='ASN1_get_object', args=[Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=1, name='plength'), Argument(type='int', derefcnt=1, name='ptag'), Argument(type='int', derefcnt=1, name='pclass'), Argument(type='long', derefcnt=0, name='omax')]), 'ASN1_i2d_bio': Function(type='int', derefcnt=0, name='ASN1_i2d_bio', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='BIO', derefcnt=1, name='out'), Argument(type='unsigned', derefcnt=1, name='x')]), 'ASN1_i2d_fp': Function(type='int', derefcnt=0, name='ASN1_i2d_fp', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='FILE', derefcnt=1, name='out'), Argument(type='void', derefcnt=1, name='x')]), 'ASN1_item_d2i': Function(type='ASN1_VALUE', derefcnt=1, name='ASN1_item_d2i', args=[Argument(type='ASN1_VALUE', derefcnt=2, name='val'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'ASN1_item_d2i_bio': Function(type='void', derefcnt=1, name='ASN1_item_d2i_bio', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='BIO', derefcnt=1, name='in'), Argument(type='void', derefcnt=1, name='x')]), 'ASN1_item_d2i_fp': Function(type='void', derefcnt=1, name='ASN1_item_d2i_fp', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='FILE', derefcnt=1, name='in'), Argument(type='void', derefcnt=1, name='x')]), 'ASN1_item_digest': Function(type='int', derefcnt=0, name='ASN1_item_digest', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='void', derefcnt=1, name='data'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'ASN1_item_dup': Function(type='void', derefcnt=1, name='ASN1_item_dup', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='void', derefcnt=1, name='x')]), 'ASN1_item_free': Function(type='void', derefcnt=0, name='ASN1_item_free', args=[Argument(type='ASN1_VALUE', derefcnt=1, name='val'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'ASN1_item_i2d': Function(type='int', derefcnt=0, name='ASN1_item_i2d', args=[Argument(type='ASN1_VALUE', derefcnt=1, name='val'), Argument(type='unsigned', derefcnt=2, name='out'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'ASN1_item_i2d_bio': Function(type='int', derefcnt=0, name='ASN1_item_i2d_bio', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='BIO', derefcnt=1, name='out'), Argument(type='void', derefcnt=1, name='x')]), 'ASN1_item_i2d_fp': Function(type='int', derefcnt=0, name='ASN1_item_i2d_fp', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='FILE', derefcnt=1, name='out'), Argument(type='void', derefcnt=1, name='x')]), 'ASN1_item_ndef_i2d': Function(type='int', derefcnt=0, name='ASN1_item_ndef_i2d', args=[Argument(type='ASN1_VALUE', derefcnt=1, name='val'), Argument(type='unsigned', derefcnt=2, name='out'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'ASN1_item_new': Function(type='ASN1_VALUE', derefcnt=1, name='ASN1_item_new', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'ASN1_item_pack': Function(type='ASN1_STRING', derefcnt=1, name='ASN1_item_pack', args=[Argument(type='void', derefcnt=1, name='obj'), Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='ASN1_OCTET_STRING', derefcnt=2, name='oct')]), 'ASN1_item_print': Function(type='int', derefcnt=0, name='ASN1_item_print', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='ASN1_VALUE', derefcnt=1, name='ifld'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='ASN1_PCTX', derefcnt=1, name='pctx')]), 'ASN1_item_sign': Function(type='int', derefcnt=0, name='ASN1_item_sign', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='X509_ALGOR', derefcnt=1, name='algor1'), Argument(type='X509_ALGOR', derefcnt=1, name='algor2'), Argument(type='ASN1_BIT_STRING', derefcnt=1, name='signature'), Argument(type='void', derefcnt=1, name='data'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='type')]), 'ASN1_item_sign_ctx': Function(type='int', derefcnt=0, name='ASN1_item_sign_ctx', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='X509_ALGOR', derefcnt=1, name='algor1'), Argument(type='X509_ALGOR', derefcnt=1, name='algor2'), Argument(type='ASN1_BIT_STRING', derefcnt=1, name='signature'), Argument(type='void', derefcnt=1, name='asn'), Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'ASN1_item_unpack': Function(type='void', derefcnt=1, name='ASN1_item_unpack', args=[Argument(type='ASN1_STRING', derefcnt=1, name='oct'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'ASN1_item_verify': Function(type='int', derefcnt=0, name='ASN1_item_verify', args=[Argument(type='ASN1_ITEM', derefcnt=1, name='it'), Argument(type='X509_ALGOR', derefcnt=1, name='algor1'), Argument(type='ASN1_BIT_STRING', derefcnt=1, name='signature'), Argument(type='void', derefcnt=1, name='data'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'ASN1_mbstring_copy': Function(type='int', derefcnt=0, name='ASN1_mbstring_copy', args=[Argument(type='ASN1_STRING', derefcnt=2, name='out'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='inform'), Argument(type='unsigned', derefcnt=0, name='mask')]), 'ASN1_mbstring_ncopy': Function(type='int', derefcnt=0, name='ASN1_mbstring_ncopy', args=[Argument(type='ASN1_STRING', derefcnt=2, name='out'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='inform'), Argument(type='unsigned', derefcnt=0, name='mask'), Argument(type='long', derefcnt=0, name='minsize'), Argument(type='long', derefcnt=0, name='maxsize')]), 'ASN1_object_size': Function(type='int', derefcnt=0, name='ASN1_object_size', args=[Argument(type='int', derefcnt=0, name='constructed'), Argument(type='int', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='tag')]), 'ASN1_pack_string': Function(type='ASN1_STRING', derefcnt=1, name='ASN1_pack_string', args=[Argument(type='void', derefcnt=1, name='obj'), Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='ASN1_OCTET_STRING', derefcnt=2, name='oct')]), 'ASN1_parse': Function(type='int', derefcnt=0, name='ASN1_parse', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='unsigned', derefcnt=1, name='pp'), Argument(type='long', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='indent')]), 'ASN1_parse_dump': Function(type='int', derefcnt=0, name='ASN1_parse_dump', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='unsigned', derefcnt=1, name='pp'), Argument(type='long', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='int', derefcnt=0, name='dump')]), 'ASN1_put_eoc': Function(type='int', derefcnt=0, name='ASN1_put_eoc', args=[Argument(type='unsigned', derefcnt=2, name='pp')]), 'ASN1_put_object': Function(type='void', derefcnt=0, name='ASN1_put_object', args=[Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='int', derefcnt=0, name='constructed'), Argument(type='int', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='tag'), Argument(type='int', derefcnt=0, name='xclass')]), 'ASN1_seq_pack': Function(type='unsigned', derefcnt=1, name='ASN1_seq_pack', args=[Argument(type='stack_st_OPENSSL_BLOCK', derefcnt=1, name='safes'), Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='unsigned', derefcnt=2, name='buf'), Argument(type='int', derefcnt=1, name='len')]), 'ASN1_seq_unpack': Function(type='stack_st_OPENSSL_BLOCK', derefcnt=1, name='ASN1_seq_unpack', args=[Argument(type='unsigned', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len'), Argument(type='d2i_of_void', derefcnt=1, name='d2i'), Argument(type='void', derefcnt=0, name='free_func')]), 'ASN1_sign': Function(type='int', derefcnt=0, name='ASN1_sign', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='X509_ALGOR', derefcnt=1, name='algor1'), Argument(type='X509_ALGOR', derefcnt=1, name='algor2'), Argument(type='ASN1_BIT_STRING', derefcnt=1, name='signature'), Argument(type='char', derefcnt=1, name='data'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='type')]), 'ASN1_tag2bit': Function(type='unsigned', derefcnt=0, name='ASN1_tag2bit', args=[Argument(type='int', derefcnt=0, name='tag')]), 'ASN1_tag2str': Function(type='char', derefcnt=1, name='ASN1_tag2str', args=[Argument(type='int', derefcnt=0, name='tag')]), 'ASN1_unpack_string': Function(type='void', derefcnt=1, name='ASN1_unpack_string', args=[Argument(type='ASN1_STRING', derefcnt=1, name='oct'), Argument(type='d2i_of_void', derefcnt=1, name='d2i')]), 'ASN1_verify': Function(type='int', derefcnt=0, name='ASN1_verify', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='X509_ALGOR', derefcnt=1, name='algor1'), Argument(type='ASN1_BIT_STRING', derefcnt=1, name='signature'), Argument(type='char', derefcnt=1, name='data'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'BIO_accept': Function(type='int', derefcnt=0, name='BIO_accept', args=[Argument(type='int', derefcnt=0, name='sock'), Argument(type='char', derefcnt=2, name='ip_port')]), 'BIO_asn1_get_prefix': Function(type='int', derefcnt=0, name='BIO_asn1_get_prefix', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='asn1_ps_func', derefcnt=2, name='pprefix'), Argument(type='asn1_ps_func', derefcnt=2, name='pprefix_free')]), 'BIO_asn1_get_suffix': Function(type='int', derefcnt=0, name='BIO_asn1_get_suffix', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='asn1_ps_func', derefcnt=2, name='psuffix'), Argument(type='asn1_ps_func', derefcnt=2, name='psuffix_free')]), 'BIO_asn1_set_prefix': Function(type='int', derefcnt=0, name='BIO_asn1_set_prefix', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='asn1_ps_func', derefcnt=1, name='prefix'), Argument(type='asn1_ps_func', derefcnt=1, name='prefix_free')]), 'BIO_asn1_set_suffix': Function(type='int', derefcnt=0, name='BIO_asn1_set_suffix', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='asn1_ps_func', derefcnt=1, name='suffix'), Argument(type='asn1_ps_func', derefcnt=1, name='suffix_free')]), 'BIO_callback_ctrl': Function(type='long', derefcnt=0, name='BIO_callback_ctrl', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='void', derefcnt=0, name='fp')]), 'BIO_clear_flags': Function(type='void', derefcnt=0, name='BIO_clear_flags', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='flags')]), 'BIO_copy_next_retry': Function(type='void', derefcnt=0, name='BIO_copy_next_retry', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_ctrl': Function(type='long', derefcnt=0, name='BIO_ctrl', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg'), Argument(type='void', derefcnt=1, name='parg')]), 'BIO_ctrl_get_read_request': Function(type='size_t', derefcnt=0, name='BIO_ctrl_get_read_request', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_ctrl_get_write_guarantee': Function(type='size_t', derefcnt=0, name='BIO_ctrl_get_write_guarantee', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_ctrl_pending': Function(type='size_t', derefcnt=0, name='BIO_ctrl_pending', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_ctrl_reset_read_request': Function(type='int', derefcnt=0, name='BIO_ctrl_reset_read_request', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_ctrl_wpending': Function(type='size_t', derefcnt=0, name='BIO_ctrl_wpending', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_debug_callback': Function(type='long', derefcnt=0, name='BIO_debug_callback', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='char', derefcnt=1, name='argp'), Argument(type='int', derefcnt=0, name='argi'), Argument(type='long', derefcnt=0, name='argl'), Argument(type='long', derefcnt=0, name='ret')]), 'BIO_dgram_non_fatal_error': Function(type='int', derefcnt=0, name='BIO_dgram_non_fatal_error', args=[Argument(type='int', derefcnt=0, name='error')]), 'BIO_dump': Function(type='int', derefcnt=0, name='BIO_dump', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='char', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'BIO_dump_cb': Function(type='int', derefcnt=0, name='BIO_dump_cb', args=[Argument(type='int', derefcnt=0, name='cb'), Argument(type='void', derefcnt=1, name='u'), Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='len')]), 'BIO_dump_fp': Function(type='int', derefcnt=0, name='BIO_dump_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='len')]), 'BIO_dump_indent': Function(type='int', derefcnt=0, name='BIO_dump_indent', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='char', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='indent')]), 'BIO_dump_indent_cb': Function(type='int', derefcnt=0, name='BIO_dump_indent_cb', args=[Argument(type='int', derefcnt=0, name='cb'), Argument(type='void', derefcnt=1, name='u'), Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='indent')]), 'BIO_dump_indent_fp': Function(type='int', derefcnt=0, name='BIO_dump_indent_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='indent')]), 'BIO_dup_chain': Function(type='BIO', derefcnt=1, name='BIO_dup_chain', args=[Argument(type='BIO', derefcnt=1, name='in')]), 'BIO_f_asn1': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_asn1', args=[]), 'BIO_f_base64': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_base64', args=[]), 'BIO_f_buffer': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_buffer', args=[]), 'BIO_f_cipher': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_cipher', args=[]), 'BIO_f_md': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_md', args=[]), 'BIO_f_nbio_test': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_nbio_test', args=[]), 'BIO_f_null': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_null', args=[]), 'BIO_f_reliable': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_reliable', args=[]), 'BIO_f_ssl': Function(type='BIO_METHOD', derefcnt=1, name='BIO_f_ssl', args=[]), 'BIO_fd_non_fatal_error': Function(type='int', derefcnt=0, name='BIO_fd_non_fatal_error', args=[Argument(type='int', derefcnt=0, name='error')]), 'BIO_fd_should_retry': Function(type='int', derefcnt=0, name='BIO_fd_should_retry', args=[Argument(type='int', derefcnt=0, name='i')]), 'BIO_find_type': Function(type='BIO', derefcnt=1, name='BIO_find_type', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='bio_type')]), 'BIO_free': Function(type='int', derefcnt=0, name='BIO_free', args=[Argument(type='BIO', derefcnt=1, name='a')]), 'BIO_free_all': Function(type='void', derefcnt=0, name='BIO_free_all', args=[Argument(type='BIO', derefcnt=1, name='a')]), 'BIO_get_accept_socket': Function(type='int', derefcnt=0, name='BIO_get_accept_socket', args=[Argument(type='char', derefcnt=1, name='host_port'), Argument(type='int', derefcnt=0, name='mode')]), 'BIO_get_callback': Function(type='long', derefcnt=0, name='BIO_get_callback', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_get_callback_arg': Function(type='char', derefcnt=1, name='BIO_get_callback_arg', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_get_ex_data': Function(type='void', derefcnt=1, name='BIO_get_ex_data', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='int', derefcnt=0, name='idx')]), 'BIO_get_ex_new_index': Function(type='int', derefcnt=0, name='BIO_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'BIO_get_host_ip': Function(type='int', derefcnt=0, name='BIO_get_host_ip', args=[Argument(type='char', derefcnt=1, name='str'), Argument(type='unsigned', derefcnt=1, name='ip')]), 'BIO_get_port': Function(type='int', derefcnt=0, name='BIO_get_port', args=[Argument(type='char', derefcnt=1, name='str'), Argument(type='unsigned', derefcnt=1, name='port_ptr')]), 'BIO_get_retry_BIO': Function(type='BIO', derefcnt=1, name='BIO_get_retry_BIO', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='int', derefcnt=1, name='reason')]), 'BIO_get_retry_reason': Function(type='int', derefcnt=0, name='BIO_get_retry_reason', args=[Argument(type='BIO', derefcnt=1, name='bio')]), 'BIO_gethostbyname': Function(type='hostent', derefcnt=1, name='BIO_gethostbyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'BIO_gets': Function(type='int', derefcnt=0, name='BIO_gets', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='size')]), 'BIO_indent': Function(type='int', derefcnt=0, name='BIO_indent', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='int', derefcnt=0, name='max')]), 'BIO_int_ctrl': Function(type='long', derefcnt=0, name='BIO_int_ctrl', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg'), Argument(type='int', derefcnt=0, name='iarg')]), 'BIO_method_name': Function(type='char', derefcnt=1, name='BIO_method_name', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_method_type': Function(type='int', derefcnt=0, name='BIO_method_type', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_new': Function(type='BIO', derefcnt=1, name='BIO_new', args=[Argument(type='BIO_METHOD', derefcnt=1, name='type')]), 'BIO_new_NDEF': Function(type='BIO', derefcnt=1, name='BIO_new_NDEF', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='ASN1_VALUE', derefcnt=1, name='val'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'BIO_new_PKCS7': Function(type='BIO', derefcnt=1, name='BIO_new_PKCS7', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='PKCS7', derefcnt=1, name='p7')]), 'BIO_new_accept': Function(type='BIO', derefcnt=1, name='BIO_new_accept', args=[Argument(type='char', derefcnt=1, name='host_port')]), 'BIO_new_bio_pair': Function(type='int', derefcnt=0, name='BIO_new_bio_pair', args=[Argument(type='BIO', derefcnt=2, name='bio1'), Argument(type='size_t', derefcnt=0, name='writebuf1'), Argument(type='BIO', derefcnt=2, name='bio2'), Argument(type='size_t', derefcnt=0, name='writebuf2')]), 'BIO_new_buffer_ssl_connect': Function(type='BIO', derefcnt=1, name='BIO_new_buffer_ssl_connect', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'BIO_new_connect': Function(type='BIO', derefcnt=1, name='BIO_new_connect', args=[Argument(type='char', derefcnt=1, name='host_port')]), 'BIO_new_dgram': Function(type='BIO', derefcnt=1, name='BIO_new_dgram', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='close_flag')]), 'BIO_new_fd': Function(type='BIO', derefcnt=1, name='BIO_new_fd', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='close_flag')]), 'BIO_new_file': Function(type='BIO', derefcnt=1, name='BIO_new_file', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='char', derefcnt=1, name='mode')]), 'BIO_new_fp': Function(type='BIO', derefcnt=1, name='BIO_new_fp', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='int', derefcnt=0, name='close_flag')]), 'BIO_new_mem_buf': Function(type='BIO', derefcnt=1, name='BIO_new_mem_buf', args=[Argument(type='void', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'BIO_new_socket': Function(type='BIO', derefcnt=1, name='BIO_new_socket', args=[Argument(type='int', derefcnt=0, name='sock'), Argument(type='int', derefcnt=0, name='close_flag')]), 'BIO_new_ssl': Function(type='BIO', derefcnt=1, name='BIO_new_ssl', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='client')]), 'BIO_new_ssl_connect': Function(type='BIO', derefcnt=1, name='BIO_new_ssl_connect', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'BIO_next': Function(type='BIO', derefcnt=1, name='BIO_next', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_nread': Function(type='int', derefcnt=0, name='BIO_nread', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='char', derefcnt=2, name='buf'), Argument(type='int', derefcnt=0, name='num')]), 'BIO_nread0': Function(type='int', derefcnt=0, name='BIO_nread0', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='char', derefcnt=2, name='buf')]), 'BIO_number_read': Function(type='unsigned', derefcnt=0, name='BIO_number_read', args=[Argument(type='BIO', derefcnt=1, name='bio')]), 'BIO_number_written': Function(type='unsigned', derefcnt=0, name='BIO_number_written', args=[Argument(type='BIO', derefcnt=1, name='bio')]), 'BIO_nwrite': Function(type='int', derefcnt=0, name='BIO_nwrite', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='char', derefcnt=2, name='buf'), Argument(type='int', derefcnt=0, name='num')]), 'BIO_nwrite0': Function(type='int', derefcnt=0, name='BIO_nwrite0', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='char', derefcnt=2, name='buf')]), 'BIO_pop': Function(type='BIO', derefcnt=1, name='BIO_pop', args=[Argument(type='BIO', derefcnt=1, name='b')]), 'BIO_printf': Function(type='int', derefcnt=0, name='BIO_printf', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'BIO_ptr_ctrl': Function(type='char', derefcnt=1, name='BIO_ptr_ctrl', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg')]), 'BIO_push': Function(type='BIO', derefcnt=1, name='BIO_push', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='BIO', derefcnt=1, name='append')]), 'BIO_puts': Function(type='int', derefcnt=0, name='BIO_puts', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='char', derefcnt=1, name='buf')]), 'BIO_read': Function(type='int', derefcnt=0, name='BIO_read', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'BIO_s_accept': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_accept', args=[]), 'BIO_s_bio': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_bio', args=[]), 'BIO_s_connect': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_connect', args=[]), 'BIO_s_datagram': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_datagram', args=[]), 'BIO_s_fd': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_fd', args=[]), 'BIO_s_file': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_file', args=[]), 'BIO_s_log': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_log', args=[]), 'BIO_s_mem': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_mem', args=[]), 'BIO_s_null': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_null', args=[]), 'BIO_s_socket': Function(type='BIO_METHOD', derefcnt=1, name='BIO_s_socket', args=[]), 'BIO_set': Function(type='int', derefcnt=0, name='BIO_set', args=[Argument(type='BIO', derefcnt=1, name='a'), Argument(type='BIO_METHOD', derefcnt=1, name='type')]), 'BIO_set_callback': Function(type='void', derefcnt=0, name='BIO_set_callback', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='long', derefcnt=0, name='callback')]), 'BIO_set_callback_arg': Function(type='void', derefcnt=0, name='BIO_set_callback_arg', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='char', derefcnt=1, name='arg')]), 'BIO_set_cipher': Function(type='void', derefcnt=0, name='BIO_set_cipher', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='EVP_CIPHER', derefcnt=1, name='c'), Argument(type='unsigned', derefcnt=1, name='k'), Argument(type='unsigned', derefcnt=1, name='i'), Argument(type='int', derefcnt=0, name='enc')]), 'BIO_set_ex_data': Function(type='int', derefcnt=0, name='BIO_set_ex_data', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='data')]), 'BIO_set_flags': Function(type='void', derefcnt=0, name='BIO_set_flags', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='flags')]), 'BIO_set_tcp_ndelay': Function(type='int', derefcnt=0, name='BIO_set_tcp_ndelay', args=[Argument(type='int', derefcnt=0, name='sock'), Argument(type='int', derefcnt=0, name='turn_on')]), 'BIO_snprintf': Function(type='int', derefcnt=0, name='BIO_snprintf', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'BIO_sock_cleanup': Function(type='void', derefcnt=0, name='BIO_sock_cleanup', args=[]), 'BIO_sock_error': Function(type='int', derefcnt=0, name='BIO_sock_error', args=[Argument(type='int', derefcnt=0, name='sock')]), 'BIO_sock_init': Function(type='int', derefcnt=0, name='BIO_sock_init', args=[]), 'BIO_sock_non_fatal_error': Function(type='int', derefcnt=0, name='BIO_sock_non_fatal_error', args=[Argument(type='int', derefcnt=0, name='error')]), 'BIO_sock_should_retry': Function(type='int', derefcnt=0, name='BIO_sock_should_retry', args=[Argument(type='int', derefcnt=0, name='i')]), 'BIO_socket_ioctl': Function(type='int', derefcnt=0, name='BIO_socket_ioctl', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='long', derefcnt=0, name='type'), Argument(type='void', derefcnt=1, name='arg')]), 'BIO_socket_nbio': Function(type='int', derefcnt=0, name='BIO_socket_nbio', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='mode')]), 'BIO_ssl_copy_session_id': Function(type='int', derefcnt=0, name='BIO_ssl_copy_session_id', args=[Argument(type='BIO', derefcnt=1, name='to'), Argument(type='BIO', derefcnt=1, name='from')]), 'BIO_ssl_shutdown': Function(type='void', derefcnt=0, name='BIO_ssl_shutdown', args=[Argument(type='BIO', derefcnt=1, name='ssl_bio')]), 'BIO_test_flags': Function(type='int', derefcnt=0, name='BIO_test_flags', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='flags')]), 'BIO_vfree': Function(type='void', derefcnt=0, name='BIO_vfree', args=[Argument(type='BIO', derefcnt=1, name='a')]), 'BIO_vprintf': Function(type='int', derefcnt=0, name='BIO_vprintf', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='args')]), 'BIO_vsnprintf': Function(type='int', derefcnt=0, name='BIO_vsnprintf', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='args')]), 'BIO_write': Function(type='int', derefcnt=0, name='BIO_write', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'BN_BLINDING_convert': Function(type='int', derefcnt=0, name='BN_BLINDING_convert', args=[Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='BN_BLINDING', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_BLINDING_convert_ex': Function(type='int', derefcnt=0, name='BN_BLINDING_convert_ex', args=[Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BN_BLINDING', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='arg3')]), 'BN_BLINDING_create_param': Function(type='BN_BLINDING', derefcnt=1, name='BN_BLINDING_create_param', args=[Argument(type='BN_BLINDING', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='e'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='bn_mod_exp'), Argument(type='BN_MONT_CTX', derefcnt=1, name='m_ctx')]), 'BN_BLINDING_free': Function(type='void', derefcnt=0, name='BN_BLINDING_free', args=[Argument(type='BN_BLINDING', derefcnt=1, name='b')]), 'BN_BLINDING_get_flags': Function(type='unsigned', derefcnt=0, name='BN_BLINDING_get_flags', args=[Argument(type='BN_BLINDING', derefcnt=1, name='arg0')]), 'BN_BLINDING_get_thread_id': Function(type='unsigned', derefcnt=0, name='BN_BLINDING_get_thread_id', args=[Argument(type='BN_BLINDING', derefcnt=1, name='arg0')]), 'BN_BLINDING_invert': Function(type='int', derefcnt=0, name='BN_BLINDING_invert', args=[Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='BN_BLINDING', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_BLINDING_invert_ex': Function(type='int', derefcnt=0, name='BN_BLINDING_invert_ex', args=[Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BN_BLINDING', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='arg3')]), 'BN_BLINDING_new': Function(type='BN_BLINDING', derefcnt=1, name='BN_BLINDING_new', args=[Argument(type='BIGNUM', derefcnt=1, name='A'), Argument(type='BIGNUM', derefcnt=1, name='Ai'), Argument(type='BIGNUM', derefcnt=1, name='mod')]), 'BN_BLINDING_set_flags': Function(type='void', derefcnt=0, name='BN_BLINDING_set_flags', args=[Argument(type='BN_BLINDING', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=0, name='arg1')]), 'BN_BLINDING_set_thread_id': Function(type='void', derefcnt=0, name='BN_BLINDING_set_thread_id', args=[Argument(type='BN_BLINDING', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=0, name='arg1')]), 'BN_BLINDING_thread_id': Function(type='CRYPTO_THREADID', derefcnt=1, name='BN_BLINDING_thread_id', args=[Argument(type='BN_BLINDING', derefcnt=1, name='arg0')]), 'BN_BLINDING_update': Function(type='int', derefcnt=0, name='BN_BLINDING_update', args=[Argument(type='BN_BLINDING', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_CTX_end': Function(type='void', derefcnt=0, name='BN_CTX_end', args=[Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_CTX_free': Function(type='void', derefcnt=0, name='BN_CTX_free', args=[Argument(type='BN_CTX', derefcnt=1, name='c')]), 'BN_CTX_get': Function(type='BIGNUM', derefcnt=1, name='BN_CTX_get', args=[Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_CTX_init': Function(type='void', derefcnt=0, name='BN_CTX_init', args=[Argument(type='BN_CTX', derefcnt=1, name='c')]), 'BN_CTX_new': Function(type='BN_CTX', derefcnt=1, name='BN_CTX_new', args=[]), 'BN_CTX_start': Function(type='void', derefcnt=0, name='BN_CTX_start', args=[Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GENCB_call': Function(type='int', derefcnt=0, name='BN_GENCB_call', args=[Argument(type='BN_GENCB', derefcnt=1, name='cb'), Argument(type='int', derefcnt=0, name='a'), Argument(type='int', derefcnt=0, name='b')]), 'BN_GF2m_add': Function(type='int', derefcnt=0, name='BN_GF2m_add', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_GF2m_arr2poly': Function(type='int', derefcnt=0, name='BN_GF2m_arr2poly', args=[Argument(type='int', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_GF2m_mod': Function(type='int', derefcnt=0, name='BN_GF2m_mod', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p')]), 'BN_GF2m_mod_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=1, name='p')]), 'BN_GF2m_mod_div': Function(type='int', derefcnt=0, name='BN_GF2m_mod_div', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_div_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_div_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='int', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_exp': Function(type='int', derefcnt=0, name='BN_GF2m_mod_exp', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_exp_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_exp_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='int', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_inv': Function(type='int', derefcnt=0, name='BN_GF2m_mod_inv', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_inv_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_inv_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='int', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_mul': Function(type='int', derefcnt=0, name='BN_GF2m_mod_mul', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_mul_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_mul_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='int', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_solve_quad': Function(type='int', derefcnt=0, name='BN_GF2m_mod_solve_quad', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_solve_quad_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_solve_quad_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_sqr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_sqr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_sqr_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_sqr_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_sqrt': Function(type='int', derefcnt=0, name='BN_GF2m_mod_sqrt', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_mod_sqrt_arr': Function(type='int', derefcnt=0, name='BN_GF2m_mod_sqrt_arr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_GF2m_poly2arr': Function(type='int', derefcnt=0, name='BN_GF2m_poly2arr', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=1, name='p'), Argument(type='int', derefcnt=0, name='max')]), 'BN_MONT_CTX_copy': Function(type='BN_MONT_CTX', derefcnt=1, name='BN_MONT_CTX_copy', args=[Argument(type='BN_MONT_CTX', derefcnt=1, name='to'), Argument(type='BN_MONT_CTX', derefcnt=1, name='from')]), 'BN_MONT_CTX_free': Function(type='void', derefcnt=0, name='BN_MONT_CTX_free', args=[Argument(type='BN_MONT_CTX', derefcnt=1, name='mont')]), 'BN_MONT_CTX_init': Function(type='void', derefcnt=0, name='BN_MONT_CTX_init', args=[Argument(type='BN_MONT_CTX', derefcnt=1, name='ctx')]), 'BN_MONT_CTX_new': Function(type='BN_MONT_CTX', derefcnt=1, name='BN_MONT_CTX_new', args=[]), 'BN_MONT_CTX_set': Function(type='int', derefcnt=0, name='BN_MONT_CTX_set', args=[Argument(type='BN_MONT_CTX', derefcnt=1, name='mont'), Argument(type='BIGNUM', derefcnt=1, name='mod'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_MONT_CTX_set_locked': Function(type='BN_MONT_CTX', derefcnt=1, name='BN_MONT_CTX_set_locked', args=[Argument(type='BN_MONT_CTX', derefcnt=2, name='pmont'), Argument(type='int', derefcnt=0, name='lock'), Argument(type='BIGNUM', derefcnt=1, name='mod'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_RECP_CTX_free': Function(type='void', derefcnt=0, name='BN_RECP_CTX_free', args=[Argument(type='BN_RECP_CTX', derefcnt=1, name='recp')]), 'BN_RECP_CTX_init': Function(type='void', derefcnt=0, name='BN_RECP_CTX_init', args=[Argument(type='BN_RECP_CTX', derefcnt=1, name='recp')]), 'BN_RECP_CTX_new': Function(type='BN_RECP_CTX', derefcnt=1, name='BN_RECP_CTX_new', args=[]), 'BN_RECP_CTX_set': Function(type='int', derefcnt=0, name='BN_RECP_CTX_set', args=[Argument(type='BN_RECP_CTX', derefcnt=1, name='recp'), Argument(type='BIGNUM', derefcnt=1, name='rdiv'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_X931_derive_prime_ex': Function(type='int', derefcnt=0, name='BN_X931_derive_prime_ex', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='p1'), Argument(type='BIGNUM', derefcnt=1, name='p2'), Argument(type='BIGNUM', derefcnt=1, name='Xp'), Argument(type='BIGNUM', derefcnt=1, name='Xp1'), Argument(type='BIGNUM', derefcnt=1, name='Xp2'), Argument(type='BIGNUM', derefcnt=1, name='e'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'BN_X931_generate_Xpq': Function(type='int', derefcnt=0, name='BN_X931_generate_Xpq', args=[Argument(type='BIGNUM', derefcnt=1, name='Xp'), Argument(type='BIGNUM', derefcnt=1, name='Xq'), Argument(type='int', derefcnt=0, name='nbits'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_X931_generate_prime_ex': Function(type='int', derefcnt=0, name='BN_X931_generate_prime_ex', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='p1'), Argument(type='BIGNUM', derefcnt=1, name='p2'), Argument(type='BIGNUM', derefcnt=1, name='Xp1'), Argument(type='BIGNUM', derefcnt=1, name='Xp2'), Argument(type='BIGNUM', derefcnt=1, name='Xp'), Argument(type='BIGNUM', derefcnt=1, name='e'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'BN_add': Function(type='int', derefcnt=0, name='BN_add', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_add_word': Function(type='int', derefcnt=0, name='BN_add_word', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=0, name='w')]), 'BN_asc2bn': Function(type='int', derefcnt=0, name='BN_asc2bn', args=[Argument(type='BIGNUM', derefcnt=2, name='a'), Argument(type='char', derefcnt=1, name='str')]), 'BN_bin2bn': Function(type='BIGNUM', derefcnt=1, name='BN_bin2bn', args=[Argument(type='unsigned', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='len'), Argument(type='BIGNUM', derefcnt=1, name='ret')]), 'BN_bn2bin': Function(type='int', derefcnt=0, name='BN_bn2bin', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=1, name='to')]), 'BN_bn2dec': Function(type='char', derefcnt=1, name='BN_bn2dec', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_bn2hex': Function(type='char', derefcnt=1, name='BN_bn2hex', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_bn2mpi': Function(type='int', derefcnt=0, name='BN_bn2mpi', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=1, name='to')]), 'BN_bntest_rand': Function(type='int', derefcnt=0, name='BN_bntest_rand', args=[Argument(type='BIGNUM', derefcnt=1, name='rnd'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='int', derefcnt=0, name='top'), Argument(type='int', derefcnt=0, name='bottom')]), 'BN_clear': Function(type='void', derefcnt=0, name='BN_clear', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_clear_bit': Function(type='int', derefcnt=0, name='BN_clear_bit', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n')]), 'BN_clear_free': Function(type='void', derefcnt=0, name='BN_clear_free', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_cmp': Function(type='int', derefcnt=0, name='BN_cmp', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_consttime_swap': Function(type='void', derefcnt=0, name='BN_consttime_swap', args=[Argument(type='unsigned', derefcnt=0, name='swap'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='nwords')]), 'BN_copy': Function(type='BIGNUM', derefcnt=1, name='BN_copy', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_dec2bn': Function(type='int', derefcnt=0, name='BN_dec2bn', args=[Argument(type='BIGNUM', derefcnt=2, name='a'), Argument(type='char', derefcnt=1, name='str')]), 'BN_div': Function(type='int', derefcnt=0, name='BN_div', args=[Argument(type='BIGNUM', derefcnt=1, name='dv'), Argument(type='BIGNUM', derefcnt=1, name='rem'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BIGNUM', derefcnt=1, name='d'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_div_recp': Function(type='int', derefcnt=0, name='BN_div_recp', args=[Argument(type='BIGNUM', derefcnt=1, name='dv'), Argument(type='BIGNUM', derefcnt=1, name='rem'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_RECP_CTX', derefcnt=1, name='recp'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_div_word': Function(type='unsigned', derefcnt=0, name='BN_div_word', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=0, name='w')]), 'BN_dup': Function(type='BIGNUM', derefcnt=1, name='BN_dup', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_exp': Function(type='int', derefcnt=0, name='BN_exp', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_free': Function(type='void', derefcnt=0, name='BN_free', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_from_montgomery': Function(type='int', derefcnt=0, name='BN_from_montgomery', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BN_MONT_CTX', derefcnt=1, name='mont'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_gcd': Function(type='int', derefcnt=0, name='BN_gcd', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_generate_prime': Function(type='BIGNUM', derefcnt=1, name='BN_generate_prime', args=[Argument(type='BIGNUM', derefcnt=1, name='ret'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='int', derefcnt=0, name='safe'), Argument(type='BIGNUM', derefcnt=1, name='add'), Argument(type='BIGNUM', derefcnt=1, name='rem'), Argument(type='void', derefcnt=0, name='callback'), Argument(type='void', derefcnt=1, name='cb_arg')]), 'BN_generate_prime_ex': Function(type='int', derefcnt=0, name='BN_generate_prime_ex', args=[Argument(type='BIGNUM', derefcnt=1, name='ret'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='int', derefcnt=0, name='safe'), Argument(type='BIGNUM', derefcnt=1, name='add'), Argument(type='BIGNUM', derefcnt=1, name='rem'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'BN_get0_nist_prime_192': Function(type='BIGNUM', derefcnt=1, name='BN_get0_nist_prime_192', args=[]), 'BN_get0_nist_prime_224': Function(type='BIGNUM', derefcnt=1, name='BN_get0_nist_prime_224', args=[]), 'BN_get0_nist_prime_256': Function(type='BIGNUM', derefcnt=1, name='BN_get0_nist_prime_256', args=[]), 'BN_get0_nist_prime_384': Function(type='BIGNUM', derefcnt=1, name='BN_get0_nist_prime_384', args=[]), 'BN_get0_nist_prime_521': Function(type='BIGNUM', derefcnt=1, name='BN_get0_nist_prime_521', args=[]), 'BN_get_params': Function(type='int', derefcnt=0, name='BN_get_params', args=[Argument(type='int', derefcnt=0, name='which')]), 'BN_get_word': Function(type='unsigned', derefcnt=0, name='BN_get_word', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_hex2bn': Function(type='int', derefcnt=0, name='BN_hex2bn', args=[Argument(type='BIGNUM', derefcnt=2, name='a'), Argument(type='char', derefcnt=1, name='str')]), 'BN_init': Function(type='void', derefcnt=0, name='BN_init', args=[Argument(type='BIGNUM', derefcnt=1, name='arg0')]), 'BN_is_bit_set': Function(type='int', derefcnt=0, name='BN_is_bit_set', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n')]), 'BN_is_prime': Function(type='int', derefcnt=0, name='BN_is_prime', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='int', derefcnt=0, name='nchecks'), Argument(type='void', derefcnt=0, name='callback'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='cb_arg')]), 'BN_is_prime_ex': Function(type='int', derefcnt=0, name='BN_is_prime_ex', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='int', derefcnt=0, name='nchecks'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'BN_is_prime_fasttest': Function(type='int', derefcnt=0, name='BN_is_prime_fasttest', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='int', derefcnt=0, name='nchecks'), Argument(type='void', derefcnt=0, name='callback'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='cb_arg'), Argument(type='int', derefcnt=0, name='do_trial_division')]), 'BN_is_prime_fasttest_ex': Function(type='int', derefcnt=0, name='BN_is_prime_fasttest_ex', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='int', derefcnt=0, name='nchecks'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='do_trial_division'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'BN_kronecker': Function(type='int', derefcnt=0, name='BN_kronecker', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_lshift': Function(type='int', derefcnt=0, name='BN_lshift', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n')]), 'BN_lshift1': Function(type='int', derefcnt=0, name='BN_lshift1', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_mask_bits': Function(type='int', derefcnt=0, name='BN_mask_bits', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n')]), 'BN_mod_add': Function(type='int', derefcnt=0, name='BN_mod_add', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_add_quick': Function(type='int', derefcnt=0, name='BN_mod_add_quick', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='m')]), 'BN_mod_exp': Function(type='int', derefcnt=0, name='BN_mod_exp', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_exp2_mont': Function(type='int', derefcnt=0, name='BN_mod_exp2_mont', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a1'), Argument(type='BIGNUM', derefcnt=1, name='p1'), Argument(type='BIGNUM', derefcnt=1, name='a2'), Argument(type='BIGNUM', derefcnt=1, name='p2'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_MONT_CTX', derefcnt=1, name='m_ctx')]), 'BN_mod_exp_mont': Function(type='int', derefcnt=0, name='BN_mod_exp_mont', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_MONT_CTX', derefcnt=1, name='m_ctx')]), 'BN_mod_exp_mont_consttime': Function(type='int', derefcnt=0, name='BN_mod_exp_mont_consttime', args=[Argument(type='BIGNUM', derefcnt=1, name='rr'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_MONT_CTX', derefcnt=1, name='in_mont')]), 'BN_mod_exp_mont_word': Function(type='int', derefcnt=0, name='BN_mod_exp_mont_word', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='unsigned', derefcnt=0, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_MONT_CTX', derefcnt=1, name='m_ctx')]), 'BN_mod_exp_recp': Function(type='int', derefcnt=0, name='BN_mod_exp_recp', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_exp_simple': Function(type='int', derefcnt=0, name='BN_mod_exp_simple', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_inverse': Function(type='BIGNUM', derefcnt=1, name='BN_mod_inverse', args=[Argument(type='BIGNUM', derefcnt=1, name='ret'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_lshift': Function(type='int', derefcnt=0, name='BN_mod_lshift', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_lshift1': Function(type='int', derefcnt=0, name='BN_mod_lshift1', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_lshift1_quick': Function(type='int', derefcnt=0, name='BN_mod_lshift1_quick', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='m')]), 'BN_mod_lshift_quick': Function(type='int', derefcnt=0, name='BN_mod_lshift_quick', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n'), Argument(type='BIGNUM', derefcnt=1, name='m')]), 'BN_mod_mul': Function(type='int', derefcnt=0, name='BN_mod_mul', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_mul_montgomery': Function(type='int', derefcnt=0, name='BN_mod_mul_montgomery', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_MONT_CTX', derefcnt=1, name='mont'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_mul_reciprocal': Function(type='int', derefcnt=0, name='BN_mod_mul_reciprocal', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y'), Argument(type='BN_RECP_CTX', derefcnt=1, name='recp'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_sqr': Function(type='int', derefcnt=0, name='BN_mod_sqr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_sqrt': Function(type='BIGNUM', derefcnt=1, name='BN_mod_sqrt', args=[Argument(type='BIGNUM', derefcnt=1, name='ret'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_sub': Function(type='int', derefcnt=0, name='BN_mod_sub', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mod_sub_quick': Function(type='int', derefcnt=0, name='BN_mod_sub_quick', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BIGNUM', derefcnt=1, name='m')]), 'BN_mod_word': Function(type='unsigned', derefcnt=0, name='BN_mod_word', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=0, name='w')]), 'BN_mpi2bn': Function(type='BIGNUM', derefcnt=1, name='BN_mpi2bn', args=[Argument(type='unsigned', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='len'), Argument(type='BIGNUM', derefcnt=1, name='ret')]), 'BN_mul': Function(type='int', derefcnt=0, name='BN_mul', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_mul_word': Function(type='int', derefcnt=0, name='BN_mul_word', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=0, name='w')]), 'BN_new': Function(type='BIGNUM', derefcnt=1, name='BN_new', args=[]), 'BN_nist_mod_192': Function(type='int', derefcnt=0, name='BN_nist_mod_192', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_nist_mod_224': Function(type='int', derefcnt=0, name='BN_nist_mod_224', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_nist_mod_256': Function(type='int', derefcnt=0, name='BN_nist_mod_256', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_nist_mod_384': Function(type='int', derefcnt=0, name='BN_nist_mod_384', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_nist_mod_521': Function(type='int', derefcnt=0, name='BN_nist_mod_521', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_nnmod': Function(type='int', derefcnt=0, name='BN_nnmod', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BIGNUM', derefcnt=1, name='d'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_num_bits': Function(type='int', derefcnt=0, name='BN_num_bits', args=[Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_num_bits_word': Function(type='int', derefcnt=0, name='BN_num_bits_word', args=[Argument(type='unsigned', derefcnt=0, name='arg0')]), 'BN_options': Function(type='char', derefcnt=1, name='BN_options', args=[]), 'BN_print': Function(type='int', derefcnt=0, name='BN_print', args=[Argument(type='BIO', derefcnt=1, name='fp'), Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_print_fp': Function(type='int', derefcnt=0, name='BN_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_pseudo_rand': Function(type='int', derefcnt=0, name='BN_pseudo_rand', args=[Argument(type='BIGNUM', derefcnt=1, name='rnd'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='int', derefcnt=0, name='top'), Argument(type='int', derefcnt=0, name='bottom')]), 'BN_pseudo_rand_range': Function(type='int', derefcnt=0, name='BN_pseudo_rand_range', args=[Argument(type='BIGNUM', derefcnt=1, name='rnd'), Argument(type='BIGNUM', derefcnt=1, name='range')]), 'BN_rand': Function(type='int', derefcnt=0, name='BN_rand', args=[Argument(type='BIGNUM', derefcnt=1, name='rnd'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='int', derefcnt=0, name='top'), Argument(type='int', derefcnt=0, name='bottom')]), 'BN_rand_range': Function(type='int', derefcnt=0, name='BN_rand_range', args=[Argument(type='BIGNUM', derefcnt=1, name='rnd'), Argument(type='BIGNUM', derefcnt=1, name='range')]), 'BN_reciprocal': Function(type='int', derefcnt=0, name='BN_reciprocal', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='int', derefcnt=0, name='len'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_rshift': Function(type='int', derefcnt=0, name='BN_rshift', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n')]), 'BN_rshift1': Function(type='int', derefcnt=0, name='BN_rshift1', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a')]), 'BN_set_bit': Function(type='int', derefcnt=0, name='BN_set_bit', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='n')]), 'BN_set_negative': Function(type='void', derefcnt=0, name='BN_set_negative', args=[Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='int', derefcnt=0, name='n')]), 'BN_set_params': Function(type='void', derefcnt=0, name='BN_set_params', args=[Argument(type='int', derefcnt=0, name='mul'), Argument(type='int', derefcnt=0, name='high'), Argument(type='int', derefcnt=0, name='low'), Argument(type='int', derefcnt=0, name='mont')]), 'BN_set_word': Function(type='int', derefcnt=0, name='BN_set_word', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=0, name='w')]), 'BN_sqr': Function(type='int', derefcnt=0, name='BN_sqr', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'BN_sub': Function(type='int', derefcnt=0, name='BN_sub', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_sub_word': Function(type='int', derefcnt=0, name='BN_sub_word', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=0, name='w')]), 'BN_swap': Function(type='void', derefcnt=0, name='BN_swap', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_to_ASN1_ENUMERATED': Function(type='ASN1_ENUMERATED', derefcnt=1, name='BN_to_ASN1_ENUMERATED', args=[Argument(type='BIGNUM', derefcnt=1, name='bn'), Argument(type='ASN1_ENUMERATED', derefcnt=1, name='ai')]), 'BN_to_ASN1_INTEGER': Function(type='ASN1_INTEGER', derefcnt=1, name='BN_to_ASN1_INTEGER', args=[Argument(type='BIGNUM', derefcnt=1, name='bn'), Argument(type='ASN1_INTEGER', derefcnt=1, name='ai')]), 'BN_uadd': Function(type='int', derefcnt=0, name='BN_uadd', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_ucmp': Function(type='int', derefcnt=0, name='BN_ucmp', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_usub': Function(type='int', derefcnt=0, name='BN_usub', args=[Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b')]), 'BN_value_one': Function(type='BIGNUM', derefcnt=1, name='BN_value_one', args=[]), 'BUF_MEM_free': Function(type='void', derefcnt=0, name='BUF_MEM_free', args=[Argument(type='BUF_MEM', derefcnt=1, name='a')]), 'BUF_MEM_grow': Function(type='int', derefcnt=0, name='BUF_MEM_grow', args=[Argument(type='BUF_MEM', derefcnt=1, name='str'), Argument(type='size_t', derefcnt=0, name='len')]), 'BUF_MEM_grow_clean': Function(type='int', derefcnt=0, name='BUF_MEM_grow_clean', args=[Argument(type='BUF_MEM', derefcnt=1, name='str'), Argument(type='size_t', derefcnt=0, name='len')]), 'BUF_MEM_new': Function(type='BUF_MEM', derefcnt=1, name='BUF_MEM_new', args=[]), 'BUF_memdup': Function(type='void', derefcnt=1, name='BUF_memdup', args=[Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='siz')]), 'BUF_reverse': Function(type='void', derefcnt=0, name='BUF_reverse', args=[Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='siz')]), 'BUF_strdup': Function(type='char', derefcnt=1, name='BUF_strdup', args=[Argument(type='char', derefcnt=1, name='str')]), 'BUF_strlcat': Function(type='size_t', derefcnt=0, name='BUF_strlcat', args=[Argument(type='char', derefcnt=1, name='dst'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='siz')]), 'BUF_strlcpy': Function(type='size_t', derefcnt=0, name='BUF_strlcpy', args=[Argument(type='char', derefcnt=1, name='dst'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='siz')]), 'BUF_strndup': Function(type='char', derefcnt=1, name='BUF_strndup', args=[Argument(type='char', derefcnt=1, name='str'), Argument(type='size_t', derefcnt=0, name='siz')]), 'COMP_CTX_free': Function(type='void', derefcnt=0, name='COMP_CTX_free', args=[Argument(type='COMP_CTX', derefcnt=1, name='ctx')]), 'COMP_CTX_new': Function(type='COMP_CTX', derefcnt=1, name='COMP_CTX_new', args=[Argument(type='COMP_METHOD', derefcnt=1, name='meth')]), 'COMP_compress_block': Function(type='int', derefcnt=0, name='COMP_compress_block', args=[Argument(type='COMP_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=0, name='olen'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='ilen')]), 'COMP_expand_block': Function(type='int', derefcnt=0, name='COMP_expand_block', args=[Argument(type='COMP_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=0, name='olen'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='ilen')]), 'COMP_rle': Function(type='COMP_METHOD', derefcnt=1, name='COMP_rle', args=[]), 'COMP_zlib': Function(type='COMP_METHOD', derefcnt=1, name='COMP_zlib', args=[]), 'COMP_zlib_cleanup': Function(type='void', derefcnt=0, name='COMP_zlib_cleanup', args=[]), 'CRYPTO_EX_dup': Function(type='int', derefcnt=0, name='CRYPTO_EX_dup', args=[Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='to'), Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='from'), Argument(type='void', derefcnt=1, name='from_d'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp')]), 'CRYPTO_EX_free': Function(type='void', derefcnt=0, name='CRYPTO_EX_free', args=[Argument(type='void', derefcnt=1, name='parent'), Argument(type='void', derefcnt=1, name='ptr'), Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='ad'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp')]), 'CRYPTO_EX_new': Function(type='int', derefcnt=0, name='CRYPTO_EX_new', args=[Argument(type='void', derefcnt=1, name='parent'), Argument(type='void', derefcnt=1, name='ptr'), Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='ad'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp')]), 'CRYPTO_MEM_LEAK_CB': Function(type='void', derefcnt=1, name='CRYPTO_MEM_LEAK_CB', args=[Argument(type='unsigned', derefcnt=0, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='void', derefcnt=1, name='arg4')]), 'CRYPTO_THREADID_cmp': Function(type='int', derefcnt=0, name='CRYPTO_THREADID_cmp', args=[Argument(type='CRYPTO_THREADID', derefcnt=1, name='a'), Argument(type='CRYPTO_THREADID', derefcnt=1, name='b')]), 'CRYPTO_THREADID_cpy': Function(type='void', derefcnt=0, name='CRYPTO_THREADID_cpy', args=[Argument(type='CRYPTO_THREADID', derefcnt=1, name='dest'), Argument(type='CRYPTO_THREADID', derefcnt=1, name='src')]), 'CRYPTO_THREADID_current': Function(type='void', derefcnt=0, name='CRYPTO_THREADID_current', args=[Argument(type='CRYPTO_THREADID', derefcnt=1, name='id')]), 'CRYPTO_THREADID_get_callback': Function(type='void', derefcnt=0, name='CRYPTO_THREADID_get_callback', args=[]), 'CRYPTO_THREADID_hash': Function(type='unsigned', derefcnt=0, name='CRYPTO_THREADID_hash', args=[Argument(type='CRYPTO_THREADID', derefcnt=1, name='id')]), 'CRYPTO_THREADID_set_callback': Function(type='int', derefcnt=0, name='CRYPTO_THREADID_set_callback', args=[Argument(type='void', derefcnt=0, name='threadid_func')]), 'CRYPTO_THREADID_set_numeric': Function(type='void', derefcnt=0, name='CRYPTO_THREADID_set_numeric', args=[Argument(type='CRYPTO_THREADID', derefcnt=1, name='id'), Argument(type='unsigned', derefcnt=0, name='val')]), 'CRYPTO_THREADID_set_pointer': Function(type='void', derefcnt=0, name='CRYPTO_THREADID_set_pointer', args=[Argument(type='CRYPTO_THREADID', derefcnt=1, name='id'), Argument(type='void', derefcnt=1, name='ptr')]), 'CRYPTO_add_lock': Function(type='int', derefcnt=0, name='CRYPTO_add_lock', args=[Argument(type='int', derefcnt=1, name='pointer'), Argument(type='int', derefcnt=0, name='amount'), Argument(type='int', derefcnt=0, name='type'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_cleanup_all_ex_data': Function(type='void', derefcnt=0, name='CRYPTO_cleanup_all_ex_data', args=[]), 'CRYPTO_dbg_free': Function(type='void', derefcnt=0, name='CRYPTO_dbg_free', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='int', derefcnt=0, name='before_p')]), 'CRYPTO_dbg_get_options': Function(type='long', derefcnt=0, name='CRYPTO_dbg_get_options', args=[]), 'CRYPTO_dbg_malloc': Function(type='void', derefcnt=0, name='CRYPTO_dbg_malloc', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='int', derefcnt=0, name='num'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line'), Argument(type='int', derefcnt=0, name='before_p')]), 'CRYPTO_dbg_realloc': Function(type='void', derefcnt=0, name='CRYPTO_dbg_realloc', args=[Argument(type='void', derefcnt=1, name='addr1'), Argument(type='void', derefcnt=1, name='addr2'), Argument(type='int', derefcnt=0, name='num'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line'), Argument(type='int', derefcnt=0, name='before_p')]), 'CRYPTO_dbg_set_options': Function(type='void', derefcnt=0, name='CRYPTO_dbg_set_options', args=[Argument(type='long', derefcnt=0, name='bits')]), 'CRYPTO_destroy_dynlockid': Function(type='void', derefcnt=0, name='CRYPTO_destroy_dynlockid', args=[Argument(type='int', derefcnt=0, name='i')]), 'CRYPTO_dup_ex_data': Function(type='int', derefcnt=0, name='CRYPTO_dup_ex_data', args=[Argument(type='int', derefcnt=0, name='class_index'), Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='to'), Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='from')]), 'CRYPTO_ex_data_new_class': Function(type='int', derefcnt=0, name='CRYPTO_ex_data_new_class', args=[]), 'CRYPTO_free': Function(type='void', derefcnt=0, name='CRYPTO_free', args=[Argument(type='void', derefcnt=1, name='ptr')]), 'CRYPTO_free_ex_data': Function(type='void', derefcnt=0, name='CRYPTO_free_ex_data', args=[Argument(type='int', derefcnt=0, name='class_index'), Argument(type='void', derefcnt=1, name='obj'), Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='ad')]), 'CRYPTO_free_locked': Function(type='void', derefcnt=0, name='CRYPTO_free_locked', args=[Argument(type='void', derefcnt=1, name='ptr')]), 'CRYPTO_get_add_lock_callback': Function(type='int', derefcnt=0, name='CRYPTO_get_add_lock_callback', args=[]), 'CRYPTO_get_dynlock_create_callback': Function(type='CRYPTO_dynlock_value', derefcnt=1, name='CRYPTO_get_dynlock_create_callback', args=[]), 'CRYPTO_get_dynlock_destroy_callback': Function(type='void', derefcnt=0, name='CRYPTO_get_dynlock_destroy_callback', args=[]), 'CRYPTO_get_dynlock_lock_callback': Function(type='void', derefcnt=0, name='CRYPTO_get_dynlock_lock_callback', args=[]), 'CRYPTO_get_dynlock_value': Function(type='CRYPTO_dynlock_value', derefcnt=1, name='CRYPTO_get_dynlock_value', args=[Argument(type='int', derefcnt=0, name='i')]), 'CRYPTO_get_ex_data': Function(type='void', derefcnt=1, name='CRYPTO_get_ex_data', args=[Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='ad'), Argument(type='int', derefcnt=0, name='idx')]), 'CRYPTO_get_ex_data_implementation': Function(type='CRYPTO_EX_DATA_IMPL', derefcnt=1, name='CRYPTO_get_ex_data_implementation', args=[]), 'CRYPTO_get_ex_new_index': Function(type='int', derefcnt=0, name='CRYPTO_get_ex_new_index', args=[Argument(type='int', derefcnt=0, name='class_index'), Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'CRYPTO_get_id_callback': Function(type='unsigned', derefcnt=0, name='CRYPTO_get_id_callback', args=[]), 'CRYPTO_get_lock_name': Function(type='char', derefcnt=1, name='CRYPTO_get_lock_name', args=[Argument(type='int', derefcnt=0, name='type')]), 'CRYPTO_get_locked_mem_ex_functions': Function(type='void', derefcnt=0, name='CRYPTO_get_locked_mem_ex_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=0, name='f')]), 'CRYPTO_get_locked_mem_functions': Function(type='void', derefcnt=0, name='CRYPTO_get_locked_mem_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=0, name='f')]), 'CRYPTO_get_locking_callback': Function(type='void', derefcnt=0, name='CRYPTO_get_locking_callback', args=[]), 'CRYPTO_get_mem_debug_functions': Function(type='void', derefcnt=0, name='CRYPTO_get_mem_debug_functions', args=[Argument(type='void', derefcnt=0, name='m'), Argument(type='void', derefcnt=0, name='r'), Argument(type='void', derefcnt=0, name='f'), Argument(type='void', derefcnt=0, name='so'), Argument(type='long', derefcnt=0, name='go')]), 'CRYPTO_get_mem_debug_options': Function(type='long', derefcnt=0, name='CRYPTO_get_mem_debug_options', args=[]), 'CRYPTO_get_mem_ex_functions': Function(type='void', derefcnt=0, name='CRYPTO_get_mem_ex_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=1, name='r'), Argument(type='void', derefcnt=0, name='f')]), 'CRYPTO_get_mem_functions': Function(type='void', derefcnt=0, name='CRYPTO_get_mem_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=1, name='r'), Argument(type='void', derefcnt=0, name='f')]), 'CRYPTO_get_new_dynlockid': Function(type='int', derefcnt=0, name='CRYPTO_get_new_dynlockid', args=[]), 'CRYPTO_get_new_lockid': Function(type='int', derefcnt=0, name='CRYPTO_get_new_lockid', args=[Argument(type='char', derefcnt=1, name='name')]), 'CRYPTO_is_mem_check_on': Function(type='int', derefcnt=0, name='CRYPTO_is_mem_check_on', args=[]), 'CRYPTO_lock': Function(type='void', derefcnt=0, name='CRYPTO_lock', args=[Argument(type='int', derefcnt=0, name='mode'), Argument(type='int', derefcnt=0, name='type'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_malloc': Function(type='void', derefcnt=1, name='CRYPTO_malloc', args=[Argument(type='int', derefcnt=0, name='num'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_malloc_locked': Function(type='void', derefcnt=1, name='CRYPTO_malloc_locked', args=[Argument(type='int', derefcnt=0, name='num'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_mem_ctrl': Function(type='int', derefcnt=0, name='CRYPTO_mem_ctrl', args=[Argument(type='int', derefcnt=0, name='mode')]), 'CRYPTO_mem_leaks': Function(type='void', derefcnt=0, name='CRYPTO_mem_leaks', args=[Argument(type='bio_st', derefcnt=1, name='bio')]), 'CRYPTO_mem_leaks_cb': Function(type='void', derefcnt=0, name='CRYPTO_mem_leaks_cb', args=[Argument(type='CRYPTO_MEM_LEAK_CB', derefcnt=1, name='cb')]), 'CRYPTO_mem_leaks_fp': Function(type='void', derefcnt=0, name='CRYPTO_mem_leaks_fp', args=[Argument(type='FILE', derefcnt=1, name='arg0')]), 'CRYPTO_memcmp': Function(type='int', derefcnt=0, name='CRYPTO_memcmp', args=[Argument(type='void', derefcnt=1, name='a'), Argument(type='void', derefcnt=1, name='b'), Argument(type='size_t', derefcnt=0, name='len')]), 'CRYPTO_new_ex_data': Function(type='int', derefcnt=0, name='CRYPTO_new_ex_data', args=[Argument(type='int', derefcnt=0, name='class_index'), Argument(type='void', derefcnt=1, name='obj'), Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='ad')]), 'CRYPTO_num_locks': Function(type='int', derefcnt=0, name='CRYPTO_num_locks', args=[]), 'CRYPTO_pop_info': Function(type='int', derefcnt=0, name='CRYPTO_pop_info', args=[]), 'CRYPTO_push_info_': Function(type='int', derefcnt=0, name='CRYPTO_push_info_', args=[Argument(type='char', derefcnt=1, name='info'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_realloc': Function(type='void', derefcnt=1, name='CRYPTO_realloc', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='int', derefcnt=0, name='num'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_realloc_clean': Function(type='void', derefcnt=1, name='CRYPTO_realloc_clean', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='int', derefcnt=0, name='old_num'), Argument(type='int', derefcnt=0, name='num'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_remalloc': Function(type='void', derefcnt=1, name='CRYPTO_remalloc', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='int', derefcnt=0, name='num'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_remove_all_info': Function(type='int', derefcnt=0, name='CRYPTO_remove_all_info', args=[]), 'CRYPTO_set_add_lock_callback': Function(type='void', derefcnt=0, name='CRYPTO_set_add_lock_callback', args=[Argument(type='int', derefcnt=0, name='func')]), 'CRYPTO_set_dynlock_create_callback': Function(type='void', derefcnt=0, name='CRYPTO_set_dynlock_create_callback', args=[Argument(type='CRYPTO_dynlock_value', derefcnt=1, name='dyn_create_function')]), 'CRYPTO_set_dynlock_destroy_callback': Function(type='void', derefcnt=0, name='CRYPTO_set_dynlock_destroy_callback', args=[Argument(type='void', derefcnt=0, name='dyn_destroy_function')]), 'CRYPTO_set_dynlock_lock_callback': Function(type='void', derefcnt=0, name='CRYPTO_set_dynlock_lock_callback', args=[Argument(type='void', derefcnt=0, name='dyn_lock_function')]), 'CRYPTO_set_ex_data': Function(type='int', derefcnt=0, name='CRYPTO_set_ex_data', args=[Argument(type='CRYPTO_EX_DATA', derefcnt=1, name='ad'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='val')]), 'CRYPTO_set_ex_data_implementation': Function(type='int', derefcnt=0, name='CRYPTO_set_ex_data_implementation', args=[Argument(type='CRYPTO_EX_DATA_IMPL', derefcnt=1, name='i')]), 'CRYPTO_set_id_callback': Function(type='void', derefcnt=0, name='CRYPTO_set_id_callback', args=[Argument(type='unsigned', derefcnt=0, name='func')]), 'CRYPTO_set_locked_mem_ex_functions': Function(type='int', derefcnt=0, name='CRYPTO_set_locked_mem_ex_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=0, name='free_func')]), 'CRYPTO_set_locked_mem_functions': Function(type='int', derefcnt=0, name='CRYPTO_set_locked_mem_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=0, name='free_func')]), 'CRYPTO_set_locking_callback': Function(type='void', derefcnt=0, name='CRYPTO_set_locking_callback', args=[Argument(type='void', derefcnt=0, name='func')]), 'CRYPTO_set_mem_debug_functions': Function(type='int', derefcnt=0, name='CRYPTO_set_mem_debug_functions', args=[Argument(type='void', derefcnt=0, name='m'), Argument(type='void', derefcnt=0, name='r'), Argument(type='void', derefcnt=0, name='f'), Argument(type='void', derefcnt=0, name='so'), Argument(type='long', derefcnt=0, name='go')]), 'CRYPTO_set_mem_debug_options': Function(type='void', derefcnt=0, name='CRYPTO_set_mem_debug_options', args=[Argument(type='long', derefcnt=0, name='bits')]), 'CRYPTO_set_mem_ex_functions': Function(type='int', derefcnt=0, name='CRYPTO_set_mem_ex_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=1, name='r'), Argument(type='void', derefcnt=0, name='f')]), 'CRYPTO_set_mem_functions': Function(type='int', derefcnt=0, name='CRYPTO_set_mem_functions', args=[Argument(type='void', derefcnt=1, name='m'), Argument(type='void', derefcnt=1, name='r'), Argument(type='void', derefcnt=0, name='f')]), 'CRYPTO_strdup': Function(type='char', derefcnt=1, name='CRYPTO_strdup', args=[Argument(type='char', derefcnt=1, name='str'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'CRYPTO_thread_id': Function(type='unsigned', derefcnt=0, name='CRYPTO_thread_id', args=[]), 'DH_OpenSSL': Function(type='DH_METHOD', derefcnt=1, name='DH_OpenSSL', args=[]), 'DH_check': Function(type='int', derefcnt=0, name='DH_check', args=[Argument(type='DH', derefcnt=1, name='dh'), Argument(type='int', derefcnt=1, name='codes')]), 'DH_check_pub_key': Function(type='int', derefcnt=0, name='DH_check_pub_key', args=[Argument(type='DH', derefcnt=1, name='dh'), Argument(type='BIGNUM', derefcnt=1, name='pub_key'), Argument(type='int', derefcnt=1, name='codes')]), 'DH_compute_key': Function(type='int', derefcnt=0, name='DH_compute_key', args=[Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='BIGNUM', derefcnt=1, name='pub_key'), Argument(type='DH', derefcnt=1, name='dh')]), 'DH_free': Function(type='void', derefcnt=0, name='DH_free', args=[Argument(type='DH', derefcnt=1, name='dh')]), 'DH_generate_key': Function(type='int', derefcnt=0, name='DH_generate_key', args=[Argument(type='DH', derefcnt=1, name='dh')]), 'DH_generate_parameters': Function(type='DH', derefcnt=1, name='DH_generate_parameters', args=[Argument(type='int', derefcnt=0, name='prime_len'), Argument(type='int', derefcnt=0, name='generator'), Argument(type='void', derefcnt=0, name='callback'), Argument(type='void', derefcnt=1, name='cb_arg')]), 'DH_generate_parameters_ex': Function(type='int', derefcnt=0, name='DH_generate_parameters_ex', args=[Argument(type='DH', derefcnt=1, name='dh'), Argument(type='int', derefcnt=0, name='prime_len'), Argument(type='int', derefcnt=0, name='generator'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'DH_get_default_method': Function(type='DH_METHOD', derefcnt=1, name='DH_get_default_method', args=[]), 'DH_get_ex_data': Function(type='void', derefcnt=1, name='DH_get_ex_data', args=[Argument(type='DH', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx')]), 'DH_get_ex_new_index': Function(type='int', derefcnt=0, name='DH_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'DH_new': Function(type='DH', derefcnt=1, name='DH_new', args=[]), 'DH_new_method': Function(type='DH', derefcnt=1, name='DH_new_method', args=[Argument(type='ENGINE', derefcnt=1, name='engine')]), 'DH_set_default_method': Function(type='void', derefcnt=0, name='DH_set_default_method', args=[Argument(type='DH_METHOD', derefcnt=1, name='meth')]), 'DH_set_ex_data': Function(type='int', derefcnt=0, name='DH_set_ex_data', args=[Argument(type='DH', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='arg')]), 'DH_set_method': Function(type='int', derefcnt=0, name='DH_set_method', args=[Argument(type='DH', derefcnt=1, name='dh'), Argument(type='DH_METHOD', derefcnt=1, name='meth')]), 'DH_size': Function(type='int', derefcnt=0, name='DH_size', args=[Argument(type='DH', derefcnt=1, name='dh')]), 'DH_up_ref': Function(type='int', derefcnt=0, name='DH_up_ref', args=[Argument(type='DH', derefcnt=1, name='dh')]), 'DHparams_dup': Function(type='DH', derefcnt=1, name='DHparams_dup', args=[Argument(type='DH', derefcnt=1, name='arg0')]), 'DHparams_print': Function(type='int', derefcnt=0, name='DHparams_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DH', derefcnt=1, name='x')]), 'DHparams_print_fp': Function(type='int', derefcnt=0, name='DHparams_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DH', derefcnt=1, name='x')]), 'DIRECTORYSTRING_free': Function(type='void', derefcnt=0, name='DIRECTORYSTRING_free', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a')]), 'DIRECTORYSTRING_new': Function(type='ASN1_STRING', derefcnt=1, name='DIRECTORYSTRING_new', args=[]), 'DISPLAYTEXT_free': Function(type='void', derefcnt=0, name='DISPLAYTEXT_free', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a')]), 'DISPLAYTEXT_new': Function(type='ASN1_STRING', derefcnt=1, name='DISPLAYTEXT_new', args=[]), 'DSA_OpenSSL': Function(type='DSA_METHOD', derefcnt=1, name='DSA_OpenSSL', args=[]), 'DSA_SIG_free': Function(type='void', derefcnt=0, name='DSA_SIG_free', args=[Argument(type='DSA_SIG', derefcnt=1, name='a')]), 'DSA_SIG_new': Function(type='DSA_SIG', derefcnt=1, name='DSA_SIG_new', args=[]), 'DSA_do_sign': Function(type='DSA_SIG', derefcnt=1, name='DSA_do_sign', args=[Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dlen'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'DSA_do_verify': Function(type='int', derefcnt=0, name='DSA_do_verify', args=[Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgst_len'), Argument(type='DSA_SIG', derefcnt=1, name='sig'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'DSA_dup_DH': Function(type='DH', derefcnt=1, name='DSA_dup_DH', args=[Argument(type='DSA', derefcnt=1, name='r')]), 'DSA_free': Function(type='void', derefcnt=0, name='DSA_free', args=[Argument(type='DSA', derefcnt=1, name='r')]), 'DSA_generate_key': Function(type='int', derefcnt=0, name='DSA_generate_key', args=[Argument(type='DSA', derefcnt=1, name='a')]), 'DSA_generate_parameters': Function(type='DSA', derefcnt=1, name='DSA_generate_parameters', args=[Argument(type='int', derefcnt=0, name='bits'), Argument(type='unsigned', derefcnt=1, name='seed'), Argument(type='int', derefcnt=0, name='seed_len'), Argument(type='int', derefcnt=1, name='counter_ret'), Argument(type='unsigned', derefcnt=1, name='h_ret'), Argument(type='void', derefcnt=0, name='callback'), Argument(type='void', derefcnt=1, name='cb_arg')]), 'DSA_generate_parameters_ex': Function(type='int', derefcnt=0, name='DSA_generate_parameters_ex', args=[Argument(type='DSA', derefcnt=1, name='dsa'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='unsigned', derefcnt=1, name='seed'), Argument(type='int', derefcnt=0, name='seed_len'), Argument(type='int', derefcnt=1, name='counter_ret'), Argument(type='unsigned', derefcnt=1, name='h_ret'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'DSA_get_default_method': Function(type='DSA_METHOD', derefcnt=1, name='DSA_get_default_method', args=[]), 'DSA_get_ex_data': Function(type='void', derefcnt=1, name='DSA_get_ex_data', args=[Argument(type='DSA', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx')]), 'DSA_get_ex_new_index': Function(type='int', derefcnt=0, name='DSA_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'DSA_new': Function(type='DSA', derefcnt=1, name='DSA_new', args=[]), 'DSA_new_method': Function(type='DSA', derefcnt=1, name='DSA_new_method', args=[Argument(type='ENGINE', derefcnt=1, name='engine')]), 'DSA_print': Function(type='int', derefcnt=0, name='DSA_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='off')]), 'DSA_print_fp': Function(type='int', derefcnt=0, name='DSA_print_fp', args=[Argument(type='FILE', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='off')]), 'DSA_set_default_method': Function(type='void', derefcnt=0, name='DSA_set_default_method', args=[Argument(type='DSA_METHOD', derefcnt=1, name='arg0')]), 'DSA_set_ex_data': Function(type='int', derefcnt=0, name='DSA_set_ex_data', args=[Argument(type='DSA', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='arg')]), 'DSA_set_method': Function(type='int', derefcnt=0, name='DSA_set_method', args=[Argument(type='DSA', derefcnt=1, name='dsa'), Argument(type='DSA_METHOD', derefcnt=1, name='arg1')]), 'DSA_sign': Function(type='int', derefcnt=0, name='DSA_sign', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dlen'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'DSA_sign_setup': Function(type='int', derefcnt=0, name='DSA_sign_setup', args=[Argument(type='DSA', derefcnt=1, name='dsa'), Argument(type='BN_CTX', derefcnt=1, name='ctx_in'), Argument(type='BIGNUM', derefcnt=2, name='kinvp'), Argument(type='BIGNUM', derefcnt=2, name='rp')]), 'DSA_size': Function(type='int', derefcnt=0, name='DSA_size', args=[Argument(type='DSA', derefcnt=1, name='arg0')]), 'DSA_up_ref': Function(type='int', derefcnt=0, name='DSA_up_ref', args=[Argument(type='DSA', derefcnt=1, name='r')]), 'DSA_verify': Function(type='int', derefcnt=0, name='DSA_verify', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgst_len'), Argument(type='unsigned', derefcnt=1, name='sigbuf'), Argument(type='int', derefcnt=0, name='siglen'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'DSAparams_dup': Function(type='DSA', derefcnt=1, name='DSAparams_dup', args=[Argument(type='DSA', derefcnt=1, name='x')]), 'DSAparams_print': Function(type='int', derefcnt=0, name='DSAparams_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='x')]), 'DSAparams_print_fp': Function(type='int', derefcnt=0, name='DSAparams_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=1, name='x')]), 'DTLSv1_client_method': Function(type='SSL_METHOD', derefcnt=1, name='DTLSv1_client_method', args=[]), 'DTLSv1_method': Function(type='SSL_METHOD', derefcnt=1, name='DTLSv1_method', args=[]), 'DTLSv1_server_method': Function(type='SSL_METHOD', derefcnt=1, name='DTLSv1_server_method', args=[]), 'ECDH_OpenSSL': Function(type='ECDH_METHOD', derefcnt=1, name='ECDH_OpenSSL', args=[]), 'ECDH_compute_key': Function(type='int', derefcnt=0, name='ECDH_compute_key', args=[Argument(type='void', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=0, name='outlen'), Argument(type='EC_POINT', derefcnt=1, name='pub_key'), Argument(type='EC_KEY', derefcnt=1, name='ecdh'), Argument(type='void', derefcnt=1, name='KDF')]), 'ECDH_get_default_method': Function(type='ECDH_METHOD', derefcnt=1, name='ECDH_get_default_method', args=[]), 'ECDH_get_ex_data': Function(type='void', derefcnt=1, name='ECDH_get_ex_data', args=[Argument(type='EC_KEY', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx')]), 'ECDH_get_ex_new_index': Function(type='int', derefcnt=0, name='ECDH_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'ECDH_set_default_method': Function(type='void', derefcnt=0, name='ECDH_set_default_method', args=[Argument(type='ECDH_METHOD', derefcnt=1, name='arg0')]), 'ECDH_set_ex_data': Function(type='int', derefcnt=0, name='ECDH_set_ex_data', args=[Argument(type='EC_KEY', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='arg')]), 'ECDH_set_method': Function(type='int', derefcnt=0, name='ECDH_set_method', args=[Argument(type='EC_KEY', derefcnt=1, name='arg0'), Argument(type='ECDH_METHOD', derefcnt=1, name='arg1')]), 'ECDSA_OpenSSL': Function(type='ECDSA_METHOD', derefcnt=1, name='ECDSA_OpenSSL', args=[]), 'ECDSA_SIG_free': Function(type='void', derefcnt=0, name='ECDSA_SIG_free', args=[Argument(type='ECDSA_SIG', derefcnt=1, name='sig')]), 'ECDSA_SIG_new': Function(type='ECDSA_SIG', derefcnt=1, name='ECDSA_SIG_new', args=[]), 'ECDSA_do_sign': Function(type='ECDSA_SIG', derefcnt=1, name='ECDSA_do_sign', args=[Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgst_len'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'ECDSA_do_sign_ex': Function(type='ECDSA_SIG', derefcnt=1, name='ECDSA_do_sign_ex', args=[Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgstlen'), Argument(type='BIGNUM', derefcnt=1, name='kinv'), Argument(type='BIGNUM', derefcnt=1, name='rp'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'ECDSA_do_verify': Function(type='int', derefcnt=0, name='ECDSA_do_verify', args=[Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgst_len'), Argument(type='ECDSA_SIG', derefcnt=1, name='sig'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'ECDSA_get_default_method': Function(type='ECDSA_METHOD', derefcnt=1, name='ECDSA_get_default_method', args=[]), 'ECDSA_get_ex_data': Function(type='void', derefcnt=1, name='ECDSA_get_ex_data', args=[Argument(type='EC_KEY', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx')]), 'ECDSA_get_ex_new_index': Function(type='int', derefcnt=0, name='ECDSA_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'ECDSA_set_default_method': Function(type='void', derefcnt=0, name='ECDSA_set_default_method', args=[Argument(type='ECDSA_METHOD', derefcnt=1, name='meth')]), 'ECDSA_set_ex_data': Function(type='int', derefcnt=0, name='ECDSA_set_ex_data', args=[Argument(type='EC_KEY', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='arg')]), 'ECDSA_set_method': Function(type='int', derefcnt=0, name='ECDSA_set_method', args=[Argument(type='EC_KEY', derefcnt=1, name='eckey'), Argument(type='ECDSA_METHOD', derefcnt=1, name='meth')]), 'ECDSA_sign': Function(type='int', derefcnt=0, name='ECDSA_sign', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgstlen'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'ECDSA_sign_ex': Function(type='int', derefcnt=0, name='ECDSA_sign_ex', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgstlen'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='BIGNUM', derefcnt=1, name='kinv'), Argument(type='BIGNUM', derefcnt=1, name='rp'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'ECDSA_sign_setup': Function(type='int', derefcnt=0, name='ECDSA_sign_setup', args=[Argument(type='EC_KEY', derefcnt=1, name='eckey'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BIGNUM', derefcnt=2, name='kinv'), Argument(type='BIGNUM', derefcnt=2, name='rp')]), 'ECDSA_size': Function(type='int', derefcnt=0, name='ECDSA_size', args=[Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'ECDSA_verify': Function(type='int', derefcnt=0, name='ECDSA_verify', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgstlen'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='int', derefcnt=0, name='siglen'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'ECPKParameters_print': Function(type='int', derefcnt=0, name='ECPKParameters_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_GROUP', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='off')]), 'ECPKParameters_print_fp': Function(type='int', derefcnt=0, name='ECPKParameters_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_GROUP', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='off')]), 'ECParameters_print': Function(type='int', derefcnt=0, name='ECParameters_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=1, name='key')]), 'ECParameters_print_fp': Function(type='int', derefcnt=0, name='ECParameters_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_GF2m_simple_method': Function(type='EC_METHOD', derefcnt=1, name='EC_GF2m_simple_method', args=[]), 'EC_GFp_mont_method': Function(type='EC_METHOD', derefcnt=1, name='EC_GFp_mont_method', args=[]), 'EC_GFp_nist_method': Function(type='EC_METHOD', derefcnt=1, name='EC_GFp_nist_method', args=[]), 'EC_GFp_nistp224_method': Function(type='EC_METHOD', derefcnt=1, name='EC_GFp_nistp224_method', args=[]), 'EC_GFp_nistp256_method': Function(type='EC_METHOD', derefcnt=1, name='EC_GFp_nistp256_method', args=[]), 'EC_GFp_nistp521_method': Function(type='EC_METHOD', derefcnt=1, name='EC_GFp_nistp521_method', args=[]), 'EC_GFp_simple_method': Function(type='EC_METHOD', derefcnt=1, name='EC_GFp_simple_method', args=[]), 'EC_GROUP_check': Function(type='int', derefcnt=0, name='EC_GROUP_check', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_check_discriminant': Function(type='int', derefcnt=0, name='EC_GROUP_check_discriminant', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_clear_free': Function(type='void', derefcnt=0, name='EC_GROUP_clear_free', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_cmp': Function(type='int', derefcnt=0, name='EC_GROUP_cmp', args=[Argument(type='EC_GROUP', derefcnt=1, name='a'), Argument(type='EC_GROUP', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_copy': Function(type='int', derefcnt=0, name='EC_GROUP_copy', args=[Argument(type='EC_GROUP', derefcnt=1, name='dst'), Argument(type='EC_GROUP', derefcnt=1, name='src')]), 'EC_GROUP_dup': Function(type='EC_GROUP', derefcnt=1, name='EC_GROUP_dup', args=[Argument(type='EC_GROUP', derefcnt=1, name='src')]), 'EC_GROUP_free': Function(type='void', derefcnt=0, name='EC_GROUP_free', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_get0_generator': Function(type='EC_POINT', derefcnt=1, name='EC_GROUP_get0_generator', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_get0_seed': Function(type='unsigned', derefcnt=1, name='EC_GROUP_get0_seed', args=[Argument(type='EC_GROUP', derefcnt=1, name='x')]), 'EC_GROUP_get_asn1_flag': Function(type='int', derefcnt=0, name='EC_GROUP_get_asn1_flag', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_get_basis_type': Function(type='int', derefcnt=0, name='EC_GROUP_get_basis_type', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0')]), 'EC_GROUP_get_cofactor': Function(type='int', derefcnt=0, name='EC_GROUP_get_cofactor', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BIGNUM', derefcnt=1, name='cofactor'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_get_curve_GF2m': Function(type='int', derefcnt=0, name='EC_GROUP_get_curve_GF2m', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_get_curve_GFp': Function(type='int', derefcnt=0, name='EC_GROUP_get_curve_GFp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_get_curve_name': Function(type='int', derefcnt=0, name='EC_GROUP_get_curve_name', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_get_degree': Function(type='int', derefcnt=0, name='EC_GROUP_get_degree', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_get_order': Function(type='int', derefcnt=0, name='EC_GROUP_get_order', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BIGNUM', derefcnt=1, name='order'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_get_pentanomial_basis': Function(type='int', derefcnt=0, name='EC_GROUP_get_pentanomial_basis', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=1, name='k1'), Argument(type='unsigned', derefcnt=1, name='k2'), Argument(type='unsigned', derefcnt=1, name='k3')]), 'EC_GROUP_get_point_conversion_form': Function(type='point_conversion_form_t', derefcnt=0, name='EC_GROUP_get_point_conversion_form', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0')]), 'EC_GROUP_get_seed_len': Function(type='size_t', derefcnt=0, name='EC_GROUP_get_seed_len', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0')]), 'EC_GROUP_get_trinomial_basis': Function(type='int', derefcnt=0, name='EC_GROUP_get_trinomial_basis', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=1, name='k')]), 'EC_GROUP_have_precompute_mult': Function(type='int', derefcnt=0, name='EC_GROUP_have_precompute_mult', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_method_of': Function(type='EC_METHOD', derefcnt=1, name='EC_GROUP_method_of', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_GROUP_new': Function(type='EC_GROUP', derefcnt=1, name='EC_GROUP_new', args=[Argument(type='EC_METHOD', derefcnt=1, name='meth')]), 'EC_GROUP_new_by_curve_name': Function(type='EC_GROUP', derefcnt=1, name='EC_GROUP_new_by_curve_name', args=[Argument(type='int', derefcnt=0, name='nid')]), 'EC_GROUP_new_curve_GF2m': Function(type='EC_GROUP', derefcnt=1, name='EC_GROUP_new_curve_GF2m', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_new_curve_GFp': Function(type='EC_GROUP', derefcnt=1, name='EC_GROUP_new_curve_GFp', args=[Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_precompute_mult': Function(type='int', derefcnt=0, name='EC_GROUP_precompute_mult', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_set_asn1_flag': Function(type='void', derefcnt=0, name='EC_GROUP_set_asn1_flag', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='int', derefcnt=0, name='flag')]), 'EC_GROUP_set_curve_GF2m': Function(type='int', derefcnt=0, name='EC_GROUP_set_curve_GF2m', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_set_curve_GFp': Function(type='int', derefcnt=0, name='EC_GROUP_set_curve_GFp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_GROUP_set_curve_name': Function(type='void', derefcnt=0, name='EC_GROUP_set_curve_name', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='int', derefcnt=0, name='nid')]), 'EC_GROUP_set_generator': Function(type='int', derefcnt=0, name='EC_GROUP_set_generator', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='generator'), Argument(type='BIGNUM', derefcnt=1, name='order'), Argument(type='BIGNUM', derefcnt=1, name='cofactor')]), 'EC_GROUP_set_point_conversion_form': Function(type='void', derefcnt=0, name='EC_GROUP_set_point_conversion_form', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='point_conversion_form_t', derefcnt=0, name='form')]), 'EC_GROUP_set_seed': Function(type='size_t', derefcnt=0, name='EC_GROUP_set_seed', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='len')]), 'EC_KEY_check_key': Function(type='int', derefcnt=0, name='EC_KEY_check_key', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_clear_flags': Function(type='void', derefcnt=0, name='EC_KEY_clear_flags', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='flags')]), 'EC_KEY_copy': Function(type='EC_KEY', derefcnt=1, name='EC_KEY_copy', args=[Argument(type='EC_KEY', derefcnt=1, name='dst'), Argument(type='EC_KEY', derefcnt=1, name='src')]), 'EC_KEY_dup': Function(type='EC_KEY', derefcnt=1, name='EC_KEY_dup', args=[Argument(type='EC_KEY', derefcnt=1, name='src')]), 'EC_KEY_free': Function(type='void', derefcnt=0, name='EC_KEY_free', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_generate_key': Function(type='int', derefcnt=0, name='EC_KEY_generate_key', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_get0_group': Function(type='EC_GROUP', derefcnt=1, name='EC_KEY_get0_group', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_get0_private_key': Function(type='BIGNUM', derefcnt=1, name='EC_KEY_get0_private_key', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_get0_public_key': Function(type='EC_POINT', derefcnt=1, name='EC_KEY_get0_public_key', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_get_conv_form': Function(type='point_conversion_form_t', derefcnt=0, name='EC_KEY_get_conv_form', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_get_enc_flags': Function(type='unsigned', derefcnt=0, name='EC_KEY_get_enc_flags', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_get_flags': Function(type='int', derefcnt=0, name='EC_KEY_get_flags', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_KEY_get_key_method_data': Function(type='void', derefcnt=1, name='EC_KEY_get_key_method_data', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='void', derefcnt=1, name='dup_func'), Argument(type='void', derefcnt=0, name='free_func'), Argument(type='void', derefcnt=0, name='clear_free_func')]), 'EC_KEY_insert_key_method_data': Function(type='void', derefcnt=1, name='EC_KEY_insert_key_method_data', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='void', derefcnt=1, name='data'), Argument(type='void', derefcnt=1, name='dup_func'), Argument(type='void', derefcnt=0, name='free_func'), Argument(type='void', derefcnt=0, name='clear_free_func')]), 'EC_KEY_new': Function(type='EC_KEY', derefcnt=1, name='EC_KEY_new', args=[]), 'EC_KEY_new_by_curve_name': Function(type='EC_KEY', derefcnt=1, name='EC_KEY_new_by_curve_name', args=[Argument(type='int', derefcnt=0, name='nid')]), 'EC_KEY_precompute_mult': Function(type='int', derefcnt=0, name='EC_KEY_precompute_mult', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_KEY_print': Function(type='int', derefcnt=0, name='EC_KEY_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='off')]), 'EC_KEY_print_fp': Function(type='int', derefcnt=0, name='EC_KEY_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='off')]), 'EC_KEY_set_asn1_flag': Function(type='void', derefcnt=0, name='EC_KEY_set_asn1_flag', args=[Argument(type='EC_KEY', derefcnt=1, name='eckey'), Argument(type='int', derefcnt=0, name='asn1_flag')]), 'EC_KEY_set_conv_form': Function(type='void', derefcnt=0, name='EC_KEY_set_conv_form', args=[Argument(type='EC_KEY', derefcnt=1, name='eckey'), Argument(type='point_conversion_form_t', derefcnt=0, name='cform')]), 'EC_KEY_set_enc_flags': Function(type='void', derefcnt=0, name='EC_KEY_set_enc_flags', args=[Argument(type='EC_KEY', derefcnt=1, name='eckey'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'EC_KEY_set_flags': Function(type='void', derefcnt=0, name='EC_KEY_set_flags', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='flags')]), 'EC_KEY_set_group': Function(type='int', derefcnt=0, name='EC_KEY_set_group', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_KEY_set_private_key': Function(type='int', derefcnt=0, name='EC_KEY_set_private_key', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='BIGNUM', derefcnt=1, name='prv')]), 'EC_KEY_set_public_key': Function(type='int', derefcnt=0, name='EC_KEY_set_public_key', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='EC_POINT', derefcnt=1, name='pub')]), 'EC_KEY_set_public_key_affine_coordinates': Function(type='int', derefcnt=0, name='EC_KEY_set_public_key_affine_coordinates', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y')]), 'EC_KEY_up_ref': Function(type='int', derefcnt=0, name='EC_KEY_up_ref', args=[Argument(type='EC_KEY', derefcnt=1, name='key')]), 'EC_METHOD_get_field_type': Function(type='int', derefcnt=0, name='EC_METHOD_get_field_type', args=[Argument(type='EC_METHOD', derefcnt=1, name='meth')]), 'EC_POINT_add': Function(type='int', derefcnt=0, name='EC_POINT_add', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='r'), Argument(type='EC_POINT', derefcnt=1, name='a'), Argument(type='EC_POINT', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_bn2point': Function(type='EC_POINT', derefcnt=1, name='EC_POINT_bn2point', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='BIGNUM', derefcnt=1, name='arg1'), Argument(type='EC_POINT', derefcnt=1, name='arg2'), Argument(type='BN_CTX', derefcnt=1, name='arg3')]), 'EC_POINT_clear_free': Function(type='void', derefcnt=0, name='EC_POINT_clear_free', args=[Argument(type='EC_POINT', derefcnt=1, name='point')]), 'EC_POINT_cmp': Function(type='int', derefcnt=0, name='EC_POINT_cmp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='a'), Argument(type='EC_POINT', derefcnt=1, name='b'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_copy': Function(type='int', derefcnt=0, name='EC_POINT_copy', args=[Argument(type='EC_POINT', derefcnt=1, name='dst'), Argument(type='EC_POINT', derefcnt=1, name='src')]), 'EC_POINT_dbl': Function(type='int', derefcnt=0, name='EC_POINT_dbl', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='r'), Argument(type='EC_POINT', derefcnt=1, name='a'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_dup': Function(type='EC_POINT', derefcnt=1, name='EC_POINT_dup', args=[Argument(type='EC_POINT', derefcnt=1, name='src'), Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_POINT_free': Function(type='void', derefcnt=0, name='EC_POINT_free', args=[Argument(type='EC_POINT', derefcnt=1, name='point')]), 'EC_POINT_get_Jprojective_coordinates_GFp': Function(type='int', derefcnt=0, name='EC_POINT_get_Jprojective_coordinates_GFp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y'), Argument(type='BIGNUM', derefcnt=1, name='z'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_get_affine_coordinates_GF2m': Function(type='int', derefcnt=0, name='EC_POINT_get_affine_coordinates_GF2m', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_get_affine_coordinates_GFp': Function(type='int', derefcnt=0, name='EC_POINT_get_affine_coordinates_GFp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_hex2point': Function(type='EC_POINT', derefcnt=1, name='EC_POINT_hex2point', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='EC_POINT', derefcnt=1, name='arg2'), Argument(type='BN_CTX', derefcnt=1, name='arg3')]), 'EC_POINT_invert': Function(type='int', derefcnt=0, name='EC_POINT_invert', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='a'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_is_at_infinity': Function(type='int', derefcnt=0, name='EC_POINT_is_at_infinity', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p')]), 'EC_POINT_is_on_curve': Function(type='int', derefcnt=0, name='EC_POINT_is_on_curve', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='point'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_make_affine': Function(type='int', derefcnt=0, name='EC_POINT_make_affine', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='point'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_method_of': Function(type='EC_METHOD', derefcnt=1, name='EC_POINT_method_of', args=[Argument(type='EC_POINT', derefcnt=1, name='point')]), 'EC_POINT_mul': Function(type='int', derefcnt=0, name='EC_POINT_mul', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='EC_POINT', derefcnt=1, name='q'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_new': Function(type='EC_POINT', derefcnt=1, name='EC_POINT_new', args=[Argument(type='EC_GROUP', derefcnt=1, name='group')]), 'EC_POINT_oct2point': Function(type='int', derefcnt=0, name='EC_POINT_oct2point', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='unsigned', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_point2bn': Function(type='BIGNUM', derefcnt=1, name='EC_POINT_point2bn', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='EC_POINT', derefcnt=1, name='arg1'), Argument(type='point_conversion_form_t', derefcnt=0, name='form'), Argument(type='BIGNUM', derefcnt=1, name='arg3'), Argument(type='BN_CTX', derefcnt=1, name='arg4')]), 'EC_POINT_point2hex': Function(type='char', derefcnt=1, name='EC_POINT_point2hex', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='EC_POINT', derefcnt=1, name='arg1'), Argument(type='point_conversion_form_t', derefcnt=0, name='form'), Argument(type='BN_CTX', derefcnt=1, name='arg3')]), 'EC_POINT_point2oct': Function(type='size_t', derefcnt=0, name='EC_POINT_point2oct', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='point_conversion_form_t', derefcnt=0, name='form'), Argument(type='unsigned', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_set_Jprojective_coordinates_GFp': Function(type='int', derefcnt=0, name='EC_POINT_set_Jprojective_coordinates_GFp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y'), Argument(type='BIGNUM', derefcnt=1, name='z'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_set_affine_coordinates_GF2m': Function(type='int', derefcnt=0, name='EC_POINT_set_affine_coordinates_GF2m', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_set_affine_coordinates_GFp': Function(type='int', derefcnt=0, name='EC_POINT_set_affine_coordinates_GFp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='BIGNUM', derefcnt=1, name='y'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_set_compressed_coordinates_GF2m': Function(type='int', derefcnt=0, name='EC_POINT_set_compressed_coordinates_GF2m', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='y_bit'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_set_compressed_coordinates_GFp': Function(type='int', derefcnt=0, name='EC_POINT_set_compressed_coordinates_GFp', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='y_bit'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINT_set_to_infinity': Function(type='int', derefcnt=0, name='EC_POINT_set_to_infinity', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='point')]), 'EC_POINTs_make_affine': Function(type='int', derefcnt=0, name='EC_POINTs_make_affine', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='size_t', derefcnt=0, name='num'), Argument(type='EC_POINT', derefcnt=2, name='points'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_POINTs_mul': Function(type='int', derefcnt=0, name='EC_POINTs_mul', args=[Argument(type='EC_GROUP', derefcnt=1, name='group'), Argument(type='EC_POINT', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='n'), Argument(type='size_t', derefcnt=0, name='num'), Argument(type='EC_POINT', derefcnt=2, name='p'), Argument(type='BIGNUM', derefcnt=2, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'EC_get_builtin_curves': Function(type='size_t', derefcnt=0, name='EC_get_builtin_curves', args=[Argument(type='EC_builtin_curve', derefcnt=1, name='r'), Argument(type='size_t', derefcnt=0, name='nitems')]), 'ERR_load_ASN1_strings': Function(type='void', derefcnt=0, name='ERR_load_ASN1_strings', args=[]), 'ERR_load_BIO_strings': Function(type='void', derefcnt=0, name='ERR_load_BIO_strings', args=[]), 'ERR_load_BN_strings': Function(type='void', derefcnt=0, name='ERR_load_BN_strings', args=[]), 'ERR_load_BUF_strings': Function(type='void', derefcnt=0, name='ERR_load_BUF_strings', args=[]), 'ERR_load_COMP_strings': Function(type='void', derefcnt=0, name='ERR_load_COMP_strings', args=[]), 'ERR_load_CRYPTO_strings': Function(type='void', derefcnt=0, name='ERR_load_CRYPTO_strings', args=[]), 'ERR_load_DH_strings': Function(type='void', derefcnt=0, name='ERR_load_DH_strings', args=[]), 'ERR_load_DSA_strings': Function(type='void', derefcnt=0, name='ERR_load_DSA_strings', args=[]), 'ERR_load_ECDH_strings': Function(type='void', derefcnt=0, name='ERR_load_ECDH_strings', args=[]), 'ERR_load_ECDSA_strings': Function(type='void', derefcnt=0, name='ERR_load_ECDSA_strings', args=[]), 'ERR_load_EC_strings': Function(type='void', derefcnt=0, name='ERR_load_EC_strings', args=[]), 'ERR_load_EVP_strings': Function(type='void', derefcnt=0, name='ERR_load_EVP_strings', args=[]), 'ERR_load_OBJ_strings': Function(type='void', derefcnt=0, name='ERR_load_OBJ_strings', args=[]), 'ERR_load_PEM_strings': Function(type='void', derefcnt=0, name='ERR_load_PEM_strings', args=[]), 'ERR_load_PKCS7_strings': Function(type='void', derefcnt=0, name='ERR_load_PKCS7_strings', args=[]), 'ERR_load_RSA_strings': Function(type='void', derefcnt=0, name='ERR_load_RSA_strings', args=[]), 'ERR_load_SSL_strings': Function(type='void', derefcnt=0, name='ERR_load_SSL_strings', args=[]), 'ERR_load_X509_strings': Function(type='void', derefcnt=0, name='ERR_load_X509_strings', args=[]), 'EVP_BytesToKey': Function(type='int', derefcnt=0, name='EVP_BytesToKey', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='type'), Argument(type='EVP_MD', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='datal'), Argument(type='int', derefcnt=0, name='count'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=1, name='iv')]), 'EVP_CIPHER_CTX_block_size': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_block_size', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx')]), 'EVP_CIPHER_CTX_cipher': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_CIPHER_CTX_cipher', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx')]), 'EVP_CIPHER_CTX_cleanup': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_cleanup', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='a')]), 'EVP_CIPHER_CTX_clear_flags': Function(type='void', derefcnt=0, name='EVP_CIPHER_CTX_clear_flags', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='flags')]), 'EVP_CIPHER_CTX_copy': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_copy', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='out'), Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='in')]), 'EVP_CIPHER_CTX_ctrl': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_ctrl', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='arg'), Argument(type='void', derefcnt=1, name='ptr')]), 'EVP_CIPHER_CTX_flags': Function(type='unsigned', derefcnt=0, name='EVP_CIPHER_CTX_flags', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx')]), 'EVP_CIPHER_CTX_free': Function(type='void', derefcnt=0, name='EVP_CIPHER_CTX_free', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='a')]), 'EVP_CIPHER_CTX_get_app_data': Function(type='void', derefcnt=1, name='EVP_CIPHER_CTX_get_app_data', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx')]), 'EVP_CIPHER_CTX_init': Function(type='void', derefcnt=0, name='EVP_CIPHER_CTX_init', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='a')]), 'EVP_CIPHER_CTX_iv_length': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_iv_length', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx')]), 'EVP_CIPHER_CTX_key_length': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_key_length', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx')]), 'EVP_CIPHER_CTX_new': Function(type='EVP_CIPHER_CTX', derefcnt=1, name='EVP_CIPHER_CTX_new', args=[]), 'EVP_CIPHER_CTX_nid': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_nid', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx')]), 'EVP_CIPHER_CTX_rand_key': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_rand_key', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='key')]), 'EVP_CIPHER_CTX_set_app_data': Function(type='void', derefcnt=0, name='EVP_CIPHER_CTX_set_app_data', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='data')]), 'EVP_CIPHER_CTX_set_flags': Function(type='void', derefcnt=0, name='EVP_CIPHER_CTX_set_flags', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='flags')]), 'EVP_CIPHER_CTX_set_key_length': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_set_key_length', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='keylen')]), 'EVP_CIPHER_CTX_set_padding': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_set_padding', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='c'), Argument(type='int', derefcnt=0, name='pad')]), 'EVP_CIPHER_CTX_test_flags': Function(type='int', derefcnt=0, name='EVP_CIPHER_CTX_test_flags', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='flags')]), 'EVP_CIPHER_asn1_to_param': Function(type='int', derefcnt=0, name='EVP_CIPHER_asn1_to_param', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='c'), Argument(type='ASN1_TYPE', derefcnt=1, name='type')]), 'EVP_CIPHER_block_size': Function(type='int', derefcnt=0, name='EVP_CIPHER_block_size', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher')]), 'EVP_CIPHER_do_all': Function(type='void', derefcnt=0, name='EVP_CIPHER_do_all', args=[Argument(type='void', derefcnt=0, name='fn'), Argument(type='void', derefcnt=1, name='arg')]), 'EVP_CIPHER_do_all_sorted': Function(type='void', derefcnt=0, name='EVP_CIPHER_do_all_sorted', args=[Argument(type='void', derefcnt=0, name='fn'), Argument(type='void', derefcnt=1, name='arg')]), 'EVP_CIPHER_flags': Function(type='unsigned', derefcnt=0, name='EVP_CIPHER_flags', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher')]), 'EVP_CIPHER_get_asn1_iv': Function(type='int', derefcnt=0, name='EVP_CIPHER_get_asn1_iv', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='c'), Argument(type='ASN1_TYPE', derefcnt=1, name='type')]), 'EVP_CIPHER_iv_length': Function(type='int', derefcnt=0, name='EVP_CIPHER_iv_length', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher')]), 'EVP_CIPHER_key_length': Function(type='int', derefcnt=0, name='EVP_CIPHER_key_length', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher')]), 'EVP_CIPHER_nid': Function(type='int', derefcnt=0, name='EVP_CIPHER_nid', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher')]), 'EVP_CIPHER_param_to_asn1': Function(type='int', derefcnt=0, name='EVP_CIPHER_param_to_asn1', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='c'), Argument(type='ASN1_TYPE', derefcnt=1, name='type')]), 'EVP_CIPHER_set_asn1_iv': Function(type='int', derefcnt=0, name='EVP_CIPHER_set_asn1_iv', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='c'), Argument(type='ASN1_TYPE', derefcnt=1, name='type')]), 'EVP_CIPHER_type': Function(type='int', derefcnt=0, name='EVP_CIPHER_type', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='ctx')]), 'EVP_Cipher': Function(type='int', derefcnt=0, name='EVP_Cipher', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='c'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='unsigned', derefcnt=0, name='inl')]), 'EVP_CipherFinal': Function(type='int', derefcnt=0, name='EVP_CipherFinal', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='outm'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_CipherFinal_ex': Function(type='int', derefcnt=0, name='EVP_CipherFinal_ex', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='outm'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_CipherInit': Function(type='int', derefcnt=0, name='EVP_CipherInit', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=1, name='iv'), Argument(type='int', derefcnt=0, name='enc')]), 'EVP_CipherInit_ex': Function(type='int', derefcnt=0, name='EVP_CipherInit_ex', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='ENGINE', derefcnt=1, name='impl'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=1, name='iv'), Argument(type='int', derefcnt=0, name='enc')]), 'EVP_CipherUpdate': Function(type='int', derefcnt=0, name='EVP_CipherUpdate', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='inl')]), 'EVP_DecodeBlock': Function(type='int', derefcnt=0, name='EVP_DecodeBlock', args=[Argument(type='unsigned', derefcnt=1, name='t'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='n')]), 'EVP_DecodeFinal': Function(type='int', derefcnt=0, name='EVP_DecodeFinal', args=[Argument(type='EVP_ENCODE_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_DecodeInit': Function(type='void', derefcnt=0, name='EVP_DecodeInit', args=[Argument(type='EVP_ENCODE_CTX', derefcnt=1, name='ctx')]), 'EVP_DecodeUpdate': Function(type='int', derefcnt=0, name='EVP_DecodeUpdate', args=[Argument(type='EVP_ENCODE_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='inl')]), 'EVP_DecryptFinal': Function(type='int', derefcnt=0, name='EVP_DecryptFinal', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='outm'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_DecryptFinal_ex': Function(type='int', derefcnt=0, name='EVP_DecryptFinal_ex', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='outm'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_DecryptInit': Function(type='int', derefcnt=0, name='EVP_DecryptInit', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=1, name='iv')]), 'EVP_DecryptInit_ex': Function(type='int', derefcnt=0, name='EVP_DecryptInit_ex', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='ENGINE', derefcnt=1, name='impl'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=1, name='iv')]), 'EVP_DecryptUpdate': Function(type='int', derefcnt=0, name='EVP_DecryptUpdate', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='inl')]), 'EVP_Digest': Function(type='int', derefcnt=0, name='EVP_Digest', args=[Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='count'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='size'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='ENGINE', derefcnt=1, name='impl')]), 'EVP_DigestFinal': Function(type='int', derefcnt=0, name='EVP_DigestFinal', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='s')]), 'EVP_DigestFinal_ex': Function(type='int', derefcnt=0, name='EVP_DigestFinal_ex', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='s')]), 'EVP_DigestInit': Function(type='int', derefcnt=0, name='EVP_DigestInit', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_MD', derefcnt=1, name='type')]), 'EVP_DigestInit_ex': Function(type='int', derefcnt=0, name='EVP_DigestInit_ex', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='ENGINE', derefcnt=1, name='impl')]), 'EVP_DigestSignFinal': Function(type='int', derefcnt=0, name='EVP_DigestSignFinal', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sigret'), Argument(type='size_t', derefcnt=1, name='siglen')]), 'EVP_DigestSignInit': Function(type='int', derefcnt=0, name='EVP_DigestSignInit', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_PKEY_CTX', derefcnt=2, name='pctx'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='ENGINE', derefcnt=1, name='e'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_DigestUpdate': Function(type='int', derefcnt=0, name='EVP_DigestUpdate', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='cnt')]), 'EVP_DigestVerifyFinal': Function(type='int', derefcnt=0, name='EVP_DigestVerifyFinal', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='size_t', derefcnt=0, name='siglen')]), 'EVP_DigestVerifyInit': Function(type='int', derefcnt=0, name='EVP_DigestVerifyInit', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_PKEY_CTX', derefcnt=2, name='pctx'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='ENGINE', derefcnt=1, name='e'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_EncodeBlock': Function(type='int', derefcnt=0, name='EVP_EncodeBlock', args=[Argument(type='unsigned', derefcnt=1, name='t'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='n')]), 'EVP_EncodeFinal': Function(type='void', derefcnt=0, name='EVP_EncodeFinal', args=[Argument(type='EVP_ENCODE_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_EncodeInit': Function(type='void', derefcnt=0, name='EVP_EncodeInit', args=[Argument(type='EVP_ENCODE_CTX', derefcnt=1, name='ctx')]), 'EVP_EncodeUpdate': Function(type='void', derefcnt=0, name='EVP_EncodeUpdate', args=[Argument(type='EVP_ENCODE_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='inl')]), 'EVP_EncryptFinal': Function(type='int', derefcnt=0, name='EVP_EncryptFinal', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_EncryptFinal_ex': Function(type='int', derefcnt=0, name='EVP_EncryptFinal_ex', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_EncryptInit': Function(type='int', derefcnt=0, name='EVP_EncryptInit', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=1, name='iv')]), 'EVP_EncryptInit_ex': Function(type='int', derefcnt=0, name='EVP_EncryptInit_ex', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='ENGINE', derefcnt=1, name='impl'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=1, name='iv')]), 'EVP_EncryptUpdate': Function(type='int', derefcnt=0, name='EVP_EncryptUpdate', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='inl')]), 'EVP_MD_CTX_cleanup': Function(type='int', derefcnt=0, name='EVP_MD_CTX_cleanup', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'EVP_MD_CTX_clear_flags': Function(type='void', derefcnt=0, name='EVP_MD_CTX_clear_flags', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='flags')]), 'EVP_MD_CTX_copy': Function(type='int', derefcnt=0, name='EVP_MD_CTX_copy', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='out'), Argument(type='EVP_MD_CTX', derefcnt=1, name='in')]), 'EVP_MD_CTX_copy_ex': Function(type='int', derefcnt=0, name='EVP_MD_CTX_copy_ex', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='out'), Argument(type='EVP_MD_CTX', derefcnt=1, name='in')]), 'EVP_MD_CTX_create': Function(type='EVP_MD_CTX', derefcnt=1, name='EVP_MD_CTX_create', args=[]), 'EVP_MD_CTX_destroy': Function(type='void', derefcnt=0, name='EVP_MD_CTX_destroy', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'EVP_MD_CTX_init': Function(type='void', derefcnt=0, name='EVP_MD_CTX_init', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'EVP_MD_CTX_md': Function(type='EVP_MD', derefcnt=1, name='EVP_MD_CTX_md', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'EVP_MD_CTX_set_flags': Function(type='void', derefcnt=0, name='EVP_MD_CTX_set_flags', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='flags')]), 'EVP_MD_CTX_test_flags': Function(type='int', derefcnt=0, name='EVP_MD_CTX_test_flags', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='flags')]), 'EVP_MD_block_size': Function(type='int', derefcnt=0, name='EVP_MD_block_size', args=[Argument(type='EVP_MD', derefcnt=1, name='md')]), 'EVP_MD_do_all': Function(type='void', derefcnt=0, name='EVP_MD_do_all', args=[Argument(type='void', derefcnt=0, name='fn'), Argument(type='void', derefcnt=1, name='arg')]), 'EVP_MD_do_all_sorted': Function(type='void', derefcnt=0, name='EVP_MD_do_all_sorted', args=[Argument(type='void', derefcnt=0, name='fn'), Argument(type='void', derefcnt=1, name='arg')]), 'EVP_MD_flags': Function(type='unsigned', derefcnt=0, name='EVP_MD_flags', args=[Argument(type='EVP_MD', derefcnt=1, name='md')]), 'EVP_MD_pkey_type': Function(type='int', derefcnt=0, name='EVP_MD_pkey_type', args=[Argument(type='EVP_MD', derefcnt=1, name='md')]), 'EVP_MD_size': Function(type='int', derefcnt=0, name='EVP_MD_size', args=[Argument(type='EVP_MD', derefcnt=1, name='md')]), 'EVP_MD_type': Function(type='int', derefcnt=0, name='EVP_MD_type', args=[Argument(type='EVP_MD', derefcnt=1, name='md')]), 'EVP_OpenFinal': Function(type='int', derefcnt=0, name='EVP_OpenFinal', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_OpenInit': Function(type='int', derefcnt=0, name='EVP_OpenInit', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=1, name='ek'), Argument(type='int', derefcnt=0, name='ekl'), Argument(type='unsigned', derefcnt=1, name='iv'), Argument(type='EVP_PKEY', derefcnt=1, name='priv')]), 'EVP_PBE_CipherInit': Function(type='int', derefcnt=0, name='EVP_PBE_CipherInit', args=[Argument(type='ASN1_OBJECT', derefcnt=1, name='pbe_obj'), Argument(type='char', derefcnt=1, name='pass'), Argument(type='int', derefcnt=0, name='passlen'), Argument(type='ASN1_TYPE', derefcnt=1, name='param'), Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='en_de')]), 'EVP_PBE_KEYGEN': Function(type='int', derefcnt=0, name='EVP_PBE_KEYGEN', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='pass'), Argument(type='int', derefcnt=0, name='passlen'), Argument(type='ASN1_TYPE', derefcnt=1, name='param'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='EVP_MD', derefcnt=1, name='md'), Argument(type='int', derefcnt=0, name='en_de')]), 'EVP_PBE_alg_add': Function(type='int', derefcnt=0, name='EVP_PBE_alg_add', args=[Argument(type='int', derefcnt=0, name='nid'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='EVP_MD', derefcnt=1, name='md'), Argument(type='EVP_PBE_KEYGEN', derefcnt=1, name='keygen')]), 'EVP_PBE_alg_add_type': Function(type='int', derefcnt=0, name='EVP_PBE_alg_add_type', args=[Argument(type='int', derefcnt=0, name='pbe_type'), Argument(type='int', derefcnt=0, name='pbe_nid'), Argument(type='int', derefcnt=0, name='cipher_nid'), Argument(type='int', derefcnt=0, name='md_nid'), Argument(type='EVP_PBE_KEYGEN', derefcnt=1, name='keygen')]), 'EVP_PBE_cleanup': Function(type='void', derefcnt=0, name='EVP_PBE_cleanup', args=[]), 'EVP_PBE_find': Function(type='int', derefcnt=0, name='EVP_PBE_find', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='pbe_nid'), Argument(type='int', derefcnt=1, name='pcnid'), Argument(type='int', derefcnt=1, name='pmnid'), Argument(type='EVP_PBE_KEYGEN', derefcnt=2, name='pkeygen')]), 'EVP_PKCS82PKEY': Function(type='EVP_PKEY', derefcnt=1, name='EVP_PKCS82PKEY', args=[Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='p8')]), 'EVP_PKEY2PKCS8': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='EVP_PKEY2PKCS8', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY2PKCS8_broken': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='EVP_PKEY2PKCS8_broken', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=0, name='broken')]), 'EVP_PKEY_CTX_ctrl': Function(type='int', derefcnt=0, name='EVP_PKEY_CTX_ctrl', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='keytype'), Argument(type='int', derefcnt=0, name='optype'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='int', derefcnt=0, name='p1'), Argument(type='void', derefcnt=1, name='p2')]), 'EVP_PKEY_CTX_ctrl_str': Function(type='int', derefcnt=0, name='EVP_PKEY_CTX_ctrl_str', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='type'), Argument(type='char', derefcnt=1, name='value')]), 'EVP_PKEY_CTX_dup': Function(type='EVP_PKEY_CTX', derefcnt=1, name='EVP_PKEY_CTX_dup', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_free': Function(type='void', derefcnt=0, name='EVP_PKEY_CTX_free', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_get0_peerkey': Function(type='EVP_PKEY', derefcnt=1, name='EVP_PKEY_CTX_get0_peerkey', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_get0_pkey': Function(type='EVP_PKEY', derefcnt=1, name='EVP_PKEY_CTX_get0_pkey', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_get_app_data': Function(type='void', derefcnt=1, name='EVP_PKEY_CTX_get_app_data', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_get_cb': Function(type='EVP_PKEY_gen_cb', derefcnt=1, name='EVP_PKEY_CTX_get_cb', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_get_data': Function(type='void', derefcnt=1, name='EVP_PKEY_CTX_get_data', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_get_keygen_info': Function(type='int', derefcnt=0, name='EVP_PKEY_CTX_get_keygen_info', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='idx')]), 'EVP_PKEY_CTX_get_operation': Function(type='int', derefcnt=0, name='EVP_PKEY_CTX_get_operation', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_CTX_new': Function(type='EVP_PKEY_CTX', derefcnt=1, name='EVP_PKEY_CTX_new', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='ENGINE', derefcnt=1, name='e')]), 'EVP_PKEY_CTX_new_id': Function(type='EVP_PKEY_CTX', derefcnt=1, name='EVP_PKEY_CTX_new_id', args=[Argument(type='int', derefcnt=0, name='id'), Argument(type='ENGINE', derefcnt=1, name='e')]), 'EVP_PKEY_CTX_set0_keygen_info': Function(type='void', derefcnt=0, name='EVP_PKEY_CTX_set0_keygen_info', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=1, name='dat'), Argument(type='int', derefcnt=0, name='datlen')]), 'EVP_PKEY_CTX_set_app_data': Function(type='void', derefcnt=0, name='EVP_PKEY_CTX_set_app_data', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='data')]), 'EVP_PKEY_CTX_set_cb': Function(type='void', derefcnt=0, name='EVP_PKEY_CTX_set_cb', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_PKEY_gen_cb', derefcnt=1, name='cb')]), 'EVP_PKEY_CTX_set_data': Function(type='void', derefcnt=0, name='EVP_PKEY_CTX_set_data', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='data')]), 'EVP_PKEY_add1_attr': Function(type='int', derefcnt=0, name='EVP_PKEY_add1_attr', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr')]), 'EVP_PKEY_add1_attr_by_NID': Function(type='int', derefcnt=0, name='EVP_PKEY_add1_attr_by_NID', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'EVP_PKEY_add1_attr_by_OBJ': Function(type='int', derefcnt=0, name='EVP_PKEY_add1_attr_by_OBJ', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'EVP_PKEY_add1_attr_by_txt': Function(type='int', derefcnt=0, name='EVP_PKEY_add1_attr_by_txt', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='char', derefcnt=1, name='attrname'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'EVP_PKEY_asn1_add0': Function(type='int', derefcnt=0, name='EVP_PKEY_asn1_add0', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth')]), 'EVP_PKEY_asn1_add_alias': Function(type='int', derefcnt=0, name='EVP_PKEY_asn1_add_alias', args=[Argument(type='int', derefcnt=0, name='to'), Argument(type='int', derefcnt=0, name='from')]), 'EVP_PKEY_asn1_copy': Function(type='void', derefcnt=0, name='EVP_PKEY_asn1_copy', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='dst'), Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='src')]), 'EVP_PKEY_asn1_find': Function(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='EVP_PKEY_asn1_find', args=[Argument(type='ENGINE', derefcnt=2, name='pe'), Argument(type='int', derefcnt=0, name='type')]), 'EVP_PKEY_asn1_find_str': Function(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='EVP_PKEY_asn1_find_str', args=[Argument(type='ENGINE', derefcnt=2, name='pe'), Argument(type='char', derefcnt=1, name='str'), Argument(type='int', derefcnt=0, name='len')]), 'EVP_PKEY_asn1_free': Function(type='void', derefcnt=0, name='EVP_PKEY_asn1_free', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth')]), 'EVP_PKEY_asn1_get0': Function(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='EVP_PKEY_asn1_get0', args=[Argument(type='int', derefcnt=0, name='idx')]), 'EVP_PKEY_asn1_get0_info': Function(type='int', derefcnt=0, name='EVP_PKEY_asn1_get0_info', args=[Argument(type='int', derefcnt=1, name='ppkey_id'), Argument(type='int', derefcnt=1, name='pkey_base_id'), Argument(type='int', derefcnt=1, name='ppkey_flags'), Argument(type='char', derefcnt=2, name='pinfo'), Argument(type='char', derefcnt=2, name='ppem_str'), Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth')]), 'EVP_PKEY_asn1_get_count': Function(type='int', derefcnt=0, name='EVP_PKEY_asn1_get_count', args=[]), 'EVP_PKEY_asn1_new': Function(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='EVP_PKEY_asn1_new', args=[Argument(type='int', derefcnt=0, name='id'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='pem_str'), Argument(type='char', derefcnt=1, name='info')]), 'EVP_PKEY_asn1_set_ctrl': Function(type='void', derefcnt=0, name='EVP_PKEY_asn1_set_ctrl', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth'), Argument(type='int', derefcnt=0, name='pkey_ctrl')]), 'EVP_PKEY_asn1_set_free': Function(type='void', derefcnt=0, name='EVP_PKEY_asn1_set_free', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth'), Argument(type='void', derefcnt=0, name='pkey_free')]), 'EVP_PKEY_asn1_set_param': Function(type='void', derefcnt=0, name='EVP_PKEY_asn1_set_param', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth'), Argument(type='int', derefcnt=0, name='param_decode'), Argument(type='int', derefcnt=0, name='param_encode'), Argument(type='int', derefcnt=0, name='param_missing'), Argument(type='int', derefcnt=0, name='param_copy'), Argument(type='int', derefcnt=0, name='param_cmp'), Argument(type='int', derefcnt=0, name='param_print')]), 'EVP_PKEY_asn1_set_private': Function(type='void', derefcnt=0, name='EVP_PKEY_asn1_set_private', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth'), Argument(type='int', derefcnt=0, name='priv_decode'), Argument(type='int', derefcnt=0, name='priv_encode'), Argument(type='int', derefcnt=0, name='priv_print')]), 'EVP_PKEY_asn1_set_public': Function(type='void', derefcnt=0, name='EVP_PKEY_asn1_set_public', args=[Argument(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='ameth'), Argument(type='int', derefcnt=0, name='pub_decode'), Argument(type='int', derefcnt=0, name='pub_encode'), Argument(type='int', derefcnt=0, name='pub_cmp'), Argument(type='int', derefcnt=0, name='pub_print'), Argument(type='int', derefcnt=0, name='pkey_size'), Argument(type='int', derefcnt=0, name='pkey_bits')]), 'EVP_PKEY_assign': Function(type='int', derefcnt=0, name='EVP_PKEY_assign', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=0, name='type'), Argument(type='void', derefcnt=1, name='key')]), 'EVP_PKEY_base_id': Function(type='int', derefcnt=0, name='EVP_PKEY_base_id', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_bits': Function(type='int', derefcnt=0, name='EVP_PKEY_bits', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_cmp': Function(type='int', derefcnt=0, name='EVP_PKEY_cmp', args=[Argument(type='EVP_PKEY', derefcnt=1, name='a'), Argument(type='EVP_PKEY', derefcnt=1, name='b')]), 'EVP_PKEY_cmp_parameters': Function(type='int', derefcnt=0, name='EVP_PKEY_cmp_parameters', args=[Argument(type='EVP_PKEY', derefcnt=1, name='a'), Argument(type='EVP_PKEY', derefcnt=1, name='b')]), 'EVP_PKEY_copy_parameters': Function(type='int', derefcnt=0, name='EVP_PKEY_copy_parameters', args=[Argument(type='EVP_PKEY', derefcnt=1, name='to'), Argument(type='EVP_PKEY', derefcnt=1, name='from')]), 'EVP_PKEY_decrypt': Function(type='int', derefcnt=0, name='EVP_PKEY_decrypt', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='outlen'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='inlen')]), 'EVP_PKEY_decrypt_init': Function(type='int', derefcnt=0, name='EVP_PKEY_decrypt_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_decrypt_old': Function(type='int', derefcnt=0, name='EVP_PKEY_decrypt_old', args=[Argument(type='unsigned', derefcnt=1, name='dec_key'), Argument(type='unsigned', derefcnt=1, name='enc_key'), Argument(type='int', derefcnt=0, name='enc_key_len'), Argument(type='EVP_PKEY', derefcnt=1, name='private_key')]), 'EVP_PKEY_delete_attr': Function(type='X509_ATTRIBUTE', derefcnt=1, name='EVP_PKEY_delete_attr', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='loc')]), 'EVP_PKEY_derive': Function(type='int', derefcnt=0, name='EVP_PKEY_derive', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='size_t', derefcnt=1, name='keylen')]), 'EVP_PKEY_derive_init': Function(type='int', derefcnt=0, name='EVP_PKEY_derive_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_derive_set_peer': Function(type='int', derefcnt=0, name='EVP_PKEY_derive_set_peer', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_PKEY', derefcnt=1, name='peer')]), 'EVP_PKEY_encrypt': Function(type='int', derefcnt=0, name='EVP_PKEY_encrypt', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='outlen'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='inlen')]), 'EVP_PKEY_encrypt_init': Function(type='int', derefcnt=0, name='EVP_PKEY_encrypt_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_encrypt_old': Function(type='int', derefcnt=0, name='EVP_PKEY_encrypt_old', args=[Argument(type='unsigned', derefcnt=1, name='enc_key'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='key_len'), Argument(type='EVP_PKEY', derefcnt=1, name='pub_key')]), 'EVP_PKEY_free': Function(type='void', derefcnt=0, name='EVP_PKEY_free', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_gen_cb': Function(type='int', derefcnt=0, name='EVP_PKEY_gen_cb', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_get0': Function(type='void', derefcnt=1, name='EVP_PKEY_get0', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_get0_asn1': Function(type='EVP_PKEY_ASN1_METHOD', derefcnt=1, name='EVP_PKEY_get0_asn1', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_get1_DH': Function(type='dh_st', derefcnt=1, name='EVP_PKEY_get1_DH', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_get1_DSA': Function(type='dsa_st', derefcnt=1, name='EVP_PKEY_get1_DSA', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_get1_EC_KEY': Function(type='ec_key_st', derefcnt=1, name='EVP_PKEY_get1_EC_KEY', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_get1_RSA': Function(type='rsa_st', derefcnt=1, name='EVP_PKEY_get1_RSA', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_get_attr': Function(type='X509_ATTRIBUTE', derefcnt=1, name='EVP_PKEY_get_attr', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='loc')]), 'EVP_PKEY_get_attr_by_NID': Function(type='int', derefcnt=0, name='EVP_PKEY_get_attr_by_NID', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'EVP_PKEY_get_attr_by_OBJ': Function(type='int', derefcnt=0, name='EVP_PKEY_get_attr_by_OBJ', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'EVP_PKEY_get_attr_count': Function(type='int', derefcnt=0, name='EVP_PKEY_get_attr_count', args=[Argument(type='EVP_PKEY', derefcnt=1, name='key')]), 'EVP_PKEY_get_default_digest_nid': Function(type='int', derefcnt=0, name='EVP_PKEY_get_default_digest_nid', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=1, name='pnid')]), 'EVP_PKEY_id': Function(type='int', derefcnt=0, name='EVP_PKEY_id', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_keygen': Function(type='int', derefcnt=0, name='EVP_PKEY_keygen', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_PKEY', derefcnt=2, name='ppkey')]), 'EVP_PKEY_keygen_init': Function(type='int', derefcnt=0, name='EVP_PKEY_keygen_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_meth_add0': Function(type='int', derefcnt=0, name='EVP_PKEY_meth_add0', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth')]), 'EVP_PKEY_meth_copy': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_copy', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='dst'), Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='src')]), 'EVP_PKEY_meth_find': Function(type='EVP_PKEY_METHOD', derefcnt=1, name='EVP_PKEY_meth_find', args=[Argument(type='int', derefcnt=0, name='type')]), 'EVP_PKEY_meth_free': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_free', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth')]), 'EVP_PKEY_meth_get0_info': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_get0_info', args=[Argument(type='int', derefcnt=1, name='ppkey_id'), Argument(type='int', derefcnt=1, name='pflags'), Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='meth')]), 'EVP_PKEY_meth_new': Function(type='EVP_PKEY_METHOD', derefcnt=1, name='EVP_PKEY_meth_new', args=[Argument(type='int', derefcnt=0, name='id'), Argument(type='int', derefcnt=0, name='flags')]), 'EVP_PKEY_meth_set_cleanup': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_cleanup', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='void', derefcnt=0, name='cleanup')]), 'EVP_PKEY_meth_set_copy': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_copy', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='copy')]), 'EVP_PKEY_meth_set_ctrl': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_ctrl', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='ctrl'), Argument(type='int', derefcnt=0, name='ctrl_str')]), 'EVP_PKEY_meth_set_decrypt': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_decrypt', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='decrypt_init'), Argument(type='int', derefcnt=0, name='decrypt')]), 'EVP_PKEY_meth_set_derive': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_derive', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='derive_init'), Argument(type='int', derefcnt=0, name='derive')]), 'EVP_PKEY_meth_set_encrypt': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_encrypt', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='encrypt_init'), Argument(type='int', derefcnt=0, name='encryptfn')]), 'EVP_PKEY_meth_set_init': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_init', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='init')]), 'EVP_PKEY_meth_set_keygen': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_keygen', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='keygen_init'), Argument(type='int', derefcnt=0, name='keygen')]), 'EVP_PKEY_meth_set_paramgen': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_paramgen', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='paramgen_init'), Argument(type='int', derefcnt=0, name='paramgen')]), 'EVP_PKEY_meth_set_sign': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_sign', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='sign_init'), Argument(type='int', derefcnt=0, name='sign')]), 'EVP_PKEY_meth_set_signctx': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_signctx', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='signctx_init'), Argument(type='int', derefcnt=0, name='signctx')]), 'EVP_PKEY_meth_set_verify': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_verify', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='verify_init'), Argument(type='int', derefcnt=0, name='verify')]), 'EVP_PKEY_meth_set_verify_recover': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_verify_recover', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='verify_recover_init'), Argument(type='int', derefcnt=0, name='verify_recover')]), 'EVP_PKEY_meth_set_verifyctx': Function(type='void', derefcnt=0, name='EVP_PKEY_meth_set_verifyctx', args=[Argument(type='EVP_PKEY_METHOD', derefcnt=1, name='pmeth'), Argument(type='int', derefcnt=0, name='verifyctx_init'), Argument(type='int', derefcnt=0, name='verifyctx')]), 'EVP_PKEY_missing_parameters': Function(type='int', derefcnt=0, name='EVP_PKEY_missing_parameters', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_new': Function(type='EVP_PKEY', derefcnt=1, name='EVP_PKEY_new', args=[]), 'EVP_PKEY_new_mac_key': Function(type='EVP_PKEY', derefcnt=1, name='EVP_PKEY_new_mac_key', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='ENGINE', derefcnt=1, name='e'), Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='keylen')]), 'EVP_PKEY_paramgen': Function(type='int', derefcnt=0, name='EVP_PKEY_paramgen', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_PKEY', derefcnt=2, name='ppkey')]), 'EVP_PKEY_paramgen_init': Function(type='int', derefcnt=0, name='EVP_PKEY_paramgen_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_print_params': Function(type='int', derefcnt=0, name='EVP_PKEY_print_params', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='ASN1_PCTX', derefcnt=1, name='pctx')]), 'EVP_PKEY_print_private': Function(type='int', derefcnt=0, name='EVP_PKEY_print_private', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='ASN1_PCTX', derefcnt=1, name='pctx')]), 'EVP_PKEY_print_public': Function(type='int', derefcnt=0, name='EVP_PKEY_print_public', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='ASN1_PCTX', derefcnt=1, name='pctx')]), 'EVP_PKEY_save_parameters': Function(type='int', derefcnt=0, name='EVP_PKEY_save_parameters', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=0, name='mode')]), 'EVP_PKEY_set1_DH': Function(type='int', derefcnt=0, name='EVP_PKEY_set1_DH', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='dh_st', derefcnt=1, name='key')]), 'EVP_PKEY_set1_DSA': Function(type='int', derefcnt=0, name='EVP_PKEY_set1_DSA', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='dsa_st', derefcnt=1, name='key')]), 'EVP_PKEY_set1_EC_KEY': Function(type='int', derefcnt=0, name='EVP_PKEY_set1_EC_KEY', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='ec_key_st', derefcnt=1, name='key')]), 'EVP_PKEY_set1_RSA': Function(type='int', derefcnt=0, name='EVP_PKEY_set1_RSA', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='rsa_st', derefcnt=1, name='key')]), 'EVP_PKEY_set_type': Function(type='int', derefcnt=0, name='EVP_PKEY_set_type', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='int', derefcnt=0, name='type')]), 'EVP_PKEY_set_type_str': Function(type='int', derefcnt=0, name='EVP_PKEY_set_type_str', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='char', derefcnt=1, name='str'), Argument(type='int', derefcnt=0, name='len')]), 'EVP_PKEY_sign': Function(type='int', derefcnt=0, name='EVP_PKEY_sign', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='size_t', derefcnt=1, name='siglen'), Argument(type='unsigned', derefcnt=1, name='tbs'), Argument(type='size_t', derefcnt=0, name='tbslen')]), 'EVP_PKEY_sign_init': Function(type='int', derefcnt=0, name='EVP_PKEY_sign_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_size': Function(type='int', derefcnt=0, name='EVP_PKEY_size', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_PKEY_type': Function(type='int', derefcnt=0, name='EVP_PKEY_type', args=[Argument(type='int', derefcnt=0, name='type')]), 'EVP_PKEY_verify': Function(type='int', derefcnt=0, name='EVP_PKEY_verify', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='size_t', derefcnt=0, name='siglen'), Argument(type='unsigned', derefcnt=1, name='tbs'), Argument(type='size_t', derefcnt=0, name='tbslen')]), 'EVP_PKEY_verify_init': Function(type='int', derefcnt=0, name='EVP_PKEY_verify_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_PKEY_verify_recover': Function(type='int', derefcnt=0, name='EVP_PKEY_verify_recover', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='rout'), Argument(type='size_t', derefcnt=1, name='routlen'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='size_t', derefcnt=0, name='siglen')]), 'EVP_PKEY_verify_recover_init': Function(type='int', derefcnt=0, name='EVP_PKEY_verify_recover_init', args=[Argument(type='EVP_PKEY_CTX', derefcnt=1, name='ctx')]), 'EVP_SealFinal': Function(type='int', derefcnt=0, name='EVP_SealFinal', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl')]), 'EVP_SealInit': Function(type='int', derefcnt=0, name='EVP_SealInit', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=2, name='ek'), Argument(type='int', derefcnt=1, name='ekl'), Argument(type='unsigned', derefcnt=1, name='iv'), Argument(type='EVP_PKEY', derefcnt=2, name='pubk'), Argument(type='int', derefcnt=0, name='npubk')]), 'EVP_SignFinal': Function(type='int', derefcnt=0, name='EVP_SignFinal', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='s'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_VerifyFinal': Function(type='int', derefcnt=0, name='EVP_VerifyFinal', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sigbuf'), Argument(type='unsigned', derefcnt=0, name='siglen'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'EVP_add_alg_module': Function(type='void', derefcnt=0, name='EVP_add_alg_module', args=[]), 'EVP_add_cipher': Function(type='int', derefcnt=0, name='EVP_add_cipher', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher')]), 'EVP_add_digest': Function(type='int', derefcnt=0, name='EVP_add_digest', args=[Argument(type='EVP_MD', derefcnt=1, name='digest')]), 'EVP_aes_128_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_cbc', args=[]), 'EVP_aes_128_cbc_hmac_sha1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_cbc_hmac_sha1', args=[]), 'EVP_aes_128_ccm': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_ccm', args=[]), 'EVP_aes_128_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_cfb1', args=[]), 'EVP_aes_128_cfb128': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_cfb128', args=[]), 'EVP_aes_128_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_cfb8', args=[]), 'EVP_aes_128_ctr': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_ctr', args=[]), 'EVP_aes_128_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_ecb', args=[]), 'EVP_aes_128_gcm': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_gcm', args=[]), 'EVP_aes_128_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_ofb', args=[]), 'EVP_aes_128_xts': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_128_xts', args=[]), 'EVP_aes_192_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_cbc', args=[]), 'EVP_aes_192_ccm': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_ccm', args=[]), 'EVP_aes_192_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_cfb1', args=[]), 'EVP_aes_192_cfb128': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_cfb128', args=[]), 'EVP_aes_192_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_cfb8', args=[]), 'EVP_aes_192_ctr': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_ctr', args=[]), 'EVP_aes_192_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_ecb', args=[]), 'EVP_aes_192_gcm': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_gcm', args=[]), 'EVP_aes_192_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_192_ofb', args=[]), 'EVP_aes_256_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_cbc', args=[]), 'EVP_aes_256_cbc_hmac_sha1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_cbc_hmac_sha1', args=[]), 'EVP_aes_256_ccm': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_ccm', args=[]), 'EVP_aes_256_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_cfb1', args=[]), 'EVP_aes_256_cfb128': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_cfb128', args=[]), 'EVP_aes_256_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_cfb8', args=[]), 'EVP_aes_256_ctr': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_ctr', args=[]), 'EVP_aes_256_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_ecb', args=[]), 'EVP_aes_256_gcm': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_gcm', args=[]), 'EVP_aes_256_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_ofb', args=[]), 'EVP_aes_256_xts': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_aes_256_xts', args=[]), 'EVP_bf_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_bf_cbc', args=[]), 'EVP_bf_cfb64': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_bf_cfb64', args=[]), 'EVP_bf_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_bf_ecb', args=[]), 'EVP_bf_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_bf_ofb', args=[]), 'EVP_camellia_128_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_128_cbc', args=[]), 'EVP_camellia_128_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_128_cfb1', args=[]), 'EVP_camellia_128_cfb128': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_128_cfb128', args=[]), 'EVP_camellia_128_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_128_cfb8', args=[]), 'EVP_camellia_128_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_128_ecb', args=[]), 'EVP_camellia_128_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_128_ofb', args=[]), 'EVP_camellia_192_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_192_cbc', args=[]), 'EVP_camellia_192_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_192_cfb1', args=[]), 'EVP_camellia_192_cfb128': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_192_cfb128', args=[]), 'EVP_camellia_192_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_192_cfb8', args=[]), 'EVP_camellia_192_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_192_ecb', args=[]), 'EVP_camellia_192_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_192_ofb', args=[]), 'EVP_camellia_256_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_256_cbc', args=[]), 'EVP_camellia_256_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_256_cfb1', args=[]), 'EVP_camellia_256_cfb128': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_256_cfb128', args=[]), 'EVP_camellia_256_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_256_cfb8', args=[]), 'EVP_camellia_256_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_256_ecb', args=[]), 'EVP_camellia_256_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_camellia_256_ofb', args=[]), 'EVP_cast5_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_cast5_cbc', args=[]), 'EVP_cast5_cfb64': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_cast5_cfb64', args=[]), 'EVP_cast5_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_cast5_ecb', args=[]), 'EVP_cast5_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_cast5_ofb', args=[]), 'EVP_cleanup': Function(type='void', derefcnt=0, name='EVP_cleanup', args=[]), 'EVP_des_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_cbc', args=[]), 'EVP_des_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_cfb1', args=[]), 'EVP_des_cfb64': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_cfb64', args=[]), 'EVP_des_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_cfb8', args=[]), 'EVP_des_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ecb', args=[]), 'EVP_des_ede': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede', args=[]), 'EVP_des_ede3': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede3', args=[]), 'EVP_des_ede3_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede3_cbc', args=[]), 'EVP_des_ede3_cfb1': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede3_cfb1', args=[]), 'EVP_des_ede3_cfb64': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede3_cfb64', args=[]), 'EVP_des_ede3_cfb8': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede3_cfb8', args=[]), 'EVP_des_ede3_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede3_ecb', args=[]), 'EVP_des_ede3_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede3_ofb', args=[]), 'EVP_des_ede_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede_cbc', args=[]), 'EVP_des_ede_cfb64': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede_cfb64', args=[]), 'EVP_des_ede_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede_ecb', args=[]), 'EVP_des_ede_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ede_ofb', args=[]), 'EVP_des_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_des_ofb', args=[]), 'EVP_desx_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_desx_cbc', args=[]), 'EVP_dss': Function(type='EVP_MD', derefcnt=1, name='EVP_dss', args=[]), 'EVP_dss1': Function(type='EVP_MD', derefcnt=1, name='EVP_dss1', args=[]), 'EVP_ecdsa': Function(type='EVP_MD', derefcnt=1, name='EVP_ecdsa', args=[]), 'EVP_enc_null': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_enc_null', args=[]), 'EVP_get_cipherbyname': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_get_cipherbyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'EVP_get_digestbyname': Function(type='EVP_MD', derefcnt=1, name='EVP_get_digestbyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'EVP_get_pw_prompt': Function(type='char', derefcnt=1, name='EVP_get_pw_prompt', args=[]), 'EVP_md4': Function(type='EVP_MD', derefcnt=1, name='EVP_md4', args=[]), 'EVP_md5': Function(type='EVP_MD', derefcnt=1, name='EVP_md5', args=[]), 'EVP_md_null': Function(type='EVP_MD', derefcnt=1, name='EVP_md_null', args=[]), 'EVP_rc2_40_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc2_40_cbc', args=[]), 'EVP_rc2_64_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc2_64_cbc', args=[]), 'EVP_rc2_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc2_cbc', args=[]), 'EVP_rc2_cfb64': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc2_cfb64', args=[]), 'EVP_rc2_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc2_ecb', args=[]), 'EVP_rc2_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc2_ofb', args=[]), 'EVP_rc4': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc4', args=[]), 'EVP_rc4_40': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc4_40', args=[]), 'EVP_rc4_hmac_md5': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_rc4_hmac_md5', args=[]), 'EVP_read_pw_string': Function(type='int', derefcnt=0, name='EVP_read_pw_string', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='length'), Argument(type='char', derefcnt=1, name='prompt'), Argument(type='int', derefcnt=0, name='verify')]), 'EVP_read_pw_string_min': Function(type='int', derefcnt=0, name='EVP_read_pw_string_min', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='minlen'), Argument(type='int', derefcnt=0, name='maxlen'), Argument(type='char', derefcnt=1, name='prompt'), Argument(type='int', derefcnt=0, name='verify')]), 'EVP_ripemd160': Function(type='EVP_MD', derefcnt=1, name='EVP_ripemd160', args=[]), 'EVP_seed_cbc': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_seed_cbc', args=[]), 'EVP_seed_cfb128': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_seed_cfb128', args=[]), 'EVP_seed_ecb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_seed_ecb', args=[]), 'EVP_seed_ofb': Function(type='EVP_CIPHER', derefcnt=1, name='EVP_seed_ofb', args=[]), 'EVP_set_pw_prompt': Function(type='void', derefcnt=0, name='EVP_set_pw_prompt', args=[Argument(type='char', derefcnt=1, name='prompt')]), 'EVP_sha': Function(type='EVP_MD', derefcnt=1, name='EVP_sha', args=[]), 'EVP_sha1': Function(type='EVP_MD', derefcnt=1, name='EVP_sha1', args=[]), 'EVP_sha224': Function(type='EVP_MD', derefcnt=1, name='EVP_sha224', args=[]), 'EVP_sha256': Function(type='EVP_MD', derefcnt=1, name='EVP_sha256', args=[]), 'EVP_sha384': Function(type='EVP_MD', derefcnt=1, name='EVP_sha384', args=[]), 'EVP_sha512': Function(type='EVP_MD', derefcnt=1, name='EVP_sha512', args=[]), 'EVP_whirlpool': Function(type='EVP_MD', derefcnt=1, name='EVP_whirlpool', args=[]), 'Exit': Function(type='void', derefcnt=0, name='Exit', args=[Argument(type='int', derefcnt=0, name='status')]), 'FIPS_mode': Function(type='int', derefcnt=0, name='FIPS_mode', args=[]), 'FIPS_mode_set': Function(type='int', derefcnt=0, name='FIPS_mode_set', args=[Argument(type='int', derefcnt=0, name='r')]), 'GEN_SESSION_CB': Function(type='int', derefcnt=0, name='GEN_SESSION_CB', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='id'), Argument(type='unsigned', derefcnt=1, name='id_len')]), 'HMAC': Function(type='unsigned', derefcnt=1, name='HMAC', args=[Argument(type='EVP_MD', derefcnt=1, name='evp_md'), Argument(type='void', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='key_len'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='md_len')]), 'HMAC_CTX_cleanup': Function(type='void', derefcnt=0, name='HMAC_CTX_cleanup', args=[Argument(type='HMAC_CTX', derefcnt=1, name='ctx')]), 'HMAC_CTX_copy': Function(type='int', derefcnt=0, name='HMAC_CTX_copy', args=[Argument(type='HMAC_CTX', derefcnt=1, name='dctx'), Argument(type='HMAC_CTX', derefcnt=1, name='sctx')]), 'HMAC_CTX_init': Function(type='void', derefcnt=0, name='HMAC_CTX_init', args=[Argument(type='HMAC_CTX', derefcnt=1, name='ctx')]), 'HMAC_CTX_set_flags': Function(type='void', derefcnt=0, name='HMAC_CTX_set_flags', args=[Argument(type='HMAC_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'HMAC_Final': Function(type='int', derefcnt=0, name='HMAC_Final', args=[Argument(type='HMAC_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'HMAC_Init': Function(type='int', derefcnt=0, name='HMAC_Init', args=[Argument(type='HMAC_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='len'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'HMAC_Init_ex': Function(type='int', derefcnt=0, name='HMAC_Init_ex', args=[Argument(type='HMAC_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='key'), Argument(type='int', derefcnt=0, name='len'), Argument(type='EVP_MD', derefcnt=1, name='md'), Argument(type='ENGINE', derefcnt=1, name='impl')]), 'HMAC_Update': Function(type='int', derefcnt=0, name='HMAC_Update', args=[Argument(type='HMAC_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='len')]), 'IO_cookie_init': Function(type='void', derefcnt=0, name='IO_cookie_init', args=[Argument(type='IO_cookie_file', derefcnt=1, name='cfile'), Argument(type='int', derefcnt=0, name='read_write'), Argument(type='void', derefcnt=1, name='cookie'), Argument(type='IO_cookie_io_functions_t', derefcnt=0, name='fns')]), 'IO_feof': Function(type='int', derefcnt=0, name='IO_feof', args=[Argument(type='IO_FILE', derefcnt=1, name='fp')]), 'IO_ferror': Function(type='int', derefcnt=0, name='IO_ferror', args=[Argument(type='IO_FILE', derefcnt=1, name='fp')]), 'IO_flockfile': Function(type='void', derefcnt=0, name='IO_flockfile', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0')]), 'IO_free_backup_area': Function(type='void', derefcnt=0, name='IO_free_backup_area', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0')]), 'IO_ftrylockfile': Function(type='int', derefcnt=0, name='IO_ftrylockfile', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0')]), 'IO_funlockfile': Function(type='void', derefcnt=0, name='IO_funlockfile', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0')]), 'IO_getc': Function(type='int', derefcnt=0, name='IO_getc', args=[Argument(type='IO_FILE', derefcnt=1, name='fp')]), 'IO_padn': Function(type='ssize_t', derefcnt=0, name='IO_padn', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='ssize_t', derefcnt=0, name='arg2')]), 'IO_peekc_locked': Function(type='int', derefcnt=0, name='IO_peekc_locked', args=[Argument(type='IO_FILE', derefcnt=1, name='fp')]), 'IO_putc': Function(type='int', derefcnt=0, name='IO_putc', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='IO_FILE', derefcnt=1, name='fp')]), 'IO_seekoff': Function(type='off64_t', derefcnt=0, name='IO_seekoff', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0'), Argument(type='off64_t', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3')]), 'IO_seekpos': Function(type='off64_t', derefcnt=0, name='IO_seekpos', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0'), Argument(type='off64_t', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'IO_sgetn': Function(type='size_t', derefcnt=0, name='IO_sgetn', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2')]), 'IO_vfprintf': Function(type='int', derefcnt=0, name='IO_vfprintf', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='gnuc_va_list', derefcnt=0, name='arg2')]), 'IO_vfscanf': Function(type='int', derefcnt=0, name='IO_vfscanf', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='gnuc_va_list', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=1, name='arg3')]), 'LHASH_COMP_FN_TYPE': Function(type='int', derefcnt=0, name='LHASH_COMP_FN_TYPE', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'LHASH_DOALL_ARG_FN_TYPE': Function(type='void', derefcnt=0, name='LHASH_DOALL_ARG_FN_TYPE', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'LHASH_DOALL_FN_TYPE': Function(type='void', derefcnt=0, name='LHASH_DOALL_FN_TYPE', args=[Argument(type='void', derefcnt=1, name='arg0')]), 'LHASH_HASH_FN_TYPE': Function(type='unsigned', derefcnt=0, name='LHASH_HASH_FN_TYPE', args=[Argument(type='void', derefcnt=1, name='arg0')]), 'NETSCAPE_CERT_SEQUENCE_free': Function(type='void', derefcnt=0, name='NETSCAPE_CERT_SEQUENCE_free', args=[Argument(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='a')]), 'NETSCAPE_CERT_SEQUENCE_new': Function(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='NETSCAPE_CERT_SEQUENCE_new', args=[]), 'NETSCAPE_SPKAC_free': Function(type='void', derefcnt=0, name='NETSCAPE_SPKAC_free', args=[Argument(type='NETSCAPE_SPKAC', derefcnt=1, name='a')]), 'NETSCAPE_SPKAC_new': Function(type='NETSCAPE_SPKAC', derefcnt=1, name='NETSCAPE_SPKAC_new', args=[]), 'NETSCAPE_SPKI_b64_decode': Function(type='NETSCAPE_SPKI', derefcnt=1, name='NETSCAPE_SPKI_b64_decode', args=[Argument(type='char', derefcnt=1, name='str'), Argument(type='int', derefcnt=0, name='len')]), 'NETSCAPE_SPKI_b64_encode': Function(type='char', derefcnt=1, name='NETSCAPE_SPKI_b64_encode', args=[Argument(type='NETSCAPE_SPKI', derefcnt=1, name='x')]), 'NETSCAPE_SPKI_free': Function(type='void', derefcnt=0, name='NETSCAPE_SPKI_free', args=[Argument(type='NETSCAPE_SPKI', derefcnt=1, name='a')]), 'NETSCAPE_SPKI_get_pubkey': Function(type='EVP_PKEY', derefcnt=1, name='NETSCAPE_SPKI_get_pubkey', args=[Argument(type='NETSCAPE_SPKI', derefcnt=1, name='x')]), 'NETSCAPE_SPKI_new': Function(type='NETSCAPE_SPKI', derefcnt=1, name='NETSCAPE_SPKI_new', args=[]), 'NETSCAPE_SPKI_print': Function(type='int', derefcnt=0, name='NETSCAPE_SPKI_print', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='NETSCAPE_SPKI', derefcnt=1, name='spki')]), 'NETSCAPE_SPKI_set_pubkey': Function(type='int', derefcnt=0, name='NETSCAPE_SPKI_set_pubkey', args=[Argument(type='NETSCAPE_SPKI', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'NETSCAPE_SPKI_sign': Function(type='int', derefcnt=0, name='NETSCAPE_SPKI_sign', args=[Argument(type='NETSCAPE_SPKI', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'NETSCAPE_SPKI_verify': Function(type='int', derefcnt=0, name='NETSCAPE_SPKI_verify', args=[Argument(type='NETSCAPE_SPKI', derefcnt=1, name='a'), Argument(type='EVP_PKEY', derefcnt=1, name='r')]), 'NETSCAPE_X509_free': Function(type='void', derefcnt=0, name='NETSCAPE_X509_free', args=[Argument(type='NETSCAPE_X509', derefcnt=1, name='a')]), 'NETSCAPE_X509_new': Function(type='NETSCAPE_X509', derefcnt=1, name='NETSCAPE_X509_new', args=[]), 'OBJ_NAME_add': Function(type='int', derefcnt=0, name='OBJ_NAME_add', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='type'), Argument(type='char', derefcnt=1, name='data')]), 'OBJ_NAME_cleanup': Function(type='void', derefcnt=0, name='OBJ_NAME_cleanup', args=[Argument(type='int', derefcnt=0, name='type')]), 'OBJ_NAME_do_all': Function(type='void', derefcnt=0, name='OBJ_NAME_do_all', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='void', derefcnt=0, name='fn'), Argument(type='void', derefcnt=1, name='arg')]), 'OBJ_NAME_do_all_sorted': Function(type='void', derefcnt=0, name='OBJ_NAME_do_all_sorted', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='void', derefcnt=0, name='fn'), Argument(type='void', derefcnt=1, name='arg')]), 'OBJ_NAME_get': Function(type='char', derefcnt=1, name='OBJ_NAME_get', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='type')]), 'OBJ_NAME_init': Function(type='int', derefcnt=0, name='OBJ_NAME_init', args=[]), 'OBJ_NAME_new_index': Function(type='int', derefcnt=0, name='OBJ_NAME_new_index', args=[Argument(type='unsigned', derefcnt=0, name='hash_func'), Argument(type='int', derefcnt=0, name='cmp_func'), Argument(type='void', derefcnt=0, name='free_func')]), 'OBJ_NAME_remove': Function(type='int', derefcnt=0, name='OBJ_NAME_remove', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='type')]), 'OBJ_add_object': Function(type='int', derefcnt=0, name='OBJ_add_object', args=[Argument(type='ASN1_OBJECT', derefcnt=1, name='obj')]), 'OBJ_add_sigid': Function(type='int', derefcnt=0, name='OBJ_add_sigid', args=[Argument(type='int', derefcnt=0, name='signid'), Argument(type='int', derefcnt=0, name='dig_id'), Argument(type='int', derefcnt=0, name='pkey_id')]), 'OBJ_bsearch_': Function(type='void', derefcnt=1, name='OBJ_bsearch_', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=1, name='base'), Argument(type='int', derefcnt=0, name='num'), Argument(type='int', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='cmp')]), 'OBJ_bsearch_ex_': Function(type='void', derefcnt=1, name='OBJ_bsearch_ex_', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=1, name='base'), Argument(type='int', derefcnt=0, name='num'), Argument(type='int', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='cmp'), Argument(type='int', derefcnt=0, name='flags')]), 'OBJ_cleanup': Function(type='void', derefcnt=0, name='OBJ_cleanup', args=[]), 'OBJ_cmp': Function(type='int', derefcnt=0, name='OBJ_cmp', args=[Argument(type='ASN1_OBJECT', derefcnt=1, name='a'), Argument(type='ASN1_OBJECT', derefcnt=1, name='b')]), 'OBJ_create': Function(type='int', derefcnt=0, name='OBJ_create', args=[Argument(type='char', derefcnt=1, name='oid'), Argument(type='char', derefcnt=1, name='sn'), Argument(type='char', derefcnt=1, name='ln')]), 'OBJ_create_objects': Function(type='int', derefcnt=0, name='OBJ_create_objects', args=[Argument(type='BIO', derefcnt=1, name='in')]), 'OBJ_dup': Function(type='ASN1_OBJECT', derefcnt=1, name='OBJ_dup', args=[Argument(type='ASN1_OBJECT', derefcnt=1, name='o')]), 'OBJ_find_sigid_algs': Function(type='int', derefcnt=0, name='OBJ_find_sigid_algs', args=[Argument(type='int', derefcnt=0, name='signid'), Argument(type='int', derefcnt=1, name='pdig_nid'), Argument(type='int', derefcnt=1, name='ppkey_nid')]), 'OBJ_find_sigid_by_algs': Function(type='int', derefcnt=0, name='OBJ_find_sigid_by_algs', args=[Argument(type='int', derefcnt=1, name='psignid'), Argument(type='int', derefcnt=0, name='dig_nid'), Argument(type='int', derefcnt=0, name='pkey_nid')]), 'OBJ_ln2nid': Function(type='int', derefcnt=0, name='OBJ_ln2nid', args=[Argument(type='char', derefcnt=1, name='s')]), 'OBJ_new_nid': Function(type='int', derefcnt=0, name='OBJ_new_nid', args=[Argument(type='int', derefcnt=0, name='num')]), 'OBJ_nid2ln': Function(type='char', derefcnt=1, name='OBJ_nid2ln', args=[Argument(type='int', derefcnt=0, name='n')]), 'OBJ_nid2obj': Function(type='ASN1_OBJECT', derefcnt=1, name='OBJ_nid2obj', args=[Argument(type='int', derefcnt=0, name='n')]), 'OBJ_nid2sn': Function(type='char', derefcnt=1, name='OBJ_nid2sn', args=[Argument(type='int', derefcnt=0, name='n')]), 'OBJ_obj2nid': Function(type='int', derefcnt=0, name='OBJ_obj2nid', args=[Argument(type='ASN1_OBJECT', derefcnt=1, name='o')]), 'OBJ_obj2txt': Function(type='int', derefcnt=0, name='OBJ_obj2txt', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='buf_len'), Argument(type='ASN1_OBJECT', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='no_name')]), 'OBJ_sigid_free': Function(type='void', derefcnt=0, name='OBJ_sigid_free', args=[]), 'OBJ_sn2nid': Function(type='int', derefcnt=0, name='OBJ_sn2nid', args=[Argument(type='char', derefcnt=1, name='s')]), 'OBJ_txt2nid': Function(type='int', derefcnt=0, name='OBJ_txt2nid', args=[Argument(type='char', derefcnt=1, name='s')]), 'OBJ_txt2obj': Function(type='ASN1_OBJECT', derefcnt=1, name='OBJ_txt2obj', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='no_name')]), 'OPENSSL_add_all_algorithms_conf': Function(type='void', derefcnt=0, name='OPENSSL_add_all_algorithms_conf', args=[]), 'OPENSSL_add_all_algorithms_noconf': Function(type='void', derefcnt=0, name='OPENSSL_add_all_algorithms_noconf', args=[]), 'OPENSSL_cleanse': Function(type='void', derefcnt=0, name='OPENSSL_cleanse', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='len')]), 'OPENSSL_ia32cap_loc': Function(type='unsigned', derefcnt=1, name='OPENSSL_ia32cap_loc', args=[]), 'OPENSSL_init': Function(type='void', derefcnt=0, name='OPENSSL_init', args=[]), 'OPENSSL_isservice': Function(type='int', derefcnt=0, name='OPENSSL_isservice', args=[]), 'OPENSSL_issetugid': Function(type='int', derefcnt=0, name='OPENSSL_issetugid', args=[]), 'OpenSSLDie': Function(type='void', derefcnt=0, name='OpenSSLDie', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line'), Argument(type='char', derefcnt=1, name='assertion')]), 'OpenSSL_add_all_ciphers': Function(type='void', derefcnt=0, name='OpenSSL_add_all_ciphers', args=[]), 'OpenSSL_add_all_digests': Function(type='void', derefcnt=0, name='OpenSSL_add_all_digests', args=[]), 'PBE2PARAM_free': Function(type='void', derefcnt=0, name='PBE2PARAM_free', args=[Argument(type='PBE2PARAM', derefcnt=1, name='a')]), 'PBE2PARAM_new': Function(type='PBE2PARAM', derefcnt=1, name='PBE2PARAM_new', args=[]), 'PBEPARAM_free': Function(type='void', derefcnt=0, name='PBEPARAM_free', args=[Argument(type='PBEPARAM', derefcnt=1, name='a')]), 'PBEPARAM_new': Function(type='PBEPARAM', derefcnt=1, name='PBEPARAM_new', args=[]), 'PBKDF2PARAM_free': Function(type='void', derefcnt=0, name='PBKDF2PARAM_free', args=[Argument(type='PBKDF2PARAM', derefcnt=1, name='a')]), 'PBKDF2PARAM_new': Function(type='PBKDF2PARAM', derefcnt=1, name='PBKDF2PARAM_new', args=[]), 'PEM_ASN1_read': Function(type='void', derefcnt=1, name='PEM_ASN1_read', args=[Argument(type='d2i_of_void', derefcnt=1, name='d2i'), Argument(type='char', derefcnt=1, name='name'), Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='void', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_ASN1_read_bio': Function(type='void', derefcnt=1, name='PEM_ASN1_read_bio', args=[Argument(type='d2i_of_void', derefcnt=1, name='d2i'), Argument(type='char', derefcnt=1, name='name'), Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='void', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_ASN1_write': Function(type='int', derefcnt=0, name='PEM_ASN1_write', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='char', derefcnt=1, name='name'), Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='void', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='callback'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_ASN1_write_bio': Function(type='int', derefcnt=0, name='PEM_ASN1_write_bio', args=[Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='char', derefcnt=1, name='name'), Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='void', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_SealFinal': Function(type='int', derefcnt=0, name='PEM_SealFinal', args=[Argument(type='PEM_ENCODE_SEAL_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sig'), Argument(type='int', derefcnt=1, name='sigl'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl'), Argument(type='EVP_PKEY', derefcnt=1, name='priv')]), 'PEM_SealInit': Function(type='int', derefcnt=0, name='PEM_SealInit', args=[Argument(type='PEM_ENCODE_SEAL_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_CIPHER', derefcnt=1, name='type'), Argument(type='EVP_MD', derefcnt=1, name='md_type'), Argument(type='unsigned', derefcnt=2, name='ek'), Argument(type='int', derefcnt=1, name='ekl'), Argument(type='unsigned', derefcnt=1, name='iv'), Argument(type='EVP_PKEY', derefcnt=2, name='pubk'), Argument(type='int', derefcnt=0, name='npubk')]), 'PEM_SealUpdate': Function(type='void', derefcnt=0, name='PEM_SealUpdate', args=[Argument(type='PEM_ENCODE_SEAL_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=1, name='outl'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='inl')]), 'PEM_SignFinal': Function(type='int', derefcnt=0, name='PEM_SignFinal', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sigret'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'PEM_SignInit': Function(type='void', derefcnt=0, name='PEM_SignInit', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_MD', derefcnt=1, name='type')]), 'PEM_SignUpdate': Function(type='void', derefcnt=0, name='PEM_SignUpdate', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='unsigned', derefcnt=0, name='cnt')]), 'PEM_X509_INFO_read': Function(type='stack_st_X509_INFO', derefcnt=1, name='PEM_X509_INFO_read', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='stack_st_X509_INFO', derefcnt=1, name='sk'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_X509_INFO_read_bio': Function(type='stack_st_X509_INFO', derefcnt=1, name='PEM_X509_INFO_read_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='stack_st_X509_INFO', derefcnt=1, name='sk'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_X509_INFO_write_bio': Function(type='int', derefcnt=0, name='PEM_X509_INFO_write_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_INFO', derefcnt=1, name='xi'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cd'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_bytes_read_bio': Function(type='int', derefcnt=0, name='PEM_bytes_read_bio', args=[Argument(type='unsigned', derefcnt=2, name='pdata'), Argument(type='long', derefcnt=1, name='plen'), Argument(type='char', derefcnt=2, name='pnm'), Argument(type='char', derefcnt=1, name='name'), Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_def_callback': Function(type='int', derefcnt=0, name='PEM_def_callback', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='num'), Argument(type='int', derefcnt=0, name='w'), Argument(type='void', derefcnt=1, name='key')]), 'PEM_dek_info': Function(type='void', derefcnt=0, name='PEM_dek_info', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='char', derefcnt=1, name='type'), Argument(type='int', derefcnt=0, name='len'), Argument(type='char', derefcnt=1, name='str')]), 'PEM_do_header': Function(type='int', derefcnt=0, name='PEM_do_header', args=[Argument(type='EVP_CIPHER_INFO', derefcnt=1, name='cipher'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='long', derefcnt=1, name='len'), Argument(type='pem_password_cb', derefcnt=1, name='callback'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_get_EVP_CIPHER_INFO': Function(type='int', derefcnt=0, name='PEM_get_EVP_CIPHER_INFO', args=[Argument(type='char', derefcnt=1, name='header'), Argument(type='EVP_CIPHER_INFO', derefcnt=1, name='cipher')]), 'PEM_proc_type': Function(type='void', derefcnt=0, name='PEM_proc_type', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='type')]), 'PEM_read': Function(type='int', derefcnt=0, name='PEM_read', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='char', derefcnt=2, name='name'), Argument(type='char', derefcnt=2, name='header'), Argument(type='unsigned', derefcnt=2, name='data'), Argument(type='long', derefcnt=1, name='len')]), 'PEM_read_DHparams': Function(type='DH', derefcnt=1, name='PEM_read_DHparams', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DH', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_DSAPrivateKey': Function(type='DSA', derefcnt=1, name='PEM_read_DSAPrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_DSA_PUBKEY': Function(type='DSA', derefcnt=1, name='PEM_read_DSA_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_DSAparams': Function(type='DSA', derefcnt=1, name='PEM_read_DSAparams', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_ECPKParameters': Function(type='EC_GROUP', derefcnt=1, name='PEM_read_ECPKParameters', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_GROUP', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_ECPrivateKey': Function(type='EC_KEY', derefcnt=1, name='PEM_read_ECPrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_EC_PUBKEY': Function(type='EC_KEY', derefcnt=1, name='PEM_read_EC_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_NETSCAPE_CERT_SEQUENCE': Function(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='PEM_read_NETSCAPE_CERT_SEQUENCE', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='NETSCAPE_CERT_SEQUENCE', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_PKCS7': Function(type='PKCS7', derefcnt=1, name='PEM_read_PKCS7', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS7', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_PKCS8': Function(type='X509_SIG', derefcnt=1, name='PEM_read_PKCS8', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_SIG', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_PKCS8_PRIV_KEY_INFO': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='PEM_read_PKCS8_PRIV_KEY_INFO', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_PUBKEY': Function(type='EVP_PKEY', derefcnt=1, name='PEM_read_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_PrivateKey': Function(type='EVP_PKEY', derefcnt=1, name='PEM_read_PrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_RSAPrivateKey': Function(type='RSA', derefcnt=1, name='PEM_read_RSAPrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_RSAPublicKey': Function(type='RSA', derefcnt=1, name='PEM_read_RSAPublicKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_RSA_PUBKEY': Function(type='RSA', derefcnt=1, name='PEM_read_RSA_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_SSL_SESSION': Function(type='SSL_SESSION', derefcnt=1, name='PEM_read_SSL_SESSION', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='SSL_SESSION', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_X509': Function(type='X509', derefcnt=1, name='PEM_read_X509', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_X509_AUX': Function(type='X509', derefcnt=1, name='PEM_read_X509_AUX', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_X509_CERT_PAIR': Function(type='X509_CERT_PAIR', derefcnt=1, name='PEM_read_X509_CERT_PAIR', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_CERT_PAIR', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_X509_CRL': Function(type='X509_CRL', derefcnt=1, name='PEM_read_X509_CRL', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_CRL', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_X509_REQ': Function(type='X509_REQ', derefcnt=1, name='PEM_read_X509_REQ', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_REQ', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio': Function(type='int', derefcnt=0, name='PEM_read_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='char', derefcnt=2, name='name'), Argument(type='char', derefcnt=2, name='header'), Argument(type='unsigned', derefcnt=2, name='data'), Argument(type='long', derefcnt=1, name='len')]), 'PEM_read_bio_DHparams': Function(type='DH', derefcnt=1, name='PEM_read_bio_DHparams', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DH', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_DSAPrivateKey': Function(type='DSA', derefcnt=1, name='PEM_read_bio_DSAPrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_DSA_PUBKEY': Function(type='DSA', derefcnt=1, name='PEM_read_bio_DSA_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_DSAparams': Function(type='DSA', derefcnt=1, name='PEM_read_bio_DSAparams', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_ECPKParameters': Function(type='EC_GROUP', derefcnt=1, name='PEM_read_bio_ECPKParameters', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_GROUP', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_ECPrivateKey': Function(type='EC_KEY', derefcnt=1, name='PEM_read_bio_ECPrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_EC_PUBKEY': Function(type='EC_KEY', derefcnt=1, name='PEM_read_bio_EC_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_NETSCAPE_CERT_SEQUENCE': Function(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='PEM_read_bio_NETSCAPE_CERT_SEQUENCE', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='NETSCAPE_CERT_SEQUENCE', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_PKCS7': Function(type='PKCS7', derefcnt=1, name='PEM_read_bio_PKCS7', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS7', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_PKCS8': Function(type='X509_SIG', derefcnt=1, name='PEM_read_bio_PKCS8', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_SIG', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_PKCS8_PRIV_KEY_INFO': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='PEM_read_bio_PKCS8_PRIV_KEY_INFO', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_PUBKEY': Function(type='EVP_PKEY', derefcnt=1, name='PEM_read_bio_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_Parameters': Function(type='EVP_PKEY', derefcnt=1, name='PEM_read_bio_Parameters', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=2, name='x')]), 'PEM_read_bio_PrivateKey': Function(type='EVP_PKEY', derefcnt=1, name='PEM_read_bio_PrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_RSAPrivateKey': Function(type='RSA', derefcnt=1, name='PEM_read_bio_RSAPrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_RSAPublicKey': Function(type='RSA', derefcnt=1, name='PEM_read_bio_RSAPublicKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_RSA_PUBKEY': Function(type='RSA', derefcnt=1, name='PEM_read_bio_RSA_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_SSL_SESSION': Function(type='SSL_SESSION', derefcnt=1, name='PEM_read_bio_SSL_SESSION', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='SSL_SESSION', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_X509': Function(type='X509', derefcnt=1, name='PEM_read_bio_X509', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_X509_AUX': Function(type='X509', derefcnt=1, name='PEM_read_bio_X509_AUX', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_X509_CERT_PAIR': Function(type='X509_CERT_PAIR', derefcnt=1, name='PEM_read_bio_X509_CERT_PAIR', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CERT_PAIR', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_X509_CRL': Function(type='X509_CRL', derefcnt=1, name='PEM_read_bio_X509_CRL', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CRL', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_read_bio_X509_REQ': Function(type='X509_REQ', derefcnt=1, name='PEM_read_bio_X509_REQ', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write': Function(type='int', derefcnt=0, name='PEM_write', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='hdr'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='long', derefcnt=0, name='len')]), 'PEM_write_DHparams': Function(type='int', derefcnt=0, name='PEM_write_DHparams', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DH', derefcnt=1, name='x')]), 'PEM_write_DSAPrivateKey': Function(type='int', derefcnt=0, name='PEM_write_DSAPrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_DSA_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_DSA_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=1, name='x')]), 'PEM_write_DSAparams': Function(type='int', derefcnt=0, name='PEM_write_DSAparams', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=1, name='x')]), 'PEM_write_ECPKParameters': Function(type='int', derefcnt=0, name='PEM_write_ECPKParameters', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_GROUP', derefcnt=1, name='x')]), 'PEM_write_ECPrivateKey': Function(type='int', derefcnt=0, name='PEM_write_ECPrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_EC_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_EC_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=1, name='x')]), 'PEM_write_NETSCAPE_CERT_SEQUENCE': Function(type='int', derefcnt=0, name='PEM_write_NETSCAPE_CERT_SEQUENCE', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='x')]), 'PEM_write_PKCS7': Function(type='int', derefcnt=0, name='PEM_write_PKCS7', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS7', derefcnt=1, name='x')]), 'PEM_write_PKCS8': Function(type='int', derefcnt=0, name='PEM_write_PKCS8', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_SIG', derefcnt=1, name='x')]), 'PEM_write_PKCS8PrivateKey': Function(type='int', derefcnt=0, name='PEM_write_PKCS8PrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='char', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cd'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_PKCS8PrivateKey_nid': Function(type='int', derefcnt=0, name='PEM_write_PKCS8PrivateKey_nid', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='char', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_PKCS8_PRIV_KEY_INFO': Function(type='int', derefcnt=0, name='PEM_write_PKCS8_PRIV_KEY_INFO', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='x')]), 'PEM_write_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='x')]), 'PEM_write_PrivateKey': Function(type='int', derefcnt=0, name='PEM_write_PrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_RSAPrivateKey': Function(type='int', derefcnt=0, name='PEM_write_RSAPrivateKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_RSAPublicKey': Function(type='int', derefcnt=0, name='PEM_write_RSAPublicKey', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=1, name='x')]), 'PEM_write_RSA_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_RSA_PUBKEY', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=1, name='x')]), 'PEM_write_SSL_SESSION': Function(type='int', derefcnt=0, name='PEM_write_SSL_SESSION', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='SSL_SESSION', derefcnt=1, name='x')]), 'PEM_write_X509': Function(type='int', derefcnt=0, name='PEM_write_X509', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509', derefcnt=1, name='x')]), 'PEM_write_X509_AUX': Function(type='int', derefcnt=0, name='PEM_write_X509_AUX', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509', derefcnt=1, name='x')]), 'PEM_write_X509_CERT_PAIR': Function(type='int', derefcnt=0, name='PEM_write_X509_CERT_PAIR', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_CERT_PAIR', derefcnt=1, name='x')]), 'PEM_write_X509_CRL': Function(type='int', derefcnt=0, name='PEM_write_X509_CRL', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_CRL', derefcnt=1, name='x')]), 'PEM_write_X509_REQ': Function(type='int', derefcnt=0, name='PEM_write_X509_REQ', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_REQ', derefcnt=1, name='x')]), 'PEM_write_X509_REQ_NEW': Function(type='int', derefcnt=0, name='PEM_write_X509_REQ_NEW', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_REQ', derefcnt=1, name='x')]), 'PEM_write_bio': Function(type='int', derefcnt=0, name='PEM_write_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='hdr'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='long', derefcnt=0, name='len')]), 'PEM_write_bio_ASN1_stream': Function(type='int', derefcnt=0, name='PEM_write_bio_ASN1_stream', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='ASN1_VALUE', derefcnt=1, name='val'), Argument(type='BIO', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='hdr'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'PEM_write_bio_DHparams': Function(type='int', derefcnt=0, name='PEM_write_bio_DHparams', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DH', derefcnt=1, name='x')]), 'PEM_write_bio_DSAPrivateKey': Function(type='int', derefcnt=0, name='PEM_write_bio_DSAPrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_bio_DSA_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_bio_DSA_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='x')]), 'PEM_write_bio_DSAparams': Function(type='int', derefcnt=0, name='PEM_write_bio_DSAparams', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='x')]), 'PEM_write_bio_ECPKParameters': Function(type='int', derefcnt=0, name='PEM_write_bio_ECPKParameters', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_GROUP', derefcnt=1, name='x')]), 'PEM_write_bio_ECPrivateKey': Function(type='int', derefcnt=0, name='PEM_write_bio_ECPrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_bio_EC_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_bio_EC_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=1, name='x')]), 'PEM_write_bio_NETSCAPE_CERT_SEQUENCE': Function(type='int', derefcnt=0, name='PEM_write_bio_NETSCAPE_CERT_SEQUENCE', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='x')]), 'PEM_write_bio_PKCS7': Function(type='int', derefcnt=0, name='PEM_write_bio_PKCS7', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS7', derefcnt=1, name='x')]), 'PEM_write_bio_PKCS7_stream': Function(type='int', derefcnt=0, name='PEM_write_bio_PKCS7_stream', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='BIO', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='flags')]), 'PEM_write_bio_PKCS8': Function(type='int', derefcnt=0, name='PEM_write_bio_PKCS8', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_SIG', derefcnt=1, name='x')]), 'PEM_write_bio_PKCS8PrivateKey': Function(type='int', derefcnt=0, name='PEM_write_bio_PKCS8PrivateKey', args=[Argument(type='BIO', derefcnt=1, name='arg0'), Argument(type='EVP_PKEY', derefcnt=1, name='arg1'), Argument(type='EVP_CIPHER', derefcnt=1, name='arg2'), Argument(type='char', derefcnt=1, name='arg3'), Argument(type='int', derefcnt=0, name='arg4'), Argument(type='pem_password_cb', derefcnt=1, name='arg5'), Argument(type='void', derefcnt=1, name='arg6')]), 'PEM_write_bio_PKCS8PrivateKey_nid': Function(type='int', derefcnt=0, name='PEM_write_bio_PKCS8PrivateKey_nid', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='char', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_bio_PKCS8_PRIV_KEY_INFO': Function(type='int', derefcnt=0, name='PEM_write_bio_PKCS8_PRIV_KEY_INFO', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='x')]), 'PEM_write_bio_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_bio_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='x')]), 'PEM_write_bio_Parameters': Function(type='int', derefcnt=0, name='PEM_write_bio_Parameters', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='x')]), 'PEM_write_bio_PrivateKey': Function(type='int', derefcnt=0, name='PEM_write_bio_PrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_bio_RSAPrivateKey': Function(type='int', derefcnt=0, name='PEM_write_bio_RSAPrivateKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='unsigned', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'PEM_write_bio_RSAPublicKey': Function(type='int', derefcnt=0, name='PEM_write_bio_RSAPublicKey', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=1, name='x')]), 'PEM_write_bio_RSA_PUBKEY': Function(type='int', derefcnt=0, name='PEM_write_bio_RSA_PUBKEY', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=1, name='x')]), 'PEM_write_bio_SSL_SESSION': Function(type='int', derefcnt=0, name='PEM_write_bio_SSL_SESSION', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='SSL_SESSION', derefcnt=1, name='x')]), 'PEM_write_bio_X509': Function(type='int', derefcnt=0, name='PEM_write_bio_X509', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x')]), 'PEM_write_bio_X509_AUX': Function(type='int', derefcnt=0, name='PEM_write_bio_X509_AUX', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x')]), 'PEM_write_bio_X509_CERT_PAIR': Function(type='int', derefcnt=0, name='PEM_write_bio_X509_CERT_PAIR', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CERT_PAIR', derefcnt=1, name='x')]), 'PEM_write_bio_X509_CRL': Function(type='int', derefcnt=0, name='PEM_write_bio_X509_CRL', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CRL', derefcnt=1, name='x')]), 'PEM_write_bio_X509_REQ': Function(type='int', derefcnt=0, name='PEM_write_bio_X509_REQ', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=1, name='x')]), 'PEM_write_bio_X509_REQ_NEW': Function(type='int', derefcnt=0, name='PEM_write_bio_X509_REQ_NEW', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=1, name='x')]), 'PKCS1_MGF1': Function(type='int', derefcnt=0, name='PKCS1_MGF1', args=[Argument(type='unsigned', derefcnt=1, name='mask'), Argument(type='long', derefcnt=0, name='len'), Argument(type='unsigned', derefcnt=1, name='seed'), Argument(type='long', derefcnt=0, name='seedlen'), Argument(type='EVP_MD', derefcnt=1, name='dgst')]), 'PKCS5_PBE_add': Function(type='void', derefcnt=0, name='PKCS5_PBE_add', args=[]), 'PKCS5_PBE_keyivgen': Function(type='int', derefcnt=0, name='PKCS5_PBE_keyivgen', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='pass'), Argument(type='int', derefcnt=0, name='passlen'), Argument(type='ASN1_TYPE', derefcnt=1, name='param'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='EVP_MD', derefcnt=1, name='md'), Argument(type='int', derefcnt=0, name='en_de')]), 'PKCS5_PBKDF2_HMAC': Function(type='int', derefcnt=0, name='PKCS5_PBKDF2_HMAC', args=[Argument(type='char', derefcnt=1, name='pass'), Argument(type='int', derefcnt=0, name='passlen'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='int', derefcnt=0, name='saltlen'), Argument(type='int', derefcnt=0, name='iter'), Argument(type='EVP_MD', derefcnt=1, name='digest'), Argument(type='int', derefcnt=0, name='keylen'), Argument(type='unsigned', derefcnt=1, name='out')]), 'PKCS5_PBKDF2_HMAC_SHA1': Function(type='int', derefcnt=0, name='PKCS5_PBKDF2_HMAC_SHA1', args=[Argument(type='char', derefcnt=1, name='pass'), Argument(type='int', derefcnt=0, name='passlen'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='int', derefcnt=0, name='saltlen'), Argument(type='int', derefcnt=0, name='iter'), Argument(type='int', derefcnt=0, name='keylen'), Argument(type='unsigned', derefcnt=1, name='out')]), 'PKCS5_pbe2_set': Function(type='X509_ALGOR', derefcnt=1, name='PKCS5_pbe2_set', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='int', derefcnt=0, name='iter'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='int', derefcnt=0, name='saltlen')]), 'PKCS5_pbe2_set_iv': Function(type='X509_ALGOR', derefcnt=1, name='PKCS5_pbe2_set_iv', args=[Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='int', derefcnt=0, name='iter'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='int', derefcnt=0, name='saltlen'), Argument(type='unsigned', derefcnt=1, name='aiv'), Argument(type='int', derefcnt=0, name='prf_nid')]), 'PKCS5_pbe_set': Function(type='X509_ALGOR', derefcnt=1, name='PKCS5_pbe_set', args=[Argument(type='int', derefcnt=0, name='alg'), Argument(type='int', derefcnt=0, name='iter'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='int', derefcnt=0, name='saltlen')]), 'PKCS5_pbe_set0_algor': Function(type='int', derefcnt=0, name='PKCS5_pbe_set0_algor', args=[Argument(type='X509_ALGOR', derefcnt=1, name='algor'), Argument(type='int', derefcnt=0, name='alg'), Argument(type='int', derefcnt=0, name='iter'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='int', derefcnt=0, name='saltlen')]), 'PKCS5_pbkdf2_set': Function(type='X509_ALGOR', derefcnt=1, name='PKCS5_pbkdf2_set', args=[Argument(type='int', derefcnt=0, name='iter'), Argument(type='unsigned', derefcnt=1, name='salt'), Argument(type='int', derefcnt=0, name='saltlen'), Argument(type='int', derefcnt=0, name='prf_nid'), Argument(type='int', derefcnt=0, name='keylen')]), 'PKCS5_v2_PBE_keyivgen': Function(type='int', derefcnt=0, name='PKCS5_v2_PBE_keyivgen', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='pass'), Argument(type='int', derefcnt=0, name='passlen'), Argument(type='ASN1_TYPE', derefcnt=1, name='param'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='EVP_MD', derefcnt=1, name='md'), Argument(type='int', derefcnt=0, name='en_de')]), 'PKCS7_DIGEST_free': Function(type='void', derefcnt=0, name='PKCS7_DIGEST_free', args=[Argument(type='PKCS7_DIGEST', derefcnt=1, name='a')]), 'PKCS7_DIGEST_new': Function(type='PKCS7_DIGEST', derefcnt=1, name='PKCS7_DIGEST_new', args=[]), 'PKCS7_ENCRYPT_free': Function(type='void', derefcnt=0, name='PKCS7_ENCRYPT_free', args=[Argument(type='PKCS7_ENCRYPT', derefcnt=1, name='a')]), 'PKCS7_ENCRYPT_new': Function(type='PKCS7_ENCRYPT', derefcnt=1, name='PKCS7_ENCRYPT_new', args=[]), 'PKCS7_ENC_CONTENT_free': Function(type='void', derefcnt=0, name='PKCS7_ENC_CONTENT_free', args=[Argument(type='PKCS7_ENC_CONTENT', derefcnt=1, name='a')]), 'PKCS7_ENC_CONTENT_new': Function(type='PKCS7_ENC_CONTENT', derefcnt=1, name='PKCS7_ENC_CONTENT_new', args=[]), 'PKCS7_ENVELOPE_free': Function(type='void', derefcnt=0, name='PKCS7_ENVELOPE_free', args=[Argument(type='PKCS7_ENVELOPE', derefcnt=1, name='a')]), 'PKCS7_ENVELOPE_new': Function(type='PKCS7_ENVELOPE', derefcnt=1, name='PKCS7_ENVELOPE_new', args=[]), 'PKCS7_ISSUER_AND_SERIAL_digest': Function(type='int', derefcnt=0, name='PKCS7_ISSUER_AND_SERIAL_digest', args=[Argument(type='PKCS7_ISSUER_AND_SERIAL', derefcnt=1, name='data'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'PKCS7_ISSUER_AND_SERIAL_free': Function(type='void', derefcnt=0, name='PKCS7_ISSUER_AND_SERIAL_free', args=[Argument(type='PKCS7_ISSUER_AND_SERIAL', derefcnt=1, name='a')]), 'PKCS7_ISSUER_AND_SERIAL_new': Function(type='PKCS7_ISSUER_AND_SERIAL', derefcnt=1, name='PKCS7_ISSUER_AND_SERIAL_new', args=[]), 'PKCS7_RECIP_INFO_free': Function(type='void', derefcnt=0, name='PKCS7_RECIP_INFO_free', args=[Argument(type='PKCS7_RECIP_INFO', derefcnt=1, name='a')]), 'PKCS7_RECIP_INFO_get0_alg': Function(type='void', derefcnt=0, name='PKCS7_RECIP_INFO_get0_alg', args=[Argument(type='PKCS7_RECIP_INFO', derefcnt=1, name='ri'), Argument(type='X509_ALGOR', derefcnt=2, name='penc')]), 'PKCS7_RECIP_INFO_new': Function(type='PKCS7_RECIP_INFO', derefcnt=1, name='PKCS7_RECIP_INFO_new', args=[]), 'PKCS7_RECIP_INFO_set': Function(type='int', derefcnt=0, name='PKCS7_RECIP_INFO_set', args=[Argument(type='PKCS7_RECIP_INFO', derefcnt=1, name='p7i'), Argument(type='X509', derefcnt=1, name='x509')]), 'PKCS7_SIGNED_free': Function(type='void', derefcnt=0, name='PKCS7_SIGNED_free', args=[Argument(type='PKCS7_SIGNED', derefcnt=1, name='a')]), 'PKCS7_SIGNED_new': Function(type='PKCS7_SIGNED', derefcnt=1, name='PKCS7_SIGNED_new', args=[]), 'PKCS7_SIGNER_INFO_free': Function(type='void', derefcnt=0, name='PKCS7_SIGNER_INFO_free', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='a')]), 'PKCS7_SIGNER_INFO_get0_algs': Function(type='void', derefcnt=0, name='PKCS7_SIGNER_INFO_get0_algs', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='EVP_PKEY', derefcnt=2, name='pk'), Argument(type='X509_ALGOR', derefcnt=2, name='pdig'), Argument(type='X509_ALGOR', derefcnt=2, name='psig')]), 'PKCS7_SIGNER_INFO_new': Function(type='PKCS7_SIGNER_INFO', derefcnt=1, name='PKCS7_SIGNER_INFO_new', args=[]), 'PKCS7_SIGNER_INFO_set': Function(type='int', derefcnt=0, name='PKCS7_SIGNER_INFO_set', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='p7i'), Argument(type='X509', derefcnt=1, name='x509'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='dgst')]), 'PKCS7_SIGNER_INFO_sign': Function(type='int', derefcnt=0, name='PKCS7_SIGNER_INFO_sign', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si')]), 'PKCS7_SIGN_ENVELOPE_free': Function(type='void', derefcnt=0, name='PKCS7_SIGN_ENVELOPE_free', args=[Argument(type='PKCS7_SIGN_ENVELOPE', derefcnt=1, name='a')]), 'PKCS7_SIGN_ENVELOPE_new': Function(type='PKCS7_SIGN_ENVELOPE', derefcnt=1, name='PKCS7_SIGN_ENVELOPE_new', args=[]), 'PKCS7_add0_attrib_signing_time': Function(type='int', derefcnt=0, name='PKCS7_add0_attrib_signing_time', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='ASN1_TIME', derefcnt=1, name='t')]), 'PKCS7_add1_attrib_digest': Function(type='int', derefcnt=0, name='PKCS7_add1_attrib_digest', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='int', derefcnt=0, name='mdlen')]), 'PKCS7_add_attrib_content_type': Function(type='int', derefcnt=0, name='PKCS7_add_attrib_content_type', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='ASN1_OBJECT', derefcnt=1, name='coid')]), 'PKCS7_add_attrib_smimecap': Function(type='int', derefcnt=0, name='PKCS7_add_attrib_smimecap', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='stack_st_X509_ALGOR', derefcnt=1, name='cap')]), 'PKCS7_add_attribute': Function(type='int', derefcnt=0, name='PKCS7_add_attribute', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='p7si'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='atrtype'), Argument(type='void', derefcnt=1, name='value')]), 'PKCS7_add_certificate': Function(type='int', derefcnt=0, name='PKCS7_add_certificate', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='X509', derefcnt=1, name='x509')]), 'PKCS7_add_crl': Function(type='int', derefcnt=0, name='PKCS7_add_crl', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='X509_CRL', derefcnt=1, name='x509')]), 'PKCS7_add_recipient': Function(type='PKCS7_RECIP_INFO', derefcnt=1, name='PKCS7_add_recipient', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='X509', derefcnt=1, name='x509')]), 'PKCS7_add_recipient_info': Function(type='int', derefcnt=0, name='PKCS7_add_recipient_info', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='PKCS7_RECIP_INFO', derefcnt=1, name='ri')]), 'PKCS7_add_signature': Function(type='PKCS7_SIGNER_INFO', derefcnt=1, name='PKCS7_add_signature', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='X509', derefcnt=1, name='x509'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='dgst')]), 'PKCS7_add_signed_attribute': Function(type='int', derefcnt=0, name='PKCS7_add_signed_attribute', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='p7si'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='type'), Argument(type='void', derefcnt=1, name='data')]), 'PKCS7_add_signer': Function(type='int', derefcnt=0, name='PKCS7_add_signer', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='p7i')]), 'PKCS7_cert_from_signer_info': Function(type='X509', derefcnt=1, name='PKCS7_cert_from_signer_info', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si')]), 'PKCS7_content_new': Function(type='int', derefcnt=0, name='PKCS7_content_new', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='int', derefcnt=0, name='nid')]), 'PKCS7_ctrl': Function(type='long', derefcnt=0, name='PKCS7_ctrl', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg'), Argument(type='char', derefcnt=1, name='parg')]), 'PKCS7_dataDecode': Function(type='BIO', derefcnt=1, name='PKCS7_dataDecode', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='BIO', derefcnt=1, name='in_bio'), Argument(type='X509', derefcnt=1, name='pcert')]), 'PKCS7_dataFinal': Function(type='int', derefcnt=0, name='PKCS7_dataFinal', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='BIO', derefcnt=1, name='bio')]), 'PKCS7_dataInit': Function(type='BIO', derefcnt=1, name='PKCS7_dataInit', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='BIO', derefcnt=1, name='bio')]), 'PKCS7_dataVerify': Function(type='int', derefcnt=0, name='PKCS7_dataVerify', args=[Argument(type='X509_STORE', derefcnt=1, name='cert_store'), Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si')]), 'PKCS7_decrypt': Function(type='int', derefcnt=0, name='PKCS7_decrypt', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='X509', derefcnt=1, name='cert'), Argument(type='BIO', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='flags')]), 'PKCS7_digest_from_attributes': Function(type='ASN1_OCTET_STRING', derefcnt=1, name='PKCS7_digest_from_attributes', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='sk')]), 'PKCS7_dup': Function(type='PKCS7', derefcnt=1, name='PKCS7_dup', args=[Argument(type='PKCS7', derefcnt=1, name='p7')]), 'PKCS7_encrypt': Function(type='PKCS7', derefcnt=1, name='PKCS7_encrypt', args=[Argument(type='stack_st_X509', derefcnt=1, name='certs'), Argument(type='BIO', derefcnt=1, name='in'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher'), Argument(type='int', derefcnt=0, name='flags')]), 'PKCS7_final': Function(type='int', derefcnt=0, name='PKCS7_final', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='BIO', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='flags')]), 'PKCS7_free': Function(type='void', derefcnt=0, name='PKCS7_free', args=[Argument(type='PKCS7', derefcnt=1, name='a')]), 'PKCS7_get0_signers': Function(type='stack_st_X509', derefcnt=1, name='PKCS7_get0_signers', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='stack_st_X509', derefcnt=1, name='certs'), Argument(type='int', derefcnt=0, name='flags')]), 'PKCS7_get_attribute': Function(type='ASN1_TYPE', derefcnt=1, name='PKCS7_get_attribute', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='int', derefcnt=0, name='nid')]), 'PKCS7_get_issuer_and_serial': Function(type='PKCS7_ISSUER_AND_SERIAL', derefcnt=1, name='PKCS7_get_issuer_and_serial', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='int', derefcnt=0, name='idx')]), 'PKCS7_get_signed_attribute': Function(type='ASN1_TYPE', derefcnt=1, name='PKCS7_get_signed_attribute', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='int', derefcnt=0, name='nid')]), 'PKCS7_get_signer_info': Function(type='stack_st_PKCS7_SIGNER_INFO', derefcnt=1, name='PKCS7_get_signer_info', args=[Argument(type='PKCS7', derefcnt=1, name='p7')]), 'PKCS7_get_smimecap': Function(type='stack_st_X509_ALGOR', derefcnt=1, name='PKCS7_get_smimecap', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si')]), 'PKCS7_new': Function(type='PKCS7', derefcnt=1, name='PKCS7_new', args=[]), 'PKCS7_print_ctx': Function(type='int', derefcnt=0, name='PKCS7_print_ctx', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='PKCS7', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='ASN1_PCTX', derefcnt=1, name='pctx')]), 'PKCS7_set0_type_other': Function(type='int', derefcnt=0, name='PKCS7_set0_type_other', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='int', derefcnt=0, name='type'), Argument(type='ASN1_TYPE', derefcnt=1, name='other')]), 'PKCS7_set_attributes': Function(type='int', derefcnt=0, name='PKCS7_set_attributes', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='p7si'), Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='sk')]), 'PKCS7_set_cipher': Function(type='int', derefcnt=0, name='PKCS7_set_cipher', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='EVP_CIPHER', derefcnt=1, name='cipher')]), 'PKCS7_set_content': Function(type='int', derefcnt=0, name='PKCS7_set_content', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='PKCS7', derefcnt=1, name='p7_data')]), 'PKCS7_set_digest': Function(type='int', derefcnt=0, name='PKCS7_set_digest', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'PKCS7_set_signed_attributes': Function(type='int', derefcnt=0, name='PKCS7_set_signed_attributes', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='p7si'), Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='sk')]), 'PKCS7_set_type': Function(type='int', derefcnt=0, name='PKCS7_set_type', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='int', derefcnt=0, name='type')]), 'PKCS7_sign': Function(type='PKCS7', derefcnt=1, name='PKCS7_sign', args=[Argument(type='X509', derefcnt=1, name='signcert'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='stack_st_X509', derefcnt=1, name='certs'), Argument(type='BIO', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='flags')]), 'PKCS7_sign_add_signer': Function(type='PKCS7_SIGNER_INFO', derefcnt=1, name='PKCS7_sign_add_signer', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='X509', derefcnt=1, name='signcert'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='md'), Argument(type='int', derefcnt=0, name='flags')]), 'PKCS7_signatureVerify': Function(type='int', derefcnt=0, name='PKCS7_signatureVerify', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='si'), Argument(type='X509', derefcnt=1, name='x509')]), 'PKCS7_simple_smimecap': Function(type='int', derefcnt=0, name='PKCS7_simple_smimecap', args=[Argument(type='stack_st_X509_ALGOR', derefcnt=1, name='sk'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='arg')]), 'PKCS7_stream': Function(type='int', derefcnt=0, name='PKCS7_stream', args=[Argument(type='unsigned', derefcnt=3, name='boundary'), Argument(type='PKCS7', derefcnt=1, name='p7')]), 'PKCS7_verify': Function(type='int', derefcnt=0, name='PKCS7_verify', args=[Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='stack_st_X509', derefcnt=1, name='certs'), Argument(type='X509_STORE', derefcnt=1, name='store'), Argument(type='BIO', derefcnt=1, name='indata'), Argument(type='BIO', derefcnt=1, name='out'), Argument(type='int', derefcnt=0, name='flags')]), 'PKCS8_PRIV_KEY_INFO_free': Function(type='void', derefcnt=0, name='PKCS8_PRIV_KEY_INFO_free', args=[Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='a')]), 'PKCS8_PRIV_KEY_INFO_new': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='PKCS8_PRIV_KEY_INFO_new', args=[]), 'PKCS8_pkey_get0': Function(type='int', derefcnt=0, name='PKCS8_pkey_get0', args=[Argument(type='ASN1_OBJECT', derefcnt=2, name='ppkalg'), Argument(type='unsigned', derefcnt=2, name='pk'), Argument(type='int', derefcnt=1, name='ppklen'), Argument(type='X509_ALGOR', derefcnt=2, name='pa'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='p8')]), 'PKCS8_pkey_set0': Function(type='int', derefcnt=0, name='PKCS8_pkey_set0', args=[Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='priv'), Argument(type='ASN1_OBJECT', derefcnt=1, name='aobj'), Argument(type='int', derefcnt=0, name='version'), Argument(type='int', derefcnt=0, name='ptype'), Argument(type='void', derefcnt=1, name='pval'), Argument(type='unsigned', derefcnt=1, name='penc'), Argument(type='int', derefcnt=0, name='penclen')]), 'PKCS8_set_broken': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='PKCS8_set_broken', args=[Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='p8'), Argument(type='int', derefcnt=0, name='broken')]), 'RSAPrivateKey_dup': Function(type='RSA', derefcnt=1, name='RSAPrivateKey_dup', args=[Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSAPublicKey_dup': Function(type='RSA', derefcnt=1, name='RSAPublicKey_dup', args=[Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_PKCS1_SSLeay': Function(type='RSA_METHOD', derefcnt=1, name='RSA_PKCS1_SSLeay', args=[]), 'RSA_PSS_PARAMS_free': Function(type='void', derefcnt=0, name='RSA_PSS_PARAMS_free', args=[Argument(type='RSA_PSS_PARAMS', derefcnt=1, name='a')]), 'RSA_PSS_PARAMS_new': Function(type='RSA_PSS_PARAMS', derefcnt=1, name='RSA_PSS_PARAMS_new', args=[]), 'RSA_X931_hash_id': Function(type='int', derefcnt=0, name='RSA_X931_hash_id', args=[Argument(type='int', derefcnt=0, name='nid')]), 'RSA_blinding_off': Function(type='void', derefcnt=0, name='RSA_blinding_off', args=[Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_blinding_on': Function(type='int', derefcnt=0, name='RSA_blinding_on', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'RSA_check_key': Function(type='int', derefcnt=0, name='RSA_check_key', args=[Argument(type='RSA', derefcnt=1, name='arg0')]), 'RSA_flags': Function(type='int', derefcnt=0, name='RSA_flags', args=[Argument(type='RSA', derefcnt=1, name='r')]), 'RSA_free': Function(type='void', derefcnt=0, name='RSA_free', args=[Argument(type='RSA', derefcnt=1, name='r')]), 'RSA_generate_key': Function(type='RSA', derefcnt=1, name='RSA_generate_key', args=[Argument(type='int', derefcnt=0, name='bits'), Argument(type='unsigned', derefcnt=0, name='e'), Argument(type='void', derefcnt=0, name='callback'), Argument(type='void', derefcnt=1, name='cb_arg')]), 'RSA_generate_key_ex': Function(type='int', derefcnt=0, name='RSA_generate_key_ex', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='BIGNUM', derefcnt=1, name='e'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'RSA_get_default_method': Function(type='RSA_METHOD', derefcnt=1, name='RSA_get_default_method', args=[]), 'RSA_get_ex_data': Function(type='void', derefcnt=1, name='RSA_get_ex_data', args=[Argument(type='RSA', derefcnt=1, name='r'), Argument(type='int', derefcnt=0, name='idx')]), 'RSA_get_ex_new_index': Function(type='int', derefcnt=0, name='RSA_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'RSA_get_method': Function(type='RSA_METHOD', derefcnt=1, name='RSA_get_method', args=[Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_memory_lock': Function(type='int', derefcnt=0, name='RSA_memory_lock', args=[Argument(type='RSA', derefcnt=1, name='r')]), 'RSA_new': Function(type='RSA', derefcnt=1, name='RSA_new', args=[]), 'RSA_new_method': Function(type='RSA', derefcnt=1, name='RSA_new_method', args=[Argument(type='ENGINE', derefcnt=1, name='engine')]), 'RSA_null_method': Function(type='RSA_METHOD', derefcnt=1, name='RSA_null_method', args=[]), 'RSA_padding_add_PKCS1_OAEP': Function(type='int', derefcnt=0, name='RSA_padding_add_PKCS1_OAEP', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl'), Argument(type='unsigned', derefcnt=1, name='p'), Argument(type='int', derefcnt=0, name='pl')]), 'RSA_padding_add_PKCS1_PSS': Function(type='int', derefcnt=0, name='RSA_padding_add_PKCS1_PSS', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='unsigned', derefcnt=1, name='EM'), Argument(type='unsigned', derefcnt=1, name='mHash'), Argument(type='EVP_MD', derefcnt=1, name='Hash'), Argument(type='int', derefcnt=0, name='sLen')]), 'RSA_padding_add_PKCS1_PSS_mgf1': Function(type='int', derefcnt=0, name='RSA_padding_add_PKCS1_PSS_mgf1', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='unsigned', derefcnt=1, name='EM'), Argument(type='unsigned', derefcnt=1, name='mHash'), Argument(type='EVP_MD', derefcnt=1, name='Hash'), Argument(type='EVP_MD', derefcnt=1, name='mgf1Hash'), Argument(type='int', derefcnt=0, name='sLen')]), 'RSA_padding_add_PKCS1_type_1': Function(type='int', derefcnt=0, name='RSA_padding_add_PKCS1_type_1', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl')]), 'RSA_padding_add_PKCS1_type_2': Function(type='int', derefcnt=0, name='RSA_padding_add_PKCS1_type_2', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl')]), 'RSA_padding_add_SSLv23': Function(type='int', derefcnt=0, name='RSA_padding_add_SSLv23', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl')]), 'RSA_padding_add_X931': Function(type='int', derefcnt=0, name='RSA_padding_add_X931', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl')]), 'RSA_padding_add_none': Function(type='int', derefcnt=0, name='RSA_padding_add_none', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl')]), 'RSA_padding_check_PKCS1_OAEP': Function(type='int', derefcnt=0, name='RSA_padding_check_PKCS1_OAEP', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl'), Argument(type='int', derefcnt=0, name='rsa_len'), Argument(type='unsigned', derefcnt=1, name='p'), Argument(type='int', derefcnt=0, name='pl')]), 'RSA_padding_check_PKCS1_type_1': Function(type='int', derefcnt=0, name='RSA_padding_check_PKCS1_type_1', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl'), Argument(type='int', derefcnt=0, name='rsa_len')]), 'RSA_padding_check_PKCS1_type_2': Function(type='int', derefcnt=0, name='RSA_padding_check_PKCS1_type_2', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl'), Argument(type='int', derefcnt=0, name='rsa_len')]), 'RSA_padding_check_SSLv23': Function(type='int', derefcnt=0, name='RSA_padding_check_SSLv23', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl'), Argument(type='int', derefcnt=0, name='rsa_len')]), 'RSA_padding_check_X931': Function(type='int', derefcnt=0, name='RSA_padding_check_X931', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl'), Argument(type='int', derefcnt=0, name='rsa_len')]), 'RSA_padding_check_none': Function(type='int', derefcnt=0, name='RSA_padding_check_none', args=[Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='tlen'), Argument(type='unsigned', derefcnt=1, name='f'), Argument(type='int', derefcnt=0, name='fl'), Argument(type='int', derefcnt=0, name='rsa_len')]), 'RSA_print': Function(type='int', derefcnt=0, name='RSA_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=1, name='r'), Argument(type='int', derefcnt=0, name='offset')]), 'RSA_print_fp': Function(type='int', derefcnt=0, name='RSA_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=1, name='r'), Argument(type='int', derefcnt=0, name='offset')]), 'RSA_private_decrypt': Function(type='int', derefcnt=0, name='RSA_private_decrypt', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'RSA_private_encrypt': Function(type='int', derefcnt=0, name='RSA_private_encrypt', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'RSA_public_decrypt': Function(type='int', derefcnt=0, name='RSA_public_decrypt', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'RSA_public_encrypt': Function(type='int', derefcnt=0, name='RSA_public_encrypt', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'RSA_set_default_method': Function(type='void', derefcnt=0, name='RSA_set_default_method', args=[Argument(type='RSA_METHOD', derefcnt=1, name='meth')]), 'RSA_set_ex_data': Function(type='int', derefcnt=0, name='RSA_set_ex_data', args=[Argument(type='RSA', derefcnt=1, name='r'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='arg')]), 'RSA_set_method': Function(type='int', derefcnt=0, name='RSA_set_method', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='RSA_METHOD', derefcnt=1, name='meth')]), 'RSA_setup_blinding': Function(type='BN_BLINDING', derefcnt=1, name='RSA_setup_blinding', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'RSA_sign': Function(type='int', derefcnt=0, name='RSA_sign', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigret'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_sign_ASN1_OCTET_STRING': Function(type='int', derefcnt=0, name='RSA_sign_ASN1_OCTET_STRING', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigret'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_size': Function(type='int', derefcnt=0, name='RSA_size', args=[Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_up_ref': Function(type='int', derefcnt=0, name='RSA_up_ref', args=[Argument(type='RSA', derefcnt=1, name='r')]), 'RSA_verify': Function(type='int', derefcnt=0, name='RSA_verify', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigbuf'), Argument(type='unsigned', derefcnt=0, name='siglen'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_verify_ASN1_OCTET_STRING': Function(type='int', derefcnt=0, name='RSA_verify_ASN1_OCTET_STRING', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigbuf'), Argument(type='unsigned', derefcnt=0, name='siglen'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'RSA_verify_PKCS1_PSS': Function(type='int', derefcnt=0, name='RSA_verify_PKCS1_PSS', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='unsigned', derefcnt=1, name='mHash'), Argument(type='EVP_MD', derefcnt=1, name='Hash'), Argument(type='unsigned', derefcnt=1, name='EM'), Argument(type='int', derefcnt=0, name='sLen')]), 'RSA_verify_PKCS1_PSS_mgf1': Function(type='int', derefcnt=0, name='RSA_verify_PKCS1_PSS_mgf1', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='unsigned', derefcnt=1, name='mHash'), Argument(type='EVP_MD', derefcnt=1, name='Hash'), Argument(type='EVP_MD', derefcnt=1, name='mgf1Hash'), Argument(type='unsigned', derefcnt=1, name='EM'), Argument(type='int', derefcnt=0, name='sLen')]), 'SHA': Function(type='unsigned', derefcnt=1, name='SHA', args=[Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='unsigned', derefcnt=1, name='md')]), 'SHA1': Function(type='unsigned', derefcnt=1, name='SHA1', args=[Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='unsigned', derefcnt=1, name='md')]), 'SHA1_Final': Function(type='int', derefcnt=0, name='SHA1_Final', args=[Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='SHA_CTX', derefcnt=1, name='c')]), 'SHA1_Init': Function(type='int', derefcnt=0, name='SHA1_Init', args=[Argument(type='SHA_CTX', derefcnt=1, name='c')]), 'SHA1_Transform': Function(type='void', derefcnt=0, name='SHA1_Transform', args=[Argument(type='SHA_CTX', derefcnt=1, name='c'), Argument(type='unsigned', derefcnt=1, name='data')]), 'SHA1_Update': Function(type='int', derefcnt=0, name='SHA1_Update', args=[Argument(type='SHA_CTX', derefcnt=1, name='c'), Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='len')]), 'SHA224': Function(type='unsigned', derefcnt=1, name='SHA224', args=[Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='unsigned', derefcnt=1, name='md')]), 'SHA224_Final': Function(type='int', derefcnt=0, name='SHA224_Final', args=[Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='SHA256_CTX', derefcnt=1, name='c')]), 'SHA224_Init': Function(type='int', derefcnt=0, name='SHA224_Init', args=[Argument(type='SHA256_CTX', derefcnt=1, name='c')]), 'SHA224_Update': Function(type='int', derefcnt=0, name='SHA224_Update', args=[Argument(type='SHA256_CTX', derefcnt=1, name='c'), Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='len')]), 'SHA256': Function(type='unsigned', derefcnt=1, name='SHA256', args=[Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='unsigned', derefcnt=1, name='md')]), 'SHA256_Final': Function(type='int', derefcnt=0, name='SHA256_Final', args=[Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='SHA256_CTX', derefcnt=1, name='c')]), 'SHA256_Init': Function(type='int', derefcnt=0, name='SHA256_Init', args=[Argument(type='SHA256_CTX', derefcnt=1, name='c')]), 'SHA256_Transform': Function(type='void', derefcnt=0, name='SHA256_Transform', args=[Argument(type='SHA256_CTX', derefcnt=1, name='c'), Argument(type='unsigned', derefcnt=1, name='data')]), 'SHA256_Update': Function(type='int', derefcnt=0, name='SHA256_Update', args=[Argument(type='SHA256_CTX', derefcnt=1, name='c'), Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='len')]), 'SHA384': Function(type='unsigned', derefcnt=1, name='SHA384', args=[Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='unsigned', derefcnt=1, name='md')]), 'SHA384_Final': Function(type='int', derefcnt=0, name='SHA384_Final', args=[Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='SHA512_CTX', derefcnt=1, name='c')]), 'SHA384_Init': Function(type='int', derefcnt=0, name='SHA384_Init', args=[Argument(type='SHA512_CTX', derefcnt=1, name='c')]), 'SHA384_Update': Function(type='int', derefcnt=0, name='SHA384_Update', args=[Argument(type='SHA512_CTX', derefcnt=1, name='c'), Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='len')]), 'SHA512': Function(type='unsigned', derefcnt=1, name='SHA512', args=[Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='unsigned', derefcnt=1, name='md')]), 'SHA512_Final': Function(type='int', derefcnt=0, name='SHA512_Final', args=[Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='SHA512_CTX', derefcnt=1, name='c')]), 'SHA512_Init': Function(type='int', derefcnt=0, name='SHA512_Init', args=[Argument(type='SHA512_CTX', derefcnt=1, name='c')]), 'SHA512_Transform': Function(type='void', derefcnt=0, name='SHA512_Transform', args=[Argument(type='SHA512_CTX', derefcnt=1, name='c'), Argument(type='unsigned', derefcnt=1, name='data')]), 'SHA512_Update': Function(type='int', derefcnt=0, name='SHA512_Update', args=[Argument(type='SHA512_CTX', derefcnt=1, name='c'), Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='len')]), 'SHA_Final': Function(type='int', derefcnt=0, name='SHA_Final', args=[Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='SHA_CTX', derefcnt=1, name='c')]), 'SHA_Init': Function(type='int', derefcnt=0, name='SHA_Init', args=[Argument(type='SHA_CTX', derefcnt=1, name='c')]), 'SHA_Transform': Function(type='void', derefcnt=0, name='SHA_Transform', args=[Argument(type='SHA_CTX', derefcnt=1, name='c'), Argument(type='unsigned', derefcnt=1, name='data')]), 'SHA_Update': Function(type='int', derefcnt=0, name='SHA_Update', args=[Argument(type='SHA_CTX', derefcnt=1, name='c'), Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='len')]), 'SMIME_crlf_copy': Function(type='int', derefcnt=0, name='SMIME_crlf_copy', args=[Argument(type='BIO', derefcnt=1, name='in'), Argument(type='BIO', derefcnt=1, name='out'), Argument(type='int', derefcnt=0, name='flags')]), 'SMIME_read_ASN1': Function(type='ASN1_VALUE', derefcnt=1, name='SMIME_read_ASN1', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='BIO', derefcnt=2, name='bcont'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'SMIME_read_PKCS7': Function(type='PKCS7', derefcnt=1, name='SMIME_read_PKCS7', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='BIO', derefcnt=2, name='bcont')]), 'SMIME_text': Function(type='int', derefcnt=0, name='SMIME_text', args=[Argument(type='BIO', derefcnt=1, name='in'), Argument(type='BIO', derefcnt=1, name='out')]), 'SMIME_write_ASN1': Function(type='int', derefcnt=0, name='SMIME_write_ASN1', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='ASN1_VALUE', derefcnt=1, name='val'), Argument(type='BIO', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='ctype_nid'), Argument(type='int', derefcnt=0, name='econt_nid'), Argument(type='stack_st_X509_ALGOR', derefcnt=1, name='mdalgs'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'SMIME_write_PKCS7': Function(type='int', derefcnt=0, name='SMIME_write_PKCS7', args=[Argument(type='BIO', derefcnt=1, name='bio'), Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='BIO', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='flags')]), 'SRP_Calc_A_param': Function(type='int', derefcnt=0, name='SRP_Calc_A_param', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SRP_generate_client_master_secret': Function(type='int', derefcnt=0, name='SRP_generate_client_master_secret', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=1, name='master_key')]), 'SRP_generate_server_master_secret': Function(type='int', derefcnt=0, name='SRP_generate_server_master_secret', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=1, name='master_key')]), 'SRP_give_srp_client_pwd_callback': Function(type='char', derefcnt=1, name='SRP_give_srp_client_pwd_callback', args=[Argument(type='SSL', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'SRP_verify_param_callback': Function(type='int', derefcnt=0, name='SRP_verify_param_callback', args=[Argument(type='SSL', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'SSL_CIPHER_description': Function(type='char', derefcnt=1, name='SSL_CIPHER_description', args=[Argument(type='SSL_CIPHER', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='size')]), 'SSL_CIPHER_get_bits': Function(type='int', derefcnt=0, name='SSL_CIPHER_get_bits', args=[Argument(type='SSL_CIPHER', derefcnt=1, name='c'), Argument(type='int', derefcnt=1, name='alg_bits')]), 'SSL_CIPHER_get_id': Function(type='unsigned', derefcnt=0, name='SSL_CIPHER_get_id', args=[Argument(type='SSL_CIPHER', derefcnt=1, name='c')]), 'SSL_CIPHER_get_name': Function(type='char', derefcnt=1, name='SSL_CIPHER_get_name', args=[Argument(type='SSL_CIPHER', derefcnt=1, name='c')]), 'SSL_CIPHER_get_version': Function(type='char', derefcnt=1, name='SSL_CIPHER_get_version', args=[Argument(type='SSL_CIPHER', derefcnt=1, name='c')]), 'SSL_COMP_add_compression_method': Function(type='int', derefcnt=0, name='SSL_COMP_add_compression_method', args=[Argument(type='int', derefcnt=0, name='id'), Argument(type='COMP_METHOD', derefcnt=1, name='cm')]), 'SSL_COMP_get_compression_methods': Function(type='stack_st_SSL_COMP', derefcnt=1, name='SSL_COMP_get_compression_methods', args=[]), 'SSL_COMP_get_name': Function(type='char', derefcnt=1, name='SSL_COMP_get_name', args=[Argument(type='COMP_METHOD', derefcnt=1, name='comp')]), 'SSL_CTX_SRP_CTX_free': Function(type='int', derefcnt=0, name='SSL_CTX_SRP_CTX_free', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_SRP_CTX_init': Function(type='int', derefcnt=0, name='SSL_CTX_SRP_CTX_init', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_add_client_CA': Function(type='int', derefcnt=0, name='SSL_CTX_add_client_CA', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='X509', derefcnt=1, name='x')]), 'SSL_CTX_add_session': Function(type='int', derefcnt=0, name='SSL_CTX_add_session', args=[Argument(type='SSL_CTX', derefcnt=1, name='s'), Argument(type='SSL_SESSION', derefcnt=1, name='c')]), 'SSL_CTX_callback_ctrl': Function(type='long', derefcnt=0, name='SSL_CTX_callback_ctrl', args=[Argument(type='SSL_CTX', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'SSL_CTX_check_private_key': Function(type='int', derefcnt=0, name='SSL_CTX_check_private_key', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_ctrl': Function(type='long', derefcnt=0, name='SSL_CTX_ctrl', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg'), Argument(type='void', derefcnt=1, name='parg')]), 'SSL_CTX_flush_sessions': Function(type='void', derefcnt=0, name='SSL_CTX_flush_sessions', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='long', derefcnt=0, name='tm')]), 'SSL_CTX_free': Function(type='void', derefcnt=0, name='SSL_CTX_free', args=[Argument(type='SSL_CTX', derefcnt=1, name='arg0')]), 'SSL_CTX_get_cert_store': Function(type='X509_STORE', derefcnt=1, name='SSL_CTX_get_cert_store', args=[Argument(type='SSL_CTX', derefcnt=1, name='arg0')]), 'SSL_CTX_get_client_CA_list': Function(type='stack_st_X509_NAME', derefcnt=1, name='SSL_CTX_get_client_CA_list', args=[Argument(type='SSL_CTX', derefcnt=1, name='s')]), 'SSL_CTX_get_client_cert_cb': Function(type='int', derefcnt=0, name='SSL_CTX_get_client_cert_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_get_ex_data': Function(type='void', derefcnt=1, name='SSL_CTX_get_ex_data', args=[Argument(type='SSL_CTX', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='idx')]), 'SSL_CTX_get_ex_new_index': Function(type='int', derefcnt=0, name='SSL_CTX_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'SSL_CTX_get_info_callback': Function(type='void', derefcnt=0, name='SSL_CTX_get_info_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_get_quiet_shutdown': Function(type='int', derefcnt=0, name='SSL_CTX_get_quiet_shutdown', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_get_timeout': Function(type='long', derefcnt=0, name='SSL_CTX_get_timeout', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_get_verify_callback': Function(type='int', derefcnt=0, name='SSL_CTX_get_verify_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_get_verify_depth': Function(type='int', derefcnt=0, name='SSL_CTX_get_verify_depth', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_get_verify_mode': Function(type='int', derefcnt=0, name='SSL_CTX_get_verify_mode', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_load_verify_locations': Function(type='int', derefcnt=0, name='SSL_CTX_load_verify_locations', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='CAfile'), Argument(type='char', derefcnt=1, name='CApath')]), 'SSL_CTX_new': Function(type='SSL_CTX', derefcnt=1, name='SSL_CTX_new', args=[Argument(type='SSL_METHOD', derefcnt=1, name='meth')]), 'SSL_CTX_remove_session': Function(type='int', derefcnt=0, name='SSL_CTX_remove_session', args=[Argument(type='SSL_CTX', derefcnt=1, name='arg0'), Argument(type='SSL_SESSION', derefcnt=1, name='c')]), 'SSL_CTX_sess_get_get_cb': Function(type='SSL_SESSION', derefcnt=1, name='SSL_CTX_sess_get_get_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_sess_get_new_cb': Function(type='int', derefcnt=0, name='SSL_CTX_sess_get_new_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_sess_get_remove_cb': Function(type='void', derefcnt=0, name='SSL_CTX_sess_get_remove_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_sess_set_get_cb': Function(type='void', derefcnt=0, name='SSL_CTX_sess_set_get_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='SSL_SESSION', derefcnt=1, name='get_session_cb')]), 'SSL_CTX_sess_set_new_cb': Function(type='void', derefcnt=0, name='SSL_CTX_sess_set_new_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='new_session_cb')]), 'SSL_CTX_sess_set_remove_cb': Function(type='void', derefcnt=0, name='SSL_CTX_sess_set_remove_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=0, name='remove_session_cb')]), 'SSL_CTX_sessions': Function(type='lhash_st_SSL_SESSION', derefcnt=1, name='SSL_CTX_sessions', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_set1_param': Function(type='int', derefcnt=0, name='SSL_CTX_set1_param', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='vpm')]), 'SSL_CTX_set_cert_store': Function(type='void', derefcnt=0, name='SSL_CTX_set_cert_store', args=[Argument(type='SSL_CTX', derefcnt=1, name='arg0'), Argument(type='X509_STORE', derefcnt=1, name='arg1')]), 'SSL_CTX_set_cert_verify_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_cert_verify_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cb'), Argument(type='void', derefcnt=1, name='arg')]), 'SSL_CTX_set_cipher_list': Function(type='int', derefcnt=0, name='SSL_CTX_set_cipher_list', args=[Argument(type='SSL_CTX', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='str')]), 'SSL_CTX_set_client_CA_list': Function(type='void', derefcnt=0, name='SSL_CTX_set_client_CA_list', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='stack_st_X509_NAME', derefcnt=1, name='name_list')]), 'SSL_CTX_set_client_cert_cb': Function(type='void', derefcnt=0, name='SSL_CTX_set_client_cert_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='client_cert_cb')]), 'SSL_CTX_set_client_cert_engine': Function(type='int', derefcnt=0, name='SSL_CTX_set_client_cert_engine', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='ENGINE', derefcnt=1, name='e')]), 'SSL_CTX_set_cookie_generate_cb': Function(type='void', derefcnt=0, name='SSL_CTX_set_cookie_generate_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='app_gen_cookie_cb')]), 'SSL_CTX_set_cookie_verify_cb': Function(type='void', derefcnt=0, name='SSL_CTX_set_cookie_verify_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='app_verify_cookie_cb')]), 'SSL_CTX_set_default_passwd_cb': Function(type='void', derefcnt=0, name='SSL_CTX_set_default_passwd_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='pem_password_cb', derefcnt=1, name='cb')]), 'SSL_CTX_set_default_passwd_cb_userdata': Function(type='void', derefcnt=0, name='SSL_CTX_set_default_passwd_cb_userdata', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='u')]), 'SSL_CTX_set_default_verify_paths': Function(type='int', derefcnt=0, name='SSL_CTX_set_default_verify_paths', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_CTX_set_ex_data': Function(type='int', derefcnt=0, name='SSL_CTX_set_ex_data', args=[Argument(type='SSL_CTX', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='data')]), 'SSL_CTX_set_generate_session_id': Function(type='int', derefcnt=0, name='SSL_CTX_set_generate_session_id', args=[Argument(type='SSL_CTX', derefcnt=1, name='arg0'), Argument(type='GEN_SESSION_CB', derefcnt=0, name='arg1')]), 'SSL_CTX_set_info_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_info_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=0, name='cb')]), 'SSL_CTX_set_msg_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_msg_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=0, name='cb')]), 'SSL_CTX_set_next_proto_select_cb': Function(type='void', derefcnt=0, name='SSL_CTX_set_next_proto_select_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='cb'), Argument(type='void', derefcnt=1, name='arg')]), 'SSL_CTX_set_next_protos_advertised_cb': Function(type='void', derefcnt=0, name='SSL_CTX_set_next_protos_advertised_cb', args=[Argument(type='SSL_CTX', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='cb'), Argument(type='void', derefcnt=1, name='arg')]), 'SSL_CTX_set_psk_client_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_psk_client_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=0, name='psk_client_callback')]), 'SSL_CTX_set_psk_server_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_psk_server_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=0, name='psk_server_callback')]), 'SSL_CTX_set_purpose': Function(type='int', derefcnt=0, name='SSL_CTX_set_purpose', args=[Argument(type='SSL_CTX', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='purpose')]), 'SSL_CTX_set_quiet_shutdown': Function(type='void', derefcnt=0, name='SSL_CTX_set_quiet_shutdown', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='mode')]), 'SSL_CTX_set_session_id_context': Function(type='int', derefcnt=0, name='SSL_CTX_set_session_id_context', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='sid_ctx'), Argument(type='unsigned', derefcnt=0, name='sid_ctx_len')]), 'SSL_CTX_set_srp_cb_arg': Function(type='int', derefcnt=0, name='SSL_CTX_set_srp_cb_arg', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='arg')]), 'SSL_CTX_set_srp_client_pwd_callback': Function(type='int', derefcnt=0, name='SSL_CTX_set_srp_client_pwd_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='cb')]), 'SSL_CTX_set_srp_password': Function(type='int', derefcnt=0, name='SSL_CTX_set_srp_password', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='password')]), 'SSL_CTX_set_srp_strength': Function(type='int', derefcnt=0, name='SSL_CTX_set_srp_strength', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='strength')]), 'SSL_CTX_set_srp_username': Function(type='int', derefcnt=0, name='SSL_CTX_set_srp_username', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='name')]), 'SSL_CTX_set_srp_username_callback': Function(type='int', derefcnt=0, name='SSL_CTX_set_srp_username_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cb')]), 'SSL_CTX_set_srp_verify_param_callback': Function(type='int', derefcnt=0, name='SSL_CTX_set_srp_verify_param_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cb')]), 'SSL_CTX_set_ssl_version': Function(type='int', derefcnt=0, name='SSL_CTX_set_ssl_version', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='SSL_METHOD', derefcnt=1, name='meth')]), 'SSL_CTX_set_timeout': Function(type='long', derefcnt=0, name='SSL_CTX_set_timeout', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='long', derefcnt=0, name='t')]), 'SSL_CTX_set_tlsext_use_srtp': Function(type='int', derefcnt=0, name='SSL_CTX_set_tlsext_use_srtp', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='profiles')]), 'SSL_CTX_set_tmp_dh_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_tmp_dh_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='DH', derefcnt=1, name='dh')]), 'SSL_CTX_set_tmp_ecdh_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_tmp_ecdh_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='EC_KEY', derefcnt=1, name='ecdh')]), 'SSL_CTX_set_tmp_rsa_callback': Function(type='void', derefcnt=0, name='SSL_CTX_set_tmp_rsa_callback', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='RSA', derefcnt=1, name='cb')]), 'SSL_CTX_set_trust': Function(type='int', derefcnt=0, name='SSL_CTX_set_trust', args=[Argument(type='SSL_CTX', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='trust')]), 'SSL_CTX_set_verify': Function(type='void', derefcnt=0, name='SSL_CTX_set_verify', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='mode'), Argument(type='int', derefcnt=0, name='callback')]), 'SSL_CTX_set_verify_depth': Function(type='void', derefcnt=0, name='SSL_CTX_set_verify_depth', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='depth')]), 'SSL_CTX_use_PrivateKey': Function(type='int', derefcnt=0, name='SSL_CTX_use_PrivateKey', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'SSL_CTX_use_PrivateKey_ASN1': Function(type='int', derefcnt=0, name='SSL_CTX_use_PrivateKey_ASN1', args=[Argument(type='int', derefcnt=0, name='pk'), Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='long', derefcnt=0, name='len')]), 'SSL_CTX_use_PrivateKey_file': Function(type='int', derefcnt=0, name='SSL_CTX_use_PrivateKey_file', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'SSL_CTX_use_RSAPrivateKey': Function(type='int', derefcnt=0, name='SSL_CTX_use_RSAPrivateKey', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'SSL_CTX_use_RSAPrivateKey_ASN1': Function(type='int', derefcnt=0, name='SSL_CTX_use_RSAPrivateKey_ASN1', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='long', derefcnt=0, name='len')]), 'SSL_CTX_use_RSAPrivateKey_file': Function(type='int', derefcnt=0, name='SSL_CTX_use_RSAPrivateKey_file', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'SSL_CTX_use_certificate': Function(type='int', derefcnt=0, name='SSL_CTX_use_certificate', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='X509', derefcnt=1, name='x')]), 'SSL_CTX_use_certificate_ASN1': Function(type='int', derefcnt=0, name='SSL_CTX_use_certificate_ASN1', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='len'), Argument(type='unsigned', derefcnt=1, name='d')]), 'SSL_CTX_use_certificate_chain_file': Function(type='int', derefcnt=0, name='SSL_CTX_use_certificate_chain_file', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file')]), 'SSL_CTX_use_certificate_file': Function(type='int', derefcnt=0, name='SSL_CTX_use_certificate_file', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'SSL_CTX_use_psk_identity_hint': Function(type='int', derefcnt=0, name='SSL_CTX_use_psk_identity_hint', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='identity_hint')]), 'SSL_SESSION_free': Function(type='void', derefcnt=0, name='SSL_SESSION_free', args=[Argument(type='SSL_SESSION', derefcnt=1, name='ses')]), 'SSL_SESSION_get0_peer': Function(type='X509', derefcnt=1, name='SSL_SESSION_get0_peer', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s')]), 'SSL_SESSION_get_compress_id': Function(type='unsigned', derefcnt=0, name='SSL_SESSION_get_compress_id', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s')]), 'SSL_SESSION_get_ex_data': Function(type='void', derefcnt=1, name='SSL_SESSION_get_ex_data', args=[Argument(type='SSL_SESSION', derefcnt=1, name='ss'), Argument(type='int', derefcnt=0, name='idx')]), 'SSL_SESSION_get_ex_new_index': Function(type='int', derefcnt=0, name='SSL_SESSION_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'SSL_SESSION_get_id': Function(type='unsigned', derefcnt=1, name='SSL_SESSION_get_id', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=1, name='len')]), 'SSL_SESSION_get_time': Function(type='long', derefcnt=0, name='SSL_SESSION_get_time', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s')]), 'SSL_SESSION_get_timeout': Function(type='long', derefcnt=0, name='SSL_SESSION_get_timeout', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s')]), 'SSL_SESSION_new': Function(type='SSL_SESSION', derefcnt=1, name='SSL_SESSION_new', args=[]), 'SSL_SESSION_print': Function(type='int', derefcnt=0, name='SSL_SESSION_print', args=[Argument(type='BIO', derefcnt=1, name='fp'), Argument(type='SSL_SESSION', derefcnt=1, name='ses')]), 'SSL_SESSION_print_fp': Function(type='int', derefcnt=0, name='SSL_SESSION_print_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='SSL_SESSION', derefcnt=1, name='ses')]), 'SSL_SESSION_set1_id_context': Function(type='int', derefcnt=0, name='SSL_SESSION_set1_id_context', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=1, name='sid_ctx'), Argument(type='unsigned', derefcnt=0, name='sid_ctx_len')]), 'SSL_SESSION_set_ex_data': Function(type='int', derefcnt=0, name='SSL_SESSION_set_ex_data', args=[Argument(type='SSL_SESSION', derefcnt=1, name='ss'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='data')]), 'SSL_SESSION_set_time': Function(type='long', derefcnt=0, name='SSL_SESSION_set_time', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s'), Argument(type='long', derefcnt=0, name='t')]), 'SSL_SESSION_set_timeout': Function(type='long', derefcnt=0, name='SSL_SESSION_set_timeout', args=[Argument(type='SSL_SESSION', derefcnt=1, name='s'), Argument(type='long', derefcnt=0, name='t')]), 'SSL_SRP_CTX_free': Function(type='int', derefcnt=0, name='SSL_SRP_CTX_free', args=[Argument(type='SSL', derefcnt=1, name='ctx')]), 'SSL_SRP_CTX_init': Function(type='int', derefcnt=0, name='SSL_SRP_CTX_init', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_accept': Function(type='int', derefcnt=0, name='SSL_accept', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_add_client_CA': Function(type='int', derefcnt=0, name='SSL_add_client_CA', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='X509', derefcnt=1, name='x')]), 'SSL_add_dir_cert_subjects_to_stack': Function(type='int', derefcnt=0, name='SSL_add_dir_cert_subjects_to_stack', args=[Argument(type='stack_st_X509_NAME', derefcnt=1, name='stackCAs'), Argument(type='char', derefcnt=1, name='dir')]), 'SSL_add_file_cert_subjects_to_stack': Function(type='int', derefcnt=0, name='SSL_add_file_cert_subjects_to_stack', args=[Argument(type='stack_st_X509_NAME', derefcnt=1, name='stackCAs'), Argument(type='char', derefcnt=1, name='file')]), 'SSL_alert_desc_string': Function(type='char', derefcnt=1, name='SSL_alert_desc_string', args=[Argument(type='int', derefcnt=0, name='value')]), 'SSL_alert_desc_string_long': Function(type='char', derefcnt=1, name='SSL_alert_desc_string_long', args=[Argument(type='int', derefcnt=0, name='value')]), 'SSL_alert_type_string': Function(type='char', derefcnt=1, name='SSL_alert_type_string', args=[Argument(type='int', derefcnt=0, name='value')]), 'SSL_alert_type_string_long': Function(type='char', derefcnt=1, name='SSL_alert_type_string_long', args=[Argument(type='int', derefcnt=0, name='value')]), 'SSL_cache_hit': Function(type='int', derefcnt=0, name='SSL_cache_hit', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_callback_ctrl': Function(type='long', derefcnt=0, name='SSL_callback_ctrl', args=[Argument(type='SSL', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'SSL_check_private_key': Function(type='int', derefcnt=0, name='SSL_check_private_key', args=[Argument(type='SSL', derefcnt=1, name='ctx')]), 'SSL_clear': Function(type='int', derefcnt=0, name='SSL_clear', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_connect': Function(type='int', derefcnt=0, name='SSL_connect', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_copy_session_id': Function(type='void', derefcnt=0, name='SSL_copy_session_id', args=[Argument(type='SSL', derefcnt=1, name='to'), Argument(type='SSL', derefcnt=1, name='from')]), 'SSL_ctrl': Function(type='long', derefcnt=0, name='SSL_ctrl', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg'), Argument(type='void', derefcnt=1, name='parg')]), 'SSL_do_handshake': Function(type='int', derefcnt=0, name='SSL_do_handshake', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_dup': Function(type='SSL', derefcnt=1, name='SSL_dup', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_dup_CA_list': Function(type='stack_st_X509_NAME', derefcnt=1, name='SSL_dup_CA_list', args=[Argument(type='stack_st_X509_NAME', derefcnt=1, name='sk')]), 'SSL_export_keying_material': Function(type='int', derefcnt=0, name='SSL_export_keying_material', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=0, name='olen'), Argument(type='char', derefcnt=1, name='label'), Argument(type='size_t', derefcnt=0, name='llen'), Argument(type='unsigned', derefcnt=1, name='p'), Argument(type='size_t', derefcnt=0, name='plen'), Argument(type='int', derefcnt=0, name='use_context')]), 'SSL_free': Function(type='void', derefcnt=0, name='SSL_free', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get0_next_proto_negotiated': Function(type='void', derefcnt=0, name='SSL_get0_next_proto_negotiated', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=2, name='data'), Argument(type='unsigned', derefcnt=1, name='len')]), 'SSL_get1_session': Function(type='SSL_SESSION', derefcnt=1, name='SSL_get1_session', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_SSL_CTX': Function(type='SSL_CTX', derefcnt=1, name='SSL_get_SSL_CTX', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_certificate': Function(type='X509', derefcnt=1, name='SSL_get_certificate', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_cipher_list': Function(type='char', derefcnt=1, name='SSL_get_cipher_list', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='n')]), 'SSL_get_ciphers': Function(type='stack_st_SSL_CIPHER', derefcnt=1, name='SSL_get_ciphers', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_client_CA_list': Function(type='stack_st_X509_NAME', derefcnt=1, name='SSL_get_client_CA_list', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_current_cipher': Function(type='SSL_CIPHER', derefcnt=1, name='SSL_get_current_cipher', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_current_compression': Function(type='COMP_METHOD', derefcnt=1, name='SSL_get_current_compression', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_current_expansion': Function(type='COMP_METHOD', derefcnt=1, name='SSL_get_current_expansion', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_default_timeout': Function(type='long', derefcnt=0, name='SSL_get_default_timeout', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_error': Function(type='int', derefcnt=0, name='SSL_get_error', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='ret_code')]), 'SSL_get_ex_data': Function(type='void', derefcnt=1, name='SSL_get_ex_data', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='idx')]), 'SSL_get_ex_data_X509_STORE_CTX_idx': Function(type='int', derefcnt=0, name='SSL_get_ex_data_X509_STORE_CTX_idx', args=[]), 'SSL_get_ex_new_index': Function(type='int', derefcnt=0, name='SSL_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'SSL_get_fd': Function(type='int', derefcnt=0, name='SSL_get_fd', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_finished': Function(type='size_t', derefcnt=0, name='SSL_get_finished', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='count')]), 'SSL_get_info_callback': Function(type='void', derefcnt=0, name='SSL_get_info_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_peer_cert_chain': Function(type='stack_st_X509', derefcnt=1, name='SSL_get_peer_cert_chain', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_peer_certificate': Function(type='X509', derefcnt=1, name='SSL_get_peer_certificate', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_peer_finished': Function(type='size_t', derefcnt=0, name='SSL_get_peer_finished', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='count')]), 'SSL_get_privatekey': Function(type='evp_pkey_st', derefcnt=1, name='SSL_get_privatekey', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_psk_identity': Function(type='char', derefcnt=1, name='SSL_get_psk_identity', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_psk_identity_hint': Function(type='char', derefcnt=1, name='SSL_get_psk_identity_hint', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_quiet_shutdown': Function(type='int', derefcnt=0, name='SSL_get_quiet_shutdown', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_rbio': Function(type='BIO', derefcnt=1, name='SSL_get_rbio', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_read_ahead': Function(type='int', derefcnt=0, name='SSL_get_read_ahead', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_rfd': Function(type='int', derefcnt=0, name='SSL_get_rfd', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_selected_srtp_profile': Function(type='SRTP_PROTECTION_PROFILE', derefcnt=1, name='SSL_get_selected_srtp_profile', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_servername': Function(type='char', derefcnt=1, name='SSL_get_servername', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='type')]), 'SSL_get_servername_type': Function(type='int', derefcnt=0, name='SSL_get_servername_type', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_session': Function(type='SSL_SESSION', derefcnt=1, name='SSL_get_session', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_shared_ciphers': Function(type='char', derefcnt=1, name='SSL_get_shared_ciphers', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'SSL_get_shutdown': Function(type='int', derefcnt=0, name='SSL_get_shutdown', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_srp_N': Function(type='BIGNUM', derefcnt=1, name='SSL_get_srp_N', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_srp_g': Function(type='BIGNUM', derefcnt=1, name='SSL_get_srp_g', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_srp_userinfo': Function(type='char', derefcnt=1, name='SSL_get_srp_userinfo', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_srp_username': Function(type='char', derefcnt=1, name='SSL_get_srp_username', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_srtp_profiles': Function(type='stack_st_SRTP_PROTECTION_PROFILE', derefcnt=1, name='SSL_get_srtp_profiles', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_ssl_method': Function(type='SSL_METHOD', derefcnt=1, name='SSL_get_ssl_method', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_verify_callback': Function(type='int', derefcnt=0, name='SSL_get_verify_callback', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_verify_depth': Function(type='int', derefcnt=0, name='SSL_get_verify_depth', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_verify_mode': Function(type='int', derefcnt=0, name='SSL_get_verify_mode', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_verify_result': Function(type='long', derefcnt=0, name='SSL_get_verify_result', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_get_version': Function(type='char', derefcnt=1, name='SSL_get_version', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_wbio': Function(type='BIO', derefcnt=1, name='SSL_get_wbio', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_get_wfd': Function(type='int', derefcnt=0, name='SSL_get_wfd', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_has_matching_session_id': Function(type='int', derefcnt=0, name='SSL_has_matching_session_id', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='id'), Argument(type='unsigned', derefcnt=0, name='id_len')]), 'SSL_library_init': Function(type='int', derefcnt=0, name='SSL_library_init', args=[]), 'SSL_load_client_CA_file': Function(type='stack_st_X509_NAME', derefcnt=1, name='SSL_load_client_CA_file', args=[Argument(type='char', derefcnt=1, name='file')]), 'SSL_load_error_strings': Function(type='void', derefcnt=0, name='SSL_load_error_strings', args=[]), 'SSL_new': Function(type='SSL', derefcnt=1, name='SSL_new', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_peek': Function(type='int', derefcnt=0, name='SSL_peek', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='num')]), 'SSL_pending': Function(type='int', derefcnt=0, name='SSL_pending', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_read': Function(type='int', derefcnt=0, name='SSL_read', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='num')]), 'SSL_renegotiate': Function(type='int', derefcnt=0, name='SSL_renegotiate', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_renegotiate_abbreviated': Function(type='int', derefcnt=0, name='SSL_renegotiate_abbreviated', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_renegotiate_pending': Function(type='int', derefcnt=0, name='SSL_renegotiate_pending', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_rstate_string': Function(type='char', derefcnt=1, name='SSL_rstate_string', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_rstate_string_long': Function(type='char', derefcnt=1, name='SSL_rstate_string_long', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_select_next_proto': Function(type='int', derefcnt=0, name='SSL_select_next_proto', args=[Argument(type='unsigned', derefcnt=2, name='out'), Argument(type='unsigned', derefcnt=1, name='outlen'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='unsigned', derefcnt=0, name='inlen'), Argument(type='unsigned', derefcnt=1, name='client'), Argument(type='unsigned', derefcnt=0, name='client_len')]), 'SSL_set1_param': Function(type='int', derefcnt=0, name='SSL_set1_param', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='vpm')]), 'SSL_set_SSL_CTX': Function(type='SSL_CTX', derefcnt=1, name='SSL_set_SSL_CTX', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='SSL_CTX', derefcnt=1, name='ctx')]), 'SSL_set_accept_state': Function(type='void', derefcnt=0, name='SSL_set_accept_state', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_set_bio': Function(type='void', derefcnt=0, name='SSL_set_bio', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='BIO', derefcnt=1, name='rbio'), Argument(type='BIO', derefcnt=1, name='wbio')]), 'SSL_set_cipher_list': Function(type='int', derefcnt=0, name='SSL_set_cipher_list', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='str')]), 'SSL_set_client_CA_list': Function(type='void', derefcnt=0, name='SSL_set_client_CA_list', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='stack_st_X509_NAME', derefcnt=1, name='name_list')]), 'SSL_set_connect_state': Function(type='void', derefcnt=0, name='SSL_set_connect_state', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_set_debug': Function(type='void', derefcnt=0, name='SSL_set_debug', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='debug')]), 'SSL_set_ex_data': Function(type='int', derefcnt=0, name='SSL_set_ex_data', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='data')]), 'SSL_set_fd': Function(type='int', derefcnt=0, name='SSL_set_fd', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='fd')]), 'SSL_set_generate_session_id': Function(type='int', derefcnt=0, name='SSL_set_generate_session_id', args=[Argument(type='SSL', derefcnt=1, name='arg0'), Argument(type='GEN_SESSION_CB', derefcnt=0, name='arg1')]), 'SSL_set_info_callback': Function(type='void', derefcnt=0, name='SSL_set_info_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='void', derefcnt=0, name='cb')]), 'SSL_set_msg_callback': Function(type='void', derefcnt=0, name='SSL_set_msg_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='void', derefcnt=0, name='cb')]), 'SSL_set_psk_client_callback': Function(type='void', derefcnt=0, name='SSL_set_psk_client_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=0, name='psk_client_callback')]), 'SSL_set_psk_server_callback': Function(type='void', derefcnt=0, name='SSL_set_psk_server_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=0, name='psk_server_callback')]), 'SSL_set_purpose': Function(type='int', derefcnt=0, name='SSL_set_purpose', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='purpose')]), 'SSL_set_quiet_shutdown': Function(type='void', derefcnt=0, name='SSL_set_quiet_shutdown', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='mode')]), 'SSL_set_read_ahead': Function(type='void', derefcnt=0, name='SSL_set_read_ahead', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='yes')]), 'SSL_set_rfd': Function(type='int', derefcnt=0, name='SSL_set_rfd', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='fd')]), 'SSL_set_session': Function(type='int', derefcnt=0, name='SSL_set_session', args=[Argument(type='SSL', derefcnt=1, name='to'), Argument(type='SSL_SESSION', derefcnt=1, name='session')]), 'SSL_set_session_id_context': Function(type='int', derefcnt=0, name='SSL_set_session_id_context', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='sid_ctx'), Argument(type='unsigned', derefcnt=0, name='sid_ctx_len')]), 'SSL_set_session_secret_cb': Function(type='int', derefcnt=0, name='SSL_set_session_secret_cb', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='tls_session_secret_cb_fn', derefcnt=0, name='tls_session_secret_cb'), Argument(type='void', derefcnt=1, name='arg')]), 'SSL_set_session_ticket_ext': Function(type='int', derefcnt=0, name='SSL_set_session_ticket_ext', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='void', derefcnt=1, name='ext_data'), Argument(type='int', derefcnt=0, name='ext_len')]), 'SSL_set_session_ticket_ext_cb': Function(type='int', derefcnt=0, name='SSL_set_session_ticket_ext_cb', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='tls_session_ticket_ext_cb_fn', derefcnt=0, name='cb'), Argument(type='void', derefcnt=1, name='arg')]), 'SSL_set_shutdown': Function(type='void', derefcnt=0, name='SSL_set_shutdown', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='mode')]), 'SSL_set_srp_server_param': Function(type='int', derefcnt=0, name='SSL_set_srp_server_param', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='BIGNUM', derefcnt=1, name='N'), Argument(type='BIGNUM', derefcnt=1, name='g'), Argument(type='BIGNUM', derefcnt=1, name='sa'), Argument(type='BIGNUM', derefcnt=1, name='v'), Argument(type='char', derefcnt=1, name='info')]), 'SSL_set_srp_server_param_pw': Function(type='int', derefcnt=0, name='SSL_set_srp_server_param_pw', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='user'), Argument(type='char', derefcnt=1, name='pass'), Argument(type='char', derefcnt=1, name='grp')]), 'SSL_set_ssl_method': Function(type='int', derefcnt=0, name='SSL_set_ssl_method', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='SSL_METHOD', derefcnt=1, name='method')]), 'SSL_set_state': Function(type='void', derefcnt=0, name='SSL_set_state', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='state')]), 'SSL_set_tlsext_use_srtp': Function(type='int', derefcnt=0, name='SSL_set_tlsext_use_srtp', args=[Argument(type='SSL', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='profiles')]), 'SSL_set_tmp_dh_callback': Function(type='void', derefcnt=0, name='SSL_set_tmp_dh_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='DH', derefcnt=1, name='dh')]), 'SSL_set_tmp_ecdh_callback': Function(type='void', derefcnt=0, name='SSL_set_tmp_ecdh_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='EC_KEY', derefcnt=1, name='ecdh')]), 'SSL_set_tmp_rsa_callback': Function(type='void', derefcnt=0, name='SSL_set_tmp_rsa_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='RSA', derefcnt=1, name='cb')]), 'SSL_set_trust': Function(type='int', derefcnt=0, name='SSL_set_trust', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='trust')]), 'SSL_set_verify': Function(type='void', derefcnt=0, name='SSL_set_verify', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='mode'), Argument(type='int', derefcnt=0, name='callback')]), 'SSL_set_verify_depth': Function(type='void', derefcnt=0, name='SSL_set_verify_depth', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='depth')]), 'SSL_set_verify_result': Function(type='void', derefcnt=0, name='SSL_set_verify_result', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='long', derefcnt=0, name='v')]), 'SSL_set_wfd': Function(type='int', derefcnt=0, name='SSL_set_wfd', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='fd')]), 'SSL_shutdown': Function(type='int', derefcnt=0, name='SSL_shutdown', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_srp_server_param_with_username': Function(type='int', derefcnt=0, name='SSL_srp_server_param_with_username', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=1, name='ad')]), 'SSL_state': Function(type='int', derefcnt=0, name='SSL_state', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_state_string': Function(type='char', derefcnt=1, name='SSL_state_string', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_state_string_long': Function(type='char', derefcnt=1, name='SSL_state_string_long', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_use_PrivateKey': Function(type='int', derefcnt=0, name='SSL_use_PrivateKey', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'SSL_use_PrivateKey_ASN1': Function(type='int', derefcnt=0, name='SSL_use_PrivateKey_ASN1', args=[Argument(type='int', derefcnt=0, name='pk'), Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='long', derefcnt=0, name='len')]), 'SSL_use_PrivateKey_file': Function(type='int', derefcnt=0, name='SSL_use_PrivateKey_file', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'SSL_use_RSAPrivateKey': Function(type='int', derefcnt=0, name='SSL_use_RSAPrivateKey', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'SSL_use_RSAPrivateKey_ASN1': Function(type='int', derefcnt=0, name='SSL_use_RSAPrivateKey_ASN1', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='long', derefcnt=0, name='len')]), 'SSL_use_RSAPrivateKey_file': Function(type='int', derefcnt=0, name='SSL_use_RSAPrivateKey_file', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'SSL_use_certificate': Function(type='int', derefcnt=0, name='SSL_use_certificate', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='X509', derefcnt=1, name='x')]), 'SSL_use_certificate_ASN1': Function(type='int', derefcnt=0, name='SSL_use_certificate_ASN1', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='d'), Argument(type='int', derefcnt=0, name='len')]), 'SSL_use_certificate_file': Function(type='int', derefcnt=0, name='SSL_use_certificate_file', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'SSL_use_psk_identity_hint': Function(type='int', derefcnt=0, name='SSL_use_psk_identity_hint', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='identity_hint')]), 'SSL_version': Function(type='int', derefcnt=0, name='SSL_version', args=[Argument(type='SSL', derefcnt=1, name='ssl')]), 'SSL_want': Function(type='int', derefcnt=0, name='SSL_want', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'SSL_write': Function(type='int', derefcnt=0, name='SSL_write', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='num')]), 'SSLeay': Function(type='unsigned', derefcnt=0, name='SSLeay', args=[]), 'SSLeay_version': Function(type='char', derefcnt=1, name='SSLeay_version', args=[Argument(type='int', derefcnt=0, name='type')]), 'SSLv23_client_method': Function(type='SSL_METHOD', derefcnt=1, name='SSLv23_client_method', args=[]), 'SSLv23_method': Function(type='SSL_METHOD', derefcnt=1, name='SSLv23_method', args=[]), 'SSLv23_server_method': Function(type='SSL_METHOD', derefcnt=1, name='SSLv23_server_method', args=[]), 'SSLv3_client_method': Function(type='SSL_METHOD', derefcnt=1, name='SSLv3_client_method', args=[]), 'SSLv3_method': Function(type='SSL_METHOD', derefcnt=1, name='SSLv3_method', args=[]), 'SSLv3_server_method': Function(type='SSL_METHOD', derefcnt=1, name='SSLv3_server_method', args=[]), 'TLS_ext_srp_username_callback': Function(type='int', derefcnt=0, name='TLS_ext_srp_username_callback', args=[Argument(type='SSL', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='void', derefcnt=1, name='arg2')]), 'TLSv1_1_client_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_1_client_method', args=[]), 'TLSv1_1_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_1_method', args=[]), 'TLSv1_1_server_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_1_server_method', args=[]), 'TLSv1_2_client_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_2_client_method', args=[]), 'TLSv1_2_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_2_method', args=[]), 'TLSv1_2_server_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_2_server_method', args=[]), 'TLSv1_client_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_client_method', args=[]), 'TLSv1_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_method', args=[]), 'TLSv1_server_method': Function(type='SSL_METHOD', derefcnt=1, name='TLSv1_server_method', args=[]), 'UTF8_getc': Function(type='int', derefcnt=0, name='UTF8_getc', args=[Argument(type='unsigned', derefcnt=1, name='str'), Argument(type='int', derefcnt=0, name='len'), Argument(type='unsigned', derefcnt=1, name='val')]), 'UTF8_putc': Function(type='int', derefcnt=0, name='UTF8_putc', args=[Argument(type='unsigned', derefcnt=1, name='str'), Argument(type='int', derefcnt=0, name='len'), Argument(type='unsigned', derefcnt=0, name='value')]), 'X509_ALGOR_cmp': Function(type='int', derefcnt=0, name='X509_ALGOR_cmp', args=[Argument(type='X509_ALGOR', derefcnt=1, name='a'), Argument(type='X509_ALGOR', derefcnt=1, name='b')]), 'X509_ALGOR_dup': Function(type='X509_ALGOR', derefcnt=1, name='X509_ALGOR_dup', args=[Argument(type='X509_ALGOR', derefcnt=1, name='xn')]), 'X509_ALGOR_free': Function(type='void', derefcnt=0, name='X509_ALGOR_free', args=[Argument(type='X509_ALGOR', derefcnt=1, name='a')]), 'X509_ALGOR_get0': Function(type='void', derefcnt=0, name='X509_ALGOR_get0', args=[Argument(type='ASN1_OBJECT', derefcnt=2, name='paobj'), Argument(type='int', derefcnt=1, name='pptype'), Argument(type='void', derefcnt=2, name='ppval'), Argument(type='X509_ALGOR', derefcnt=1, name='algor')]), 'X509_ALGOR_new': Function(type='X509_ALGOR', derefcnt=1, name='X509_ALGOR_new', args=[]), 'X509_ALGOR_set0': Function(type='int', derefcnt=0, name='X509_ALGOR_set0', args=[Argument(type='X509_ALGOR', derefcnt=1, name='alg'), Argument(type='ASN1_OBJECT', derefcnt=1, name='aobj'), Argument(type='int', derefcnt=0, name='ptype'), Argument(type='void', derefcnt=1, name='pval')]), 'X509_ALGOR_set_md': Function(type='void', derefcnt=0, name='X509_ALGOR_set_md', args=[Argument(type='X509_ALGOR', derefcnt=1, name='alg'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'X509_ATTRIBUTE_count': Function(type='int', derefcnt=0, name='X509_ATTRIBUTE_count', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr')]), 'X509_ATTRIBUTE_create': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_ATTRIBUTE_create', args=[Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='atrtype'), Argument(type='void', derefcnt=1, name='value')]), 'X509_ATTRIBUTE_create_by_NID': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_ATTRIBUTE_create_by_NID', args=[Argument(type='X509_ATTRIBUTE', derefcnt=2, name='attr'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='atrtype'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'X509_ATTRIBUTE_create_by_OBJ': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_ATTRIBUTE_create_by_OBJ', args=[Argument(type='X509_ATTRIBUTE', derefcnt=2, name='attr'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='atrtype'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'X509_ATTRIBUTE_create_by_txt': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_ATTRIBUTE_create_by_txt', args=[Argument(type='X509_ATTRIBUTE', derefcnt=2, name='attr'), Argument(type='char', derefcnt=1, name='atrname'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_ATTRIBUTE_dup': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_ATTRIBUTE_dup', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='xa')]), 'X509_ATTRIBUTE_free': Function(type='void', derefcnt=0, name='X509_ATTRIBUTE_free', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='a')]), 'X509_ATTRIBUTE_get0_data': Function(type='void', derefcnt=1, name='X509_ATTRIBUTE_get0_data', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='int', derefcnt=0, name='atrtype'), Argument(type='void', derefcnt=1, name='data')]), 'X509_ATTRIBUTE_get0_object': Function(type='ASN1_OBJECT', derefcnt=1, name='X509_ATTRIBUTE_get0_object', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr')]), 'X509_ATTRIBUTE_get0_type': Function(type='ASN1_TYPE', derefcnt=1, name='X509_ATTRIBUTE_get0_type', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='idx')]), 'X509_ATTRIBUTE_new': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_ATTRIBUTE_new', args=[]), 'X509_ATTRIBUTE_set1_data': Function(type='int', derefcnt=0, name='X509_ATTRIBUTE_set1_data', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='attrtype'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len')]), 'X509_ATTRIBUTE_set1_object': Function(type='int', derefcnt=0, name='X509_ATTRIBUTE_set1_object', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj')]), 'X509_CERT_AUX_free': Function(type='void', derefcnt=0, name='X509_CERT_AUX_free', args=[Argument(type='X509_CERT_AUX', derefcnt=1, name='a')]), 'X509_CERT_AUX_new': Function(type='X509_CERT_AUX', derefcnt=1, name='X509_CERT_AUX_new', args=[]), 'X509_CERT_AUX_print': Function(type='int', derefcnt=0, name='X509_CERT_AUX_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CERT_AUX', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='indent')]), 'X509_CERT_PAIR_free': Function(type='void', derefcnt=0, name='X509_CERT_PAIR_free', args=[Argument(type='X509_CERT_PAIR', derefcnt=1, name='a')]), 'X509_CERT_PAIR_new': Function(type='X509_CERT_PAIR', derefcnt=1, name='X509_CERT_PAIR_new', args=[]), 'X509_CINF_free': Function(type='void', derefcnt=0, name='X509_CINF_free', args=[Argument(type='X509_CINF', derefcnt=1, name='a')]), 'X509_CINF_new': Function(type='X509_CINF', derefcnt=1, name='X509_CINF_new', args=[]), 'X509_CRL_INFO_free': Function(type='void', derefcnt=0, name='X509_CRL_INFO_free', args=[Argument(type='X509_CRL_INFO', derefcnt=1, name='a')]), 'X509_CRL_INFO_new': Function(type='X509_CRL_INFO', derefcnt=1, name='X509_CRL_INFO_new', args=[]), 'X509_CRL_METHOD_free': Function(type='void', derefcnt=0, name='X509_CRL_METHOD_free', args=[Argument(type='X509_CRL_METHOD', derefcnt=1, name='m')]), 'X509_CRL_METHOD_new': Function(type='X509_CRL_METHOD', derefcnt=1, name='X509_CRL_METHOD_new', args=[Argument(type='int', derefcnt=0, name='crl_init'), Argument(type='int', derefcnt=0, name='crl_free'), Argument(type='int', derefcnt=0, name='crl_lookup'), Argument(type='int', derefcnt=0, name='crl_verify')]), 'X509_CRL_add0_revoked': Function(type='int', derefcnt=0, name='X509_CRL_add0_revoked', args=[Argument(type='X509_CRL', derefcnt=1, name='crl'), Argument(type='X509_REVOKED', derefcnt=1, name='rev')]), 'X509_CRL_add1_ext_i2d': Function(type='int', derefcnt=0, name='X509_CRL_add1_ext_i2d', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='void', derefcnt=1, name='value'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_CRL_add_ext': Function(type='int', derefcnt=0, name='X509_CRL_add_ext', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='X509_EXTENSION', derefcnt=1, name='ex'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_CRL_cmp': Function(type='int', derefcnt=0, name='X509_CRL_cmp', args=[Argument(type='X509_CRL', derefcnt=1, name='a'), Argument(type='X509_CRL', derefcnt=1, name='b')]), 'X509_CRL_delete_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509_CRL_delete_ext', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_CRL_digest': Function(type='int', derefcnt=0, name='X509_CRL_digest', args=[Argument(type='X509_CRL', derefcnt=1, name='data'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'X509_CRL_dup': Function(type='X509_CRL', derefcnt=1, name='X509_CRL_dup', args=[Argument(type='X509_CRL', derefcnt=1, name='crl')]), 'X509_CRL_free': Function(type='void', derefcnt=0, name='X509_CRL_free', args=[Argument(type='X509_CRL', derefcnt=1, name='a')]), 'X509_CRL_get0_by_cert': Function(type='int', derefcnt=0, name='X509_CRL_get0_by_cert', args=[Argument(type='X509_CRL', derefcnt=1, name='crl'), Argument(type='X509_REVOKED', derefcnt=2, name='ret'), Argument(type='X509', derefcnt=1, name='x')]), 'X509_CRL_get0_by_serial': Function(type='int', derefcnt=0, name='X509_CRL_get0_by_serial', args=[Argument(type='X509_CRL', derefcnt=1, name='crl'), Argument(type='X509_REVOKED', derefcnt=2, name='ret'), Argument(type='ASN1_INTEGER', derefcnt=1, name='serial')]), 'X509_CRL_get_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509_CRL_get_ext', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_CRL_get_ext_by_NID': Function(type='int', derefcnt=0, name='X509_CRL_get_ext_by_NID', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_CRL_get_ext_by_OBJ': Function(type='int', derefcnt=0, name='X509_CRL_get_ext_by_OBJ', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_CRL_get_ext_by_critical': Function(type='int', derefcnt=0, name='X509_CRL_get_ext_by_critical', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_CRL_get_ext_count': Function(type='int', derefcnt=0, name='X509_CRL_get_ext_count', args=[Argument(type='X509_CRL', derefcnt=1, name='x')]), 'X509_CRL_get_ext_d2i': Function(type='void', derefcnt=1, name='X509_CRL_get_ext_d2i', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=1, name='crit'), Argument(type='int', derefcnt=1, name='idx')]), 'X509_CRL_get_meth_data': Function(type='void', derefcnt=1, name='X509_CRL_get_meth_data', args=[Argument(type='X509_CRL', derefcnt=1, name='crl')]), 'X509_CRL_match': Function(type='int', derefcnt=0, name='X509_CRL_match', args=[Argument(type='X509_CRL', derefcnt=1, name='a'), Argument(type='X509_CRL', derefcnt=1, name='b')]), 'X509_CRL_new': Function(type='X509_CRL', derefcnt=1, name='X509_CRL_new', args=[]), 'X509_CRL_print': Function(type='int', derefcnt=0, name='X509_CRL_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CRL', derefcnt=1, name='x')]), 'X509_CRL_print_fp': Function(type='int', derefcnt=0, name='X509_CRL_print_fp', args=[Argument(type='FILE', derefcnt=1, name='bp'), Argument(type='X509_CRL', derefcnt=1, name='x')]), 'X509_CRL_set_default_method': Function(type='void', derefcnt=0, name='X509_CRL_set_default_method', args=[Argument(type='X509_CRL_METHOD', derefcnt=1, name='meth')]), 'X509_CRL_set_issuer_name': Function(type='int', derefcnt=0, name='X509_CRL_set_issuer_name', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_CRL_set_lastUpdate': Function(type='int', derefcnt=0, name='X509_CRL_set_lastUpdate', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='ASN1_TIME', derefcnt=1, name='tm')]), 'X509_CRL_set_meth_data': Function(type='void', derefcnt=0, name='X509_CRL_set_meth_data', args=[Argument(type='X509_CRL', derefcnt=1, name='crl'), Argument(type='void', derefcnt=1, name='dat')]), 'X509_CRL_set_nextUpdate': Function(type='int', derefcnt=0, name='X509_CRL_set_nextUpdate', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='ASN1_TIME', derefcnt=1, name='tm')]), 'X509_CRL_set_version': Function(type='int', derefcnt=0, name='X509_CRL_set_version', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='long', derefcnt=0, name='version')]), 'X509_CRL_sign': Function(type='int', derefcnt=0, name='X509_CRL_sign', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'X509_CRL_sign_ctx': Function(type='int', derefcnt=0, name='X509_CRL_sign_ctx', args=[Argument(type='X509_CRL', derefcnt=1, name='x'), Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'X509_CRL_sort': Function(type='int', derefcnt=0, name='X509_CRL_sort', args=[Argument(type='X509_CRL', derefcnt=1, name='crl')]), 'X509_CRL_verify': Function(type='int', derefcnt=0, name='X509_CRL_verify', args=[Argument(type='X509_CRL', derefcnt=1, name='a'), Argument(type='EVP_PKEY', derefcnt=1, name='r')]), 'X509_EXTENSION_create_by_NID': Function(type='X509_EXTENSION', derefcnt=1, name='X509_EXTENSION_create_by_NID', args=[Argument(type='X509_EXTENSION', derefcnt=2, name='ex'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='data')]), 'X509_EXTENSION_create_by_OBJ': Function(type='X509_EXTENSION', derefcnt=1, name='X509_EXTENSION_create_by_OBJ', args=[Argument(type='X509_EXTENSION', derefcnt=2, name='ex'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='data')]), 'X509_EXTENSION_dup': Function(type='X509_EXTENSION', derefcnt=1, name='X509_EXTENSION_dup', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='ex')]), 'X509_EXTENSION_free': Function(type='void', derefcnt=0, name='X509_EXTENSION_free', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='a')]), 'X509_EXTENSION_get_critical': Function(type='int', derefcnt=0, name='X509_EXTENSION_get_critical', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='ex')]), 'X509_EXTENSION_get_data': Function(type='ASN1_OCTET_STRING', derefcnt=1, name='X509_EXTENSION_get_data', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='ne')]), 'X509_EXTENSION_get_object': Function(type='ASN1_OBJECT', derefcnt=1, name='X509_EXTENSION_get_object', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='ex')]), 'X509_EXTENSION_new': Function(type='X509_EXTENSION', derefcnt=1, name='X509_EXTENSION_new', args=[]), 'X509_EXTENSION_set_critical': Function(type='int', derefcnt=0, name='X509_EXTENSION_set_critical', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='ex'), Argument(type='int', derefcnt=0, name='crit')]), 'X509_EXTENSION_set_data': Function(type='int', derefcnt=0, name='X509_EXTENSION_set_data', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='ex'), Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='data')]), 'X509_EXTENSION_set_object': Function(type='int', derefcnt=0, name='X509_EXTENSION_set_object', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='ex'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj')]), 'X509_INFO_free': Function(type='void', derefcnt=0, name='X509_INFO_free', args=[Argument(type='X509_INFO', derefcnt=1, name='a')]), 'X509_INFO_new': Function(type='X509_INFO', derefcnt=1, name='X509_INFO_new', args=[]), 'X509_LOOKUP_by_alias': Function(type='int', derefcnt=0, name='X509_LOOKUP_by_alias', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='char', derefcnt=1, name='str'), Argument(type='int', derefcnt=0, name='len'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'X509_LOOKUP_by_fingerprint': Function(type='int', derefcnt=0, name='X509_LOOKUP_by_fingerprint', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'X509_LOOKUP_by_issuer_serial': Function(type='int', derefcnt=0, name='X509_LOOKUP_by_issuer_serial', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='ASN1_INTEGER', derefcnt=1, name='serial'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'X509_LOOKUP_by_subject': Function(type='int', derefcnt=0, name='X509_LOOKUP_by_subject', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'X509_LOOKUP_ctrl': Function(type='int', derefcnt=0, name='X509_LOOKUP_ctrl', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='char', derefcnt=1, name='argc'), Argument(type='long', derefcnt=0, name='argl'), Argument(type='char', derefcnt=2, name='ret')]), 'X509_LOOKUP_file': Function(type='X509_LOOKUP_METHOD', derefcnt=1, name='X509_LOOKUP_file', args=[]), 'X509_LOOKUP_free': Function(type='void', derefcnt=0, name='X509_LOOKUP_free', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx')]), 'X509_LOOKUP_hash_dir': Function(type='X509_LOOKUP_METHOD', derefcnt=1, name='X509_LOOKUP_hash_dir', args=[]), 'X509_LOOKUP_init': Function(type='int', derefcnt=0, name='X509_LOOKUP_init', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx')]), 'X509_LOOKUP_new': Function(type='X509_LOOKUP', derefcnt=1, name='X509_LOOKUP_new', args=[Argument(type='X509_LOOKUP_METHOD', derefcnt=1, name='method')]), 'X509_LOOKUP_shutdown': Function(type='int', derefcnt=0, name='X509_LOOKUP_shutdown', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx')]), 'X509_NAME_ENTRY_create_by_NID': Function(type='X509_NAME_ENTRY', derefcnt=1, name='X509_NAME_ENTRY_create_by_NID', args=[Argument(type='X509_NAME_ENTRY', derefcnt=2, name='ne'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_NAME_ENTRY_create_by_OBJ': Function(type='X509_NAME_ENTRY', derefcnt=1, name='X509_NAME_ENTRY_create_by_OBJ', args=[Argument(type='X509_NAME_ENTRY', derefcnt=2, name='ne'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_NAME_ENTRY_create_by_txt': Function(type='X509_NAME_ENTRY', derefcnt=1, name='X509_NAME_ENTRY_create_by_txt', args=[Argument(type='X509_NAME_ENTRY', derefcnt=2, name='ne'), Argument(type='char', derefcnt=1, name='field'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_NAME_ENTRY_dup': Function(type='X509_NAME_ENTRY', derefcnt=1, name='X509_NAME_ENTRY_dup', args=[Argument(type='X509_NAME_ENTRY', derefcnt=1, name='ne')]), 'X509_NAME_ENTRY_free': Function(type='void', derefcnt=0, name='X509_NAME_ENTRY_free', args=[Argument(type='X509_NAME_ENTRY', derefcnt=1, name='a')]), 'X509_NAME_ENTRY_get_data': Function(type='ASN1_STRING', derefcnt=1, name='X509_NAME_ENTRY_get_data', args=[Argument(type='X509_NAME_ENTRY', derefcnt=1, name='ne')]), 'X509_NAME_ENTRY_get_object': Function(type='ASN1_OBJECT', derefcnt=1, name='X509_NAME_ENTRY_get_object', args=[Argument(type='X509_NAME_ENTRY', derefcnt=1, name='ne')]), 'X509_NAME_ENTRY_new': Function(type='X509_NAME_ENTRY', derefcnt=1, name='X509_NAME_ENTRY_new', args=[]), 'X509_NAME_ENTRY_set_data': Function(type='int', derefcnt=0, name='X509_NAME_ENTRY_set_data', args=[Argument(type='X509_NAME_ENTRY', derefcnt=1, name='ne'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_NAME_ENTRY_set_object': Function(type='int', derefcnt=0, name='X509_NAME_ENTRY_set_object', args=[Argument(type='X509_NAME_ENTRY', derefcnt=1, name='ne'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj')]), 'X509_NAME_add_entry': Function(type='int', derefcnt=0, name='X509_NAME_add_entry', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='X509_NAME_ENTRY', derefcnt=1, name='ne'), Argument(type='int', derefcnt=0, name='loc'), Argument(type='int', derefcnt=0, name='set')]), 'X509_NAME_add_entry_by_NID': Function(type='int', derefcnt=0, name='X509_NAME_add_entry_by_NID', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='loc'), Argument(type='int', derefcnt=0, name='set')]), 'X509_NAME_add_entry_by_OBJ': Function(type='int', derefcnt=0, name='X509_NAME_add_entry_by_OBJ', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='loc'), Argument(type='int', derefcnt=0, name='set')]), 'X509_NAME_add_entry_by_txt': Function(type='int', derefcnt=0, name='X509_NAME_add_entry_by_txt', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='field'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='loc'), Argument(type='int', derefcnt=0, name='set')]), 'X509_NAME_cmp': Function(type='int', derefcnt=0, name='X509_NAME_cmp', args=[Argument(type='X509_NAME', derefcnt=1, name='a'), Argument(type='X509_NAME', derefcnt=1, name='b')]), 'X509_NAME_delete_entry': Function(type='X509_NAME_ENTRY', derefcnt=1, name='X509_NAME_delete_entry', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_NAME_digest': Function(type='int', derefcnt=0, name='X509_NAME_digest', args=[Argument(type='X509_NAME', derefcnt=1, name='data'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'X509_NAME_dup': Function(type='X509_NAME', derefcnt=1, name='X509_NAME_dup', args=[Argument(type='X509_NAME', derefcnt=1, name='xn')]), 'X509_NAME_entry_count': Function(type='int', derefcnt=0, name='X509_NAME_entry_count', args=[Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_NAME_free': Function(type='void', derefcnt=0, name='X509_NAME_free', args=[Argument(type='X509_NAME', derefcnt=1, name='a')]), 'X509_NAME_get_entry': Function(type='X509_NAME_ENTRY', derefcnt=1, name='X509_NAME_get_entry', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_NAME_get_index_by_NID': Function(type='int', derefcnt=0, name='X509_NAME_get_index_by_NID', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_NAME_get_index_by_OBJ': Function(type='int', derefcnt=0, name='X509_NAME_get_index_by_OBJ', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_NAME_get_text_by_NID': Function(type='int', derefcnt=0, name='X509_NAME_get_text_by_NID', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'X509_NAME_get_text_by_OBJ': Function(type='int', derefcnt=0, name='X509_NAME_get_text_by_OBJ', args=[Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'X509_NAME_hash': Function(type='unsigned', derefcnt=0, name='X509_NAME_hash', args=[Argument(type='X509_NAME', derefcnt=1, name='x')]), 'X509_NAME_hash_old': Function(type='unsigned', derefcnt=0, name='X509_NAME_hash_old', args=[Argument(type='X509_NAME', derefcnt=1, name='x')]), 'X509_NAME_new': Function(type='X509_NAME', derefcnt=1, name='X509_NAME_new', args=[]), 'X509_NAME_oneline': Function(type='char', derefcnt=1, name='X509_NAME_oneline', args=[Argument(type='X509_NAME', derefcnt=1, name='a'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='size')]), 'X509_NAME_print': Function(type='int', derefcnt=0, name='X509_NAME_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='obase')]), 'X509_NAME_print_ex': Function(type='int', derefcnt=0, name='X509_NAME_print_ex', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='X509_NAME', derefcnt=1, name='nm'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_NAME_print_ex_fp': Function(type='int', derefcnt=0, name='X509_NAME_print_ex_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_NAME', derefcnt=1, name='nm'), Argument(type='int', derefcnt=0, name='indent'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_NAME_set': Function(type='int', derefcnt=0, name='X509_NAME_set', args=[Argument(type='X509_NAME', derefcnt=2, name='xn'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_OBJECT_free_contents': Function(type='void', derefcnt=0, name='X509_OBJECT_free_contents', args=[Argument(type='X509_OBJECT', derefcnt=1, name='a')]), 'X509_OBJECT_idx_by_subject': Function(type='int', derefcnt=0, name='X509_OBJECT_idx_by_subject', args=[Argument(type='stack_st_X509_OBJECT', derefcnt=1, name='h'), Argument(type='int', derefcnt=0, name='type'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_OBJECT_retrieve_by_subject': Function(type='X509_OBJECT', derefcnt=1, name='X509_OBJECT_retrieve_by_subject', args=[Argument(type='stack_st_X509_OBJECT', derefcnt=1, name='h'), Argument(type='int', derefcnt=0, name='type'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_OBJECT_retrieve_match': Function(type='X509_OBJECT', derefcnt=1, name='X509_OBJECT_retrieve_match', args=[Argument(type='stack_st_X509_OBJECT', derefcnt=1, name='h'), Argument(type='X509_OBJECT', derefcnt=1, name='x')]), 'X509_OBJECT_up_ref_count': Function(type='void', derefcnt=0, name='X509_OBJECT_up_ref_count', args=[Argument(type='X509_OBJECT', derefcnt=1, name='a')]), 'X509_PKEY_free': Function(type='void', derefcnt=0, name='X509_PKEY_free', args=[Argument(type='X509_PKEY', derefcnt=1, name='a')]), 'X509_PKEY_new': Function(type='X509_PKEY', derefcnt=1, name='X509_PKEY_new', args=[]), 'X509_PUBKEY_free': Function(type='void', derefcnt=0, name='X509_PUBKEY_free', args=[Argument(type='X509_PUBKEY', derefcnt=1, name='a')]), 'X509_PUBKEY_get': Function(type='EVP_PKEY', derefcnt=1, name='X509_PUBKEY_get', args=[Argument(type='X509_PUBKEY', derefcnt=1, name='key')]), 'X509_PUBKEY_get0_param': Function(type='int', derefcnt=0, name='X509_PUBKEY_get0_param', args=[Argument(type='ASN1_OBJECT', derefcnt=2, name='ppkalg'), Argument(type='unsigned', derefcnt=2, name='pk'), Argument(type='int', derefcnt=1, name='ppklen'), Argument(type='X509_ALGOR', derefcnt=2, name='pa'), Argument(type='X509_PUBKEY', derefcnt=1, name='pub')]), 'X509_PUBKEY_new': Function(type='X509_PUBKEY', derefcnt=1, name='X509_PUBKEY_new', args=[]), 'X509_PUBKEY_set': Function(type='int', derefcnt=0, name='X509_PUBKEY_set', args=[Argument(type='X509_PUBKEY', derefcnt=2, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'X509_PUBKEY_set0_param': Function(type='int', derefcnt=0, name='X509_PUBKEY_set0_param', args=[Argument(type='X509_PUBKEY', derefcnt=1, name='pub'), Argument(type='ASN1_OBJECT', derefcnt=1, name='aobj'), Argument(type='int', derefcnt=0, name='ptype'), Argument(type='void', derefcnt=1, name='pval'), Argument(type='unsigned', derefcnt=1, name='penc'), Argument(type='int', derefcnt=0, name='penclen')]), 'X509_REQ_INFO_free': Function(type='void', derefcnt=0, name='X509_REQ_INFO_free', args=[Argument(type='X509_REQ_INFO', derefcnt=1, name='a')]), 'X509_REQ_INFO_new': Function(type='X509_REQ_INFO', derefcnt=1, name='X509_REQ_INFO_new', args=[]), 'X509_REQ_add1_attr': Function(type='int', derefcnt=0, name='X509_REQ_add1_attr', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr')]), 'X509_REQ_add1_attr_by_NID': Function(type='int', derefcnt=0, name='X509_REQ_add1_attr_by_NID', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_REQ_add1_attr_by_OBJ': Function(type='int', derefcnt=0, name='X509_REQ_add1_attr_by_OBJ', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_REQ_add1_attr_by_txt': Function(type='int', derefcnt=0, name='X509_REQ_add1_attr_by_txt', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='char', derefcnt=1, name='attrname'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509_REQ_add_extensions': Function(type='int', derefcnt=0, name='X509_REQ_add_extensions', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='exts')]), 'X509_REQ_add_extensions_nid': Function(type='int', derefcnt=0, name='X509_REQ_add_extensions_nid', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='exts'), Argument(type='int', derefcnt=0, name='nid')]), 'X509_REQ_check_private_key': Function(type='int', derefcnt=0, name='X509_REQ_check_private_key', args=[Argument(type='X509_REQ', derefcnt=1, name='x509'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'X509_REQ_delete_attr': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_REQ_delete_attr', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_REQ_digest': Function(type='int', derefcnt=0, name='X509_REQ_digest', args=[Argument(type='X509_REQ', derefcnt=1, name='data'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'X509_REQ_dup': Function(type='X509_REQ', derefcnt=1, name='X509_REQ_dup', args=[Argument(type='X509_REQ', derefcnt=1, name='req')]), 'X509_REQ_extension_nid': Function(type='int', derefcnt=0, name='X509_REQ_extension_nid', args=[Argument(type='int', derefcnt=0, name='nid')]), 'X509_REQ_free': Function(type='void', derefcnt=0, name='X509_REQ_free', args=[Argument(type='X509_REQ', derefcnt=1, name='a')]), 'X509_REQ_get_attr': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509_REQ_get_attr', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_REQ_get_attr_by_NID': Function(type='int', derefcnt=0, name='X509_REQ_get_attr_by_NID', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_REQ_get_attr_by_OBJ': Function(type='int', derefcnt=0, name='X509_REQ_get_attr_by_OBJ', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_REQ_get_attr_count': Function(type='int', derefcnt=0, name='X509_REQ_get_attr_count', args=[Argument(type='X509_REQ', derefcnt=1, name='req')]), 'X509_REQ_get_extension_nids': Function(type='int', derefcnt=1, name='X509_REQ_get_extension_nids', args=[]), 'X509_REQ_get_extensions': Function(type='stack_st_X509_EXTENSION', derefcnt=1, name='X509_REQ_get_extensions', args=[Argument(type='X509_REQ', derefcnt=1, name='req')]), 'X509_REQ_get_pubkey': Function(type='EVP_PKEY', derefcnt=1, name='X509_REQ_get_pubkey', args=[Argument(type='X509_REQ', derefcnt=1, name='req')]), 'X509_REQ_new': Function(type='X509_REQ', derefcnt=1, name='X509_REQ_new', args=[]), 'X509_REQ_print': Function(type='int', derefcnt=0, name='X509_REQ_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=1, name='req')]), 'X509_REQ_print_ex': Function(type='int', derefcnt=0, name='X509_REQ_print_ex', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=1, name='x'), Argument(type='unsigned', derefcnt=0, name='nmflag'), Argument(type='unsigned', derefcnt=0, name='cflag')]), 'X509_REQ_print_fp': Function(type='int', derefcnt=0, name='X509_REQ_print_fp', args=[Argument(type='FILE', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=1, name='req')]), 'X509_REQ_set_extension_nids': Function(type='void', derefcnt=0, name='X509_REQ_set_extension_nids', args=[Argument(type='int', derefcnt=1, name='nids')]), 'X509_REQ_set_pubkey': Function(type='int', derefcnt=0, name='X509_REQ_set_pubkey', args=[Argument(type='X509_REQ', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'X509_REQ_set_subject_name': Function(type='int', derefcnt=0, name='X509_REQ_set_subject_name', args=[Argument(type='X509_REQ', derefcnt=1, name='req'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_REQ_set_version': Function(type='int', derefcnt=0, name='X509_REQ_set_version', args=[Argument(type='X509_REQ', derefcnt=1, name='x'), Argument(type='long', derefcnt=0, name='version')]), 'X509_REQ_sign': Function(type='int', derefcnt=0, name='X509_REQ_sign', args=[Argument(type='X509_REQ', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'X509_REQ_sign_ctx': Function(type='int', derefcnt=0, name='X509_REQ_sign_ctx', args=[Argument(type='X509_REQ', derefcnt=1, name='x'), Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'X509_REQ_to_X509': Function(type='X509', derefcnt=1, name='X509_REQ_to_X509', args=[Argument(type='X509_REQ', derefcnt=1, name='r'), Argument(type='int', derefcnt=0, name='days'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'X509_REQ_verify': Function(type='int', derefcnt=0, name='X509_REQ_verify', args=[Argument(type='X509_REQ', derefcnt=1, name='a'), Argument(type='EVP_PKEY', derefcnt=1, name='r')]), 'X509_REVOKED_add1_ext_i2d': Function(type='int', derefcnt=0, name='X509_REVOKED_add1_ext_i2d', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='void', derefcnt=1, name='value'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_REVOKED_add_ext': Function(type='int', derefcnt=0, name='X509_REVOKED_add_ext', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='X509_EXTENSION', derefcnt=1, name='ex'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_REVOKED_delete_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509_REVOKED_delete_ext', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_REVOKED_free': Function(type='void', derefcnt=0, name='X509_REVOKED_free', args=[Argument(type='X509_REVOKED', derefcnt=1, name='a')]), 'X509_REVOKED_get_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509_REVOKED_get_ext', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_REVOKED_get_ext_by_NID': Function(type='int', derefcnt=0, name='X509_REVOKED_get_ext_by_NID', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_REVOKED_get_ext_by_OBJ': Function(type='int', derefcnt=0, name='X509_REVOKED_get_ext_by_OBJ', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_REVOKED_get_ext_by_critical': Function(type='int', derefcnt=0, name='X509_REVOKED_get_ext_by_critical', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_REVOKED_get_ext_count': Function(type='int', derefcnt=0, name='X509_REVOKED_get_ext_count', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x')]), 'X509_REVOKED_get_ext_d2i': Function(type='void', derefcnt=1, name='X509_REVOKED_get_ext_d2i', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=1, name='crit'), Argument(type='int', derefcnt=1, name='idx')]), 'X509_REVOKED_new': Function(type='X509_REVOKED', derefcnt=1, name='X509_REVOKED_new', args=[]), 'X509_REVOKED_set_revocationDate': Function(type='int', derefcnt=0, name='X509_REVOKED_set_revocationDate', args=[Argument(type='X509_REVOKED', derefcnt=1, name='r'), Argument(type='ASN1_TIME', derefcnt=1, name='tm')]), 'X509_REVOKED_set_serialNumber': Function(type='int', derefcnt=0, name='X509_REVOKED_set_serialNumber', args=[Argument(type='X509_REVOKED', derefcnt=1, name='x'), Argument(type='ASN1_INTEGER', derefcnt=1, name='serial')]), 'X509_SIG_free': Function(type='void', derefcnt=0, name='X509_SIG_free', args=[Argument(type='X509_SIG', derefcnt=1, name='a')]), 'X509_SIG_new': Function(type='X509_SIG', derefcnt=1, name='X509_SIG_new', args=[]), 'X509_STORE_CTX_cleanup': Function(type='void', derefcnt=0, name='X509_STORE_CTX_cleanup', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_free': Function(type='void', derefcnt=0, name='X509_STORE_CTX_free', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get0_current_crl': Function(type='X509_CRL', derefcnt=1, name='X509_STORE_CTX_get0_current_crl', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get0_current_issuer': Function(type='X509', derefcnt=1, name='X509_STORE_CTX_get0_current_issuer', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get0_param': Function(type='X509_VERIFY_PARAM', derefcnt=1, name='X509_STORE_CTX_get0_param', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get0_parent_ctx': Function(type='X509_STORE_CTX', derefcnt=1, name='X509_STORE_CTX_get0_parent_ctx', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get0_policy_tree': Function(type='X509_POLICY_TREE', derefcnt=1, name='X509_STORE_CTX_get0_policy_tree', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get1_chain': Function(type='stack_st_X509', derefcnt=1, name='X509_STORE_CTX_get1_chain', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get1_issuer': Function(type='int', derefcnt=0, name='X509_STORE_CTX_get1_issuer', args=[Argument(type='X509', derefcnt=2, name='issuer'), Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509', derefcnt=1, name='x')]), 'X509_STORE_CTX_get_chain': Function(type='stack_st_X509', derefcnt=1, name='X509_STORE_CTX_get_chain', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get_current_cert': Function(type='X509', derefcnt=1, name='X509_STORE_CTX_get_current_cert', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get_error': Function(type='int', derefcnt=0, name='X509_STORE_CTX_get_error', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get_error_depth': Function(type='int', derefcnt=0, name='X509_STORE_CTX_get_error_depth', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_get_ex_data': Function(type='void', derefcnt=1, name='X509_STORE_CTX_get_ex_data', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='idx')]), 'X509_STORE_CTX_get_ex_new_index': Function(type='int', derefcnt=0, name='X509_STORE_CTX_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'X509_STORE_CTX_get_explicit_policy': Function(type='int', derefcnt=0, name='X509_STORE_CTX_get_explicit_policy', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_STORE_CTX_init': Function(type='int', derefcnt=0, name='X509_STORE_CTX_init', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509_STORE', derefcnt=1, name='store'), Argument(type='X509', derefcnt=1, name='x509'), Argument(type='stack_st_X509', derefcnt=1, name='chain')]), 'X509_STORE_CTX_new': Function(type='X509_STORE_CTX', derefcnt=1, name='X509_STORE_CTX_new', args=[]), 'X509_STORE_CTX_purpose_inherit': Function(type='int', derefcnt=0, name='X509_STORE_CTX_purpose_inherit', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='def_purpose'), Argument(type='int', derefcnt=0, name='purpose'), Argument(type='int', derefcnt=0, name='trust')]), 'X509_STORE_CTX_set0_crls': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set0_crls', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='c'), Argument(type='stack_st_X509_CRL', derefcnt=1, name='sk')]), 'X509_STORE_CTX_set0_param': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set0_param', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param')]), 'X509_STORE_CTX_set_cert': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set_cert', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='c'), Argument(type='X509', derefcnt=1, name='x')]), 'X509_STORE_CTX_set_chain': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set_chain', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='c'), Argument(type='stack_st_X509', derefcnt=1, name='sk')]), 'X509_STORE_CTX_set_default': Function(type='int', derefcnt=0, name='X509_STORE_CTX_set_default', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='name')]), 'X509_STORE_CTX_set_depth': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set_depth', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='depth')]), 'X509_STORE_CTX_set_error': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set_error', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='s')]), 'X509_STORE_CTX_set_ex_data': Function(type='int', derefcnt=0, name='X509_STORE_CTX_set_ex_data', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='data')]), 'X509_STORE_CTX_set_flags': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set_flags', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_STORE_CTX_set_purpose': Function(type='int', derefcnt=0, name='X509_STORE_CTX_set_purpose', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='purpose')]), 'X509_STORE_CTX_set_time': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set_time', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=0, name='flags'), Argument(type='time_t', derefcnt=0, name='t')]), 'X509_STORE_CTX_set_trust': Function(type='int', derefcnt=0, name='X509_STORE_CTX_set_trust', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='trust')]), 'X509_STORE_CTX_set_verify_cb': Function(type='void', derefcnt=0, name='X509_STORE_CTX_set_verify_cb', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='verify_cb')]), 'X509_STORE_CTX_trusted_stack': Function(type='void', derefcnt=0, name='X509_STORE_CTX_trusted_stack', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='stack_st_X509', derefcnt=1, name='sk')]), 'X509_STORE_add_cert': Function(type='int', derefcnt=0, name='X509_STORE_add_cert', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='X509', derefcnt=1, name='x')]), 'X509_STORE_add_crl': Function(type='int', derefcnt=0, name='X509_STORE_add_crl', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='X509_CRL', derefcnt=1, name='x')]), 'X509_STORE_add_lookup': Function(type='X509_LOOKUP', derefcnt=1, name='X509_STORE_add_lookup', args=[Argument(type='X509_STORE', derefcnt=1, name='v'), Argument(type='X509_LOOKUP_METHOD', derefcnt=1, name='m')]), 'X509_STORE_free': Function(type='void', derefcnt=0, name='X509_STORE_free', args=[Argument(type='X509_STORE', derefcnt=1, name='v')]), 'X509_STORE_get1_certs': Function(type='stack_st_X509', derefcnt=1, name='X509_STORE_get1_certs', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='st'), Argument(type='X509_NAME', derefcnt=1, name='nm')]), 'X509_STORE_get1_crls': Function(type='stack_st_X509_CRL', derefcnt=1, name='X509_STORE_get1_crls', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='st'), Argument(type='X509_NAME', derefcnt=1, name='nm')]), 'X509_STORE_get_by_subject': Function(type='int', derefcnt=0, name='X509_STORE_get_by_subject', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='vs'), Argument(type='int', derefcnt=0, name='type'), Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'X509_STORE_load_locations': Function(type='int', derefcnt=0, name='X509_STORE_load_locations', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file'), Argument(type='char', derefcnt=1, name='dir')]), 'X509_STORE_new': Function(type='X509_STORE', derefcnt=1, name='X509_STORE_new', args=[]), 'X509_STORE_set1_param': Function(type='int', derefcnt=0, name='X509_STORE_set1_param', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='pm')]), 'X509_STORE_set_default_paths': Function(type='int', derefcnt=0, name='X509_STORE_set_default_paths', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx')]), 'X509_STORE_set_depth': Function(type='int', derefcnt=0, name='X509_STORE_set_depth', args=[Argument(type='X509_STORE', derefcnt=1, name='store'), Argument(type='int', derefcnt=0, name='depth')]), 'X509_STORE_set_flags': Function(type='int', derefcnt=0, name='X509_STORE_set_flags', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_STORE_set_purpose': Function(type='int', derefcnt=0, name='X509_STORE_set_purpose', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='purpose')]), 'X509_STORE_set_trust': Function(type='int', derefcnt=0, name='X509_STORE_set_trust', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='trust')]), 'X509_STORE_set_verify_cb': Function(type='void', derefcnt=0, name='X509_STORE_set_verify_cb', args=[Argument(type='X509_STORE', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='verify_cb')]), 'X509_TRUST_add': Function(type='int', derefcnt=0, name='X509_TRUST_add', args=[Argument(type='int', derefcnt=0, name='id'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='ck'), Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='void', derefcnt=1, name='arg2')]), 'X509_TRUST_cleanup': Function(type='void', derefcnt=0, name='X509_TRUST_cleanup', args=[]), 'X509_TRUST_get0': Function(type='X509_TRUST', derefcnt=1, name='X509_TRUST_get0', args=[Argument(type='int', derefcnt=0, name='idx')]), 'X509_TRUST_get0_name': Function(type='char', derefcnt=1, name='X509_TRUST_get0_name', args=[Argument(type='X509_TRUST', derefcnt=1, name='xp')]), 'X509_TRUST_get_by_id': Function(type='int', derefcnt=0, name='X509_TRUST_get_by_id', args=[Argument(type='int', derefcnt=0, name='id')]), 'X509_TRUST_get_count': Function(type='int', derefcnt=0, name='X509_TRUST_get_count', args=[]), 'X509_TRUST_get_flags': Function(type='int', derefcnt=0, name='X509_TRUST_get_flags', args=[Argument(type='X509_TRUST', derefcnt=1, name='xp')]), 'X509_TRUST_get_trust': Function(type='int', derefcnt=0, name='X509_TRUST_get_trust', args=[Argument(type='X509_TRUST', derefcnt=1, name='xp')]), 'X509_TRUST_set': Function(type='int', derefcnt=0, name='X509_TRUST_set', args=[Argument(type='int', derefcnt=1, name='t'), Argument(type='int', derefcnt=0, name='trust')]), 'X509_TRUST_set_default': Function(type='int', derefcnt=0, name='X509_TRUST_set_default', args=[Argument(type='int', derefcnt=0, name='trust')]), 'X509_VAL_free': Function(type='void', derefcnt=0, name='X509_VAL_free', args=[Argument(type='X509_VAL', derefcnt=1, name='a')]), 'X509_VAL_new': Function(type='X509_VAL', derefcnt=1, name='X509_VAL_new', args=[]), 'X509_VERIFY_PARAM_add0_policy': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_add0_policy', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='ASN1_OBJECT', derefcnt=1, name='policy')]), 'X509_VERIFY_PARAM_add0_table': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_add0_table', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param')]), 'X509_VERIFY_PARAM_clear_flags': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_clear_flags', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_VERIFY_PARAM_free': Function(type='void', derefcnt=0, name='X509_VERIFY_PARAM_free', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param')]), 'X509_VERIFY_PARAM_get_depth': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_get_depth', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param')]), 'X509_VERIFY_PARAM_get_flags': Function(type='unsigned', derefcnt=0, name='X509_VERIFY_PARAM_get_flags', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param')]), 'X509_VERIFY_PARAM_inherit': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_inherit', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='to'), Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='from')]), 'X509_VERIFY_PARAM_lookup': Function(type='X509_VERIFY_PARAM', derefcnt=1, name='X509_VERIFY_PARAM_lookup', args=[Argument(type='char', derefcnt=1, name='name')]), 'X509_VERIFY_PARAM_new': Function(type='X509_VERIFY_PARAM', derefcnt=1, name='X509_VERIFY_PARAM_new', args=[]), 'X509_VERIFY_PARAM_set1': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_set1', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='to'), Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='from')]), 'X509_VERIFY_PARAM_set1_name': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_set1_name', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='char', derefcnt=1, name='name')]), 'X509_VERIFY_PARAM_set1_policies': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_set1_policies', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='stack_st_ASN1_OBJECT', derefcnt=1, name='policies')]), 'X509_VERIFY_PARAM_set_depth': Function(type='void', derefcnt=0, name='X509_VERIFY_PARAM_set_depth', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='int', derefcnt=0, name='depth')]), 'X509_VERIFY_PARAM_set_flags': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_set_flags', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_VERIFY_PARAM_set_purpose': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_set_purpose', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='int', derefcnt=0, name='purpose')]), 'X509_VERIFY_PARAM_set_time': Function(type='void', derefcnt=0, name='X509_VERIFY_PARAM_set_time', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='time_t', derefcnt=0, name='t')]), 'X509_VERIFY_PARAM_set_trust': Function(type='int', derefcnt=0, name='X509_VERIFY_PARAM_set_trust', args=[Argument(type='X509_VERIFY_PARAM', derefcnt=1, name='param'), Argument(type='int', derefcnt=0, name='trust')]), 'X509_VERIFY_PARAM_table_cleanup': Function(type='void', derefcnt=0, name='X509_VERIFY_PARAM_table_cleanup', args=[]), 'X509_add1_ext_i2d': Function(type='int', derefcnt=0, name='X509_add1_ext_i2d', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='void', derefcnt=1, name='value'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_add1_reject_object': Function(type='int', derefcnt=0, name='X509_add1_reject_object', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj')]), 'X509_add1_trust_object': Function(type='int', derefcnt=0, name='X509_add1_trust_object', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj')]), 'X509_add_ext': Function(type='int', derefcnt=0, name='X509_add_ext', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='X509_EXTENSION', derefcnt=1, name='ex'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_alias_get0': Function(type='unsigned', derefcnt=1, name='X509_alias_get0', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=1, name='len')]), 'X509_alias_set1': Function(type='int', derefcnt=0, name='X509_alias_set1', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='unsigned', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='len')]), 'X509_certificate_type': Function(type='int', derefcnt=0, name='X509_certificate_type', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pubkey')]), 'X509_check_private_key': Function(type='int', derefcnt=0, name='X509_check_private_key', args=[Argument(type='X509', derefcnt=1, name='x509'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'X509_check_trust': Function(type='int', derefcnt=0, name='X509_check_trust', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='id'), Argument(type='int', derefcnt=0, name='flags')]), 'X509_cmp': Function(type='int', derefcnt=0, name='X509_cmp', args=[Argument(type='X509', derefcnt=1, name='a'), Argument(type='X509', derefcnt=1, name='b')]), 'X509_cmp_current_time': Function(type='int', derefcnt=0, name='X509_cmp_current_time', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s')]), 'X509_cmp_time': Function(type='int', derefcnt=0, name='X509_cmp_time', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s'), Argument(type='time_t', derefcnt=1, name='t')]), 'X509_delete_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509_delete_ext', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_digest': Function(type='int', derefcnt=0, name='X509_digest', args=[Argument(type='X509', derefcnt=1, name='data'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'X509_dup': Function(type='X509', derefcnt=1, name='X509_dup', args=[Argument(type='X509', derefcnt=1, name='x509')]), 'X509_find_by_issuer_and_serial': Function(type='X509', derefcnt=1, name='X509_find_by_issuer_and_serial', args=[Argument(type='stack_st_X509', derefcnt=1, name='sk'), Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='ASN1_INTEGER', derefcnt=1, name='serial')]), 'X509_find_by_subject': Function(type='X509', derefcnt=1, name='X509_find_by_subject', args=[Argument(type='stack_st_X509', derefcnt=1, name='sk'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_free': Function(type='void', derefcnt=0, name='X509_free', args=[Argument(type='X509', derefcnt=1, name='a')]), 'X509_get0_pubkey_bitstr': Function(type='ASN1_BIT_STRING', derefcnt=1, name='X509_get0_pubkey_bitstr', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_get_default_cert_area': Function(type='char', derefcnt=1, name='X509_get_default_cert_area', args=[]), 'X509_get_default_cert_dir': Function(type='char', derefcnt=1, name='X509_get_default_cert_dir', args=[]), 'X509_get_default_cert_dir_env': Function(type='char', derefcnt=1, name='X509_get_default_cert_dir_env', args=[]), 'X509_get_default_cert_file': Function(type='char', derefcnt=1, name='X509_get_default_cert_file', args=[]), 'X509_get_default_cert_file_env': Function(type='char', derefcnt=1, name='X509_get_default_cert_file_env', args=[]), 'X509_get_default_private_dir': Function(type='char', derefcnt=1, name='X509_get_default_private_dir', args=[]), 'X509_get_ex_data': Function(type='void', derefcnt=1, name='X509_get_ex_data', args=[Argument(type='X509', derefcnt=1, name='r'), Argument(type='int', derefcnt=0, name='idx')]), 'X509_get_ex_new_index': Function(type='int', derefcnt=0, name='X509_get_ex_new_index', args=[Argument(type='long', derefcnt=0, name='argl'), Argument(type='void', derefcnt=1, name='argp'), Argument(type='CRYPTO_EX_new', derefcnt=1, name='new_func'), Argument(type='CRYPTO_EX_dup', derefcnt=1, name='dup_func'), Argument(type='CRYPTO_EX_free', derefcnt=1, name='free_func')]), 'X509_get_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509_get_ext', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509_get_ext_by_NID': Function(type='int', derefcnt=0, name='X509_get_ext_by_NID', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_get_ext_by_OBJ': Function(type='int', derefcnt=0, name='X509_get_ext_by_OBJ', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_get_ext_by_critical': Function(type='int', derefcnt=0, name='X509_get_ext_by_critical', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509_get_ext_count': Function(type='int', derefcnt=0, name='X509_get_ext_count', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_get_ext_d2i': Function(type='void', derefcnt=1, name='X509_get_ext_d2i', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=1, name='crit'), Argument(type='int', derefcnt=1, name='idx')]), 'X509_get_issuer_name': Function(type='X509_NAME', derefcnt=1, name='X509_get_issuer_name', args=[Argument(type='X509', derefcnt=1, name='a')]), 'X509_get_pubkey': Function(type='EVP_PKEY', derefcnt=1, name='X509_get_pubkey', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_get_pubkey_parameters': Function(type='int', derefcnt=0, name='X509_get_pubkey_parameters', args=[Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='stack_st_X509', derefcnt=1, name='chain')]), 'X509_get_serialNumber': Function(type='ASN1_INTEGER', derefcnt=1, name='X509_get_serialNumber', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_get_subject_name': Function(type='X509_NAME', derefcnt=1, name='X509_get_subject_name', args=[Argument(type='X509', derefcnt=1, name='a')]), 'X509_gmtime_adj': Function(type='ASN1_TIME', derefcnt=1, name='X509_gmtime_adj', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s'), Argument(type='long', derefcnt=0, name='adj')]), 'X509_issuer_and_serial_cmp': Function(type='int', derefcnt=0, name='X509_issuer_and_serial_cmp', args=[Argument(type='X509', derefcnt=1, name='a'), Argument(type='X509', derefcnt=1, name='b')]), 'X509_issuer_and_serial_hash': Function(type='unsigned', derefcnt=0, name='X509_issuer_and_serial_hash', args=[Argument(type='X509', derefcnt=1, name='a')]), 'X509_issuer_name_cmp': Function(type='int', derefcnt=0, name='X509_issuer_name_cmp', args=[Argument(type='X509', derefcnt=1, name='a'), Argument(type='X509', derefcnt=1, name='b')]), 'X509_issuer_name_hash': Function(type='unsigned', derefcnt=0, name='X509_issuer_name_hash', args=[Argument(type='X509', derefcnt=1, name='a')]), 'X509_issuer_name_hash_old': Function(type='unsigned', derefcnt=0, name='X509_issuer_name_hash_old', args=[Argument(type='X509', derefcnt=1, name='a')]), 'X509_keyid_get0': Function(type='unsigned', derefcnt=1, name='X509_keyid_get0', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='int', derefcnt=1, name='len')]), 'X509_keyid_set1': Function(type='int', derefcnt=0, name='X509_keyid_set1', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='unsigned', derefcnt=1, name='id'), Argument(type='int', derefcnt=0, name='len')]), 'X509_load_cert_crl_file': Function(type='int', derefcnt=0, name='X509_load_cert_crl_file', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'X509_load_cert_file': Function(type='int', derefcnt=0, name='X509_load_cert_file', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'X509_load_crl_file': Function(type='int', derefcnt=0, name='X509_load_crl_file', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type')]), 'X509_new': Function(type='X509', derefcnt=1, name='X509_new', args=[]), 'X509_ocspid_print': Function(type='int', derefcnt=0, name='X509_ocspid_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x')]), 'X509_policy_check': Function(type='int', derefcnt=0, name='X509_policy_check', args=[Argument(type='X509_POLICY_TREE', derefcnt=2, name='ptree'), Argument(type='int', derefcnt=1, name='pexplicit_policy'), Argument(type='stack_st_X509', derefcnt=1, name='certs'), Argument(type='stack_st_ASN1_OBJECT', derefcnt=1, name='policy_oids'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'X509_policy_level_get0_node': Function(type='X509_POLICY_NODE', derefcnt=1, name='X509_policy_level_get0_node', args=[Argument(type='X509_POLICY_LEVEL', derefcnt=1, name='level'), Argument(type='int', derefcnt=0, name='i')]), 'X509_policy_level_node_count': Function(type='int', derefcnt=0, name='X509_policy_level_node_count', args=[Argument(type='X509_POLICY_LEVEL', derefcnt=1, name='level')]), 'X509_policy_node_get0_parent': Function(type='X509_POLICY_NODE', derefcnt=1, name='X509_policy_node_get0_parent', args=[Argument(type='X509_POLICY_NODE', derefcnt=1, name='node')]), 'X509_policy_node_get0_policy': Function(type='ASN1_OBJECT', derefcnt=1, name='X509_policy_node_get0_policy', args=[Argument(type='X509_POLICY_NODE', derefcnt=1, name='node')]), 'X509_policy_node_get0_qualifiers': Function(type='stack_st_POLICYQUALINFO', derefcnt=1, name='X509_policy_node_get0_qualifiers', args=[Argument(type='X509_POLICY_NODE', derefcnt=1, name='node')]), 'X509_policy_tree_free': Function(type='void', derefcnt=0, name='X509_policy_tree_free', args=[Argument(type='X509_POLICY_TREE', derefcnt=1, name='tree')]), 'X509_policy_tree_get0_level': Function(type='X509_POLICY_LEVEL', derefcnt=1, name='X509_policy_tree_get0_level', args=[Argument(type='X509_POLICY_TREE', derefcnt=1, name='tree'), Argument(type='int', derefcnt=0, name='i')]), 'X509_policy_tree_get0_policies': Function(type='stack_st_X509_POLICY_NODE', derefcnt=1, name='X509_policy_tree_get0_policies', args=[Argument(type='X509_POLICY_TREE', derefcnt=1, name='tree')]), 'X509_policy_tree_get0_user_policies': Function(type='stack_st_X509_POLICY_NODE', derefcnt=1, name='X509_policy_tree_get0_user_policies', args=[Argument(type='X509_POLICY_TREE', derefcnt=1, name='tree')]), 'X509_policy_tree_level_count': Function(type='int', derefcnt=0, name='X509_policy_tree_level_count', args=[Argument(type='X509_POLICY_TREE', derefcnt=1, name='tree')]), 'X509_print': Function(type='int', derefcnt=0, name='X509_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x')]), 'X509_print_ex': Function(type='int', derefcnt=0, name='X509_print_ex', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x'), Argument(type='unsigned', derefcnt=0, name='nmflag'), Argument(type='unsigned', derefcnt=0, name='cflag')]), 'X509_print_ex_fp': Function(type='int', derefcnt=0, name='X509_print_ex_fp', args=[Argument(type='FILE', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x'), Argument(type='unsigned', derefcnt=0, name='nmflag'), Argument(type='unsigned', derefcnt=0, name='cflag')]), 'X509_print_fp': Function(type='int', derefcnt=0, name='X509_print_fp', args=[Argument(type='FILE', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x')]), 'X509_pubkey_digest': Function(type='int', derefcnt=0, name='X509_pubkey_digest', args=[Argument(type='X509', derefcnt=1, name='data'), Argument(type='EVP_MD', derefcnt=1, name='type'), Argument(type='unsigned', derefcnt=1, name='md'), Argument(type='unsigned', derefcnt=1, name='len')]), 'X509_reject_clear': Function(type='void', derefcnt=0, name='X509_reject_clear', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_set_ex_data': Function(type='int', derefcnt=0, name='X509_set_ex_data', args=[Argument(type='X509', derefcnt=1, name='r'), Argument(type='int', derefcnt=0, name='idx'), Argument(type='void', derefcnt=1, name='arg')]), 'X509_set_issuer_name': Function(type='int', derefcnt=0, name='X509_set_issuer_name', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_set_notAfter': Function(type='int', derefcnt=0, name='X509_set_notAfter', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='ASN1_TIME', derefcnt=1, name='tm')]), 'X509_set_notBefore': Function(type='int', derefcnt=0, name='X509_set_notBefore', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='ASN1_TIME', derefcnt=1, name='tm')]), 'X509_set_pubkey': Function(type='int', derefcnt=0, name='X509_set_pubkey', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'X509_set_serialNumber': Function(type='int', derefcnt=0, name='X509_set_serialNumber', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='ASN1_INTEGER', derefcnt=1, name='serial')]), 'X509_set_subject_name': Function(type='int', derefcnt=0, name='X509_set_subject_name', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='X509_NAME', derefcnt=1, name='name')]), 'X509_set_version': Function(type='int', derefcnt=0, name='X509_set_version', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='long', derefcnt=0, name='version')]), 'X509_sign': Function(type='int', derefcnt=0, name='X509_sign', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'X509_sign_ctx': Function(type='int', derefcnt=0, name='X509_sign_ctx', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx')]), 'X509_signature_dump': Function(type='int', derefcnt=0, name='X509_signature_dump', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_STRING', derefcnt=1, name='sig'), Argument(type='int', derefcnt=0, name='indent')]), 'X509_signature_print': Function(type='int', derefcnt=0, name='X509_signature_print', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_ALGOR', derefcnt=1, name='alg'), Argument(type='ASN1_STRING', derefcnt=1, name='sig')]), 'X509_subject_name_cmp': Function(type='int', derefcnt=0, name='X509_subject_name_cmp', args=[Argument(type='X509', derefcnt=1, name='a'), Argument(type='X509', derefcnt=1, name='b')]), 'X509_subject_name_hash': Function(type='unsigned', derefcnt=0, name='X509_subject_name_hash', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_subject_name_hash_old': Function(type='unsigned', derefcnt=0, name='X509_subject_name_hash_old', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_time_adj': Function(type='ASN1_TIME', derefcnt=1, name='X509_time_adj', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s'), Argument(type='long', derefcnt=0, name='adj'), Argument(type='time_t', derefcnt=1, name='t')]), 'X509_time_adj_ex': Function(type='ASN1_TIME', derefcnt=1, name='X509_time_adj_ex', args=[Argument(type='ASN1_TIME', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='offset_day'), Argument(type='long', derefcnt=0, name='offset_sec'), Argument(type='time_t', derefcnt=1, name='t')]), 'X509_to_X509_REQ': Function(type='X509_REQ', derefcnt=1, name='X509_to_X509_REQ', args=[Argument(type='X509', derefcnt=1, name='x'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey'), Argument(type='EVP_MD', derefcnt=1, name='md')]), 'X509_trust_clear': Function(type='void', derefcnt=0, name='X509_trust_clear', args=[Argument(type='X509', derefcnt=1, name='x')]), 'X509_verify': Function(type='int', derefcnt=0, name='X509_verify', args=[Argument(type='X509', derefcnt=1, name='a'), Argument(type='EVP_PKEY', derefcnt=1, name='r')]), 'X509_verify_cert': Function(type='int', derefcnt=0, name='X509_verify_cert', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'X509_verify_cert_error_string': Function(type='char', derefcnt=1, name='X509_verify_cert_error_string', args=[Argument(type='long', derefcnt=0, name='n')]), 'X509at_add1_attr': Function(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='X509at_add1_attr', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=2, name='x'), Argument(type='X509_ATTRIBUTE', derefcnt=1, name='attr')]), 'X509at_add1_attr_by_NID': Function(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='X509at_add1_attr_by_NID', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=2, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509at_add1_attr_by_OBJ': Function(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='X509at_add1_attr_by_OBJ', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=2, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509at_add1_attr_by_txt': Function(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='X509at_add1_attr_by_txt', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=2, name='x'), Argument(type='char', derefcnt=1, name='attrname'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len')]), 'X509at_delete_attr': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509at_delete_attr', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509at_get0_data_by_OBJ': Function(type='void', derefcnt=1, name='X509at_get0_data_by_OBJ', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos'), Argument(type='int', derefcnt=0, name='type')]), 'X509at_get_attr': Function(type='X509_ATTRIBUTE', derefcnt=1, name='X509at_get_attr', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509at_get_attr_by_NID': Function(type='int', derefcnt=0, name='X509at_get_attr_by_NID', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509at_get_attr_by_OBJ': Function(type='int', derefcnt=0, name='X509at_get_attr_by_OBJ', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='sk'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509at_get_attr_count': Function(type='int', derefcnt=0, name='X509at_get_attr_count', args=[Argument(type='stack_st_X509_ATTRIBUTE', derefcnt=1, name='x')]), 'X509v3_add_ext': Function(type='stack_st_X509_EXTENSION', derefcnt=1, name='X509v3_add_ext', args=[Argument(type='stack_st_X509_EXTENSION', derefcnt=2, name='x'), Argument(type='X509_EXTENSION', derefcnt=1, name='ex'), Argument(type='int', derefcnt=0, name='loc')]), 'X509v3_delete_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509v3_delete_ext', args=[Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509v3_get_ext': Function(type='X509_EXTENSION', derefcnt=1, name='X509v3_get_ext', args=[Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='loc')]), 'X509v3_get_ext_by_NID': Function(type='int', derefcnt=0, name='X509v3_get_ext_by_NID', args=[Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509v3_get_ext_by_OBJ': Function(type='int', derefcnt=0, name='X509v3_get_ext_by_OBJ', args=[Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='x'), Argument(type='ASN1_OBJECT', derefcnt=1, name='obj'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509v3_get_ext_by_critical': Function(type='int', derefcnt=0, name='X509v3_get_ext_by_critical', args=[Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='crit'), Argument(type='int', derefcnt=0, name='lastpos')]), 'X509v3_get_ext_count': Function(type='int', derefcnt=0, name='X509v3_get_ext_count', args=[Argument(type='stack_st_X509_EXTENSION', derefcnt=1, name='x')]), 'a2d_ASN1_OBJECT': Function(type='int', derefcnt=0, name='a2d_ASN1_OBJECT', args=[Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='int', derefcnt=0, name='olen'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='num')]), 'a2i': Function(type='int', derefcnt=0, name='a2i', args=[]), 'a2i_ASN1_ENUMERATED': Function(type='int', derefcnt=0, name='a2i_ASN1_ENUMERATED', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_ENUMERATED', derefcnt=1, name='bs'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='size')]), 'a2i_ASN1_INTEGER': Function(type='int', derefcnt=0, name='a2i_ASN1_INTEGER', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_INTEGER', derefcnt=1, name='bs'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='size')]), 'a2i_ASN1_STRING': Function(type='int', derefcnt=0, name='a2i_ASN1_STRING', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_STRING', derefcnt=1, name='bs'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='size')]), 'a64l': Function(type='long', derefcnt=0, name='a64l', args=[Argument(type='char', derefcnt=1, name='s')]), 'abort': Function(type='void', derefcnt=0, name='abort', args=[]), 'abs': Function(type='int', derefcnt=0, name='abs', args=[Argument(type='int', derefcnt=0, name='x')]), 'accept': Function(type='int', derefcnt=0, name='accept', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=1, name='addr_len')]), 'accept4': Function(type='int', derefcnt=0, name='accept4', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=1, name='addr_len'), Argument(type='int', derefcnt=0, name='flags')]), 'access': Function(type='int', derefcnt=0, name='access', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='type')]), 'acct': Function(type='int', derefcnt=0, name='acct', args=[Argument(type='char', derefcnt=1, name='name')]), 'acos': Function(type='double', derefcnt=0, name='acos', args=[Argument(type='double', derefcnt=0, name='x')]), 'acosf': Function(type='float', derefcnt=0, name='acosf', args=[Argument(type='float', derefcnt=0, name='x')]), 'acosh': Function(type='double', derefcnt=0, name='acosh', args=[Argument(type='double', derefcnt=0, name='x')]), 'acoshf': Function(type='float', derefcnt=0, name='acoshf', args=[Argument(type='float', derefcnt=0, name='x')]), 'acoshl': Function(type='long', derefcnt=0, name='acoshl', args=[Argument(type='long', derefcnt=0, name='x')]), 'acosl': Function(type='long', derefcnt=0, name='acosl', args=[Argument(type='long', derefcnt=0, name='x')]), 'action_fn_t': Function(type='void', derefcnt=0, name='action_fn_t', args=[Argument(type='void', derefcnt=1, name='nodep'), Argument(type='VISIT', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='level')]), 'addmntent': Function(type='int', derefcnt=0, name='addmntent', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='mntent', derefcnt=1, name='mnt')]), 'addseverity': Function(type='int', derefcnt=0, name='addseverity', args=[Argument(type='int', derefcnt=0, name='severity'), Argument(type='char', derefcnt=1, name='string')]), 'adjtime': Function(type='int', derefcnt=0, name='adjtime', args=[Argument(type='timeval', derefcnt=1, name='delta'), Argument(type='timeval', derefcnt=1, name='olddelta')]), 'adler32': Function(type='uLong', derefcnt=0, name='adler32', args=[Argument(type='uLong', derefcnt=0, name='adler'), Argument(type='Bytef', derefcnt=1, name='buf'), Argument(type='uInt', derefcnt=0, name='len')]), 'adler32_combine': Function(type='uLong', derefcnt=0, name='adler32_combine', args=[Argument(type='uLong', derefcnt=0, name='arg0'), Argument(type='uLong', derefcnt=0, name='arg1'), Argument(type='off_t', derefcnt=0, name='arg2')]), 'adler32_combine64': Function(type='uLong', derefcnt=0, name='adler32_combine64', args=[Argument(type='uLong', derefcnt=0, name='arg0'), Argument(type='uLong', derefcnt=0, name='arg1'), Argument(type='off64_t', derefcnt=0, name='arg2')]), 'advance': Function(type='int', derefcnt=0, name='advance', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='char', derefcnt=1, name='expbuf')]), 'after_morecore_hook': Function(type='void', derefcnt=0, name='after_morecore_hook', args=[]), 'aio_cancel': Function(type='int', derefcnt=0, name='aio_cancel', args=[Argument(type='int', derefcnt=0, name='fildes'), Argument(type='aiocb', derefcnt=1, name='aiocbp')]), 'aio_cancel64': Function(type='int', derefcnt=0, name='aio_cancel64', args=[Argument(type='int', derefcnt=0, name='fildes'), Argument(type='aiocb64', derefcnt=1, name='aiocbp')]), 'aio_error': Function(type='int', derefcnt=0, name='aio_error', args=[Argument(type='aiocb', derefcnt=1, name='aiocbp')]), 'aio_error64': Function(type='int', derefcnt=0, name='aio_error64', args=[Argument(type='aiocb64', derefcnt=1, name='aiocbp')]), 'aio_fsync': Function(type='int', derefcnt=0, name='aio_fsync', args=[Argument(type='int', derefcnt=0, name='operation'), Argument(type='aiocb', derefcnt=1, name='aiocbp')]), 'aio_fsync64': Function(type='int', derefcnt=0, name='aio_fsync64', args=[Argument(type='int', derefcnt=0, name='operation'), Argument(type='aiocb64', derefcnt=1, name='aiocbp')]), 'aio_init': Function(type='void', derefcnt=0, name='aio_init', args=[Argument(type='aioinit', derefcnt=1, name='init')]), 'aio_read': Function(type='int', derefcnt=0, name='aio_read', args=[Argument(type='aiocb', derefcnt=1, name='aiocbp')]), 'aio_read64': Function(type='int', derefcnt=0, name='aio_read64', args=[Argument(type='aiocb64', derefcnt=1, name='aiocbp')]), 'aio_return': Function(type='ssize_t', derefcnt=0, name='aio_return', args=[Argument(type='aiocb', derefcnt=1, name='aiocbp')]), 'aio_return64': Function(type='ssize_t', derefcnt=0, name='aio_return64', args=[Argument(type='aiocb64', derefcnt=1, name='aiocbp')]), 'aio_suspend': Function(type='int', derefcnt=0, name='aio_suspend', args=[Argument(type='aiocb', derefcnt=2, name='list'), Argument(type='int', derefcnt=0, name='nent'), Argument(type='timespec', derefcnt=1, name='timeout')]), 'aio_suspend64': Function(type='int', derefcnt=0, name='aio_suspend64', args=[Argument(type='aiocb64', derefcnt=2, name='list'), Argument(type='int', derefcnt=0, name='nent'), Argument(type='timespec', derefcnt=1, name='timeout')]), 'aio_write': Function(type='int', derefcnt=0, name='aio_write', args=[Argument(type='aiocb', derefcnt=1, name='aiocbp')]), 'aio_write64': Function(type='int', derefcnt=0, name='aio_write64', args=[Argument(type='aiocb64', derefcnt=1, name='aiocbp')]), 'alarm': Function(type='unsigned', derefcnt=0, name='alarm', args=[Argument(type='unsigned', derefcnt=0, name='seconds')]), 'aligned_alloc': Function(type='void', derefcnt=1, name='aligned_alloc', args=[Argument(type='size_t', derefcnt=0, name='alignment'), Argument(type='size_t', derefcnt=0, name='size')]), 'alloc': Function(type='void', derefcnt=1, name='alloc', args=[Argument(type='void', derefcnt=1, name='opaque'), Argument(type='size_t', derefcnt=0, name='nmemb'), Argument(type='size_t', derefcnt=0, name='size')]), 'alloc_func': Function(type='voidpf', derefcnt=0, name='alloc_func', args=[Argument(type='voidpf', derefcnt=0, name='opaque'), Argument(type='uInt', derefcnt=0, name='items'), Argument(type='uInt', derefcnt=0, name='size')]), 'alloca': Function(type='void', derefcnt=1, name='alloca', args=[Argument(type='size_t', derefcnt=0, name='size')]), 'alphasort': Function(type='int', derefcnt=0, name='alphasort', args=[Argument(type='dirent', derefcnt=2, name='e1'), Argument(type='dirent', derefcnt=2, name='e2')]), 'alphasort64': Function(type='int', derefcnt=0, name='alphasort64', args=[Argument(type='dirent64', derefcnt=2, name='e1'), Argument(type='dirent64', derefcnt=2, name='e2')]), 'app_gen_cookie_cb': Function(type='int', derefcnt=0, name='app_gen_cookie_cb', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='cookie'), Argument(type='unsigned', derefcnt=1, name='cookie_len')]), 'app_verify_callback': Function(type='int', derefcnt=0, name='app_verify_callback', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'app_verify_cookie_cb': Function(type='int', derefcnt=0, name='app_verify_cookie_cb', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='cookie'), Argument(type='unsigned', derefcnt=0, name='cookie_len')]), 'argp_error': Function(type='void', derefcnt=0, name='argp_error', args=[Argument(type='argp_state', derefcnt=1, name='state'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='int', derefcnt=0, name='vararg')]), 'argp_failure': Function(type='void', derefcnt=0, name='argp_failure', args=[Argument(type='argp_state', derefcnt=1, name='state'), Argument(type='int', derefcnt=0, name='status'), Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='int', derefcnt=0, name='vararg')]), 'argp_help': Function(type='void', derefcnt=0, name='argp_help', args=[Argument(type='argp', derefcnt=1, name='argp'), Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='unsigned', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='name')]), 'argp_input': Function(type='void', derefcnt=1, name='argp_input', args=[Argument(type='argp', derefcnt=1, name='argp'), Argument(type='argp_state', derefcnt=1, name='state')]), 'argp_parse': Function(type='error_t', derefcnt=0, name='argp_parse', args=[Argument(type='argp', derefcnt=1, name='argp'), Argument(type='int', derefcnt=0, name='argc'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='unsigned', derefcnt=0, name='flags'), Argument(type='int', derefcnt=1, name='arg_index'), Argument(type='void', derefcnt=1, name='input')]), 'argp_parser_t': Function(type='error_t', derefcnt=0, name='argp_parser_t', args=[Argument(type='int', derefcnt=0, name='key'), Argument(type='char', derefcnt=1, name='arg'), Argument(type='argp_state', derefcnt=1, name='state')]), 'argp_program_version_hook': Function(type='void', derefcnt=0, name='argp_program_version_hook', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='argp_state', derefcnt=1, name='state')]), 'argp_state_help': Function(type='void', derefcnt=0, name='argp_state_help', args=[Argument(type='argp_state', derefcnt=1, name='state'), Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'argp_usage': Function(type='void', derefcnt=0, name='argp_usage', args=[Argument(type='argp_state', derefcnt=1, name='state')]), 'argz_add': Function(type='error_t', derefcnt=0, name='argz_add', args=[Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='argz_len'), Argument(type='char', derefcnt=1, name='str')]), 'argz_add_sep': Function(type='error_t', derefcnt=0, name='argz_add_sep', args=[Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='argz_len'), Argument(type='char', derefcnt=1, name='string'), Argument(type='int', derefcnt=0, name='delim')]), 'argz_append': Function(type='error_t', derefcnt=0, name='argz_append', args=[Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='argz_len'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buf_len')]), 'argz_count': Function(type='size_t', derefcnt=0, name='argz_count', args=[Argument(type='char', derefcnt=1, name='argz'), Argument(type='size_t', derefcnt=0, name='len')]), 'argz_create': Function(type='error_t', derefcnt=0, name='argz_create', args=[Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='len')]), 'argz_create_sep': Function(type='error_t', derefcnt=0, name='argz_create_sep', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='int', derefcnt=0, name='sep'), Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='len')]), 'argz_delete': Function(type='void', derefcnt=0, name='argz_delete', args=[Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='argz_len'), Argument(type='char', derefcnt=1, name='entry')]), 'argz_extract': Function(type='void', derefcnt=0, name='argz_extract', args=[Argument(type='char', derefcnt=1, name='argz'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='char', derefcnt=2, name='argv')]), 'argz_insert': Function(type='error_t', derefcnt=0, name='argz_insert', args=[Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='argz_len'), Argument(type='char', derefcnt=1, name='before'), Argument(type='char', derefcnt=1, name='entry')]), 'argz_next': Function(type='char', derefcnt=1, name='argz_next', args=[Argument(type='char', derefcnt=1, name='argz'), Argument(type='size_t', derefcnt=0, name='argz_len'), Argument(type='char', derefcnt=1, name='entry')]), 'argz_replace': Function(type='error_t', derefcnt=0, name='argz_replace', args=[Argument(type='char', derefcnt=2, name='argz'), Argument(type='size_t', derefcnt=1, name='argz_len'), Argument(type='char', derefcnt=1, name='str'), Argument(type='char', derefcnt=1, name='with'), Argument(type='unsigned', derefcnt=1, name='replace_count')]), 'argz_stringify': Function(type='void', derefcnt=0, name='argz_stringify', args=[Argument(type='char', derefcnt=1, name='argz'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='sep')]), 'asctime': Function(type='char', derefcnt=1, name='asctime', args=[Argument(type='tm', derefcnt=1, name='tp')]), 'asctime_r': Function(type='char', derefcnt=1, name='asctime_r', args=[Argument(type='tm', derefcnt=1, name='tp'), Argument(type='char', derefcnt=1, name='buf')]), 'asin': Function(type='double', derefcnt=0, name='asin', args=[Argument(type='double', derefcnt=0, name='x')]), 'asinf': Function(type='float', derefcnt=0, name='asinf', args=[Argument(type='float', derefcnt=0, name='x')]), 'asinh': Function(type='double', derefcnt=0, name='asinh', args=[Argument(type='double', derefcnt=0, name='x')]), 'asinhf': Function(type='float', derefcnt=0, name='asinhf', args=[Argument(type='float', derefcnt=0, name='x')]), 'asinhl': Function(type='long', derefcnt=0, name='asinhl', args=[Argument(type='long', derefcnt=0, name='x')]), 'asinl': Function(type='long', derefcnt=0, name='asinl', args=[Argument(type='long', derefcnt=0, name='x')]), 'asn1_Finish': Function(type='int', derefcnt=0, name='asn1_Finish', args=[Argument(type='ASN1_CTX', derefcnt=1, name='c')]), 'asn1_const_Finish': Function(type='int', derefcnt=0, name='asn1_const_Finish', args=[Argument(type='ASN1_const_CTX', derefcnt=1, name='c')]), 'asn1_ps_func': Function(type='int', derefcnt=0, name='asn1_ps_func', args=[Argument(type='BIO', derefcnt=1, name='b'), Argument(type='unsigned', derefcnt=2, name='pbuf'), Argument(type='int', derefcnt=1, name='plen'), Argument(type='void', derefcnt=1, name='parg')]), 'asprintf': Function(type='int', derefcnt=0, name='asprintf', args=[Argument(type='char', derefcnt=2, name='ptr'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='int', derefcnt=0, name='vararg')]), '__asprintf_chk': Function(type='int', derefcnt=0, name='__asprintf_chk', args=[Argument(type='char', derefcnt=2, name='result_ptr'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'assert': Function(type='void', derefcnt=0, name='assert', args=[Argument(type='char', derefcnt=1, name='assertion'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='line')]), 'assert_fail': Function(type='void', derefcnt=0, name='assert_fail', args=[Argument(type='char', derefcnt=1, name='assertion'), Argument(type='char', derefcnt=1, name='file'), Argument(type='unsigned', derefcnt=0, name='line'), Argument(type='char', derefcnt=1, name='function')]), 'assert_perror_fail': Function(type='void', derefcnt=0, name='assert_perror_fail', args=[Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='file'), Argument(type='unsigned', derefcnt=0, name='line'), Argument(type='char', derefcnt=1, name='function')]), 'at_quick_exit': Function(type='int', derefcnt=0, name='at_quick_exit', args=[Argument(type='void', derefcnt=0, name='func')]), 'atan': Function(type='double', derefcnt=0, name='atan', args=[Argument(type='double', derefcnt=0, name='x')]), 'atan2': Function(type='double', derefcnt=0, name='atan2', args=[Argument(type='double', derefcnt=0, name='y'), Argument(type='double', derefcnt=0, name='x')]), 'atan2f': Function(type='float', derefcnt=0, name='atan2f', args=[Argument(type='float', derefcnt=0, name='y'), Argument(type='float', derefcnt=0, name='x')]), 'atan2l': Function(type='long', derefcnt=0, name='atan2l', args=[Argument(type='long', derefcnt=0, name='y'), Argument(type='long', derefcnt=0, name='x')]), 'atanf': Function(type='float', derefcnt=0, name='atanf', args=[Argument(type='float', derefcnt=0, name='x')]), 'atanh': Function(type='double', derefcnt=0, name='atanh', args=[Argument(type='double', derefcnt=0, name='x')]), 'atanhf': Function(type='float', derefcnt=0, name='atanhf', args=[Argument(type='float', derefcnt=0, name='x')]), 'atanhl': Function(type='long', derefcnt=0, name='atanhl', args=[Argument(type='long', derefcnt=0, name='x')]), 'atanl': Function(type='long', derefcnt=0, name='atanl', args=[Argument(type='long', derefcnt=0, name='x')]), 'atexit': Function(type='int', derefcnt=0, name='atexit', args=[Argument(type='void', derefcnt=0, name='func')]), 'atof': Function(type='double', derefcnt=0, name='atof', args=[Argument(type='char', derefcnt=1, name='nptr')]), 'atoi': Function(type='int', derefcnt=0, name='atoi', args=[Argument(type='char', derefcnt=1, name='nptr')]), 'atol': Function(type='long', derefcnt=0, name='atol', args=[Argument(type='char', derefcnt=1, name='nptr')]), 'atoll': Function(type='long', derefcnt=0, name='atoll', args=[Argument(type='char', derefcnt=1, name='nptr')]), 'b2i_PVK_bio': Function(type='EVP_PKEY', derefcnt=1, name='b2i_PVK_bio', args=[Argument(type='BIO', derefcnt=1, name='in'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'b2i_PrivateKey': Function(type='EVP_PKEY', derefcnt=1, name='b2i_PrivateKey', args=[Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='length')]), 'b2i_PrivateKey_bio': Function(type='EVP_PKEY', derefcnt=1, name='b2i_PrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='in')]), 'b2i_PublicKey': Function(type='EVP_PKEY', derefcnt=1, name='b2i_PublicKey', args=[Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='length')]), 'b2i_PublicKey_bio': Function(type='EVP_PKEY', derefcnt=1, name='b2i_PublicKey_bio', args=[Argument(type='BIO', derefcnt=1, name='in')]), 'b64_ntop': Function(type='int', derefcnt=0, name='b64_ntop', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='size_t', derefcnt=0, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='size_t', derefcnt=0, name='arg3')]), 'b64_pton': Function(type='int', derefcnt=0, name='b64_pton', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2')]), 'backtrace': Function(type='int', derefcnt=0, name='backtrace', args=[Argument(type='void', derefcnt=2, name='array'), Argument(type='int', derefcnt=0, name='size')]), 'backtrace_symbols': Function(type='char', derefcnt=2, name='backtrace_symbols', args=[Argument(type='void', derefcnt=2, name='array'), Argument(type='int', derefcnt=0, name='size')]), 'backtrace_symbols_fd': Function(type='void', derefcnt=0, name='backtrace_symbols_fd', args=[Argument(type='void', derefcnt=2, name='array'), Argument(type='int', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='fd')]), 'basename': Function(type='char', derefcnt=1, name='basename', args=[Argument(type='char', derefcnt=1, name='filename')]), 'bcmp': Function(type='int', derefcnt=0, name='bcmp', args=[Argument(type='void', derefcnt=1, name='s1'), Argument(type='void', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'bcopy': Function(type='void', derefcnt=0, name='bcopy', args=[Argument(type='void', derefcnt=1, name='src'), Argument(type='void', derefcnt=1, name='dest'), Argument(type='size_t', derefcnt=0, name='n')]), 'bgets': Function(type='int', derefcnt=0, name='bgets', args=[Argument(type='BIO', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'bind': Function(type='int', derefcnt=0, name='bind', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='CONST_SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=0, name='len')]), 'bind_textdomain_codeset': Function(type='char', derefcnt=1, name='bind_textdomain_codeset', args=[Argument(type='char', derefcnt=1, name='domainname'), Argument(type='char', derefcnt=1, name='codeset')]), 'bindresvport': Function(type='int', derefcnt=0, name='bindresvport', args=[Argument(type='int', derefcnt=0, name='sockfd'), Argument(type='sockaddr_in', derefcnt=1, name='sock_in')]), 'bindresvport6': Function(type='int', derefcnt=0, name='bindresvport6', args=[Argument(type='int', derefcnt=0, name='sockfd'), Argument(type='sockaddr_in6', derefcnt=1, name='sock_in')]), 'bindtextdomain': Function(type='char', derefcnt=1, name='bindtextdomain', args=[Argument(type='char', derefcnt=1, name='domainname'), Argument(type='char', derefcnt=1, name='dirname')]), 'bio_info_cb': Function(type='void', derefcnt=0, name='bio_info_cb', args=[Argument(type='bio_st', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='long', derefcnt=0, name='arg4'), Argument(type='long', derefcnt=0, name='arg5')]), 'bn_add_words': Function(type='unsigned', derefcnt=0, name='bn_add_words', args=[Argument(type='unsigned', derefcnt=1, name='rp'), Argument(type='unsigned', derefcnt=1, name='ap'), Argument(type='unsigned', derefcnt=1, name='bp'), Argument(type='int', derefcnt=0, name='num')]), 'bn_div_words': Function(type='unsigned', derefcnt=0, name='bn_div_words', args=[Argument(type='unsigned', derefcnt=0, name='h'), Argument(type='unsigned', derefcnt=0, name='l'), Argument(type='unsigned', derefcnt=0, name='d')]), 'bn_dup_expand': Function(type='BIGNUM', derefcnt=1, name='bn_dup_expand', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='words')]), 'bn_expand2': Function(type='BIGNUM', derefcnt=1, name='bn_expand2', args=[Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='words')]), 'bn_mod_exp': Function(type='int', derefcnt=0, name='bn_mod_exp', args=[Argument(type='DSA', derefcnt=1, name='dsa'), Argument(type='BIGNUM', derefcnt=1, name='r'), Argument(type='BIGNUM', derefcnt=1, name='a'), Argument(type='BIGNUM', derefcnt=1, name='p'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_MONT_CTX', derefcnt=1, name='m_ctx')]), 'bn_mul_add_words': Function(type='unsigned', derefcnt=0, name='bn_mul_add_words', args=[Argument(type='unsigned', derefcnt=1, name='rp'), Argument(type='unsigned', derefcnt=1, name='ap'), Argument(type='int', derefcnt=0, name='num'), Argument(type='unsigned', derefcnt=0, name='w')]), 'bn_mul_words': Function(type='unsigned', derefcnt=0, name='bn_mul_words', args=[Argument(type='unsigned', derefcnt=1, name='rp'), Argument(type='unsigned', derefcnt=1, name='ap'), Argument(type='int', derefcnt=0, name='num'), Argument(type='unsigned', derefcnt=0, name='w')]), 'bn_sqr_words': Function(type='void', derefcnt=0, name='bn_sqr_words', args=[Argument(type='unsigned', derefcnt=1, name='rp'), Argument(type='unsigned', derefcnt=1, name='ap'), Argument(type='int', derefcnt=0, name='num')]), 'bn_sub_words': Function(type='unsigned', derefcnt=0, name='bn_sub_words', args=[Argument(type='unsigned', derefcnt=1, name='rp'), Argument(type='unsigned', derefcnt=1, name='ap'), Argument(type='unsigned', derefcnt=1, name='bp'), Argument(type='int', derefcnt=0, name='num')]), 'bputs': Function(type='int', derefcnt=0, name='bputs', args=[Argument(type='BIO', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1')]), 'bread': Function(type='int', derefcnt=0, name='bread', args=[Argument(type='BIO', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'brk': Function(type='int', derefcnt=0, name='brk', args=[Argument(type='void', derefcnt=1, name='addr')]), 'bsd_signal': Function(type='sighandler_t', derefcnt=0, name='bsd_signal', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='sighandler_t', derefcnt=0, name='handler')]), 'bsearch': Function(type='void', derefcnt=1, name='bsearch', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=1, name='base'), Argument(type='size_t', derefcnt=0, name='nmemb'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='compar_fn_t', derefcnt=0, name='compar')]), 'bswap_32': Function(type='unsigned', derefcnt=0, name='bswap_32', args=[Argument(type='unsigned', derefcnt=0, name='bsx')]), 'bswap_64': Function(type='uint64_t', derefcnt=0, name='bswap_64', args=[Argument(type='uint64_t', derefcnt=0, name='bsx')]), 'btowc': Function(type='wint_t', derefcnt=0, name='btowc', args=[Argument(type='int', derefcnt=0, name='c')]), 'bwrite': Function(type='int', derefcnt=0, name='bwrite', args=[Argument(type='BIO', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'bzero': Function(type='void', derefcnt=0, name='bzero', args=[Argument(type='void', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n')]), 'c2i_ASN1_BIT_STRING': Function(type='ASN1_BIT_STRING', derefcnt=1, name='c2i_ASN1_BIT_STRING', args=[Argument(type='ASN1_BIT_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'c2i_ASN1_INTEGER': Function(type='ASN1_INTEGER', derefcnt=1, name='c2i_ASN1_INTEGER', args=[Argument(type='ASN1_INTEGER', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'c2i_ASN1_OBJECT': Function(type='ASN1_OBJECT', derefcnt=1, name='c2i_ASN1_OBJECT', args=[Argument(type='ASN1_OBJECT', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'cabs': Function(type='double', derefcnt=0, name='cabs', args=[Argument(type='double', derefcnt=0, name='z')]), 'cabsf': Function(type='float', derefcnt=0, name='cabsf', args=[Argument(type='float', derefcnt=0, name='z')]), 'cabsl': Function(type='long', derefcnt=0, name='cabsl', args=[Argument(type='long', derefcnt=0, name='z')]), 'cacos': Function(type='double', derefcnt=0, name='cacos', args=[Argument(type='double', derefcnt=0, name='z')]), 'cacosf': Function(type='float', derefcnt=0, name='cacosf', args=[Argument(type='float', derefcnt=0, name='z')]), 'cacosh': Function(type='double', derefcnt=0, name='cacosh', args=[Argument(type='double', derefcnt=0, name='z')]), 'cacoshf': Function(type='float', derefcnt=0, name='cacoshf', args=[Argument(type='float', derefcnt=0, name='z')]), 'cacoshl': Function(type='long', derefcnt=0, name='cacoshl', args=[Argument(type='long', derefcnt=0, name='z')]), 'cacosl': Function(type='long', derefcnt=0, name='cacosl', args=[Argument(type='long', derefcnt=0, name='z')]), 'callback': Function(type='long', derefcnt=0, name='callback', args=[Argument(type='bio_st', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='long', derefcnt=0, name='arg4'), Argument(type='long', derefcnt=0, name='arg5')]), 'callback_ctrl': Function(type='long', derefcnt=0, name='callback_ctrl', args=[Argument(type='BIO', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='bio_info_cb', derefcnt=1, name='arg2')]), 'calloc': Function(type='void', derefcnt=1, name='calloc', args=[Argument(type='size_t', derefcnt=0, name='nmemb'), Argument(type='size_t', derefcnt=0, name='size')]), 'cancel_routine': Function(type='void', derefcnt=0, name='cancel_routine', args=[Argument(type='void', derefcnt=1, name='arg0')]), 'canonicalize_file_name': Function(type='char', derefcnt=1, name='canonicalize_file_name', args=[Argument(type='char', derefcnt=1, name='name')]), 'carg': Function(type='double', derefcnt=0, name='carg', args=[Argument(type='double', derefcnt=0, name='z')]), 'cargf': Function(type='float', derefcnt=0, name='cargf', args=[Argument(type='float', derefcnt=0, name='z')]), 'cargl': Function(type='long', derefcnt=0, name='cargl', args=[Argument(type='long', derefcnt=0, name='z')]), 'casin': Function(type='double', derefcnt=0, name='casin', args=[Argument(type='double', derefcnt=0, name='z')]), 'casinf': Function(type='float', derefcnt=0, name='casinf', args=[Argument(type='float', derefcnt=0, name='z')]), 'casinh': Function(type='double', derefcnt=0, name='casinh', args=[Argument(type='double', derefcnt=0, name='z')]), 'casinhf': Function(type='float', derefcnt=0, name='casinhf', args=[Argument(type='float', derefcnt=0, name='z')]), 'casinhl': Function(type='long', derefcnt=0, name='casinhl', args=[Argument(type='long', derefcnt=0, name='z')]), 'casinl': Function(type='long', derefcnt=0, name='casinl', args=[Argument(type='long', derefcnt=0, name='z')]), 'catan': Function(type='double', derefcnt=0, name='catan', args=[Argument(type='double', derefcnt=0, name='z')]), 'catanf': Function(type='float', derefcnt=0, name='catanf', args=[Argument(type='float', derefcnt=0, name='z')]), 'catanh': Function(type='double', derefcnt=0, name='catanh', args=[Argument(type='double', derefcnt=0, name='z')]), 'catanhf': Function(type='float', derefcnt=0, name='catanhf', args=[Argument(type='float', derefcnt=0, name='z')]), 'catanhl': Function(type='long', derefcnt=0, name='catanhl', args=[Argument(type='long', derefcnt=0, name='z')]), 'catanl': Function(type='long', derefcnt=0, name='catanl', args=[Argument(type='long', derefcnt=0, name='z')]), 'catclose': Function(type='int', derefcnt=0, name='catclose', args=[Argument(type='nl_catd', derefcnt=0, name='catalog')]), 'catgets': Function(type='char', derefcnt=1, name='catgets', args=[Argument(type='nl_catd', derefcnt=0, name='catalog'), Argument(type='int', derefcnt=0, name='set'), Argument(type='int', derefcnt=0, name='number'), Argument(type='char', derefcnt=1, name='string')]), 'catopen': Function(type='nl_catd', derefcnt=0, name='catopen', args=[Argument(type='char', derefcnt=1, name='cat_name'), Argument(type='int', derefcnt=0, name='flag')]), 'cb_1': Function(type='void', derefcnt=0, name='cb_1', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='void', derefcnt=1, name='arg2')]), 'cb_2': Function(type='int', derefcnt=0, name='cb_2', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='BN_GENCB', derefcnt=1, name='arg2')]), 'cbrt': Function(type='double', derefcnt=0, name='cbrt', args=[Argument(type='double', derefcnt=0, name='x')]), 'cbrtf': Function(type='float', derefcnt=0, name='cbrtf', args=[Argument(type='float', derefcnt=0, name='x')]), 'cbrtl': Function(type='long', derefcnt=0, name='cbrtl', args=[Argument(type='long', derefcnt=0, name='x')]), 'ccos': Function(type='double', derefcnt=0, name='ccos', args=[Argument(type='double', derefcnt=0, name='z')]), 'ccosf': Function(type='float', derefcnt=0, name='ccosf', args=[Argument(type='float', derefcnt=0, name='z')]), 'ccosh': Function(type='double', derefcnt=0, name='ccosh', args=[Argument(type='double', derefcnt=0, name='z')]), 'ccoshf': Function(type='float', derefcnt=0, name='ccoshf', args=[Argument(type='float', derefcnt=0, name='z')]), 'ccoshl': Function(type='long', derefcnt=0, name='ccoshl', args=[Argument(type='long', derefcnt=0, name='z')]), 'ccosl': Function(type='long', derefcnt=0, name='ccosl', args=[Argument(type='long', derefcnt=0, name='z')]), 'ceil': Function(type='double', derefcnt=0, name='ceil', args=[Argument(type='double', derefcnt=0, name='x')]), 'ceilf': Function(type='float', derefcnt=0, name='ceilf', args=[Argument(type='float', derefcnt=0, name='x')]), 'ceill': Function(type='long', derefcnt=0, name='ceill', args=[Argument(type='long', derefcnt=0, name='x')]), 'cert_crl': Function(type='int', derefcnt=0, name='cert_crl', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509_CRL', derefcnt=1, name='crl'), Argument(type='X509', derefcnt=1, name='x')]), 'cexp': Function(type='double', derefcnt=0, name='cexp', args=[Argument(type='double', derefcnt=0, name='z')]), 'cexpf': Function(type='float', derefcnt=0, name='cexpf', args=[Argument(type='float', derefcnt=0, name='z')]), 'cexpl': Function(type='long', derefcnt=0, name='cexpl', args=[Argument(type='long', derefcnt=0, name='z')]), 'cfgetispeed': Function(type='speed_t', derefcnt=0, name='cfgetispeed', args=[Argument(type='termios', derefcnt=1, name='termios_p')]), 'cfgetospeed': Function(type='speed_t', derefcnt=0, name='cfgetospeed', args=[Argument(type='termios', derefcnt=1, name='termios_p')]), 'cfmakeraw': Function(type='void', derefcnt=0, name='cfmakeraw', args=[Argument(type='termios', derefcnt=1, name='termios_p')]), 'cfree': Function(type='void', derefcnt=0, name='cfree', args=[Argument(type='void', derefcnt=1, name='ptr')]), 'cfsetispeed': Function(type='int', derefcnt=0, name='cfsetispeed', args=[Argument(type='termios', derefcnt=1, name='termios_p'), Argument(type='speed_t', derefcnt=0, name='speed')]), 'cfsetospeed': Function(type='int', derefcnt=0, name='cfsetospeed', args=[Argument(type='termios', derefcnt=1, name='termios_p'), Argument(type='speed_t', derefcnt=0, name='speed')]), 'cfsetspeed': Function(type='int', derefcnt=0, name='cfsetspeed', args=[Argument(type='termios', derefcnt=1, name='termios_p'), Argument(type='speed_t', derefcnt=0, name='speed')]), 'chdir': Function(type='int', derefcnt=0, name='chdir', args=[Argument(type='char', derefcnt=1, name='path')]), 'check_crl': Function(type='int', derefcnt=0, name='check_crl', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509_CRL', derefcnt=1, name='crl')]), 'check_defer': Function(type='void', derefcnt=0, name='check_defer', args=[Argument(type='int', derefcnt=0, name='nid')]), 'check_issued': Function(type='int', derefcnt=0, name='check_issued', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509', derefcnt=1, name='x'), Argument(type='X509', derefcnt=1, name='issuer')]), 'check_policy': Function(type='int', derefcnt=0, name='check_policy', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'check_revocation': Function(type='int', derefcnt=0, name='check_revocation', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'check_trust': Function(type='int', derefcnt=0, name='check_trust', args=[Argument(type='x509_trust_st', derefcnt=1, name='arg0'), Argument(type='X509', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'chmod': Function(type='int', derefcnt=0, name='chmod', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'chown': Function(type='int', derefcnt=0, name='chown', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='uid_t', derefcnt=0, name='owner'), Argument(type='gid_t', derefcnt=0, name='group')]), 'chroot': Function(type='int', derefcnt=0, name='chroot', args=[Argument(type='char', derefcnt=1, name='path')]), 'chunkfun': Function(type='obstack_chunk', derefcnt=1, name='chunkfun', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='long', derefcnt=0, name='arg1')]), 'cimag': Function(type='double', derefcnt=0, name='cimag', args=[Argument(type='double', derefcnt=0, name='z')]), 'cimagf': Function(type='float', derefcnt=0, name='cimagf', args=[Argument(type='float', derefcnt=0, name='z')]), 'cimagl': Function(type='long', derefcnt=0, name='cimagl', args=[Argument(type='long', derefcnt=0, name='z')]), 'cleanup': Function(type='int', derefcnt=0, name='cleanup', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'clearenv': Function(type='int', derefcnt=0, name='clearenv', args=[]), 'clearerr': Function(type='void', derefcnt=0, name='clearerr', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'clearerr_unlocked': Function(type='void', derefcnt=0, name='clearerr_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'client_cert_cb': Function(type='int', derefcnt=0, name='client_cert_cb', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='X509', derefcnt=2, name='x509'), Argument(type='EVP_PKEY', derefcnt=2, name='pkey')]), 'clock': Function(type='clock_t', derefcnt=0, name='clock', args=[]), 'clock_adjtime': Function(type='int', derefcnt=0, name='clock_adjtime', args=[Argument(type='clockid_t', derefcnt=0, name='clock_id'), Argument(type='timex', derefcnt=1, name='utx')]), 'clock_getcpuclockid': Function(type='int', derefcnt=0, name='clock_getcpuclockid', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='clockid_t', derefcnt=1, name='clock_id')]), 'clock_getres': Function(type='int', derefcnt=0, name='clock_getres', args=[Argument(type='clockid_t', derefcnt=0, name='clock_id'), Argument(type='timespec', derefcnt=1, name='res')]), 'clock_gettime': Function(type='int', derefcnt=0, name='clock_gettime', args=[Argument(type='clockid_t', derefcnt=0, name='clock_id'), Argument(type='timespec', derefcnt=1, name='tp')]), 'clock_nanosleep': Function(type='int', derefcnt=0, name='clock_nanosleep', args=[Argument(type='clockid_t', derefcnt=0, name='clock_id'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='timespec', derefcnt=1, name='req'), Argument(type='timespec', derefcnt=1, name='rem')]), 'clock_settime': Function(type='int', derefcnt=0, name='clock_settime', args=[Argument(type='clockid_t', derefcnt=0, name='clock_id'), Argument(type='timespec', derefcnt=1, name='tp')]), 'clog': Function(type='double', derefcnt=0, name='clog', args=[Argument(type='double', derefcnt=0, name='z')]), 'clog10': Function(type='double', derefcnt=0, name='clog10', args=[Argument(type='double', derefcnt=0, name='z')]), 'clog10f': Function(type='float', derefcnt=0, name='clog10f', args=[Argument(type='float', derefcnt=0, name='z')]), 'clog10l': Function(type='long', derefcnt=0, name='clog10l', args=[Argument(type='long', derefcnt=0, name='z')]), 'clogf': Function(type='float', derefcnt=0, name='clogf', args=[Argument(type='float', derefcnt=0, name='z')]), 'clogl': Function(type='long', derefcnt=0, name='clogl', args=[Argument(type='long', derefcnt=0, name='z')]), 'clone': Function(type='int', derefcnt=0, name='clone', args=[Argument(type='int', derefcnt=0, name='fn'), Argument(type='void', derefcnt=1, name='child_stack'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='void', derefcnt=1, name='arg'), Argument(type='int', derefcnt=0, name='vararg')]), 'close': Function(type='int', derefcnt=0, name='close', args=[Argument(type='int', derefcnt=0, name='fd')]), 'closedir': Function(type='int', derefcnt=0, name='closedir', args=[Argument(type='DIR', derefcnt=1, name='dirp')]), 'closelog': Function(type='void', derefcnt=0, name='closelog', args=[]), 'cmsg_nxthdr': Function(type='cmsghdr', derefcnt=1, name='cmsg_nxthdr', args=[Argument(type='msghdr', derefcnt=1, name='mhdr'), Argument(type='cmsghdr', derefcnt=1, name='cmsg')]), 'comp': Function(type='int', derefcnt=0, name='comp', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'compar_d_fn_t': Function(type='int', derefcnt=0, name='compar_d_fn_t', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1'), Argument(type='void', derefcnt=1, name='arg2')]), 'compar_fn_t': Function(type='int', derefcnt=0, name='compar_fn_t', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'compile': Function(type='char', derefcnt=1, name='compile', args=[Argument(type='char', derefcnt=1, name='instring'), Argument(type='char', derefcnt=1, name='expbuf'), Argument(type='char', derefcnt=1, name='endbuf'), Argument(type='int', derefcnt=0, name='eof')]), 'compress': Function(type='int', derefcnt=0, name='compress', args=[Argument(type='Bytef', derefcnt=1, name='dest'), Argument(type='uLongf', derefcnt=1, name='destLen'), Argument(type='Bytef', derefcnt=1, name='source'), Argument(type='uLong', derefcnt=0, name='sourceLen')]), 'compress2': Function(type='int', derefcnt=0, name='compress2', args=[Argument(type='Bytef', derefcnt=1, name='dest'), Argument(type='uLongf', derefcnt=1, name='destLen'), Argument(type='Bytef', derefcnt=1, name='source'), Argument(type='uLong', derefcnt=0, name='sourceLen'), Argument(type='int', derefcnt=0, name='level')]), 'compressBound': Function(type='uLong', derefcnt=0, name='compressBound', args=[Argument(type='uLong', derefcnt=0, name='sourceLen')]), 'compute_key': Function(type='int', derefcnt=0, name='compute_key', args=[Argument(type='unsigned', derefcnt=1, name='key'), Argument(type='BIGNUM', derefcnt=1, name='pub_key'), Argument(type='DH', derefcnt=1, name='dh')]), 'confstr': Function(type='size_t', derefcnt=0, name='confstr', args=[Argument(type='int', derefcnt=0, name='name'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len')]), '__confstr_chk': Function(type='size_t', derefcnt=0, name='__confstr_chk', args=[Argument(type='int', derefcnt=0, name='name'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'conj': Function(type='double', derefcnt=0, name='conj', args=[Argument(type='double', derefcnt=0, name='z')]), 'conjf': Function(type='float', derefcnt=0, name='conjf', args=[Argument(type='float', derefcnt=0, name='z')]), 'conjl': Function(type='long', derefcnt=0, name='conjl', args=[Argument(type='long', derefcnt=0, name='z')]), 'connect': Function(type='int', derefcnt=0, name='connect', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='CONST_SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=0, name='len')]), 'copy': Function(type='int', derefcnt=0, name='copy', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='to'), Argument(type='EVP_MD_CTX', derefcnt=1, name='from')]), 'copysign': Function(type='double', derefcnt=0, name='copysign', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'copysignf': Function(type='float', derefcnt=0, name='copysignf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'copysignl': Function(type='long', derefcnt=0, name='copysignl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'cos': Function(type='double', derefcnt=0, name='cos', args=[Argument(type='double', derefcnt=0, name='x')]), 'cosf': Function(type='float', derefcnt=0, name='cosf', args=[Argument(type='float', derefcnt=0, name='x')]), 'cosh': Function(type='double', derefcnt=0, name='cosh', args=[Argument(type='double', derefcnt=0, name='x')]), 'coshf': Function(type='float', derefcnt=0, name='coshf', args=[Argument(type='float', derefcnt=0, name='x')]), 'coshl': Function(type='long', derefcnt=0, name='coshl', args=[Argument(type='long', derefcnt=0, name='x')]), 'cosl': Function(type='long', derefcnt=0, name='cosl', args=[Argument(type='long', derefcnt=0, name='x')]), 'cpow': Function(type='double', derefcnt=0, name='cpow', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'cpowf': Function(type='float', derefcnt=0, name='cpowf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'cpowl': Function(type='long', derefcnt=0, name='cpowl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'cproj': Function(type='double', derefcnt=0, name='cproj', args=[Argument(type='double', derefcnt=0, name='z')]), 'cprojf': Function(type='float', derefcnt=0, name='cprojf', args=[Argument(type='float', derefcnt=0, name='z')]), 'cprojl': Function(type='long', derefcnt=0, name='cprojl', args=[Argument(type='long', derefcnt=0, name='z')]), 'crc32': Function(type='uLong', derefcnt=0, name='crc32', args=[Argument(type='uLong', derefcnt=0, name='crc'), Argument(type='Bytef', derefcnt=1, name='buf'), Argument(type='uInt', derefcnt=0, name='len')]), 'crc32_combine': Function(type='uLong', derefcnt=0, name='crc32_combine', args=[Argument(type='uLong', derefcnt=0, name='arg0'), Argument(type='uLong', derefcnt=0, name='arg1'), Argument(type='off_t', derefcnt=0, name='arg2')]), 'crc32_combine64': Function(type='uLong', derefcnt=0, name='crc32_combine64', args=[Argument(type='uLong', derefcnt=0, name='arg0'), Argument(type='uLong', derefcnt=0, name='arg1'), Argument(type='off64_t', derefcnt=0, name='arg2')]), 'creal': Function(type='double', derefcnt=0, name='creal', args=[Argument(type='double', derefcnt=0, name='z')]), 'crealf': Function(type='float', derefcnt=0, name='crealf', args=[Argument(type='float', derefcnt=0, name='z')]), 'creall': Function(type='long', derefcnt=0, name='creall', args=[Argument(type='long', derefcnt=0, name='z')]), 'creat': Function(type='int', derefcnt=0, name='creat', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'creat64': Function(type='int', derefcnt=0, name='creat64', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'create': Function(type='int', derefcnt=0, name='create', args=[Argument(type='BIO', derefcnt=1, name='arg0')]), 'crypt': Function(type='char', derefcnt=1, name='crypt', args=[Argument(type='char', derefcnt=1, name='key'), Argument(type='char', derefcnt=1, name='salt')]), 'crypt_r': Function(type='char', derefcnt=1, name='crypt_r', args=[Argument(type='char', derefcnt=1, name='key'), Argument(type='char', derefcnt=1, name='salt'), Argument(type='crypt_data', derefcnt=1, name='data')]), 'csin': Function(type='double', derefcnt=0, name='csin', args=[Argument(type='double', derefcnt=0, name='z')]), 'csinf': Function(type='float', derefcnt=0, name='csinf', args=[Argument(type='float', derefcnt=0, name='z')]), 'csinh': Function(type='double', derefcnt=0, name='csinh', args=[Argument(type='double', derefcnt=0, name='z')]), 'csinhf': Function(type='float', derefcnt=0, name='csinhf', args=[Argument(type='float', derefcnt=0, name='z')]), 'csinhl': Function(type='long', derefcnt=0, name='csinhl', args=[Argument(type='long', derefcnt=0, name='z')]), 'csinl': Function(type='long', derefcnt=0, name='csinl', args=[Argument(type='long', derefcnt=0, name='z')]), 'csqrt': Function(type='double', derefcnt=0, name='csqrt', args=[Argument(type='double', derefcnt=0, name='z')]), 'csqrtf': Function(type='float', derefcnt=0, name='csqrtf', args=[Argument(type='float', derefcnt=0, name='z')]), 'csqrtl': Function(type='long', derefcnt=0, name='csqrtl', args=[Argument(type='long', derefcnt=0, name='z')]), 'ctan': Function(type='double', derefcnt=0, name='ctan', args=[Argument(type='double', derefcnt=0, name='z')]), 'ctanf': Function(type='float', derefcnt=0, name='ctanf', args=[Argument(type='float', derefcnt=0, name='z')]), 'ctanh': Function(type='double', derefcnt=0, name='ctanh', args=[Argument(type='double', derefcnt=0, name='z')]), 'ctanhf': Function(type='float', derefcnt=0, name='ctanhf', args=[Argument(type='float', derefcnt=0, name='z')]), 'ctanhl': Function(type='long', derefcnt=0, name='ctanhl', args=[Argument(type='long', derefcnt=0, name='z')]), 'ctanl': Function(type='long', derefcnt=0, name='ctanl', args=[Argument(type='long', derefcnt=0, name='z')]), 'ctermid': Function(type='char', derefcnt=1, name='ctermid', args=[Argument(type='char', derefcnt=1, name='s')]), 'ctime': Function(type='char', derefcnt=1, name='ctime', args=[Argument(type='time_t', derefcnt=1, name='timer')]), 'ctime_r': Function(type='char', derefcnt=1, name='ctime_r', args=[Argument(type='time_t', derefcnt=1, name='timer'), Argument(type='char', derefcnt=1, name='buf')]), 'ctrl': Function(type='int', derefcnt=0, name='ctrl', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='char', derefcnt=1, name='argc'), Argument(type='long', derefcnt=0, name='argl'), Argument(type='char', derefcnt=2, name='ret')]), 'ctype_b_loc': Function(type='unsigned', derefcnt=2, name='ctype_b_loc', args=[]), 'ctype_get_mb_cur_max': Function(type='size_t', derefcnt=0, name='ctype_get_mb_cur_max', args=[]), 'ctype_tolower_loc': Function(type='int32_t', derefcnt=2, name='ctype_tolower_loc', args=[]), 'ctype_toupper_loc': Function(type='int32_t', derefcnt=2, name='ctype_toupper_loc', args=[]), 'cuserid': Function(type='char', derefcnt=1, name='cuserid', args=[Argument(type='char', derefcnt=1, name='s')]), 'd2i_ASN1_BIT_STRING': Function(type='ASN1_BIT_STRING', derefcnt=1, name='d2i_ASN1_BIT_STRING', args=[Argument(type='ASN1_BIT_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_BMPSTRING': Function(type='ASN1_BMPSTRING', derefcnt=1, name='d2i_ASN1_BMPSTRING', args=[Argument(type='ASN1_BMPSTRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_BOOLEAN': Function(type='int', derefcnt=0, name='d2i_ASN1_BOOLEAN', args=[Argument(type='int', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_ASN1_ENUMERATED': Function(type='ASN1_ENUMERATED', derefcnt=1, name='d2i_ASN1_ENUMERATED', args=[Argument(type='ASN1_ENUMERATED', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_GENERALIZEDTIME': Function(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='d2i_ASN1_GENERALIZEDTIME', args=[Argument(type='ASN1_GENERALIZEDTIME', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_GENERALSTRING': Function(type='ASN1_GENERALSTRING', derefcnt=1, name='d2i_ASN1_GENERALSTRING', args=[Argument(type='ASN1_GENERALSTRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_IA5STRING': Function(type='ASN1_IA5STRING', derefcnt=1, name='d2i_ASN1_IA5STRING', args=[Argument(type='ASN1_IA5STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_INTEGER': Function(type='ASN1_INTEGER', derefcnt=1, name='d2i_ASN1_INTEGER', args=[Argument(type='ASN1_INTEGER', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_NULL': Function(type='ASN1_NULL', derefcnt=1, name='d2i_ASN1_NULL', args=[Argument(type='ASN1_NULL', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_OBJECT': Function(type='ASN1_OBJECT', derefcnt=1, name='d2i_ASN1_OBJECT', args=[Argument(type='ASN1_OBJECT', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_ASN1_OCTET_STRING': Function(type='ASN1_OCTET_STRING', derefcnt=1, name='d2i_ASN1_OCTET_STRING', args=[Argument(type='ASN1_OCTET_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_PRINTABLE': Function(type='ASN1_STRING', derefcnt=1, name='d2i_ASN1_PRINTABLE', args=[Argument(type='ASN1_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_PRINTABLESTRING': Function(type='ASN1_PRINTABLESTRING', derefcnt=1, name='d2i_ASN1_PRINTABLESTRING', args=[Argument(type='ASN1_PRINTABLESTRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_SEQUENCE_ANY': Function(type='ASN1_SEQUENCE_ANY', derefcnt=1, name='d2i_ASN1_SEQUENCE_ANY', args=[Argument(type='ASN1_SEQUENCE_ANY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_SET': Function(type='stack_st_OPENSSL_BLOCK', derefcnt=1, name='d2i_ASN1_SET', args=[Argument(type='stack_st_OPENSSL_BLOCK', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length'), Argument(type='d2i_of_void', derefcnt=1, name='d2i'), Argument(type='void', derefcnt=0, name='free_func'), Argument(type='int', derefcnt=0, name='ex_tag'), Argument(type='int', derefcnt=0, name='ex_class')]), 'd2i_ASN1_SET_ANY': Function(type='ASN1_SEQUENCE_ANY', derefcnt=1, name='d2i_ASN1_SET_ANY', args=[Argument(type='ASN1_SEQUENCE_ANY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_T61STRING': Function(type='ASN1_T61STRING', derefcnt=1, name='d2i_ASN1_T61STRING', args=[Argument(type='ASN1_T61STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_TIME': Function(type='ASN1_TIME', derefcnt=1, name='d2i_ASN1_TIME', args=[Argument(type='ASN1_TIME', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_TYPE': Function(type='ASN1_TYPE', derefcnt=1, name='d2i_ASN1_TYPE', args=[Argument(type='ASN1_TYPE', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_UINTEGER': Function(type='ASN1_INTEGER', derefcnt=1, name='d2i_ASN1_UINTEGER', args=[Argument(type='ASN1_INTEGER', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_ASN1_UNIVERSALSTRING': Function(type='ASN1_UNIVERSALSTRING', derefcnt=1, name='d2i_ASN1_UNIVERSALSTRING', args=[Argument(type='ASN1_UNIVERSALSTRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_UTCTIME': Function(type='ASN1_UTCTIME', derefcnt=1, name='d2i_ASN1_UTCTIME', args=[Argument(type='ASN1_UTCTIME', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_UTF8STRING': Function(type='ASN1_UTF8STRING', derefcnt=1, name='d2i_ASN1_UTF8STRING', args=[Argument(type='ASN1_UTF8STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_VISIBLESTRING': Function(type='ASN1_VISIBLESTRING', derefcnt=1, name='d2i_ASN1_VISIBLESTRING', args=[Argument(type='ASN1_VISIBLESTRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ASN1_bytes': Function(type='ASN1_STRING', derefcnt=1, name='d2i_ASN1_bytes', args=[Argument(type='ASN1_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='Ptag'), Argument(type='int', derefcnt=0, name='Pclass')]), 'd2i_ASN1_type_bytes': Function(type='ASN1_STRING', derefcnt=1, name='d2i_ASN1_type_bytes', args=[Argument(type='ASN1_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='type')]), 'd2i_AutoPrivateKey': Function(type='EVP_PKEY', derefcnt=1, name='d2i_AutoPrivateKey', args=[Argument(type='EVP_PKEY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_DHparams': Function(type='DH', derefcnt=1, name='d2i_DHparams', args=[Argument(type='DH', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_DIRECTORYSTRING': Function(type='ASN1_STRING', derefcnt=1, name='d2i_DIRECTORYSTRING', args=[Argument(type='ASN1_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_DISPLAYTEXT': Function(type='ASN1_STRING', derefcnt=1, name='d2i_DISPLAYTEXT', args=[Argument(type='ASN1_STRING', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_DSAPrivateKey': Function(type='DSA', derefcnt=1, name='d2i_DSAPrivateKey', args=[Argument(type='DSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_DSAPrivateKey_bio': Function(type='DSA', derefcnt=1, name='d2i_DSAPrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=2, name='dsa')]), 'd2i_DSAPrivateKey_fp': Function(type='DSA', derefcnt=1, name='d2i_DSAPrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=2, name='dsa')]), 'd2i_DSAPublicKey': Function(type='DSA', derefcnt=1, name='d2i_DSAPublicKey', args=[Argument(type='DSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_DSA_PUBKEY': Function(type='DSA', derefcnt=1, name='d2i_DSA_PUBKEY', args=[Argument(type='DSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_DSA_PUBKEY_bio': Function(type='DSA', derefcnt=1, name='d2i_DSA_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=2, name='dsa')]), 'd2i_DSA_PUBKEY_fp': Function(type='DSA', derefcnt=1, name='d2i_DSA_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=2, name='dsa')]), 'd2i_DSA_SIG': Function(type='DSA_SIG', derefcnt=1, name='d2i_DSA_SIG', args=[Argument(type='DSA_SIG', derefcnt=2, name='v'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_DSAparams': Function(type='DSA', derefcnt=1, name='d2i_DSAparams', args=[Argument(type='DSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_ECDSA_SIG': Function(type='ECDSA_SIG', derefcnt=1, name='d2i_ECDSA_SIG', args=[Argument(type='ECDSA_SIG', derefcnt=2, name='sig'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ECPKParameters': Function(type='EC_GROUP', derefcnt=1, name='d2i_ECPKParameters', args=[Argument(type='EC_GROUP', derefcnt=2, name='arg0'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ECParameters': Function(type='EC_KEY', derefcnt=1, name='d2i_ECParameters', args=[Argument(type='EC_KEY', derefcnt=2, name='key'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ECPrivateKey': Function(type='EC_KEY', derefcnt=1, name='d2i_ECPrivateKey', args=[Argument(type='EC_KEY', derefcnt=2, name='key'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_ECPrivateKey_bio': Function(type='EC_KEY', derefcnt=1, name='d2i_ECPrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=2, name='eckey')]), 'd2i_ECPrivateKey_fp': Function(type='EC_KEY', derefcnt=1, name='d2i_ECPrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=2, name='eckey')]), 'd2i_EC_PUBKEY': Function(type='EC_KEY', derefcnt=1, name='d2i_EC_PUBKEY', args=[Argument(type='EC_KEY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_EC_PUBKEY_bio': Function(type='EC_KEY', derefcnt=1, name='d2i_EC_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=2, name='eckey')]), 'd2i_EC_PUBKEY_fp': Function(type='EC_KEY', derefcnt=1, name='d2i_EC_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=2, name='eckey')]), 'd2i_NETSCAPE_CERT_SEQUENCE': Function(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='d2i_NETSCAPE_CERT_SEQUENCE', args=[Argument(type='NETSCAPE_CERT_SEQUENCE', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_NETSCAPE_SPKAC': Function(type='NETSCAPE_SPKAC', derefcnt=1, name='d2i_NETSCAPE_SPKAC', args=[Argument(type='NETSCAPE_SPKAC', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_NETSCAPE_SPKI': Function(type='NETSCAPE_SPKI', derefcnt=1, name='d2i_NETSCAPE_SPKI', args=[Argument(type='NETSCAPE_SPKI', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_NETSCAPE_X509': Function(type='NETSCAPE_X509', derefcnt=1, name='d2i_NETSCAPE_X509', args=[Argument(type='NETSCAPE_X509', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_Netscape_RSA': Function(type='RSA', derefcnt=1, name='d2i_Netscape_RSA', args=[Argument(type='RSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='cb')]), 'd2i_PBE2PARAM': Function(type='PBE2PARAM', derefcnt=1, name='d2i_PBE2PARAM', args=[Argument(type='PBE2PARAM', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PBEPARAM': Function(type='PBEPARAM', derefcnt=1, name='d2i_PBEPARAM', args=[Argument(type='PBEPARAM', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PBKDF2PARAM': Function(type='PBKDF2PARAM', derefcnt=1, name='d2i_PBKDF2PARAM', args=[Argument(type='PBKDF2PARAM', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7': Function(type='PKCS7', derefcnt=1, name='d2i_PKCS7', args=[Argument(type='PKCS7', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_DIGEST': Function(type='PKCS7_DIGEST', derefcnt=1, name='d2i_PKCS7_DIGEST', args=[Argument(type='PKCS7_DIGEST', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_ENCRYPT': Function(type='PKCS7_ENCRYPT', derefcnt=1, name='d2i_PKCS7_ENCRYPT', args=[Argument(type='PKCS7_ENCRYPT', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_ENC_CONTENT': Function(type='PKCS7_ENC_CONTENT', derefcnt=1, name='d2i_PKCS7_ENC_CONTENT', args=[Argument(type='PKCS7_ENC_CONTENT', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_ENVELOPE': Function(type='PKCS7_ENVELOPE', derefcnt=1, name='d2i_PKCS7_ENVELOPE', args=[Argument(type='PKCS7_ENVELOPE', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_ISSUER_AND_SERIAL': Function(type='PKCS7_ISSUER_AND_SERIAL', derefcnt=1, name='d2i_PKCS7_ISSUER_AND_SERIAL', args=[Argument(type='PKCS7_ISSUER_AND_SERIAL', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_RECIP_INFO': Function(type='PKCS7_RECIP_INFO', derefcnt=1, name='d2i_PKCS7_RECIP_INFO', args=[Argument(type='PKCS7_RECIP_INFO', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_SIGNED': Function(type='PKCS7_SIGNED', derefcnt=1, name='d2i_PKCS7_SIGNED', args=[Argument(type='PKCS7_SIGNED', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_SIGNER_INFO': Function(type='PKCS7_SIGNER_INFO', derefcnt=1, name='d2i_PKCS7_SIGNER_INFO', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_SIGN_ENVELOPE': Function(type='PKCS7_SIGN_ENVELOPE', derefcnt=1, name='d2i_PKCS7_SIGN_ENVELOPE', args=[Argument(type='PKCS7_SIGN_ENVELOPE', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS7_bio': Function(type='PKCS7', derefcnt=1, name='d2i_PKCS7_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS7', derefcnt=2, name='p7')]), 'd2i_PKCS7_fp': Function(type='PKCS7', derefcnt=1, name='d2i_PKCS7_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS7', derefcnt=2, name='p7')]), 'd2i_PKCS8PrivateKey_bio': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PKCS8PrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'd2i_PKCS8PrivateKey_fp': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PKCS8PrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=2, name='x'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'd2i_PKCS8_PRIV_KEY_INFO': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='d2i_PKCS8_PRIV_KEY_INFO', args=[Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_PKCS8_PRIV_KEY_INFO_bio': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='d2i_PKCS8_PRIV_KEY_INFO_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=2, name='p8inf')]), 'd2i_PKCS8_PRIV_KEY_INFO_fp': Function(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='d2i_PKCS8_PRIV_KEY_INFO_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=2, name='p8inf')]), 'd2i_PKCS8_bio': Function(type='X509_SIG', derefcnt=1, name='d2i_PKCS8_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_SIG', derefcnt=2, name='p8')]), 'd2i_PKCS8_fp': Function(type='X509_SIG', derefcnt=1, name='d2i_PKCS8_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_SIG', derefcnt=2, name='p8')]), 'd2i_PUBKEY': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PUBKEY', args=[Argument(type='EVP_PKEY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_PUBKEY_bio': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=2, name='a')]), 'd2i_PUBKEY_fp': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=2, name='a')]), 'd2i_PrivateKey': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PrivateKey', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='EVP_PKEY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_PrivateKey_bio': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=2, name='a')]), 'd2i_PrivateKey_fp': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=2, name='a')]), 'd2i_PublicKey': Function(type='EVP_PKEY', derefcnt=1, name='d2i_PublicKey', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='EVP_PKEY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_RSAPrivateKey': Function(type='RSA', derefcnt=1, name='d2i_RSAPrivateKey', args=[Argument(type='RSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_RSAPrivateKey_bio': Function(type='RSA', derefcnt=1, name='d2i_RSAPrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=2, name='rsa')]), 'd2i_RSAPrivateKey_fp': Function(type='RSA', derefcnt=1, name='d2i_RSAPrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=2, name='rsa')]), 'd2i_RSAPublicKey': Function(type='RSA', derefcnt=1, name='d2i_RSAPublicKey', args=[Argument(type='RSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_RSAPublicKey_bio': Function(type='RSA', derefcnt=1, name='d2i_RSAPublicKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=2, name='rsa')]), 'd2i_RSAPublicKey_fp': Function(type='RSA', derefcnt=1, name='d2i_RSAPublicKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=2, name='rsa')]), 'd2i_RSA_NET': Function(type='RSA', derefcnt=1, name='d2i_RSA_NET', args=[Argument(type='RSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='cb'), Argument(type='int', derefcnt=0, name='sgckey')]), 'd2i_RSA_PSS_PARAMS': Function(type='RSA_PSS_PARAMS', derefcnt=1, name='d2i_RSA_PSS_PARAMS', args=[Argument(type='RSA_PSS_PARAMS', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_RSA_PUBKEY': Function(type='RSA', derefcnt=1, name='d2i_RSA_PUBKEY', args=[Argument(type='RSA', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_RSA_PUBKEY_bio': Function(type='RSA', derefcnt=1, name='d2i_RSA_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=2, name='rsa')]), 'd2i_RSA_PUBKEY_fp': Function(type='RSA', derefcnt=1, name='d2i_RSA_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=2, name='rsa')]), 'd2i_SSL_SESSION': Function(type='SSL_SESSION', derefcnt=1, name='d2i_SSL_SESSION', args=[Argument(type='SSL_SESSION', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_X509': Function(type='X509', derefcnt=1, name='d2i_X509', args=[Argument(type='X509', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_ALGOR': Function(type='X509_ALGOR', derefcnt=1, name='d2i_X509_ALGOR', args=[Argument(type='X509_ALGOR', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_ALGORS': Function(type='X509_ALGORS', derefcnt=1, name='d2i_X509_ALGORS', args=[Argument(type='X509_ALGORS', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_ATTRIBUTE': Function(type='X509_ATTRIBUTE', derefcnt=1, name='d2i_X509_ATTRIBUTE', args=[Argument(type='X509_ATTRIBUTE', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_AUX': Function(type='X509', derefcnt=1, name='d2i_X509_AUX', args=[Argument(type='X509', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_X509_CERT_AUX': Function(type='X509_CERT_AUX', derefcnt=1, name='d2i_X509_CERT_AUX', args=[Argument(type='X509_CERT_AUX', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_CERT_PAIR': Function(type='X509_CERT_PAIR', derefcnt=1, name='d2i_X509_CERT_PAIR', args=[Argument(type='X509_CERT_PAIR', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_CINF': Function(type='X509_CINF', derefcnt=1, name='d2i_X509_CINF', args=[Argument(type='X509_CINF', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_CRL': Function(type='X509_CRL', derefcnt=1, name='d2i_X509_CRL', args=[Argument(type='X509_CRL', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_CRL_INFO': Function(type='X509_CRL_INFO', derefcnt=1, name='d2i_X509_CRL_INFO', args=[Argument(type='X509_CRL_INFO', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_CRL_bio': Function(type='X509_CRL', derefcnt=1, name='d2i_X509_CRL_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CRL', derefcnt=2, name='crl')]), 'd2i_X509_CRL_fp': Function(type='X509_CRL', derefcnt=1, name='d2i_X509_CRL_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_CRL', derefcnt=2, name='crl')]), 'd2i_X509_EXTENSION': Function(type='X509_EXTENSION', derefcnt=1, name='d2i_X509_EXTENSION', args=[Argument(type='X509_EXTENSION', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_EXTENSIONS': Function(type='X509_EXTENSIONS', derefcnt=1, name='d2i_X509_EXTENSIONS', args=[Argument(type='X509_EXTENSIONS', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_NAME': Function(type='X509_NAME', derefcnt=1, name='d2i_X509_NAME', args=[Argument(type='X509_NAME', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_NAME_ENTRY': Function(type='X509_NAME_ENTRY', derefcnt=1, name='d2i_X509_NAME_ENTRY', args=[Argument(type='X509_NAME_ENTRY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_PKEY': Function(type='X509_PKEY', derefcnt=1, name='d2i_X509_PKEY', args=[Argument(type='X509_PKEY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='long', derefcnt=0, name='length')]), 'd2i_X509_PUBKEY': Function(type='X509_PUBKEY', derefcnt=1, name='d2i_X509_PUBKEY', args=[Argument(type='X509_PUBKEY', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_REQ': Function(type='X509_REQ', derefcnt=1, name='d2i_X509_REQ', args=[Argument(type='X509_REQ', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_REQ_INFO': Function(type='X509_REQ_INFO', derefcnt=1, name='d2i_X509_REQ_INFO', args=[Argument(type='X509_REQ_INFO', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_REQ_bio': Function(type='X509_REQ', derefcnt=1, name='d2i_X509_REQ_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=2, name='req')]), 'd2i_X509_REQ_fp': Function(type='X509_REQ', derefcnt=1, name='d2i_X509_REQ_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_REQ', derefcnt=2, name='req')]), 'd2i_X509_REVOKED': Function(type='X509_REVOKED', derefcnt=1, name='d2i_X509_REVOKED', args=[Argument(type='X509_REVOKED', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_SIG': Function(type='X509_SIG', derefcnt=1, name='d2i_X509_SIG', args=[Argument(type='X509_SIG', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_VAL': Function(type='X509_VAL', derefcnt=1, name='d2i_X509_VAL', args=[Argument(type='X509_VAL', derefcnt=2, name='a'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'd2i_X509_bio': Function(type='X509', derefcnt=1, name='d2i_X509_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=2, name='x509')]), 'd2i_X509_fp': Function(type='X509', derefcnt=1, name='d2i_X509_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509', derefcnt=2, name='x509')]), 'd2i_of_void': Function(type='void', derefcnt=1, name='d2i_of_void', args=[Argument(type='void', derefcnt=2, name='arg0'), Argument(type='unsigned', derefcnt=2, name='arg1'), Argument(type='long', derefcnt=0, name='arg2')]), 'daemon': Function(type='int', derefcnt=0, name='daemon', args=[Argument(type='int', derefcnt=0, name='nochdir'), Argument(type='int', derefcnt=0, name='noclose')]), 'dcgettext': Function(type='char', derefcnt=1, name='dcgettext', args=[Argument(type='char', derefcnt=1, name='domainname'), Argument(type='char', derefcnt=1, name='msgid'), Argument(type='int', derefcnt=0, name='category')]), 'dcngettext': Function(type='char', derefcnt=1, name='dcngettext', args=[Argument(type='char', derefcnt=1, name='domainname'), Argument(type='char', derefcnt=1, name='msgid1'), Argument(type='char', derefcnt=1, name='msgid2'), Argument(type='unsigned', derefcnt=0, name='n'), Argument(type='int', derefcnt=0, name='category')]), 'default_morecore': Function(type='void', derefcnt=1, name='default_morecore', args=[Argument(type='ptrdiff_t', derefcnt=0, name='size')]), 'default_verify_callback': Function(type='int', derefcnt=0, name='default_verify_callback', args=[Argument(type='int', derefcnt=0, name='ok'), Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'deflate': Function(type='int', derefcnt=0, name='deflate', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='flush')]), 'deflateBound': Function(type='uLong', derefcnt=0, name='deflateBound', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='uLong', derefcnt=0, name='sourceLen')]), 'deflateCopy': Function(type='int', derefcnt=0, name='deflateCopy', args=[Argument(type='z_streamp', derefcnt=0, name='dest'), Argument(type='z_streamp', derefcnt=0, name='source')]), 'deflateEnd': Function(type='int', derefcnt=0, name='deflateEnd', args=[Argument(type='z_streamp', derefcnt=0, name='strm')]), 'deflateInit2_': Function(type='int', derefcnt=0, name='deflateInit2_', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='level'), Argument(type='int', derefcnt=0, name='method'), Argument(type='int', derefcnt=0, name='windowBits'), Argument(type='int', derefcnt=0, name='memLevel'), Argument(type='int', derefcnt=0, name='strategy'), Argument(type='char', derefcnt=1, name='version'), Argument(type='int', derefcnt=0, name='stream_size')]), 'deflateInit_': Function(type='int', derefcnt=0, name='deflateInit_', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='level'), Argument(type='char', derefcnt=1, name='version'), Argument(type='int', derefcnt=0, name='stream_size')]), 'deflateParams': Function(type='int', derefcnt=0, name='deflateParams', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='level'), Argument(type='int', derefcnt=0, name='strategy')]), 'deflatePending': Function(type='int', derefcnt=0, name='deflatePending', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='unsigned', derefcnt=1, name='pending'), Argument(type='int', derefcnt=1, name='bits')]), 'deflatePrime': Function(type='int', derefcnt=0, name='deflatePrime', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='int', derefcnt=0, name='value')]), 'deflateReset': Function(type='int', derefcnt=0, name='deflateReset', args=[Argument(type='z_streamp', derefcnt=0, name='strm')]), 'deflateResetKeep': Function(type='int', derefcnt=0, name='deflateResetKeep', args=[Argument(type='z_streamp', derefcnt=0, name='arg0')]), 'deflateSetDictionary': Function(type='int', derefcnt=0, name='deflateSetDictionary', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='Bytef', derefcnt=1, name='dictionary'), Argument(type='uInt', derefcnt=0, name='dictLength')]), 'deflateSetHeader': Function(type='int', derefcnt=0, name='deflateSetHeader', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='gz_headerp', derefcnt=0, name='head')]), 'deflateTune': Function(type='int', derefcnt=0, name='deflateTune', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='good_length'), Argument(type='int', derefcnt=0, name='max_lazy'), Argument(type='int', derefcnt=0, name='nice_length'), Argument(type='int', derefcnt=0, name='max_chain')]), 'destroy': Function(type='int', derefcnt=0, name='destroy', args=[Argument(type='BIO', derefcnt=1, name='arg0')]), 'dgettext': Function(type='char', derefcnt=1, name='dgettext', args=[Argument(type='char', derefcnt=1, name='domainname'), Argument(type='char', derefcnt=1, name='msgid')]), 'difftime': Function(type='double', derefcnt=0, name='difftime', args=[Argument(type='time_t', derefcnt=0, name='time1'), Argument(type='time_t', derefcnt=0, name='time0')]), 'dirfd': Function(type='int', derefcnt=0, name='dirfd', args=[Argument(type='DIR', derefcnt=1, name='dirp')]), 'dirname': Function(type='char', derefcnt=1, name='dirname', args=[Argument(type='char', derefcnt=1, name='path')]), 'div': Function(type='div_t', derefcnt=0, name='div', args=[Argument(type='int', derefcnt=0, name='numer'), Argument(type='int', derefcnt=0, name='denom')]), 'dl_iterate_phdr': Function(type='int', derefcnt=0, name='dl_iterate_phdr', args=[Argument(type='int', derefcnt=0, name='callback'), Argument(type='void', derefcnt=1, name='data')]), 'dl_mcount_wrapper_check': Function(type='void', derefcnt=0, name='dl_mcount_wrapper_check', args=[Argument(type='void', derefcnt=1, name='selfpc')]), 'dladdr': Function(type='int', derefcnt=0, name='dladdr', args=[Argument(type='void', derefcnt=1, name='address'), Argument(type='Dl_info', derefcnt=1, name='info')]), 'dladdr1': Function(type='int', derefcnt=0, name='dladdr1', args=[Argument(type='void', derefcnt=1, name='address'), Argument(type='Dl_info', derefcnt=1, name='info'), Argument(type='void', derefcnt=2, name='extra_info'), Argument(type='int', derefcnt=0, name='flags')]), 'dlclose': Function(type='int', derefcnt=0, name='dlclose', args=[Argument(type='void', derefcnt=1, name='handle')]), 'dlerror': Function(type='char', derefcnt=1, name='dlerror', args=[]), 'dlinfo': Function(type='int', derefcnt=0, name='dlinfo', args=[Argument(type='void', derefcnt=1, name='handle'), Argument(type='int', derefcnt=0, name='request'), Argument(type='void', derefcnt=1, name='arg')]), 'dlmopen': Function(type='void', derefcnt=1, name='dlmopen', args=[Argument(type='Lmid_t', derefcnt=0, name='nsid'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='mode')]), 'dlopen': Function(type='void', derefcnt=1, name='dlopen', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='mode')]), 'dlsym': Function(type='void', derefcnt=1, name='dlsym', args=[Argument(type='void', derefcnt=1, name='handle'), Argument(type='char', derefcnt=1, name='name')]), 'dlvsym': Function(type='void', derefcnt=1, name='dlvsym', args=[Argument(type='void', derefcnt=1, name='handle'), Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='version')]), 'dn_comp': Function(type='int', derefcnt=0, name='dn_comp', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='u_char', derefcnt=2, name='arg3'), Argument(type='u_char', derefcnt=2, name='arg4')]), 'dn_count_labels': Function(type='int', derefcnt=0, name='dn_count_labels', args=[Argument(type='char', derefcnt=1, name='arg0')]), 'dn_expand': Function(type='int', derefcnt=0, name='dn_expand', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='u_char', derefcnt=1, name='arg2'), Argument(type='char', derefcnt=1, name='arg3'), Argument(type='int', derefcnt=0, name='arg4')]), 'dn_skipname': Function(type='int', derefcnt=0, name='dn_skipname', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1')]), 'dngettext': Function(type='char', derefcnt=1, name='dngettext', args=[Argument(type='char', derefcnt=1, name='domainname'), Argument(type='char', derefcnt=1, name='msgid1'), Argument(type='char', derefcnt=1, name='msgid2'), Argument(type='unsigned', derefcnt=0, name='n')]), 'do_cipher': Function(type='int', derefcnt=0, name='do_cipher', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='inl')]), 'dprintf': Function(type='int', derefcnt=0, name='dprintf', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='int', derefcnt=0, name='vararg')]), '__dprintf_chk': Function(type='int', derefcnt=0, name='__dprintf_chk', args=[Argument(type='int', derefcnt=0, name='d'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'drand48': Function(type='double', derefcnt=0, name='drand48', args=[]), 'drand48_r': Function(type='int', derefcnt=0, name='drand48_r', args=[Argument(type='drand48_data', derefcnt=1, name='buffer'), Argument(type='double', derefcnt=1, name='result')]), 'drem': Function(type='double', derefcnt=0, name='drem', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'dremf': Function(type='float', derefcnt=0, name='dremf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'dreml': Function(type='long', derefcnt=0, name='dreml', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'dsa_do_sign': Function(type='DSA_SIG', derefcnt=1, name='dsa_do_sign', args=[Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dlen'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'dsa_do_verify': Function(type='int', derefcnt=0, name='dsa_do_verify', args=[Argument(type='unsigned', derefcnt=1, name='dgst'), Argument(type='int', derefcnt=0, name='dgst_len'), Argument(type='DSA_SIG', derefcnt=1, name='sig'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'dsa_keygen': Function(type='int', derefcnt=0, name='dsa_keygen', args=[Argument(type='DSA', derefcnt=1, name='dsa')]), 'dsa_mod_exp': Function(type='int', derefcnt=0, name='dsa_mod_exp', args=[Argument(type='DSA', derefcnt=1, name='dsa'), Argument(type='BIGNUM', derefcnt=1, name='rr'), Argument(type='BIGNUM', derefcnt=1, name='a1'), Argument(type='BIGNUM', derefcnt=1, name='p1'), Argument(type='BIGNUM', derefcnt=1, name='a2'), Argument(type='BIGNUM', derefcnt=1, name='p2'), Argument(type='BIGNUM', derefcnt=1, name='m'), Argument(type='BN_CTX', derefcnt=1, name='ctx'), Argument(type='BN_MONT_CTX', derefcnt=1, name='in_mont')]), 'dsa_paramgen': Function(type='int', derefcnt=0, name='dsa_paramgen', args=[Argument(type='DSA', derefcnt=1, name='dsa'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='unsigned', derefcnt=1, name='seed'), Argument(type='int', derefcnt=0, name='seed_len'), Argument(type='int', derefcnt=1, name='counter_ret'), Argument(type='unsigned', derefcnt=1, name='h_ret'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'dsa_sign_setup': Function(type='int', derefcnt=0, name='dsa_sign_setup', args=[Argument(type='DSA', derefcnt=1, name='dsa'), Argument(type='BN_CTX', derefcnt=1, name='ctx_in'), Argument(type='BIGNUM', derefcnt=2, name='kinvp'), Argument(type='BIGNUM', derefcnt=2, name='rp')]), 'dup': Function(type='int', derefcnt=0, name='dup', args=[Argument(type='int', derefcnt=0, name='fd')]), 'dup2': Function(type='int', derefcnt=0, name='dup2', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='fd2')]), 'dup3': Function(type='int', derefcnt=0, name='dup3', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='fd2'), Argument(type='int', derefcnt=0, name='flags')]), 'duplocale': Function(type='locale_t', derefcnt=0, name='duplocale', args=[Argument(type='locale_t', derefcnt=0, name='dataset')]), 'dysize': Function(type='int', derefcnt=0, name='dysize', args=[Argument(type='int', derefcnt=0, name='year')]), 'eaccess': Function(type='int', derefcnt=0, name='eaccess', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='type')]), 'ecvt': Function(type='char', derefcnt=1, name='ecvt', args=[Argument(type='double', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign')]), 'ecvt_r': Function(type='int', derefcnt=0, name='ecvt_r', args=[Argument(type='double', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len')]), 'encrypt': Function(type='void', derefcnt=0, name='encrypt', args=[Argument(type='char', derefcnt=1, name='glibc_block'), Argument(type='int', derefcnt=0, name='edflag')]), 'encrypt_r': Function(type='void', derefcnt=0, name='encrypt_r', args=[Argument(type='char', derefcnt=1, name='glibc_block'), Argument(type='int', derefcnt=0, name='edflag'), Argument(type='crypt_data', derefcnt=1, name='data')]), 'endaliasent': Function(type='void', derefcnt=0, name='endaliasent', args=[]), 'endfsent': Function(type='void', derefcnt=0, name='endfsent', args=[]), 'endgrent': Function(type='void', derefcnt=0, name='endgrent', args=[]), 'endhostent': Function(type='void', derefcnt=0, name='endhostent', args=[]), 'endmntent': Function(type='int', derefcnt=0, name='endmntent', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'endnetent': Function(type='void', derefcnt=0, name='endnetent', args=[]), 'endnetgrent': Function(type='void', derefcnt=0, name='endnetgrent', args=[]), 'endprotoent': Function(type='void', derefcnt=0, name='endprotoent', args=[]), 'endpwent': Function(type='void', derefcnt=0, name='endpwent', args=[]), 'endrpcent': Function(type='void', derefcnt=0, name='endrpcent', args=[]), 'endservent': Function(type='void', derefcnt=0, name='endservent', args=[]), 'endsgent': Function(type='void', derefcnt=0, name='endsgent', args=[]), 'endspent': Function(type='void', derefcnt=0, name='endspent', args=[]), 'endttyent': Function(type='int', derefcnt=0, name='endttyent', args=[]), 'endusershell': Function(type='void', derefcnt=0, name='endusershell', args=[]), 'endutent': Function(type='void', derefcnt=0, name='endutent', args=[]), 'endutxent': Function(type='void', derefcnt=0, name='endutxent', args=[]), 'envz_add': Function(type='error_t', derefcnt=0, name='envz_add', args=[Argument(type='char', derefcnt=2, name='envz'), Argument(type='size_t', derefcnt=1, name='envz_len'), Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='value')]), 'envz_entry': Function(type='char', derefcnt=1, name='envz_entry', args=[Argument(type='char', derefcnt=1, name='envz'), Argument(type='size_t', derefcnt=0, name='envz_len'), Argument(type='char', derefcnt=1, name='name')]), 'envz_get': Function(type='char', derefcnt=1, name='envz_get', args=[Argument(type='char', derefcnt=1, name='envz'), Argument(type='size_t', derefcnt=0, name='envz_len'), Argument(type='char', derefcnt=1, name='name')]), 'envz_merge': Function(type='error_t', derefcnt=0, name='envz_merge', args=[Argument(type='char', derefcnt=2, name='envz'), Argument(type='size_t', derefcnt=1, name='envz_len'), Argument(type='char', derefcnt=1, name='envz2'), Argument(type='size_t', derefcnt=0, name='envz2_len'), Argument(type='int', derefcnt=0, name='override')]), 'envz_remove': Function(type='void', derefcnt=0, name='envz_remove', args=[Argument(type='char', derefcnt=2, name='envz'), Argument(type='size_t', derefcnt=1, name='envz_len'), Argument(type='char', derefcnt=1, name='name')]), 'envz_strip': Function(type='void', derefcnt=0, name='envz_strip', args=[Argument(type='char', derefcnt=2, name='envz'), Argument(type='size_t', derefcnt=1, name='envz_len')]), 'epoll_create': Function(type='int', derefcnt=0, name='epoll_create', args=[Argument(type='int', derefcnt=0, name='size')]), 'epoll_create1': Function(type='int', derefcnt=0, name='epoll_create1', args=[Argument(type='int', derefcnt=0, name='flags')]), 'epoll_ctl': Function(type='int', derefcnt=0, name='epoll_ctl', args=[Argument(type='int', derefcnt=0, name='epfd'), Argument(type='int', derefcnt=0, name='op'), Argument(type='int', derefcnt=0, name='fd'), Argument(type='epoll_event', derefcnt=1, name='event')]), 'epoll_pwait': Function(type='int', derefcnt=0, name='epoll_pwait', args=[Argument(type='int', derefcnt=0, name='epfd'), Argument(type='epoll_event', derefcnt=1, name='events'), Argument(type='int', derefcnt=0, name='maxevents'), Argument(type='int', derefcnt=0, name='timeout'), Argument(type='sigset_t', derefcnt=1, name='ss')]), 'epoll_wait': Function(type='int', derefcnt=0, name='epoll_wait', args=[Argument(type='int', derefcnt=0, name='epfd'), Argument(type='epoll_event', derefcnt=1, name='events'), Argument(type='int', derefcnt=0, name='maxevents'), Argument(type='int', derefcnt=0, name='timeout')]), 'erand48': Function(type='double', derefcnt=0, name='erand48', args=[Argument(type='unsigned', derefcnt=1, name='xsubi')]), 'erand48_r': Function(type='int', derefcnt=0, name='erand48_r', args=[Argument(type='unsigned', derefcnt=1, name='xsubi'), Argument(type='drand48_data', derefcnt=1, name='buffer'), Argument(type='double', derefcnt=1, name='result')]), 'erf': Function(type='double', derefcnt=0, name='erf', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'erfc': Function(type='double', derefcnt=0, name='erfc', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'erfcf': Function(type='float', derefcnt=0, name='erfcf', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'erfcl': Function(type='long', derefcnt=0, name='erfcl', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'erff': Function(type='float', derefcnt=0, name='erff', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'erfl': Function(type='long', derefcnt=0, name='erfl', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'err': Function(type='void', derefcnt=0, name='err', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'errno_location': Function(type='int', derefcnt=1, name='errno_location', args=[]), 'error': Function(type='void', derefcnt=0, name='error', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'error_alias': Function(type='void', derefcnt=0, name='error_alias', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'error_at_line': Function(type='void', derefcnt=0, name='error_at_line', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='fname'), Argument(type='unsigned', derefcnt=0, name='line'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'error_at_line_alias': Function(type='void', derefcnt=0, name='error_at_line_alias', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='fname'), Argument(type='unsigned', derefcnt=0, name='line'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'error_at_line_noreturn': Function(type='void', derefcnt=0, name='error_at_line_noreturn', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='fname'), Argument(type='unsigned', derefcnt=0, name='line'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'error_noreturn': Function(type='void', derefcnt=0, name='error_noreturn', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'error_print_progname': Function(type='void', derefcnt=0, name='error_print_progname', args=[]), 'errx': Function(type='void', derefcnt=0, name='errx', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'euidaccess': Function(type='int', derefcnt=0, name='euidaccess', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='type')]), 'evp_sign_method': Function(type='int', derefcnt=0, name='evp_sign_method', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigret'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='void', derefcnt=1, name='key')]), 'evp_verify_method': Function(type='int', derefcnt=0, name='evp_verify_method', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigbuf'), Argument(type='unsigned', derefcnt=0, name='siglen'), Argument(type='void', derefcnt=1, name='key')]), 'execl': Function(type='int', derefcnt=0, name='execl', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='char', derefcnt=1, name='arg'), Argument(type='int', derefcnt=0, name='vararg')]), 'execle': Function(type='int', derefcnt=0, name='execle', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='char', derefcnt=1, name='arg'), Argument(type='int', derefcnt=0, name='vararg')]), 'execlp': Function(type='int', derefcnt=0, name='execlp', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='char', derefcnt=1, name='arg'), Argument(type='int', derefcnt=0, name='vararg')]), 'execv': Function(type='int', derefcnt=0, name='execv', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='char', derefcnt=2, name='argv')]), 'execve': Function(type='int', derefcnt=0, name='execve', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=2, name='envp')]), 'execvp': Function(type='int', derefcnt=0, name='execvp', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='char', derefcnt=2, name='argv')]), 'execvpe': Function(type='int', derefcnt=0, name='execvpe', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=2, name='envp')]), 'exit': Function(type='void', derefcnt=0, name='exit', args=[Argument(type='int', derefcnt=0, name='status')]), 'exp': Function(type='double', derefcnt=0, name='exp', args=[Argument(type='double', derefcnt=0, name='x')]), 'exp10': Function(type='double', derefcnt=0, name='exp10', args=[Argument(type='double', derefcnt=0, name='x')]), 'exp10f': Function(type='float', derefcnt=0, name='exp10f', args=[Argument(type='float', derefcnt=0, name='x')]), 'exp10l': Function(type='long', derefcnt=0, name='exp10l', args=[Argument(type='long', derefcnt=0, name='x')]), 'exp2': Function(type='double', derefcnt=0, name='exp2', args=[Argument(type='double', derefcnt=0, name='x')]), 'exp2f': Function(type='float', derefcnt=0, name='exp2f', args=[Argument(type='float', derefcnt=0, name='x')]), 'exp2l': Function(type='long', derefcnt=0, name='exp2l', args=[Argument(type='long', derefcnt=0, name='x')]), 'expand': Function(type='int', derefcnt=0, name='expand', args=[Argument(type='COMP_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='out'), Argument(type='unsigned', derefcnt=0, name='olen'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='unsigned', derefcnt=0, name='ilen')]), 'expf': Function(type='float', derefcnt=0, name='expf', args=[Argument(type='float', derefcnt=0, name='x')]), 'expl': Function(type='long', derefcnt=0, name='expl', args=[Argument(type='long', derefcnt=0, name='x')]), '__explicit_bzero_chk': Function(type='void', derefcnt=0, name='__explicit_bzero_chk', args=[Argument(type='void', derefcnt=1, name='dst'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'expm1': Function(type='double', derefcnt=0, name='expm1', args=[Argument(type='double', derefcnt=0, name='x')]), 'expm1f': Function(type='float', derefcnt=0, name='expm1f', args=[Argument(type='float', derefcnt=0, name='x')]), 'expm1l': Function(type='long', derefcnt=0, name='expm1l', args=[Argument(type='long', derefcnt=0, name='x')]), 'fabs': Function(type='double', derefcnt=0, name='fabs', args=[Argument(type='double', derefcnt=0, name='x')]), 'fabsf': Function(type='float', derefcnt=0, name='fabsf', args=[Argument(type='float', derefcnt=0, name='x')]), 'fabsl': Function(type='long', derefcnt=0, name='fabsl', args=[Argument(type='long', derefcnt=0, name='x')]), 'faccessat': Function(type='int', derefcnt=0, name='faccessat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='flag')]), 'fallocate': Function(type='int', derefcnt=0, name='fallocate', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='mode'), Argument(type='off_t', derefcnt=0, name='offset'), Argument(type='off_t', derefcnt=0, name='len')]), 'fallocate64': Function(type='int', derefcnt=0, name='fallocate64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='mode'), Argument(type='off64_t', derefcnt=0, name='offset'), Argument(type='off64_t', derefcnt=0, name='len')]), 'fattach': Function(type='int', derefcnt=0, name='fattach', args=[Argument(type='int', derefcnt=0, name='fildes'), Argument(type='char', derefcnt=1, name='path')]), 'fbufsize': Function(type='size_t', derefcnt=0, name='fbufsize', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'fchdir': Function(type='int', derefcnt=0, name='fchdir', args=[Argument(type='int', derefcnt=0, name='fd')]), 'fchmod': Function(type='int', derefcnt=0, name='fchmod', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'fchmodat': Function(type='int', derefcnt=0, name='fchmodat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='mode_t', derefcnt=0, name='mode'), Argument(type='int', derefcnt=0, name='flag')]), 'fchown': Function(type='int', derefcnt=0, name='fchown', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='uid_t', derefcnt=0, name='owner'), Argument(type='gid_t', derefcnt=0, name='group')]), 'fchownat': Function(type='int', derefcnt=0, name='fchownat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='uid_t', derefcnt=0, name='owner'), Argument(type='gid_t', derefcnt=0, name='group'), Argument(type='int', derefcnt=0, name='flag')]), 'fclose': Function(type='int', derefcnt=0, name='fclose', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fcloseall': Function(type='int', derefcnt=0, name='fcloseall', args=[]), 'fcntl': Function(type='int', derefcnt=0, name='fcntl', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='int', derefcnt=0, name='vararg')]), 'fcvt': Function(type='char', derefcnt=1, name='fcvt', args=[Argument(type='double', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign')]), 'fcvt_r': Function(type='int', derefcnt=0, name='fcvt_r', args=[Argument(type='double', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len')]), 'fdatasync': Function(type='int', derefcnt=0, name='fdatasync', args=[Argument(type='int', derefcnt=0, name='fildes')]), '__fdelt_chk': Function(type='long', derefcnt=0, name='__fdelt_chk', args=[Argument(type='long', derefcnt=0, name='int')]), 'fdetach': Function(type='int', derefcnt=0, name='fdetach', args=[Argument(type='char', derefcnt=1, name='path')]), 'fdim': Function(type='double', derefcnt=0, name='fdim', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'fdimf': Function(type='float', derefcnt=0, name='fdimf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'fdiml': Function(type='long', derefcnt=0, name='fdiml', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'fdopen': Function(type='FILE', derefcnt=1, name='fdopen', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='modes')]), 'fdopendir': Function(type='DIR', derefcnt=1, name='fdopendir', args=[Argument(type='int', derefcnt=0, name='fd')]), 'feclearexcept': Function(type='int', derefcnt=0, name='feclearexcept', args=[Argument(type='int', derefcnt=0, name='excepts')]), 'fedisableexcept': Function(type='int', derefcnt=0, name='fedisableexcept', args=[Argument(type='int', derefcnt=0, name='excepts')]), 'feenableexcept': Function(type='int', derefcnt=0, name='feenableexcept', args=[Argument(type='int', derefcnt=0, name='excepts')]), 'fegetenv': Function(type='int', derefcnt=0, name='fegetenv', args=[Argument(type='fenv_t', derefcnt=1, name='envp')]), 'fegetexcept': Function(type='int', derefcnt=0, name='fegetexcept', args=[]), 'fegetexceptflag': Function(type='int', derefcnt=0, name='fegetexceptflag', args=[Argument(type='fexcept_t', derefcnt=1, name='flagp'), Argument(type='int', derefcnt=0, name='excepts')]), 'fegetround': Function(type='int', derefcnt=0, name='fegetround', args=[]), 'feholdexcept': Function(type='int', derefcnt=0, name='feholdexcept', args=[Argument(type='fenv_t', derefcnt=1, name='envp')]), 'feof': Function(type='int', derefcnt=0, name='feof', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'feof_unlocked': Function(type='int', derefcnt=0, name='feof_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'feraiseexcept': Function(type='int', derefcnt=0, name='feraiseexcept', args=[Argument(type='int', derefcnt=0, name='excepts')]), 'ferror': Function(type='int', derefcnt=0, name='ferror', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'ferror_unlocked': Function(type='int', derefcnt=0, name='ferror_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fesetenv': Function(type='int', derefcnt=0, name='fesetenv', args=[Argument(type='fenv_t', derefcnt=1, name='envp')]), 'fesetexceptflag': Function(type='int', derefcnt=0, name='fesetexceptflag', args=[Argument(type='fexcept_t', derefcnt=1, name='flagp'), Argument(type='int', derefcnt=0, name='excepts')]), 'fesetround': Function(type='int', derefcnt=0, name='fesetround', args=[Argument(type='int', derefcnt=0, name='rounding_direction')]), 'fetestexcept': Function(type='int', derefcnt=0, name='fetestexcept', args=[Argument(type='int', derefcnt=0, name='excepts')]), 'feupdateenv': Function(type='int', derefcnt=0, name='feupdateenv', args=[Argument(type='fenv_t', derefcnt=1, name='envp')]), 'fexecve': Function(type='int', derefcnt=0, name='fexecve', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=2, name='envp')]), 'fflush': Function(type='int', derefcnt=0, name='fflush', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fflush_unlocked': Function(type='int', derefcnt=0, name='fflush_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'ffs': Function(type='int', derefcnt=0, name='ffs', args=[Argument(type='int', derefcnt=0, name='i')]), 'ffsl': Function(type='int', derefcnt=0, name='ffsl', args=[Argument(type='long', derefcnt=0, name='l')]), 'ffsll': Function(type='int', derefcnt=0, name='ffsll', args=[Argument(type='long', derefcnt=0, name='ll')]), 'fgetc': Function(type='int', derefcnt=0, name='fgetc', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetc_unlocked': Function(type='int', derefcnt=0, name='fgetc_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetgrent': Function(type='group', derefcnt=1, name='fgetgrent', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetgrent_r': Function(type='int', derefcnt=0, name='fgetgrent_r', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='group', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='group', derefcnt=2, name='result')]), 'fgetpos': Function(type='int', derefcnt=0, name='fgetpos', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='fpos_t', derefcnt=1, name='pos')]), 'fgetpos64': Function(type='int', derefcnt=0, name='fgetpos64', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='fpos64_t', derefcnt=1, name='pos')]), 'fgetpwent': Function(type='passwd', derefcnt=1, name='fgetpwent', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetpwent_r': Function(type='int', derefcnt=0, name='fgetpwent_r', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='passwd', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='passwd', derefcnt=2, name='result')]), 'fgets': Function(type='char', derefcnt=1, name='fgets', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), '__fgets_chk': Function(type='char', derefcnt=1, name='__fgets_chk', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='fp')]), 'fgets_unlocked': Function(type='char', derefcnt=1, name='fgets_unlocked', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), '__fgets_unlocked_chk': Function(type='char', derefcnt=1, name='__fgets_unlocked_chk', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='fp')]), 'fgetsgent': Function(type='sgrp', derefcnt=1, name='fgetsgent', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetsgent_r': Function(type='int', derefcnt=0, name='fgetsgent_r', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='sgrp', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='sgrp', derefcnt=2, name='result')]), 'fgetspent': Function(type='spwd', derefcnt=1, name='fgetspent', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetspent_r': Function(type='int', derefcnt=0, name='fgetspent_r', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='spwd', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='spwd', derefcnt=2, name='result')]), 'fgetwc': Function(type='wint_t', derefcnt=0, name='fgetwc', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetwc_unlocked': Function(type='wint_t', derefcnt=0, name='fgetwc_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fgetws': Function(type='wchar_t', derefcnt=1, name='fgetws', args=[Argument(type='wchar_t', derefcnt=1, name='ws'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), '__fgetws_chk': Function(type='wchar_t', derefcnt=1, name='__fgetws_chk', args=[Argument(type='wchar_t', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='fp')]), 'fgetws_unlocked': Function(type='wchar_t', derefcnt=1, name='fgetws_unlocked', args=[Argument(type='wchar_t', derefcnt=1, name='ws'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), '__fgetws_unlocked_chk': Function(type='wchar_t', derefcnt=1, name='__fgetws_unlocked_chk', args=[Argument(type='wchar_t', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='fp')]), 'fileno': Function(type='int', derefcnt=0, name='fileno', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fileno_unlocked': Function(type='int', derefcnt=0, name='fileno_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'final': Function(type='int', derefcnt=0, name='final', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='unsigned', derefcnt=1, name='md')]), 'finish': Function(type='int', derefcnt=0, name='finish', args=[Argument(type='DSA', derefcnt=1, name='dsa')]), 'finite': Function(type='int', derefcnt=0, name='finite', args=[Argument(type='double', derefcnt=0, name='value')]), 'finitef': Function(type='int', derefcnt=0, name='finitef', args=[Argument(type='float', derefcnt=0, name='value')]), 'finitel': Function(type='int', derefcnt=0, name='finitel', args=[Argument(type='long', derefcnt=0, name='value')]), 'flbf': Function(type='int', derefcnt=0, name='flbf', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'flock': Function(type='int', derefcnt=0, name='flock', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='operation')]), 'flockfile': Function(type='void', derefcnt=0, name='flockfile', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'floor': Function(type='double', derefcnt=0, name='floor', args=[Argument(type='double', derefcnt=0, name='x')]), 'floorf': Function(type='float', derefcnt=0, name='floorf', args=[Argument(type='float', derefcnt=0, name='x')]), 'floorl': Function(type='long', derefcnt=0, name='floorl', args=[Argument(type='long', derefcnt=0, name='x')]), 'flushlbf': Function(type='void', derefcnt=0, name='flushlbf', args=[]), 'fma': Function(type='double', derefcnt=0, name='fma', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y'), Argument(type='double', derefcnt=0, name='z')]), 'fmaf': Function(type='float', derefcnt=0, name='fmaf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y'), Argument(type='float', derefcnt=0, name='z')]), 'fmal': Function(type='long', derefcnt=0, name='fmal', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y'), Argument(type='long', derefcnt=0, name='z')]), 'fmax': Function(type='double', derefcnt=0, name='fmax', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'fmaxf': Function(type='float', derefcnt=0, name='fmaxf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'fmaxl': Function(type='long', derefcnt=0, name='fmaxl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'fmemopen': Function(type='FILE', derefcnt=1, name='fmemopen', args=[Argument(type='void', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='char', derefcnt=1, name='modes')]), 'fmin': Function(type='double', derefcnt=0, name='fmin', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'fminf': Function(type='float', derefcnt=0, name='fminf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'fminl': Function(type='long', derefcnt=0, name='fminl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'fmod': Function(type='double', derefcnt=0, name='fmod', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'fmodf': Function(type='float', derefcnt=0, name='fmodf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'fmodl': Function(type='long', derefcnt=0, name='fmodl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'fmtmsg': Function(type='int', derefcnt=0, name='fmtmsg', args=[Argument(type='long', derefcnt=0, name='classification'), Argument(type='char', derefcnt=1, name='label'), Argument(type='int', derefcnt=0, name='severity'), Argument(type='char', derefcnt=1, name='text'), Argument(type='char', derefcnt=1, name='action'), Argument(type='char', derefcnt=1, name='tag')]), 'fnmatch': Function(type='int', derefcnt=0, name='fnmatch', args=[Argument(type='char', derefcnt=1, name='pattern'), Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='flags')]), 'fopen': Function(type='FILE', derefcnt=1, name='fopen', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='char', derefcnt=1, name='modes')]), 'fopen64': Function(type='FILE', derefcnt=1, name='fopen64', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='char', derefcnt=1, name='modes')]), 'fopencookie': Function(type='FILE', derefcnt=1, name='fopencookie', args=[Argument(type='void', derefcnt=1, name='magic_cookie'), Argument(type='char', derefcnt=1, name='modes'), Argument(type='IO_cookie_io_functions_t', derefcnt=0, name='io_funcs')]), 'fork': Function(type='pid_t', derefcnt=0, name='fork', args=[]), 'forkpty': Function(type='int', derefcnt=0, name='forkpty', args=[Argument(type='int', derefcnt=1, name='amaster'), Argument(type='char', derefcnt=1, name='name'), Argument(type='termios', derefcnt=1, name='termp'), Argument(type='winsize', derefcnt=1, name='winp')]), 'fp_nquery': Function(type='void', derefcnt=0, name='fp_nquery', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='FILE', derefcnt=1, name='arg2')]), 'fp_query': Function(type='void', derefcnt=0, name='fp_query', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='FILE', derefcnt=1, name='arg1')]), 'fp_resstat': Function(type='void', derefcnt=0, name='fp_resstat', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='FILE', derefcnt=1, name='arg1')]), 'fpathconf': Function(type='long', derefcnt=0, name='fpathconf', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='name')]), 'fpclassify': Function(type='int', derefcnt=0, name='fpclassify', args=[Argument(type='double', derefcnt=0, name='value')]), 'fpclassifyf': Function(type='int', derefcnt=0, name='fpclassifyf', args=[Argument(type='float', derefcnt=0, name='value')]), 'fpclassifyl': Function(type='int', derefcnt=0, name='fpclassifyl', args=[Argument(type='long', derefcnt=0, name='value')]), 'fpending': Function(type='size_t', derefcnt=0, name='fpending', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'fprintf': Function(type='int', derefcnt=0, name='fprintf', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '___fprintf_chk': Function(type='int', derefcnt=0, name='___fprintf_chk', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='int', derefcnt=0, name='flag'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'fpurge': Function(type='void', derefcnt=0, name='fpurge', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'fputc': Function(type='int', derefcnt=0, name='fputc', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fputc_unlocked': Function(type='int', derefcnt=0, name='fputc_unlocked', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fputs': Function(type='int', derefcnt=0, name='fputs', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fputs_unlocked': Function(type='int', derefcnt=0, name='fputs_unlocked', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fputwc': Function(type='wint_t', derefcnt=0, name='fputwc', args=[Argument(type='wchar_t', derefcnt=0, name='wc'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fputwc_unlocked': Function(type='wint_t', derefcnt=0, name='fputwc_unlocked', args=[Argument(type='wchar_t', derefcnt=0, name='wc'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fputws': Function(type='int', derefcnt=0, name='fputws', args=[Argument(type='wchar_t', derefcnt=1, name='ws'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fputws_unlocked': Function(type='int', derefcnt=0, name='fputws_unlocked', args=[Argument(type='wchar_t', derefcnt=1, name='ws'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fread': Function(type='size_t', derefcnt=0, name='fread', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), '__fread_chk': Function(type='size_t', derefcnt=0, name='__fread_chk', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='ptrlen'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fread_unlocked': Function(type='size_t', derefcnt=0, name='fread_unlocked', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), '__fread_unlocked_chk': Function(type='size_t', derefcnt=0, name='__fread_unlocked_chk', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='ptrlen'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), 'freadable': Function(type='int', derefcnt=0, name='freadable', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'freading': Function(type='int', derefcnt=0, name='freading', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'free': Function(type='void', derefcnt=0, name='free', args=[Argument(type='void', derefcnt=1, name='ptr')]), 'free_fn_t': Function(type='void', derefcnt=0, name='free_fn_t', args=[Argument(type='void', derefcnt=1, name='nodep')]), 'free_func': Function(type='void', derefcnt=0, name='free_func', args=[Argument(type='voidpf', derefcnt=0, name='opaque'), Argument(type='voidpf', derefcnt=0, name='address')]), 'free_hook': Function(type='void', derefcnt=0, name='free_hook', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='void', derefcnt=1, name='arg1')]), 'freeaddrinfo': Function(type='void', derefcnt=0, name='freeaddrinfo', args=[Argument(type='addrinfo', derefcnt=1, name='ai')]), 'freefun': Function(type='void', derefcnt=0, name='freefun', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='obstack_chunk', derefcnt=1, name='arg1')]), 'freeifaddrs': Function(type='void', derefcnt=0, name='freeifaddrs', args=[Argument(type='ifaddrs', derefcnt=1, name='ifa')]), 'freelocale': Function(type='void', derefcnt=0, name='freelocale', args=[Argument(type='locale_t', derefcnt=0, name='dataset')]), 'freopen': Function(type='FILE', derefcnt=1, name='freopen', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='char', derefcnt=1, name='modes'), Argument(type='FILE', derefcnt=1, name='stream')]), 'freopen64': Function(type='FILE', derefcnt=1, name='freopen64', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='char', derefcnt=1, name='modes'), Argument(type='FILE', derefcnt=1, name='stream')]), 'frexp': Function(type='double', derefcnt=0, name='frexp', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='int', derefcnt=1, name='exponent')]), 'frexpf': Function(type='float', derefcnt=0, name='frexpf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='int', derefcnt=1, name='exponent')]), 'frexpl': Function(type='long', derefcnt=0, name='frexpl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='int', derefcnt=1, name='exponent')]), 'fscanf': Function(type='int', derefcnt=0, name='fscanf', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'fseek': Function(type='int', derefcnt=0, name='fseek', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='long', derefcnt=0, name='off'), Argument(type='int', derefcnt=0, name='whence')]), 'fseeko': Function(type='int', derefcnt=0, name='fseeko', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='off_t', derefcnt=0, name='off'), Argument(type='int', derefcnt=0, name='whence')]), 'fseeko64': Function(type='int', derefcnt=0, name='fseeko64', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='off64_t', derefcnt=0, name='off'), Argument(type='int', derefcnt=0, name='whence')]), 'fsetlocking': Function(type='int', derefcnt=0, name='fsetlocking', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='int', derefcnt=0, name='type')]), 'fsetpos': Function(type='int', derefcnt=0, name='fsetpos', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='fpos_t', derefcnt=1, name='pos')]), 'fsetpos64': Function(type='int', derefcnt=0, name='fsetpos64', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='fpos64_t', derefcnt=1, name='pos')]), 'fstat': Function(type='int', derefcnt=0, name='fstat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='stat', derefcnt=1, name='buf')]), 'fstat64': Function(type='int', derefcnt=0, name='fstat64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='stat64', derefcnt=1, name='buf')]), 'fstatat': Function(type='int', derefcnt=0, name='fstatat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='stat', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='flag')]), 'fstatat64': Function(type='int', derefcnt=0, name='fstatat64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='stat64', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='flag')]), 'fsync': Function(type='int', derefcnt=0, name='fsync', args=[Argument(type='int', derefcnt=0, name='fd')]), 'ftell': Function(type='long', derefcnt=0, name='ftell', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'ftello': Function(type='off_t', derefcnt=0, name='ftello', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'ftello64': Function(type='off64_t', derefcnt=0, name='ftello64', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'ftok': Function(type='key_t', derefcnt=0, name='ftok', args=[Argument(type='char', derefcnt=1, name='pathname'), Argument(type='int', derefcnt=0, name='proj_id')]), 'ftruncate': Function(type='int', derefcnt=0, name='ftruncate', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off_t', derefcnt=0, name='length')]), 'ftruncate64': Function(type='int', derefcnt=0, name='ftruncate64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off64_t', derefcnt=0, name='length')]), 'ftrylockfile': Function(type='int', derefcnt=0, name='ftrylockfile', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'fts_children': Function(type='FTSENT', derefcnt=1, name='fts_children', args=[Argument(type='FTS', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'fts_close': Function(type='int', derefcnt=0, name='fts_close', args=[Argument(type='FTS', derefcnt=1, name='arg0')]), 'fts_compar': Function(type='int', derefcnt=0, name='fts_compar', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'fts_open': Function(type='FTS', derefcnt=1, name='fts_open', args=[Argument(type='char', derefcnt=2, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='')]), 'fts_read': Function(type='FTSENT', derefcnt=1, name='fts_read', args=[Argument(type='FTS', derefcnt=1, name='arg0')]), 'fts_set': Function(type='int', derefcnt=0, name='fts_set', args=[Argument(type='FTS', derefcnt=1, name='arg0'), Argument(type='FTSENT', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'ftw': Function(type='int', derefcnt=0, name='ftw', args=[Argument(type='char', derefcnt=1, name='dir'), Argument(type='ftw_func_t', derefcnt=0, name='func'), Argument(type='int', derefcnt=0, name='descriptors')]), 'ftw64': Function(type='int', derefcnt=0, name='ftw64', args=[Argument(type='char', derefcnt=1, name='dir'), Argument(type='ftw64_func_t', derefcnt=0, name='func'), Argument(type='int', derefcnt=0, name='descriptors')]), 'ftw64_func_t': Function(type='int', derefcnt=0, name='ftw64_func_t', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat64', derefcnt=1, name='status'), Argument(type='int', derefcnt=0, name='flag')]), 'ftw_func_t': Function(type='int', derefcnt=0, name='ftw_func_t', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat', derefcnt=1, name='status'), Argument(type='int', derefcnt=0, name='flag')]), 'function': Function(type='void', derefcnt=0, name='function', args=[Argument(type='sigval_t', derefcnt=0, name='arg0')]), 'funlockfile': Function(type='void', derefcnt=0, name='funlockfile', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'futimens': Function(type='int', derefcnt=0, name='futimens', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='timespec', derefcnt=1, name='times')]), 'futimes': Function(type='int', derefcnt=0, name='futimes', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='timeval', derefcnt=1, name='tvp')]), 'futimesat': Function(type='int', derefcnt=0, name='futimesat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='timeval', derefcnt=1, name='tvp')]), 'fwide': Function(type='int', derefcnt=0, name='fwide', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='int', derefcnt=0, name='mode')]), 'fwprintf': Function(type='int', derefcnt=0, name='fwprintf', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '__fwprintf_chk': Function(type='int', derefcnt=0, name='__fwprintf_chk', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='int', derefcnt=0, name='flag'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'fwritable': Function(type='int', derefcnt=0, name='fwritable', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'fwrite': Function(type='size_t', derefcnt=0, name='fwrite', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='s')]), 'fwrite_unlocked': Function(type='size_t', derefcnt=0, name='fwrite_unlocked', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), 'fwriting': Function(type='int', derefcnt=0, name='fwriting', args=[Argument(type='FILE', derefcnt=1, name='fp')]), 'fwscanf': Function(type='int', derefcnt=0, name='fwscanf', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'fxstat': Function(type='int', derefcnt=0, name='fxstat', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='int', derefcnt=0, name='fildes'), Argument(type='stat', derefcnt=1, name='stat_buf')]), 'fxstat64': Function(type='int', derefcnt=0, name='fxstat64', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='int', derefcnt=0, name='fildes'), Argument(type='stat64', derefcnt=1, name='stat_buf')]), 'fxstatat': Function(type='int', derefcnt=0, name='fxstatat', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='int', derefcnt=0, name='fildes'), Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat', derefcnt=1, name='stat_buf'), Argument(type='int', derefcnt=0, name='flag')]), 'fxstatat64': Function(type='int', derefcnt=0, name='fxstatat64', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='int', derefcnt=0, name='fildes'), Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat64', derefcnt=1, name='stat_buf'), Argument(type='int', derefcnt=0, name='flag')]), 'gai_cancel': Function(type='int', derefcnt=0, name='gai_cancel', args=[Argument(type='gaicb', derefcnt=1, name='gaicbp')]), 'gai_error': Function(type='int', derefcnt=0, name='gai_error', args=[Argument(type='gaicb', derefcnt=1, name='req')]), 'gai_strerror': Function(type='char', derefcnt=1, name='gai_strerror', args=[Argument(type='int', derefcnt=0, name='ecode')]), 'gai_suspend': Function(type='int', derefcnt=0, name='gai_suspend', args=[Argument(type='gaicb', derefcnt=2, name='list'), Argument(type='int', derefcnt=0, name='ent'), Argument(type='timespec', derefcnt=1, name='timeout')]), 'gamma': Function(type='double', derefcnt=0, name='gamma', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'gammaf': Function(type='float', derefcnt=0, name='gammaf', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'gammal': Function(type='long', derefcnt=0, name='gammal', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'gconv_btowc_fct': Function(type='wint_t', derefcnt=0, name='gconv_btowc_fct', args=[Argument(type='gconv_step', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=0, name='arg1')]), 'gconv_end_fct': Function(type='void', derefcnt=0, name='gconv_end_fct', args=[Argument(type='gconv_step', derefcnt=1, name='arg0')]), 'gconv_fct': Function(type='int', derefcnt=0, name='gconv_fct', args=[Argument(type='gconv_step', derefcnt=1, name='arg0'), Argument(type='gconv_step_data', derefcnt=1, name='arg1'), Argument(type='unsigned', derefcnt=2, name='arg2'), Argument(type='unsigned', derefcnt=1, name='arg3'), Argument(type='unsigned', derefcnt=2, name='arg4'), Argument(type='size_t', derefcnt=1, name='arg5'), Argument(type='int', derefcnt=0, name='arg6'), Argument(type='int', derefcnt=0, name='arg7')]), 'gconv_init_fct': Function(type='int', derefcnt=0, name='gconv_init_fct', args=[Argument(type='gconv_step', derefcnt=1, name='arg0')]), 'gconv_trans_context_fct': Function(type='int', derefcnt=0, name='gconv_trans_context_fct', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=1, name='arg1'), Argument(type='unsigned', derefcnt=1, name='arg2'), Argument(type='unsigned', derefcnt=1, name='arg3'), Argument(type='unsigned', derefcnt=1, name='arg4')]), 'gconv_trans_end_fct': Function(type='void', derefcnt=0, name='gconv_trans_end_fct', args=[Argument(type='void', derefcnt=1, name='arg0')]), 'gconv_trans_fct': Function(type='int', derefcnt=0, name='gconv_trans_fct', args=[Argument(type='gconv_step', derefcnt=1, name='arg0'), Argument(type='gconv_step_data', derefcnt=1, name='arg1'), Argument(type='void', derefcnt=1, name='arg2'), Argument(type='unsigned', derefcnt=1, name='arg3'), Argument(type='unsigned', derefcnt=2, name='arg4'), Argument(type='unsigned', derefcnt=1, name='arg5'), Argument(type='unsigned', derefcnt=2, name='arg6'), Argument(type='size_t', derefcnt=1, name='arg7')]), 'gconv_trans_init_fct': Function(type='int', derefcnt=0, name='gconv_trans_init_fct', args=[Argument(type='void', derefcnt=2, name='arg0'), Argument(type='char', derefcnt=1, name='arg1')]), 'gconv_trans_query_fct': Function(type='int', derefcnt=0, name='gconv_trans_query_fct', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=3, name='arg1'), Argument(type='size_t', derefcnt=1, name='arg2')]), 'gcvt': Function(type='char', derefcnt=1, name='gcvt', args=[Argument(type='double', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='char', derefcnt=1, name='buf')]), 'generate_key': Function(type='int', derefcnt=0, name='generate_key', args=[Argument(type='DH', derefcnt=1, name='dh')]), 'generate_params': Function(type='int', derefcnt=0, name='generate_params', args=[Argument(type='DH', derefcnt=1, name='dh'), Argument(type='int', derefcnt=0, name='prime_len'), Argument(type='int', derefcnt=0, name='generator'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'get_asn1_parameters': Function(type='int', derefcnt=0, name='get_asn1_parameters', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='arg0'), Argument(type='ASN1_TYPE', derefcnt=1, name='arg1')]), 'get_by_alias': Function(type='int', derefcnt=0, name='get_by_alias', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='char', derefcnt=1, name='str'), Argument(type='int', derefcnt=0, name='len'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'get_by_fingerprint': Function(type='int', derefcnt=0, name='get_by_fingerprint', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='bytes'), Argument(type='int', derefcnt=0, name='len'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'get_by_issuer_serial': Function(type='int', derefcnt=0, name='get_by_issuer_serial', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='ASN1_INTEGER', derefcnt=1, name='serial'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'get_by_subject': Function(type='int', derefcnt=0, name='get_by_subject', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='type'), Argument(type='X509_NAME', derefcnt=1, name='name'), Argument(type='X509_OBJECT', derefcnt=1, name='ret')]), 'get_cipher': Function(type='SSL_CIPHER', derefcnt=1, name='get_cipher', args=[Argument(type='unsigned', derefcnt=0, name='ncipher')]), 'get_cipher_by_char': Function(type='SSL_CIPHER', derefcnt=1, name='get_cipher_by_char', args=[Argument(type='unsigned', derefcnt=1, name='ptr')]), 'get_crc_table': Function(type='z_crc_t', derefcnt=1, name='get_crc_table', args=[]), 'get_crl': Function(type='int', derefcnt=0, name='get_crl', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509_CRL', derefcnt=2, name='crl'), Argument(type='X509', derefcnt=1, name='x')]), 'get_current_dir_name': Function(type='char', derefcnt=1, name='get_current_dir_name', args=[]), 'get_issuer': Function(type='int', derefcnt=0, name='get_issuer', args=[Argument(type='X509', derefcnt=2, name='issuer'), Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509', derefcnt=1, name='x')]), 'get_rfc2409_prime_1024': Function(type='BIGNUM', derefcnt=1, name='get_rfc2409_prime_1024', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_rfc2409_prime_768': Function(type='BIGNUM', derefcnt=1, name='get_rfc2409_prime_768', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_rfc3526_prime_1536': Function(type='BIGNUM', derefcnt=1, name='get_rfc3526_prime_1536', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_rfc3526_prime_2048': Function(type='BIGNUM', derefcnt=1, name='get_rfc3526_prime_2048', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_rfc3526_prime_3072': Function(type='BIGNUM', derefcnt=1, name='get_rfc3526_prime_3072', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_rfc3526_prime_4096': Function(type='BIGNUM', derefcnt=1, name='get_rfc3526_prime_4096', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_rfc3526_prime_6144': Function(type='BIGNUM', derefcnt=1, name='get_rfc3526_prime_6144', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_rfc3526_prime_8192': Function(type='BIGNUM', derefcnt=1, name='get_rfc3526_prime_8192', args=[Argument(type='BIGNUM', derefcnt=1, name='bn')]), 'get_session_cb': Function(type='SSL_SESSION', derefcnt=1, name='get_session_cb', args=[Argument(type='ssl_st', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=1, name='copy')]), 'get_ssl_method': Function(type='ssl_method_st', derefcnt=1, name='get_ssl_method', args=[Argument(type='int', derefcnt=0, name='version')]), 'get_timeout': Function(type='long', derefcnt=0, name='get_timeout', args=[]), 'getaddrinfo': Function(type='int', derefcnt=0, name='getaddrinfo', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='service'), Argument(type='addrinfo', derefcnt=1, name='req'), Argument(type='addrinfo', derefcnt=2, name='pai')]), 'getaddrinfo_a': Function(type='int', derefcnt=0, name='getaddrinfo_a', args=[Argument(type='int', derefcnt=0, name='mode'), Argument(type='gaicb', derefcnt=2, name='list'), Argument(type='int', derefcnt=0, name='ent'), Argument(type='sigevent', derefcnt=1, name='sig')]), 'getaliasbyname': Function(type='aliasent', derefcnt=1, name='getaliasbyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'getaliasbyname_r': Function(type='int', derefcnt=0, name='getaliasbyname_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='aliasent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='aliasent', derefcnt=2, name='result')]), 'getaliasent': Function(type='aliasent', derefcnt=1, name='getaliasent', args=[]), 'getaliasent_r': Function(type='int', derefcnt=0, name='getaliasent_r', args=[Argument(type='aliasent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='aliasent', derefcnt=2, name='result')]), 'getc': Function(type='int', derefcnt=0, name='getc', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'getc_unlocked': Function(type='int', derefcnt=0, name='getc_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'getchar': Function(type='int', derefcnt=0, name='getchar', args=[]), 'getchar_unlocked': Function(type='int', derefcnt=0, name='getchar_unlocked', args=[]), 'getcontext': Function(type='int', derefcnt=0, name='getcontext', args=[Argument(type='ucontext_t', derefcnt=1, name='ucp')]), 'getcwd': Function(type='char', derefcnt=1, name='getcwd', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size')]), '__getcwd_chk': Function(type='char', derefcnt=1, name='__getcwd_chk', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'getdate': Function(type='tm', derefcnt=1, name='getdate', args=[Argument(type='char', derefcnt=1, name='string')]), 'getdate_r': Function(type='int', derefcnt=0, name='getdate_r', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='tm', derefcnt=1, name='resbufp')]), 'getdelim': Function(type='ssize_t', derefcnt=0, name='getdelim', args=[Argument(type='char', derefcnt=2, name='lineptr'), Argument(type='size_t', derefcnt=1, name='n'), Argument(type='int', derefcnt=0, name='delimiter'), Argument(type='FILE', derefcnt=1, name='stream')]), 'getdirentries': Function(type='ssize_t', derefcnt=0, name='getdirentries', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes'), Argument(type='off_t', derefcnt=1, name='basep')]), 'getdirentries64': Function(type='ssize_t', derefcnt=0, name='getdirentries64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes'), Argument(type='off64_t', derefcnt=1, name='basep')]), 'getdomainname': Function(type='int', derefcnt=0, name='getdomainname', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='size_t', derefcnt=0, name='len')]), '__getdomainname_chk': Function(type='int', derefcnt=0, name='__getdomainname_chk', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='size_t', derefcnt=0, name='nreal')]), 'getdtablesize': Function(type='int', derefcnt=0, name='getdtablesize', args=[]), 'getegid': Function(type='gid_t', derefcnt=0, name='getegid', args=[]), 'getenv': Function(type='char', derefcnt=1, name='getenv', args=[Argument(type='char', derefcnt=1, name='name')]), 'geteuid': Function(type='uid_t', derefcnt=0, name='geteuid', args=[]), 'getfsent': Function(type='fstab', derefcnt=1, name='getfsent', args=[]), 'getfsfile': Function(type='fstab', derefcnt=1, name='getfsfile', args=[Argument(type='char', derefcnt=1, name='name')]), 'getfsspec': Function(type='fstab', derefcnt=1, name='getfsspec', args=[Argument(type='char', derefcnt=1, name='name')]), 'getgid': Function(type='gid_t', derefcnt=0, name='getgid', args=[]), 'getgrent': Function(type='group', derefcnt=1, name='getgrent', args=[]), 'getgrent_r': Function(type='int', derefcnt=0, name='getgrent_r', args=[Argument(type='group', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='group', derefcnt=2, name='result')]), 'getgrgid': Function(type='group', derefcnt=1, name='getgrgid', args=[Argument(type='gid_t', derefcnt=0, name='gid')]), 'getgrgid_r': Function(type='int', derefcnt=0, name='getgrgid_r', args=[Argument(type='gid_t', derefcnt=0, name='gid'), Argument(type='group', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='group', derefcnt=2, name='result')]), 'getgrnam': Function(type='group', derefcnt=1, name='getgrnam', args=[Argument(type='char', derefcnt=1, name='name')]), 'getgrnam_r': Function(type='int', derefcnt=0, name='getgrnam_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='group', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='group', derefcnt=2, name='result')]), 'getgrouplist': Function(type='int', derefcnt=0, name='getgrouplist', args=[Argument(type='char', derefcnt=1, name='user'), Argument(type='gid_t', derefcnt=0, name='group'), Argument(type='gid_t', derefcnt=1, name='groups'), Argument(type='int', derefcnt=1, name='ngroups')]), 'getgroups': Function(type='int', derefcnt=0, name='getgroups', args=[Argument(type='int', derefcnt=0, name='size'), Argument(type='gid_t', derefcnt=1, name='list')]), '__getgroups_chk': Function(type='int', derefcnt=0, name='__getgroups_chk', args=[Argument(type='int', derefcnt=0, name='size'), Argument(type='__gid_t', derefcnt=0, name='list[]'), Argument(type='size_t', derefcnt=0, name='listlen')]), 'gethostbyaddr': Function(type='hostent', derefcnt=1, name='gethostbyaddr', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='socklen_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='type')]), 'gethostbyaddr_r': Function(type='int', derefcnt=0, name='gethostbyaddr_r', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='socklen_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='type'), Argument(type='hostent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='hostent', derefcnt=2, name='result'), Argument(type='int', derefcnt=1, name='h_errnop')]), 'gethostbyname': Function(type='hostent', derefcnt=1, name='gethostbyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'gethostbyname2': Function(type='hostent', derefcnt=1, name='gethostbyname2', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='af')]), 'gethostbyname2_r': Function(type='int', derefcnt=0, name='gethostbyname2_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='af'), Argument(type='hostent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='hostent', derefcnt=2, name='result'), Argument(type='int', derefcnt=1, name='h_errnop')]), 'gethostbyname_r': Function(type='int', derefcnt=0, name='gethostbyname_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='hostent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='hostent', derefcnt=2, name='result'), Argument(type='int', derefcnt=1, name='h_errnop')]), 'gethostent': Function(type='hostent', derefcnt=1, name='gethostent', args=[]), 'gethostent_r': Function(type='int', derefcnt=0, name='gethostent_r', args=[Argument(type='hostent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='hostent', derefcnt=2, name='result'), Argument(type='int', derefcnt=1, name='h_errnop')]), 'gethostid': Function(type='long', derefcnt=0, name='gethostid', args=[]), 'gethostname': Function(type='int', derefcnt=0, name='gethostname', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='size_t', derefcnt=0, name='len')]), '__gethostname_chk': Function(type='int', derefcnt=0, name='__gethostname_chk', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='size_t', derefcnt=0, name='nreal')]), 'getifaddrs': Function(type='int', derefcnt=0, name='getifaddrs', args=[Argument(type='ifaddrs', derefcnt=2, name='ifap')]), 'getipv4sourcefilter': Function(type='int', derefcnt=0, name='getipv4sourcefilter', args=[Argument(type='int', derefcnt=0, name='s'), Argument(type='in_addr', derefcnt=0, name='interface_addr'), Argument(type='in_addr', derefcnt=0, name='group'), Argument(type='uint32_t', derefcnt=1, name='fmode'), Argument(type='uint32_t', derefcnt=1, name='numsrc'), Argument(type='in_addr', derefcnt=1, name='slist')]), 'getitimer': Function(type='int', derefcnt=0, name='getitimer', args=[Argument(type='itimer_which_t', derefcnt=0, name='which'), Argument(type='itimerval', derefcnt=1, name='value')]), 'getline': Function(type='ssize_t', derefcnt=0, name='getline', args=[Argument(type='char', derefcnt=2, name='lineptr'), Argument(type='size_t', derefcnt=1, name='n'), Argument(type='FILE', derefcnt=1, name='stream')]), 'getloadavg': Function(type='int', derefcnt=0, name='getloadavg', args=[Argument(type='double', derefcnt=1, name='loadavg'), Argument(type='int', derefcnt=0, name='nelem')]), 'getlogin': Function(type='char', derefcnt=1, name='getlogin', args=[]), 'getlogin_r': Function(type='int', derefcnt=0, name='getlogin_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='size_t', derefcnt=0, name='name_len')]), 'getmntent': Function(type='mntent', derefcnt=1, name='getmntent', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'getmntent_r': Function(type='mntent', derefcnt=1, name='getmntent_r', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='mntent', derefcnt=1, name='result'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='int', derefcnt=0, name='bufsize')]), 'getmsg': Function(type='int', derefcnt=0, name='getmsg', args=[Argument(type='int', derefcnt=0, name='fildes'), Argument(type='strbuf', derefcnt=1, name='ctlptr'), Argument(type='strbuf', derefcnt=1, name='dataptr'), Argument(type='int', derefcnt=1, name='flagsp')]), 'getnameinfo': Function(type='int', derefcnt=0, name='getnameinfo', args=[Argument(type='sockaddr', derefcnt=1, name='sa'), Argument(type='socklen_t', derefcnt=0, name='salen'), Argument(type='char', derefcnt=1, name='host'), Argument(type='socklen_t', derefcnt=0, name='hostlen'), Argument(type='char', derefcnt=1, name='serv'), Argument(type='socklen_t', derefcnt=0, name='servlen'), Argument(type='int', derefcnt=0, name='flags')]), 'getnetbyaddr': Function(type='netent', derefcnt=1, name='getnetbyaddr', args=[Argument(type='uint32_t', derefcnt=0, name='net'), Argument(type='int', derefcnt=0, name='type')]), 'getnetbyaddr_r': Function(type='int', derefcnt=0, name='getnetbyaddr_r', args=[Argument(type='uint32_t', derefcnt=0, name='net'), Argument(type='int', derefcnt=0, name='type'), Argument(type='netent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='netent', derefcnt=2, name='result'), Argument(type='int', derefcnt=1, name='h_errnop')]), 'getnetbyname': Function(type='netent', derefcnt=1, name='getnetbyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'getnetbyname_r': Function(type='int', derefcnt=0, name='getnetbyname_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='netent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='netent', derefcnt=2, name='result'), Argument(type='int', derefcnt=1, name='h_errnop')]), 'getnetent': Function(type='netent', derefcnt=1, name='getnetent', args=[]), 'getnetent_r': Function(type='int', derefcnt=0, name='getnetent_r', args=[Argument(type='netent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='netent', derefcnt=2, name='result'), Argument(type='int', derefcnt=1, name='h_errnop')]), 'getnetgrent': Function(type='int', derefcnt=0, name='getnetgrent', args=[Argument(type='char', derefcnt=2, name='hostp'), Argument(type='char', derefcnt=2, name='userp'), Argument(type='char', derefcnt=2, name='domainp')]), 'getnetgrent_r': Function(type='int', derefcnt=0, name='getnetgrent_r', args=[Argument(type='char', derefcnt=2, name='hostp'), Argument(type='char', derefcnt=2, name='userp'), Argument(type='char', derefcnt=2, name='domainp'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'getopt': Function(type='int', derefcnt=0, name='getopt', args=[Argument(type='int', derefcnt=0, name='argc'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=1, name='shortopts')]), 'getopt_long': Function(type='int', derefcnt=0, name='getopt_long', args=[Argument(type='int', derefcnt=0, name='argc'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=1, name='shortopts'), Argument(type='option', derefcnt=1, name='longopts'), Argument(type='int', derefcnt=1, name='longind')]), 'getopt_long_only': Function(type='int', derefcnt=0, name='getopt_long_only', args=[Argument(type='int', derefcnt=0, name='argc'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=1, name='shortopts'), Argument(type='option', derefcnt=1, name='longopts'), Argument(type='int', derefcnt=1, name='longind')]), 'getpagesize': Function(type='int', derefcnt=0, name='getpagesize', args=[]), 'getpass': Function(type='char', derefcnt=1, name='getpass', args=[Argument(type='char', derefcnt=1, name='prompt')]), 'getpeername': Function(type='int', derefcnt=0, name='getpeername', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=1, name='len')]), 'getpgid': Function(type='pid_t', derefcnt=0, name='getpgid', args=[Argument(type='pid_t', derefcnt=0, name='pid')]), 'getpgrp': Function(type='pid_t', derefcnt=0, name='getpgrp', args=[]), 'getpid': Function(type='pid_t', derefcnt=0, name='getpid', args=[]), 'getpmsg': Function(type='int', derefcnt=0, name='getpmsg', args=[Argument(type='int', derefcnt=0, name='fildes'), Argument(type='strbuf', derefcnt=1, name='ctlptr'), Argument(type='strbuf', derefcnt=1, name='dataptr'), Argument(type='int', derefcnt=1, name='bandp'), Argument(type='int', derefcnt=1, name='flagsp')]), 'getppid': Function(type='pid_t', derefcnt=0, name='getppid', args=[]), 'getpriority': Function(type='int', derefcnt=0, name='getpriority', args=[Argument(type='priority_which_t', derefcnt=0, name='which'), Argument(type='id_t', derefcnt=0, name='who')]), 'getprotobyname': Function(type='protoent', derefcnt=1, name='getprotobyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'getprotobyname_r': Function(type='int', derefcnt=0, name='getprotobyname_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='protoent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='protoent', derefcnt=2, name='result')]), 'getprotobynumber': Function(type='protoent', derefcnt=1, name='getprotobynumber', args=[Argument(type='int', derefcnt=0, name='proto')]), 'getprotobynumber_r': Function(type='int', derefcnt=0, name='getprotobynumber_r', args=[Argument(type='int', derefcnt=0, name='proto'), Argument(type='protoent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='protoent', derefcnt=2, name='result')]), 'getprotoent': Function(type='protoent', derefcnt=1, name='getprotoent', args=[]), 'getprotoent_r': Function(type='int', derefcnt=0, name='getprotoent_r', args=[Argument(type='protoent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='protoent', derefcnt=2, name='result')]), 'getpt': Function(type='int', derefcnt=0, name='getpt', args=[]), 'getpw': Function(type='int', derefcnt=0, name='getpw', args=[Argument(type='uid_t', derefcnt=0, name='uid'), Argument(type='char', derefcnt=1, name='buffer')]), 'getpwent': Function(type='passwd', derefcnt=1, name='getpwent', args=[]), 'getpwent_r': Function(type='int', derefcnt=0, name='getpwent_r', args=[Argument(type='passwd', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='passwd', derefcnt=2, name='result')]), 'getpwnam': Function(type='passwd', derefcnt=1, name='getpwnam', args=[Argument(type='char', derefcnt=1, name='name')]), 'getpwnam_r': Function(type='int', derefcnt=0, name='getpwnam_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='passwd', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='passwd', derefcnt=2, name='result')]), 'getpwuid': Function(type='passwd', derefcnt=1, name='getpwuid', args=[Argument(type='uid_t', derefcnt=0, name='uid')]), 'getpwuid_r': Function(type='int', derefcnt=0, name='getpwuid_r', args=[Argument(type='uid_t', derefcnt=0, name='uid'), Argument(type='passwd', derefcnt=1, name='resultbuf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='passwd', derefcnt=2, name='result')]), 'getresgid': Function(type='int', derefcnt=0, name='getresgid', args=[Argument(type='gid_t', derefcnt=1, name='rgid'), Argument(type='gid_t', derefcnt=1, name='egid'), Argument(type='gid_t', derefcnt=1, name='sgid')]), 'getresuid': Function(type='int', derefcnt=0, name='getresuid', args=[Argument(type='uid_t', derefcnt=1, name='ruid'), Argument(type='uid_t', derefcnt=1, name='euid'), Argument(type='uid_t', derefcnt=1, name='suid')]), 'getrlimit': Function(type='int', derefcnt=0, name='getrlimit', args=[Argument(type='rlimit_resource_t', derefcnt=0, name='resource'), Argument(type='rlimit', derefcnt=1, name='rlimits')]), 'getrlimit64': Function(type='int', derefcnt=0, name='getrlimit64', args=[Argument(type='rlimit_resource_t', derefcnt=0, name='resource'), Argument(type='rlimit64', derefcnt=1, name='rlimits')]), 'getrpcbyname': Function(type='rpcent', derefcnt=1, name='getrpcbyname', args=[Argument(type='char', derefcnt=1, name='name')]), 'getrpcbyname_r': Function(type='int', derefcnt=0, name='getrpcbyname_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='rpcent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='rpcent', derefcnt=2, name='result')]), 'getrpcbynumber': Function(type='rpcent', derefcnt=1, name='getrpcbynumber', args=[Argument(type='int', derefcnt=0, name='number')]), 'getrpcbynumber_r': Function(type='int', derefcnt=0, name='getrpcbynumber_r', args=[Argument(type='int', derefcnt=0, name='number'), Argument(type='rpcent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='rpcent', derefcnt=2, name='result')]), 'getrpcent': Function(type='rpcent', derefcnt=1, name='getrpcent', args=[]), 'getrpcent_r': Function(type='int', derefcnt=0, name='getrpcent_r', args=[Argument(type='rpcent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='rpcent', derefcnt=2, name='result')]), 'getrusage': Function(type='int', derefcnt=0, name='getrusage', args=[Argument(type='rusage_who_t', derefcnt=0, name='who'), Argument(type='rusage', derefcnt=1, name='usage')]), 'getservbyname': Function(type='servent', derefcnt=1, name='getservbyname', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='proto')]), 'getservbyname_r': Function(type='int', derefcnt=0, name='getservbyname_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='proto'), Argument(type='servent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='servent', derefcnt=2, name='result')]), 'getservbyport': Function(type='servent', derefcnt=1, name='getservbyport', args=[Argument(type='int', derefcnt=0, name='port'), Argument(type='char', derefcnt=1, name='proto')]), 'getservbyport_r': Function(type='int', derefcnt=0, name='getservbyport_r', args=[Argument(type='int', derefcnt=0, name='port'), Argument(type='char', derefcnt=1, name='proto'), Argument(type='servent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='servent', derefcnt=2, name='result')]), 'getservent': Function(type='servent', derefcnt=1, name='getservent', args=[]), 'getservent_r': Function(type='int', derefcnt=0, name='getservent_r', args=[Argument(type='servent', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='servent', derefcnt=2, name='result')]), 'getsgent': Function(type='sgrp', derefcnt=1, name='getsgent', args=[]), 'getsgent_r': Function(type='int', derefcnt=0, name='getsgent_r', args=[Argument(type='sgrp', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='sgrp', derefcnt=2, name='result')]), 'getsgnam': Function(type='sgrp', derefcnt=1, name='getsgnam', args=[Argument(type='char', derefcnt=1, name='name')]), 'getsgnam_r': Function(type='int', derefcnt=0, name='getsgnam_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='sgrp', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='sgrp', derefcnt=2, name='result')]), 'getsid': Function(type='pid_t', derefcnt=0, name='getsid', args=[Argument(type='pid_t', derefcnt=0, name='pid')]), 'getsockname': Function(type='int', derefcnt=0, name='getsockname', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=1, name='len')]), 'getsockopt': Function(type='int', derefcnt=0, name='getsockopt', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='level'), Argument(type='int', derefcnt=0, name='optname'), Argument(type='void', derefcnt=1, name='optval'), Argument(type='socklen_t', derefcnt=1, name='optlen')]), 'getsourcefilter': Function(type='int', derefcnt=0, name='getsourcefilter', args=[Argument(type='int', derefcnt=0, name='s'), Argument(type='uint32_t', derefcnt=0, name='interface_addr'), Argument(type='sockaddr', derefcnt=1, name='group'), Argument(type='socklen_t', derefcnt=0, name='grouplen'), Argument(type='uint32_t', derefcnt=1, name='fmode'), Argument(type='uint32_t', derefcnt=1, name='numsrc'), Argument(type='sockaddr_storage', derefcnt=1, name='slist')]), 'getspent': Function(type='spwd', derefcnt=1, name='getspent', args=[]), 'getspent_r': Function(type='int', derefcnt=0, name='getspent_r', args=[Argument(type='spwd', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='spwd', derefcnt=2, name='result')]), 'getspnam': Function(type='spwd', derefcnt=1, name='getspnam', args=[Argument(type='char', derefcnt=1, name='name')]), 'getspnam_r': Function(type='int', derefcnt=0, name='getspnam_r', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='spwd', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='spwd', derefcnt=2, name='result')]), 'getsubopt': Function(type='int', derefcnt=0, name='getsubopt', args=[Argument(type='char', derefcnt=2, name='optionp'), Argument(type='char', derefcnt=2, name='tokens'), Argument(type='char', derefcnt=2, name='valuep')]), 'gettext': Function(type='char', derefcnt=1, name='gettext', args=[Argument(type='char', derefcnt=1, name='msgid')]), 'gettimeofday': Function(type='int', derefcnt=0, name='gettimeofday', args=[Argument(type='timeval', derefcnt=1, name='tv'), Argument(type='timezone_ptr_t', derefcnt=0, name='tz')]), 'getttyent': Function(type='ttyent', derefcnt=1, name='getttyent', args=[]), 'getttynam': Function(type='ttyent', derefcnt=1, name='getttynam', args=[Argument(type='char', derefcnt=1, name='tty')]), 'getuid': Function(type='uid_t', derefcnt=0, name='getuid', args=[]), 'getumask': Function(type='mode_t', derefcnt=0, name='getumask', args=[]), 'getusershell': Function(type='char', derefcnt=1, name='getusershell', args=[]), 'getutent': Function(type='utmp', derefcnt=1, name='getutent', args=[]), 'getutent_r': Function(type='int', derefcnt=0, name='getutent_r', args=[Argument(type='utmp', derefcnt=1, name='buffer'), Argument(type='utmp', derefcnt=2, name='result')]), 'getutid': Function(type='utmp', derefcnt=1, name='getutid', args=[Argument(type='utmp', derefcnt=1, name='id')]), 'getutid_r': Function(type='int', derefcnt=0, name='getutid_r', args=[Argument(type='utmp', derefcnt=1, name='id'), Argument(type='utmp', derefcnt=1, name='buffer'), Argument(type='utmp', derefcnt=2, name='result')]), 'getutline': Function(type='utmp', derefcnt=1, name='getutline', args=[Argument(type='utmp', derefcnt=1, name='line')]), 'getutline_r': Function(type='int', derefcnt=0, name='getutline_r', args=[Argument(type='utmp', derefcnt=1, name='line'), Argument(type='utmp', derefcnt=1, name='buffer'), Argument(type='utmp', derefcnt=2, name='result')]), 'getutmp': Function(type='void', derefcnt=0, name='getutmp', args=[Argument(type='utmpx', derefcnt=1, name='utmpx'), Argument(type='utmp', derefcnt=1, name='utmp')]), 'getutmpx': Function(type='void', derefcnt=0, name='getutmpx', args=[Argument(type='utmp', derefcnt=1, name='utmp'), Argument(type='utmpx', derefcnt=1, name='utmpx')]), 'getutxent': Function(type='utmpx', derefcnt=1, name='getutxent', args=[]), 'getutxid': Function(type='utmpx', derefcnt=1, name='getutxid', args=[Argument(type='utmpx', derefcnt=1, name='id')]), 'getutxline': Function(type='utmpx', derefcnt=1, name='getutxline', args=[Argument(type='utmpx', derefcnt=1, name='line')]), 'getw': Function(type='int', derefcnt=0, name='getw', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'getwc': Function(type='wint_t', derefcnt=0, name='getwc', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'getwc_unlocked': Function(type='wint_t', derefcnt=0, name='getwc_unlocked', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'getwchar': Function(type='wint_t', derefcnt=0, name='getwchar', args=[]), 'getwchar_unlocked': Function(type='wint_t', derefcnt=0, name='getwchar_unlocked', args=[]), 'getwd': Function(type='char', derefcnt=1, name='getwd', args=[Argument(type='char', derefcnt=1, name='buf')]), '__getwd_chk': Function(type='char', derefcnt=1, name='__getwd_chk', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'gl_closedir': Function(type='void', derefcnt=0, name='gl_closedir', args=[Argument(type='void', derefcnt=1, name='arg0')]), 'gl_lstat': Function(type='int', derefcnt=0, name='gl_lstat', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='stat64', derefcnt=1, name='arg1')]), 'gl_opendir': Function(type='void', derefcnt=1, name='gl_opendir', args=[Argument(type='char', derefcnt=1, name='arg0')]), 'gl_readdir': Function(type='dirent64', derefcnt=1, name='gl_readdir', args=[Argument(type='void', derefcnt=1, name='arg0')]), 'gl_stat': Function(type='int', derefcnt=0, name='gl_stat', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='stat64', derefcnt=1, name='arg1')]), 'glob': Function(type='int', derefcnt=0, name='glob', args=[Argument(type='char', derefcnt=1, name='pattern'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='errfunc'), Argument(type='glob_t', derefcnt=1, name='pglob')]), 'glob64': Function(type='int', derefcnt=0, name='glob64', args=[Argument(type='char', derefcnt=1, name='pattern'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='errfunc'), Argument(type='glob64_t', derefcnt=1, name='pglob')]), 'glob_pattern_p': Function(type='int', derefcnt=0, name='glob_pattern_p', args=[Argument(type='char', derefcnt=1, name='pattern'), Argument(type='int', derefcnt=0, name='quote')]), 'globfree': Function(type='void', derefcnt=0, name='globfree', args=[Argument(type='glob_t', derefcnt=1, name='pglob')]), 'globfree64': Function(type='void', derefcnt=0, name='globfree64', args=[Argument(type='glob64_t', derefcnt=1, name='pglob')]), 'gmtime': Function(type='tm', derefcnt=1, name='gmtime', args=[Argument(type='time_t', derefcnt=1, name='timer')]), 'gmtime_r': Function(type='tm', derefcnt=1, name='gmtime_r', args=[Argument(type='time_t', derefcnt=1, name='timer'), Argument(type='tm', derefcnt=1, name='tp')]), 'gnu_dev_major': Function(type='unsigned', derefcnt=0, name='gnu_dev_major', args=[Argument(type='unsigned', derefcnt=0, name='dev')]), 'gnu_dev_makedev': Function(type='unsigned', derefcnt=0, name='gnu_dev_makedev', args=[Argument(type='unsigned', derefcnt=0, name='major'), Argument(type='unsigned', derefcnt=0, name='minor')]), 'gnu_dev_minor': Function(type='unsigned', derefcnt=0, name='gnu_dev_minor', args=[Argument(type='unsigned', derefcnt=0, name='dev')]), 'grantpt': Function(type='int', derefcnt=0, name='grantpt', args=[Argument(type='int', derefcnt=0, name='fd')]), 'group_member': Function(type='int', derefcnt=0, name='group_member', args=[Argument(type='gid_t', derefcnt=0, name='gid')]), 'gsignal': Function(type='int', derefcnt=0, name='gsignal', args=[Argument(type='int', derefcnt=0, name='sig')]), 'gtty': Function(type='int', derefcnt=0, name='gtty', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='sgttyb', derefcnt=1, name='params')]), 'gzbuffer': Function(type='int', derefcnt=0, name='gzbuffer', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='unsigned', derefcnt=0, name='size')]), 'gzclearerr': Function(type='void', derefcnt=0, name='gzclearerr', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzclose': Function(type='int', derefcnt=0, name='gzclose', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzclose_r': Function(type='int', derefcnt=0, name='gzclose_r', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzclose_w': Function(type='int', derefcnt=0, name='gzclose_w', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzdirect': Function(type='int', derefcnt=0, name='gzdirect', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzdopen': Function(type='gzFile', derefcnt=0, name='gzdopen', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='mode')]), 'gzeof': Function(type='int', derefcnt=0, name='gzeof', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzerror': Function(type='char', derefcnt=1, name='gzerror', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='int', derefcnt=1, name='errnum')]), 'gzflush': Function(type='int', derefcnt=0, name='gzflush', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='int', derefcnt=0, name='flush')]), 'gzgetc': Function(type='int', derefcnt=0, name='gzgetc', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzgetc_': Function(type='int', derefcnt=0, name='gzgetc_', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzgets': Function(type='char', derefcnt=1, name='gzgets', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'gzoffset': Function(type='off_t', derefcnt=0, name='gzoffset', args=[Argument(type='gzFile', derefcnt=0, name='arg0')]), 'gzoffset64': Function(type='off64_t', derefcnt=0, name='gzoffset64', args=[Argument(type='gzFile', derefcnt=0, name='arg0')]), 'gzopen': Function(type='gzFile', derefcnt=0, name='gzopen', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1')]), 'gzopen64': Function(type='gzFile', derefcnt=0, name='gzopen64', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1')]), 'gzprintf': Function(type='int', derefcnt=0, name='gzprintf', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'gzputc': Function(type='int', derefcnt=0, name='gzputc', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='int', derefcnt=0, name='c')]), 'gzputs': Function(type='int', derefcnt=0, name='gzputs', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='char', derefcnt=1, name='s')]), 'gzread': Function(type='int', derefcnt=0, name='gzread', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='voidp', derefcnt=0, name='buf'), Argument(type='unsigned', derefcnt=0, name='len')]), 'gzrewind': Function(type='int', derefcnt=0, name='gzrewind', args=[Argument(type='gzFile', derefcnt=0, name='file')]), 'gzseek': Function(type='off_t', derefcnt=0, name='gzseek', args=[Argument(type='gzFile', derefcnt=0, name='arg0'), Argument(type='off_t', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'gzseek64': Function(type='off64_t', derefcnt=0, name='gzseek64', args=[Argument(type='gzFile', derefcnt=0, name='arg0'), Argument(type='off64_t', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2')]), 'gzsetparams': Function(type='int', derefcnt=0, name='gzsetparams', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='int', derefcnt=0, name='level'), Argument(type='int', derefcnt=0, name='strategy')]), 'gztell': Function(type='off_t', derefcnt=0, name='gztell', args=[Argument(type='gzFile', derefcnt=0, name='arg0')]), 'gztell64': Function(type='off64_t', derefcnt=0, name='gztell64', args=[Argument(type='gzFile', derefcnt=0, name='arg0')]), 'gzungetc': Function(type='int', derefcnt=0, name='gzungetc', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='gzFile', derefcnt=0, name='file')]), 'gzvprintf': Function(type='int', derefcnt=0, name='gzvprintf', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='va')]), 'gzwrite': Function(type='int', derefcnt=0, name='gzwrite', args=[Argument(type='gzFile', derefcnt=0, name='file'), Argument(type='voidpc', derefcnt=0, name='buf'), Argument(type='unsigned', derefcnt=0, name='len')]), 'h_errno_location': Function(type='int', derefcnt=1, name='h_errno_location', args=[]), 'handshake_func': Function(type='int', derefcnt=0, name='handshake_func', args=[Argument(type='SSL', derefcnt=1, name='arg0')]), 'hasmntopt': Function(type='char', derefcnt=1, name='hasmntopt', args=[Argument(type='mntent', derefcnt=1, name='mnt'), Argument(type='char', derefcnt=1, name='opt')]), 'hcreate': Function(type='int', derefcnt=0, name='hcreate', args=[Argument(type='size_t', derefcnt=0, name='nel')]), 'hcreate_r': Function(type='int', derefcnt=0, name='hcreate_r', args=[Argument(type='size_t', derefcnt=0, name='nel'), Argument(type='hsearch_data', derefcnt=1, name='htab')]), 'hdestroy': Function(type='void', derefcnt=0, name='hdestroy', args=[]), 'hdestroy_r': Function(type='void', derefcnt=0, name='hdestroy_r', args=[Argument(type='hsearch_data', derefcnt=1, name='htab')]), 'help_filter': Function(type='char', derefcnt=1, name='help_filter', args=[Argument(type='int', derefcnt=0, name='key'), Argument(type='char', derefcnt=1, name='text'), Argument(type='void', derefcnt=1, name='input')]), 'herror': Function(type='void', derefcnt=0, name='herror', args=[Argument(type='char', derefcnt=1, name='str')]), 'hostalias': Function(type='char', derefcnt=1, name='hostalias', args=[Argument(type='char', derefcnt=1, name='arg0')]), 'hsearch': Function(type='ENTRY', derefcnt=1, name='hsearch', args=[Argument(type='ENTRY', derefcnt=0, name='item'), Argument(type='ACTION', derefcnt=0, name='action')]), 'hsearch_r': Function(type='int', derefcnt=0, name='hsearch_r', args=[Argument(type='ENTRY', derefcnt=0, name='item'), Argument(type='ACTION', derefcnt=0, name='action'), Argument(type='ENTRY', derefcnt=2, name='retval'), Argument(type='hsearch_data', derefcnt=1, name='htab')]), 'hstrerror': Function(type='char', derefcnt=1, name='hstrerror', args=[Argument(type='int', derefcnt=0, name='err_num')]), 'htonl': Function(type='uint32_t', derefcnt=0, name='htonl', args=[Argument(type='uint32_t', derefcnt=0, name='hostlong')]), 'htons': Function(type='uint16_t', derefcnt=0, name='htons', args=[Argument(type='uint16_t', derefcnt=0, name='hostshort')]), 'hypot': Function(type='double', derefcnt=0, name='hypot', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'hypotf': Function(type='float', derefcnt=0, name='hypotf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'hypotl': Function(type='long', derefcnt=0, name='hypotl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'i2a': Function(type='int', derefcnt=0, name='i2a', args=[]), 'i2a_ASN1_ENUMERATED': Function(type='int', derefcnt=0, name='i2a_ASN1_ENUMERATED', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_ENUMERATED', derefcnt=1, name='a')]), 'i2a_ASN1_INTEGER': Function(type='int', derefcnt=0, name='i2a_ASN1_INTEGER', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_INTEGER', derefcnt=1, name='a')]), 'i2a_ASN1_OBJECT': Function(type='int', derefcnt=0, name='i2a_ASN1_OBJECT', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_OBJECT', derefcnt=1, name='a')]), 'i2a_ASN1_STRING': Function(type='int', derefcnt=0, name='i2a_ASN1_STRING', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='ASN1_STRING', derefcnt=1, name='a'), Argument(type='int', derefcnt=0, name='type')]), 'i2b_PVK_bio': Function(type='int', derefcnt=0, name='i2b_PVK_bio', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='EVP_PKEY', derefcnt=1, name='pk'), Argument(type='int', derefcnt=0, name='enclevel'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'i2b_PrivateKey_bio': Function(type='int', derefcnt=0, name='i2b_PrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='EVP_PKEY', derefcnt=1, name='pk')]), 'i2b_PublicKey_bio': Function(type='int', derefcnt=0, name='i2b_PublicKey_bio', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='EVP_PKEY', derefcnt=1, name='pk')]), 'i2c_ASN1_BIT_STRING': Function(type='int', derefcnt=0, name='i2c_ASN1_BIT_STRING', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2c_ASN1_INTEGER': Function(type='int', derefcnt=0, name='i2c_ASN1_INTEGER', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_ASN1_BIT_STRING': Function(type='int', derefcnt=0, name='i2d_ASN1_BIT_STRING', args=[Argument(type='ASN1_BIT_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_BMPSTRING': Function(type='int', derefcnt=0, name='i2d_ASN1_BMPSTRING', args=[Argument(type='ASN1_BMPSTRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_BOOLEAN': Function(type='int', derefcnt=0, name='i2d_ASN1_BOOLEAN', args=[Argument(type='int', derefcnt=0, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_ASN1_ENUMERATED': Function(type='int', derefcnt=0, name='i2d_ASN1_ENUMERATED', args=[Argument(type='ASN1_ENUMERATED', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_GENERALIZEDTIME': Function(type='int', derefcnt=0, name='i2d_ASN1_GENERALIZEDTIME', args=[Argument(type='ASN1_GENERALIZEDTIME', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_GENERALSTRING': Function(type='int', derefcnt=0, name='i2d_ASN1_GENERALSTRING', args=[Argument(type='ASN1_GENERALSTRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_IA5STRING': Function(type='int', derefcnt=0, name='i2d_ASN1_IA5STRING', args=[Argument(type='ASN1_IA5STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_INTEGER': Function(type='int', derefcnt=0, name='i2d_ASN1_INTEGER', args=[Argument(type='ASN1_INTEGER', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_NULL': Function(type='int', derefcnt=0, name='i2d_ASN1_NULL', args=[Argument(type='ASN1_NULL', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_OBJECT': Function(type='int', derefcnt=0, name='i2d_ASN1_OBJECT', args=[Argument(type='ASN1_OBJECT', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_ASN1_OCTET_STRING': Function(type='int', derefcnt=0, name='i2d_ASN1_OCTET_STRING', args=[Argument(type='ASN1_OCTET_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_PRINTABLE': Function(type='int', derefcnt=0, name='i2d_ASN1_PRINTABLE', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_PRINTABLESTRING': Function(type='int', derefcnt=0, name='i2d_ASN1_PRINTABLESTRING', args=[Argument(type='ASN1_PRINTABLESTRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_SEQUENCE_ANY': Function(type='int', derefcnt=0, name='i2d_ASN1_SEQUENCE_ANY', args=[Argument(type='ASN1_SEQUENCE_ANY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_SET': Function(type='int', derefcnt=0, name='i2d_ASN1_SET', args=[Argument(type='stack_st_OPENSSL_BLOCK', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='i2d_of_void', derefcnt=1, name='i2d'), Argument(type='int', derefcnt=0, name='ex_tag'), Argument(type='int', derefcnt=0, name='ex_class'), Argument(type='int', derefcnt=0, name='is_set')]), 'i2d_ASN1_SET_ANY': Function(type='int', derefcnt=0, name='i2d_ASN1_SET_ANY', args=[Argument(type='ASN1_SEQUENCE_ANY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_T61STRING': Function(type='int', derefcnt=0, name='i2d_ASN1_T61STRING', args=[Argument(type='ASN1_T61STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_TIME': Function(type='int', derefcnt=0, name='i2d_ASN1_TIME', args=[Argument(type='ASN1_TIME', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_TYPE': Function(type='int', derefcnt=0, name='i2d_ASN1_TYPE', args=[Argument(type='ASN1_TYPE', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_UNIVERSALSTRING': Function(type='int', derefcnt=0, name='i2d_ASN1_UNIVERSALSTRING', args=[Argument(type='ASN1_UNIVERSALSTRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_UTCTIME': Function(type='int', derefcnt=0, name='i2d_ASN1_UTCTIME', args=[Argument(type='ASN1_UTCTIME', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_UTF8STRING': Function(type='int', derefcnt=0, name='i2d_ASN1_UTF8STRING', args=[Argument(type='ASN1_UTF8STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_VISIBLESTRING': Function(type='int', derefcnt=0, name='i2d_ASN1_VISIBLESTRING', args=[Argument(type='ASN1_VISIBLESTRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ASN1_bio_stream': Function(type='int', derefcnt=0, name='i2d_ASN1_bio_stream', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='ASN1_VALUE', derefcnt=1, name='val'), Argument(type='BIO', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='ASN1_ITEM', derefcnt=1, name='it')]), 'i2d_ASN1_bytes': Function(type='int', derefcnt=0, name='i2d_ASN1_bytes', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='int', derefcnt=0, name='tag'), Argument(type='int', derefcnt=0, name='xclass')]), 'i2d_DHparams': Function(type='int', derefcnt=0, name='i2d_DHparams', args=[Argument(type='DH', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_DIRECTORYSTRING': Function(type='int', derefcnt=0, name='i2d_DIRECTORYSTRING', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_DISPLAYTEXT': Function(type='int', derefcnt=0, name='i2d_DISPLAYTEXT', args=[Argument(type='ASN1_STRING', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_DSAPrivateKey': Function(type='int', derefcnt=0, name='i2d_DSAPrivateKey', args=[Argument(type='DSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_DSAPrivateKey_bio': Function(type='int', derefcnt=0, name='i2d_DSAPrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'i2d_DSAPrivateKey_fp': Function(type='int', derefcnt=0, name='i2d_DSAPrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'i2d_DSAPublicKey': Function(type='int', derefcnt=0, name='i2d_DSAPublicKey', args=[Argument(type='DSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_DSA_PUBKEY': Function(type='int', derefcnt=0, name='i2d_DSA_PUBKEY', args=[Argument(type='DSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_DSA_PUBKEY_bio': Function(type='int', derefcnt=0, name='i2d_DSA_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'i2d_DSA_PUBKEY_fp': Function(type='int', derefcnt=0, name='i2d_DSA_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='DSA', derefcnt=1, name='dsa')]), 'i2d_DSA_SIG': Function(type='int', derefcnt=0, name='i2d_DSA_SIG', args=[Argument(type='DSA_SIG', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_DSAparams': Function(type='int', derefcnt=0, name='i2d_DSAparams', args=[Argument(type='DSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_ECDSA_SIG': Function(type='int', derefcnt=0, name='i2d_ECDSA_SIG', args=[Argument(type='ECDSA_SIG', derefcnt=1, name='sig'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_ECPKParameters': Function(type='int', derefcnt=0, name='i2d_ECPKParameters', args=[Argument(type='EC_GROUP', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ECParameters': Function(type='int', derefcnt=0, name='i2d_ECParameters', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ECPrivateKey': Function(type='int', derefcnt=0, name='i2d_ECPrivateKey', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_ECPrivateKey_bio': Function(type='int', derefcnt=0, name='i2d_ECPrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'i2d_ECPrivateKey_fp': Function(type='int', derefcnt=0, name='i2d_ECPrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'i2d_EC_PUBKEY': Function(type='int', derefcnt=0, name='i2d_EC_PUBKEY', args=[Argument(type='EC_KEY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_EC_PUBKEY_bio': Function(type='int', derefcnt=0, name='i2d_EC_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'i2d_EC_PUBKEY_fp': Function(type='int', derefcnt=0, name='i2d_EC_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EC_KEY', derefcnt=1, name='eckey')]), 'i2d_NETSCAPE_CERT_SEQUENCE': Function(type='int', derefcnt=0, name='i2d_NETSCAPE_CERT_SEQUENCE', args=[Argument(type='NETSCAPE_CERT_SEQUENCE', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_NETSCAPE_SPKAC': Function(type='int', derefcnt=0, name='i2d_NETSCAPE_SPKAC', args=[Argument(type='NETSCAPE_SPKAC', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_NETSCAPE_SPKI': Function(type='int', derefcnt=0, name='i2d_NETSCAPE_SPKI', args=[Argument(type='NETSCAPE_SPKI', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_NETSCAPE_X509': Function(type='int', derefcnt=0, name='i2d_NETSCAPE_X509', args=[Argument(type='NETSCAPE_X509', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_Netscape_RSA': Function(type='int', derefcnt=0, name='i2d_Netscape_RSA', args=[Argument(type='RSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='int', derefcnt=0, name='cb')]), 'i2d_PBE2PARAM': Function(type='int', derefcnt=0, name='i2d_PBE2PARAM', args=[Argument(type='PBE2PARAM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PBEPARAM': Function(type='int', derefcnt=0, name='i2d_PBEPARAM', args=[Argument(type='PBEPARAM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PBKDF2PARAM': Function(type='int', derefcnt=0, name='i2d_PBKDF2PARAM', args=[Argument(type='PBKDF2PARAM', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7': Function(type='int', derefcnt=0, name='i2d_PKCS7', args=[Argument(type='PKCS7', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_DIGEST': Function(type='int', derefcnt=0, name='i2d_PKCS7_DIGEST', args=[Argument(type='PKCS7_DIGEST', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_ENCRYPT': Function(type='int', derefcnt=0, name='i2d_PKCS7_ENCRYPT', args=[Argument(type='PKCS7_ENCRYPT', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_ENC_CONTENT': Function(type='int', derefcnt=0, name='i2d_PKCS7_ENC_CONTENT', args=[Argument(type='PKCS7_ENC_CONTENT', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_ENVELOPE': Function(type='int', derefcnt=0, name='i2d_PKCS7_ENVELOPE', args=[Argument(type='PKCS7_ENVELOPE', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_ISSUER_AND_SERIAL': Function(type='int', derefcnt=0, name='i2d_PKCS7_ISSUER_AND_SERIAL', args=[Argument(type='PKCS7_ISSUER_AND_SERIAL', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_NDEF': Function(type='int', derefcnt=0, name='i2d_PKCS7_NDEF', args=[Argument(type='PKCS7', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_RECIP_INFO': Function(type='int', derefcnt=0, name='i2d_PKCS7_RECIP_INFO', args=[Argument(type='PKCS7_RECIP_INFO', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_SIGNED': Function(type='int', derefcnt=0, name='i2d_PKCS7_SIGNED', args=[Argument(type='PKCS7_SIGNED', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_SIGNER_INFO': Function(type='int', derefcnt=0, name='i2d_PKCS7_SIGNER_INFO', args=[Argument(type='PKCS7_SIGNER_INFO', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_SIGN_ENVELOPE': Function(type='int', derefcnt=0, name='i2d_PKCS7_SIGN_ENVELOPE', args=[Argument(type='PKCS7_SIGN_ENVELOPE', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS7_bio': Function(type='int', derefcnt=0, name='i2d_PKCS7_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS7', derefcnt=1, name='p7')]), 'i2d_PKCS7_bio_stream': Function(type='int', derefcnt=0, name='i2d_PKCS7_bio_stream', args=[Argument(type='BIO', derefcnt=1, name='out'), Argument(type='PKCS7', derefcnt=1, name='p7'), Argument(type='BIO', derefcnt=1, name='in'), Argument(type='int', derefcnt=0, name='flags')]), 'i2d_PKCS7_fp': Function(type='int', derefcnt=0, name='i2d_PKCS7_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS7', derefcnt=1, name='p7')]), 'i2d_PKCS8PrivateKeyInfo_bio': Function(type='int', derefcnt=0, name='i2d_PKCS8PrivateKeyInfo_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='key')]), 'i2d_PKCS8PrivateKeyInfo_fp': Function(type='int', derefcnt=0, name='i2d_PKCS8PrivateKeyInfo_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='key')]), 'i2d_PKCS8PrivateKey_bio': Function(type='int', derefcnt=0, name='i2d_PKCS8PrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='char', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'i2d_PKCS8PrivateKey_fp': Function(type='int', derefcnt=0, name='i2d_PKCS8PrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='EVP_CIPHER', derefcnt=1, name='enc'), Argument(type='char', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'i2d_PKCS8PrivateKey_nid_bio': Function(type='int', derefcnt=0, name='i2d_PKCS8PrivateKey_nid_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='char', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'i2d_PKCS8PrivateKey_nid_fp': Function(type='int', derefcnt=0, name='i2d_PKCS8PrivateKey_nid_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='x'), Argument(type='int', derefcnt=0, name='nid'), Argument(type='char', derefcnt=1, name='kstr'), Argument(type='int', derefcnt=0, name='klen'), Argument(type='pem_password_cb', derefcnt=1, name='cb'), Argument(type='void', derefcnt=1, name='u')]), 'i2d_PKCS8_PRIV_KEY_INFO': Function(type='int', derefcnt=0, name='i2d_PKCS8_PRIV_KEY_INFO', args=[Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_PKCS8_PRIV_KEY_INFO_bio': Function(type='int', derefcnt=0, name='i2d_PKCS8_PRIV_KEY_INFO_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='p8inf')]), 'i2d_PKCS8_PRIV_KEY_INFO_fp': Function(type='int', derefcnt=0, name='i2d_PKCS8_PRIV_KEY_INFO_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='PKCS8_PRIV_KEY_INFO', derefcnt=1, name='p8inf')]), 'i2d_PKCS8_bio': Function(type='int', derefcnt=0, name='i2d_PKCS8_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_SIG', derefcnt=1, name='p8')]), 'i2d_PKCS8_fp': Function(type='int', derefcnt=0, name='i2d_PKCS8_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_SIG', derefcnt=1, name='p8')]), 'i2d_PUBKEY': Function(type='int', derefcnt=0, name='i2d_PUBKEY', args=[Argument(type='EVP_PKEY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_PUBKEY_bio': Function(type='int', derefcnt=0, name='i2d_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'i2d_PUBKEY_fp': Function(type='int', derefcnt=0, name='i2d_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'i2d_PrivateKey': Function(type='int', derefcnt=0, name='i2d_PrivateKey', args=[Argument(type='EVP_PKEY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_PrivateKey_bio': Function(type='int', derefcnt=0, name='i2d_PrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'i2d_PrivateKey_fp': Function(type='int', derefcnt=0, name='i2d_PrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='EVP_PKEY', derefcnt=1, name='pkey')]), 'i2d_PublicKey': Function(type='int', derefcnt=0, name='i2d_PublicKey', args=[Argument(type='EVP_PKEY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_RSAPrivateKey': Function(type='int', derefcnt=0, name='i2d_RSAPrivateKey', args=[Argument(type='RSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_RSAPrivateKey_bio': Function(type='int', derefcnt=0, name='i2d_RSAPrivateKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'i2d_RSAPrivateKey_fp': Function(type='int', derefcnt=0, name='i2d_RSAPrivateKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'i2d_RSAPublicKey': Function(type='int', derefcnt=0, name='i2d_RSAPublicKey', args=[Argument(type='RSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_RSAPublicKey_bio': Function(type='int', derefcnt=0, name='i2d_RSAPublicKey_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'i2d_RSAPublicKey_fp': Function(type='int', derefcnt=0, name='i2d_RSAPublicKey_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'i2d_RSA_NET': Function(type='int', derefcnt=0, name='i2d_RSA_NET', args=[Argument(type='RSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp'), Argument(type='int', derefcnt=0, name='cb'), Argument(type='int', derefcnt=0, name='sgckey')]), 'i2d_RSA_PSS_PARAMS': Function(type='int', derefcnt=0, name='i2d_RSA_PSS_PARAMS', args=[Argument(type='RSA_PSS_PARAMS', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_RSA_PUBKEY': Function(type='int', derefcnt=0, name='i2d_RSA_PUBKEY', args=[Argument(type='RSA', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_RSA_PUBKEY_bio': Function(type='int', derefcnt=0, name='i2d_RSA_PUBKEY_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'i2d_RSA_PUBKEY_fp': Function(type='int', derefcnt=0, name='i2d_RSA_PUBKEY_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'i2d_SSL_SESSION': Function(type='int', derefcnt=0, name='i2d_SSL_SESSION', args=[Argument(type='SSL_SESSION', derefcnt=1, name='in'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_X509': Function(type='int', derefcnt=0, name='i2d_X509', args=[Argument(type='X509', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_ALGOR': Function(type='int', derefcnt=0, name='i2d_X509_ALGOR', args=[Argument(type='X509_ALGOR', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_ALGORS': Function(type='int', derefcnt=0, name='i2d_X509_ALGORS', args=[Argument(type='X509_ALGORS', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_ATTRIBUTE': Function(type='int', derefcnt=0, name='i2d_X509_ATTRIBUTE', args=[Argument(type='X509_ATTRIBUTE', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_AUX': Function(type='int', derefcnt=0, name='i2d_X509_AUX', args=[Argument(type='X509', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_X509_CERT_AUX': Function(type='int', derefcnt=0, name='i2d_X509_CERT_AUX', args=[Argument(type='X509_CERT_AUX', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_CERT_PAIR': Function(type='int', derefcnt=0, name='i2d_X509_CERT_PAIR', args=[Argument(type='X509_CERT_PAIR', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_CINF': Function(type='int', derefcnt=0, name='i2d_X509_CINF', args=[Argument(type='X509_CINF', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_CRL': Function(type='int', derefcnt=0, name='i2d_X509_CRL', args=[Argument(type='X509_CRL', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_CRL_INFO': Function(type='int', derefcnt=0, name='i2d_X509_CRL_INFO', args=[Argument(type='X509_CRL_INFO', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_CRL_bio': Function(type='int', derefcnt=0, name='i2d_X509_CRL_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_CRL', derefcnt=1, name='crl')]), 'i2d_X509_CRL_fp': Function(type='int', derefcnt=0, name='i2d_X509_CRL_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_CRL', derefcnt=1, name='crl')]), 'i2d_X509_EXTENSION': Function(type='int', derefcnt=0, name='i2d_X509_EXTENSION', args=[Argument(type='X509_EXTENSION', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_EXTENSIONS': Function(type='int', derefcnt=0, name='i2d_X509_EXTENSIONS', args=[Argument(type='X509_EXTENSIONS', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_NAME': Function(type='int', derefcnt=0, name='i2d_X509_NAME', args=[Argument(type='X509_NAME', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_NAME_ENTRY': Function(type='int', derefcnt=0, name='i2d_X509_NAME_ENTRY', args=[Argument(type='X509_NAME_ENTRY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_PKEY': Function(type='int', derefcnt=0, name='i2d_X509_PKEY', args=[Argument(type='X509_PKEY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='pp')]), 'i2d_X509_PUBKEY': Function(type='int', derefcnt=0, name='i2d_X509_PUBKEY', args=[Argument(type='X509_PUBKEY', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_REQ': Function(type='int', derefcnt=0, name='i2d_X509_REQ', args=[Argument(type='X509_REQ', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_REQ_INFO': Function(type='int', derefcnt=0, name='i2d_X509_REQ_INFO', args=[Argument(type='X509_REQ_INFO', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_REQ_bio': Function(type='int', derefcnt=0, name='i2d_X509_REQ_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509_REQ', derefcnt=1, name='req')]), 'i2d_X509_REQ_fp': Function(type='int', derefcnt=0, name='i2d_X509_REQ_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509_REQ', derefcnt=1, name='req')]), 'i2d_X509_REVOKED': Function(type='int', derefcnt=0, name='i2d_X509_REVOKED', args=[Argument(type='X509_REVOKED', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_SIG': Function(type='int', derefcnt=0, name='i2d_X509_SIG', args=[Argument(type='X509_SIG', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_VAL': Function(type='int', derefcnt=0, name='i2d_X509_VAL', args=[Argument(type='X509_VAL', derefcnt=1, name='a'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2d_X509_bio': Function(type='int', derefcnt=0, name='i2d_X509_bio', args=[Argument(type='BIO', derefcnt=1, name='bp'), Argument(type='X509', derefcnt=1, name='x509')]), 'i2d_X509_fp': Function(type='int', derefcnt=0, name='i2d_X509_fp', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='X509', derefcnt=1, name='x509')]), 'i2d_of_void': Function(type='int', derefcnt=0, name='i2d_of_void', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=2, name='arg1')]), 'i2o_ECPublicKey': Function(type='int', derefcnt=0, name='i2o_ECPublicKey', args=[Argument(type='EC_KEY', derefcnt=1, name='key'), Argument(type='unsigned', derefcnt=2, name='out')]), 'i2t_ASN1_OBJECT': Function(type='int', derefcnt=0, name='i2t_ASN1_OBJECT', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='buf_len'), Argument(type='ASN1_OBJECT', derefcnt=1, name='a')]), 'iconv': Function(type='size_t', derefcnt=0, name='iconv', args=[Argument(type='iconv_t', derefcnt=0, name='cd'), Argument(type='char', derefcnt=2, name='inbuf'), Argument(type='size_t', derefcnt=1, name='inbytesleft'), Argument(type='char', derefcnt=2, name='outbuf'), Argument(type='size_t', derefcnt=1, name='outbytesleft')]), 'iconv_close': Function(type='int', derefcnt=0, name='iconv_close', args=[Argument(type='iconv_t', derefcnt=0, name='cd')]), 'iconv_open': Function(type='iconv_t', derefcnt=0, name='iconv_open', args=[Argument(type='char', derefcnt=1, name='tocode'), Argument(type='char', derefcnt=1, name='fromcode')]), 'ilogb': Function(type='int', derefcnt=0, name='ilogb', args=[Argument(type='double', derefcnt=0, name='x')]), 'ilogbf': Function(type='int', derefcnt=0, name='ilogbf', args=[Argument(type='float', derefcnt=0, name='x')]), 'ilogbl': Function(type='int', derefcnt=0, name='ilogbl', args=[Argument(type='long', derefcnt=0, name='x')]), 'imaxabs': Function(type='intmax_t', derefcnt=0, name='imaxabs', args=[Argument(type='intmax_t', derefcnt=0, name='n')]), 'imaxdiv': Function(type='imaxdiv_t', derefcnt=0, name='imaxdiv', args=[Argument(type='intmax_t', derefcnt=0, name='numer'), Argument(type='intmax_t', derefcnt=0, name='denom')]), 'in_func': Function(type='unsigned', derefcnt=0, name='in_func', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=2, name='arg1')]), 'inb': Function(type='unsigned', derefcnt=0, name='inb', args=[Argument(type='unsigned', derefcnt=0, name='port')]), 'inb_p': Function(type='unsigned', derefcnt=0, name='inb_p', args=[Argument(type='unsigned', derefcnt=0, name='port')]), 'index': Function(type='char', derefcnt=1, name='index', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c')]), 'inet6_opt_append': Function(type='int', derefcnt=0, name='inet6_opt_append', args=[Argument(type='void', derefcnt=1, name='extbuf'), Argument(type='socklen_t', derefcnt=0, name='extlen'), Argument(type='int', derefcnt=0, name='offset'), Argument(type='uint8_t', derefcnt=0, name='type'), Argument(type='socklen_t', derefcnt=0, name='len'), Argument(type='uint8_t', derefcnt=0, name='align'), Argument(type='void', derefcnt=2, name='databufp')]), 'inet6_opt_find': Function(type='int', derefcnt=0, name='inet6_opt_find', args=[Argument(type='void', derefcnt=1, name='extbuf'), Argument(type='socklen_t', derefcnt=0, name='extlen'), Argument(type='int', derefcnt=0, name='offset'), Argument(type='uint8_t', derefcnt=0, name='type'), Argument(type='socklen_t', derefcnt=1, name='lenp'), Argument(type='void', derefcnt=2, name='databufp')]), 'inet6_opt_finish': Function(type='int', derefcnt=0, name='inet6_opt_finish', args=[Argument(type='void', derefcnt=1, name='extbuf'), Argument(type='socklen_t', derefcnt=0, name='extlen'), Argument(type='int', derefcnt=0, name='offset')]), 'inet6_opt_get_val': Function(type='int', derefcnt=0, name='inet6_opt_get_val', args=[Argument(type='void', derefcnt=1, name='databuf'), Argument(type='int', derefcnt=0, name='offset'), Argument(type='void', derefcnt=1, name='val'), Argument(type='socklen_t', derefcnt=0, name='vallen')]), 'inet6_opt_init': Function(type='int', derefcnt=0, name='inet6_opt_init', args=[Argument(type='void', derefcnt=1, name='extbuf'), Argument(type='socklen_t', derefcnt=0, name='extlen')]), 'inet6_opt_next': Function(type='int', derefcnt=0, name='inet6_opt_next', args=[Argument(type='void', derefcnt=1, name='extbuf'), Argument(type='socklen_t', derefcnt=0, name='extlen'), Argument(type='int', derefcnt=0, name='offset'), Argument(type='uint8_t', derefcnt=1, name='typep'), Argument(type='socklen_t', derefcnt=1, name='lenp'), Argument(type='void', derefcnt=2, name='databufp')]), 'inet6_opt_set_val': Function(type='int', derefcnt=0, name='inet6_opt_set_val', args=[Argument(type='void', derefcnt=1, name='databuf'), Argument(type='int', derefcnt=0, name='offset'), Argument(type='void', derefcnt=1, name='val'), Argument(type='socklen_t', derefcnt=0, name='vallen')]), 'inet6_option_alloc': Function(type='uint8_t', derefcnt=1, name='inet6_option_alloc', args=[Argument(type='cmsghdr', derefcnt=1, name='cmsg'), Argument(type='int', derefcnt=0, name='datalen'), Argument(type='int', derefcnt=0, name='multx'), Argument(type='int', derefcnt=0, name='plusy')]), 'inet6_option_append': Function(type='int', derefcnt=0, name='inet6_option_append', args=[Argument(type='cmsghdr', derefcnt=1, name='cmsg'), Argument(type='uint8_t', derefcnt=1, name='typep'), Argument(type='int', derefcnt=0, name='multx'), Argument(type='int', derefcnt=0, name='plusy')]), 'inet6_option_find': Function(type='int', derefcnt=0, name='inet6_option_find', args=[Argument(type='cmsghdr', derefcnt=1, name='cmsg'), Argument(type='uint8_t', derefcnt=2, name='tptrp'), Argument(type='int', derefcnt=0, name='type')]), 'inet6_option_init': Function(type='int', derefcnt=0, name='inet6_option_init', args=[Argument(type='void', derefcnt=1, name='bp'), Argument(type='cmsghdr', derefcnt=2, name='cmsgp'), Argument(type='int', derefcnt=0, name='type')]), 'inet6_option_next': Function(type='int', derefcnt=0, name='inet6_option_next', args=[Argument(type='cmsghdr', derefcnt=1, name='cmsg'), Argument(type='uint8_t', derefcnt=2, name='tptrp')]), 'inet6_option_space': Function(type='int', derefcnt=0, name='inet6_option_space', args=[Argument(type='int', derefcnt=0, name='nbytes')]), 'inet6_rth_add': Function(type='int', derefcnt=0, name='inet6_rth_add', args=[Argument(type='void', derefcnt=1, name='bp'), Argument(type='in6_addr', derefcnt=1, name='addr')]), 'inet6_rth_getaddr': Function(type='in6_addr', derefcnt=1, name='inet6_rth_getaddr', args=[Argument(type='void', derefcnt=1, name='bp'), Argument(type='int', derefcnt=0, name='index')]), 'inet6_rth_init': Function(type='void', derefcnt=1, name='inet6_rth_init', args=[Argument(type='void', derefcnt=1, name='bp'), Argument(type='socklen_t', derefcnt=0, name='bp_len'), Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='segments')]), 'inet6_rth_reverse': Function(type='int', derefcnt=0, name='inet6_rth_reverse', args=[Argument(type='void', derefcnt=1, name='in'), Argument(type='void', derefcnt=1, name='out')]), 'inet6_rth_segments': Function(type='int', derefcnt=0, name='inet6_rth_segments', args=[Argument(type='void', derefcnt=1, name='bp')]), 'inet6_rth_space': Function(type='socklen_t', derefcnt=0, name='inet6_rth_space', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='segments')]), 'inflate': Function(type='int', derefcnt=0, name='inflate', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='flush')]), 'inflateBack': Function(type='int', derefcnt=0, name='inflateBack', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='in_func', derefcnt=0, name='in'), Argument(type='void', derefcnt=1, name='in_desc'), Argument(type='out_func', derefcnt=0, name='out'), Argument(type='void', derefcnt=1, name='out_desc')]), 'inflateBackEnd': Function(type='int', derefcnt=0, name='inflateBackEnd', args=[Argument(type='z_streamp', derefcnt=0, name='strm')]), 'inflateBackInit_': Function(type='int', derefcnt=0, name='inflateBackInit_', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='windowBits'), Argument(type='unsigned', derefcnt=1, name='window'), Argument(type='char', derefcnt=1, name='version'), Argument(type='int', derefcnt=0, name='stream_size')]), 'inflateCopy': Function(type='int', derefcnt=0, name='inflateCopy', args=[Argument(type='z_streamp', derefcnt=0, name='dest'), Argument(type='z_streamp', derefcnt=0, name='source')]), 'inflateEnd': Function(type='int', derefcnt=0, name='inflateEnd', args=[Argument(type='z_streamp', derefcnt=0, name='strm')]), 'inflateGetDictionary': Function(type='int', derefcnt=0, name='inflateGetDictionary', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='Bytef', derefcnt=1, name='dictionary'), Argument(type='uInt', derefcnt=1, name='dictLength')]), 'inflateGetHeader': Function(type='int', derefcnt=0, name='inflateGetHeader', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='gz_headerp', derefcnt=0, name='head')]), 'inflateInit2_': Function(type='int', derefcnt=0, name='inflateInit2_', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='windowBits'), Argument(type='char', derefcnt=1, name='version'), Argument(type='int', derefcnt=0, name='stream_size')]), 'inflateInit_': Function(type='int', derefcnt=0, name='inflateInit_', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='char', derefcnt=1, name='version'), Argument(type='int', derefcnt=0, name='stream_size')]), 'inflateMark': Function(type='long', derefcnt=0, name='inflateMark', args=[Argument(type='z_streamp', derefcnt=0, name='strm')]), 'inflatePrime': Function(type='int', derefcnt=0, name='inflatePrime', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='int', derefcnt=0, name='value')]), 'inflateReset': Function(type='int', derefcnt=0, name='inflateReset', args=[Argument(type='z_streamp', derefcnt=0, name='strm')]), 'inflateReset2': Function(type='int', derefcnt=0, name='inflateReset2', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='int', derefcnt=0, name='windowBits')]), 'inflateResetKeep': Function(type='int', derefcnt=0, name='inflateResetKeep', args=[Argument(type='z_streamp', derefcnt=0, name='arg0')]), 'inflateSetDictionary': Function(type='int', derefcnt=0, name='inflateSetDictionary', args=[Argument(type='z_streamp', derefcnt=0, name='strm'), Argument(type='Bytef', derefcnt=1, name='dictionary'), Argument(type='uInt', derefcnt=0, name='dictLength')]), 'inflateSync': Function(type='int', derefcnt=0, name='inflateSync', args=[Argument(type='z_streamp', derefcnt=0, name='strm')]), 'inflateSyncPoint': Function(type='int', derefcnt=0, name='inflateSyncPoint', args=[Argument(type='z_streamp', derefcnt=0, name='arg0')]), 'inflateUndermine': Function(type='int', derefcnt=0, name='inflateUndermine', args=[Argument(type='z_streamp', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'info_callback': Function(type='void', derefcnt=0, name='info_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='val')]), 'init': Function(type='int', derefcnt=0, name='init', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx')]), 'initgroups': Function(type='int', derefcnt=0, name='initgroups', args=[Argument(type='char', derefcnt=1, name='user'), Argument(type='gid_t', derefcnt=0, name='group')]), 'initstate': Function(type='char', derefcnt=1, name='initstate', args=[Argument(type='unsigned', derefcnt=0, name='seed'), Argument(type='char', derefcnt=1, name='statebuf'), Argument(type='size_t', derefcnt=0, name='statelen')]), 'initstate_r': Function(type='int', derefcnt=0, name='initstate_r', args=[Argument(type='unsigned', derefcnt=0, name='seed'), Argument(type='char', derefcnt=1, name='statebuf'), Argument(type='size_t', derefcnt=0, name='statelen'), Argument(type='random_data', derefcnt=1, name='buf')]), 'inl': Function(type='unsigned', derefcnt=0, name='inl', args=[Argument(type='unsigned', derefcnt=0, name='port')]), 'inl_p': Function(type='unsigned', derefcnt=0, name='inl_p', args=[Argument(type='unsigned', derefcnt=0, name='port')]), 'innetgr': Function(type='int', derefcnt=0, name='innetgr', args=[Argument(type='char', derefcnt=1, name='netgroup'), Argument(type='char', derefcnt=1, name='host'), Argument(type='char', derefcnt=1, name='user'), Argument(type='char', derefcnt=1, name='domain')]), 'insb': Function(type='void', derefcnt=0, name='insb', args=[Argument(type='unsigned', derefcnt=0, name='port'), Argument(type='void', derefcnt=1, name='addr'), Argument(type='unsigned', derefcnt=0, name='count')]), 'insl': Function(type='void', derefcnt=0, name='insl', args=[Argument(type='unsigned', derefcnt=0, name='port'), Argument(type='void', derefcnt=1, name='addr'), Argument(type='unsigned', derefcnt=0, name='count')]), 'insque': Function(type='void', derefcnt=0, name='insque', args=[Argument(type='void', derefcnt=1, name='elem'), Argument(type='void', derefcnt=1, name='prev')]), 'insw': Function(type='void', derefcnt=0, name='insw', args=[Argument(type='unsigned', derefcnt=0, name='port'), Argument(type='void', derefcnt=1, name='addr'), Argument(type='unsigned', derefcnt=0, name='count')]), 'inw': Function(type='unsigned', derefcnt=0, name='inw', args=[Argument(type='unsigned', derefcnt=0, name='port')]), 'inw_p': Function(type='unsigned', derefcnt=0, name='inw_p', args=[Argument(type='unsigned', derefcnt=0, name='port')]), 'io_close_fn': Function(type='int', derefcnt=0, name='io_close_fn', args=[Argument(type='void', derefcnt=1, name='cookie')]), 'io_read_fn': Function(type='ssize_t', derefcnt=0, name='io_read_fn', args=[Argument(type='void', derefcnt=1, name='cookie'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes')]), 'io_seek_fn': Function(type='int', derefcnt=0, name='io_seek_fn', args=[Argument(type='void', derefcnt=1, name='cookie'), Argument(type='off64_t', derefcnt=1, name='pos'), Argument(type='int', derefcnt=0, name='w')]), 'io_write_fn': Function(type='ssize_t', derefcnt=0, name='io_write_fn', args=[Argument(type='void', derefcnt=1, name='cookie'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n')]), 'ioctl': Function(type='int', derefcnt=0, name='ioctl', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='unsigned', derefcnt=0, name='request'), Argument(type='int', derefcnt=0, name='vararg')]), 'ioperm': Function(type='int', derefcnt=0, name='ioperm', args=[Argument(type='unsigned', derefcnt=0, name='from'), Argument(type='unsigned', derefcnt=0, name='num'), Argument(type='int', derefcnt=0, name='turn_on')]), 'iopl': Function(type='int', derefcnt=0, name='iopl', args=[Argument(type='int', derefcnt=0, name='level')]), 'iruserok': Function(type='int', derefcnt=0, name='iruserok', args=[Argument(type='uint32_t', derefcnt=0, name='raddr'), Argument(type='int', derefcnt=0, name='suser'), Argument(type='char', derefcnt=1, name='remuser'), Argument(type='char', derefcnt=1, name='locuser')]), 'iruserok_af': Function(type='int', derefcnt=0, name='iruserok_af', args=[Argument(type='void', derefcnt=1, name='raddr'), Argument(type='int', derefcnt=0, name='suser'), Argument(type='char', derefcnt=1, name='remuser'), Argument(type='char', derefcnt=1, name='locuser'), Argument(type='sa_family_t', derefcnt=0, name='af')]), 'isalnum': Function(type='int', derefcnt=0, name='isalnum', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isalnum_l': Function(type='int', derefcnt=0, name='isalnum_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'isalpha': Function(type='int', derefcnt=0, name='isalpha', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isalpha_l': Function(type='int', derefcnt=0, name='isalpha_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'isascii': Function(type='int', derefcnt=0, name='isascii', args=[Argument(type='int', derefcnt=0, name='c')]), 'isastream': Function(type='int', derefcnt=0, name='isastream', args=[Argument(type='int', derefcnt=0, name='fildes')]), 'isatty': Function(type='int', derefcnt=0, name='isatty', args=[Argument(type='int', derefcnt=0, name='fd')]), 'isblank': Function(type='int', derefcnt=0, name='isblank', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isblank_l': Function(type='int', derefcnt=0, name='isblank_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'iscntrl': Function(type='int', derefcnt=0, name='iscntrl', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'iscntrl_l': Function(type='int', derefcnt=0, name='iscntrl_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'isctype': Function(type='int', derefcnt=0, name='isctype', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='int', derefcnt=0, name='mask')]), 'isdigit': Function(type='int', derefcnt=0, name='isdigit', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isdigit_l': Function(type='int', derefcnt=0, name='isdigit_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'isfdtype': Function(type='int', derefcnt=0, name='isfdtype', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='fdtype')]), 'isgraph': Function(type='int', derefcnt=0, name='isgraph', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isgraph_l': Function(type='int', derefcnt=0, name='isgraph_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'isinf': Function(type='int', derefcnt=0, name='isinf', args=[Argument(type='double', derefcnt=0, name='value')]), 'isinff': Function(type='int', derefcnt=0, name='isinff', args=[Argument(type='float', derefcnt=0, name='value')]), 'isinfl': Function(type='int', derefcnt=0, name='isinfl', args=[Argument(type='long', derefcnt=0, name='value')]), 'islower': Function(type='int', derefcnt=0, name='islower', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'islower_l': Function(type='int', derefcnt=0, name='islower_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'isnan': Function(type='int', derefcnt=0, name='isnan', args=[Argument(type='double', derefcnt=0, name='value')]), 'isnanf': Function(type='int', derefcnt=0, name='isnanf', args=[Argument(type='float', derefcnt=0, name='value')]), 'isnanl': Function(type='int', derefcnt=0, name='isnanl', args=[Argument(type='long', derefcnt=0, name='value')]), 'isprint': Function(type='int', derefcnt=0, name='isprint', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isprint_l': Function(type='int', derefcnt=0, name='isprint_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'ispunct': Function(type='int', derefcnt=0, name='ispunct', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'ispunct_l': Function(type='int', derefcnt=0, name='ispunct_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'issignaling': Function(type='int', derefcnt=0, name='issignaling', args=[Argument(type='double', derefcnt=0, name='value')]), 'issignalingf': Function(type='int', derefcnt=0, name='issignalingf', args=[Argument(type='float', derefcnt=0, name='value')]), 'issignalingl': Function(type='int', derefcnt=0, name='issignalingl', args=[Argument(type='long', derefcnt=0, name='value')]), 'isspace': Function(type='int', derefcnt=0, name='isspace', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isspace_l': Function(type='int', derefcnt=0, name='isspace_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'isupper': Function(type='int', derefcnt=0, name='isupper', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isupper_l': Function(type='int', derefcnt=0, name='isupper_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'iswalnum': Function(type='int', derefcnt=0, name='iswalnum', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswalnum_l': Function(type='int', derefcnt=0, name='iswalnum_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswalpha': Function(type='int', derefcnt=0, name='iswalpha', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswalpha_l': Function(type='int', derefcnt=0, name='iswalpha_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswblank': Function(type='int', derefcnt=0, name='iswblank', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswblank_l': Function(type='int', derefcnt=0, name='iswblank_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswcntrl': Function(type='int', derefcnt=0, name='iswcntrl', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswcntrl_l': Function(type='int', derefcnt=0, name='iswcntrl_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswctype': Function(type='int', derefcnt=0, name='iswctype', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='wctype_t', derefcnt=0, name='desc')]), 'iswctype_l': Function(type='int', derefcnt=0, name='iswctype_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='wctype_t', derefcnt=0, name='desc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswdigit': Function(type='int', derefcnt=0, name='iswdigit', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswdigit_l': Function(type='int', derefcnt=0, name='iswdigit_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswgraph': Function(type='int', derefcnt=0, name='iswgraph', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswgraph_l': Function(type='int', derefcnt=0, name='iswgraph_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswlower': Function(type='int', derefcnt=0, name='iswlower', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswlower_l': Function(type='int', derefcnt=0, name='iswlower_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswprint': Function(type='int', derefcnt=0, name='iswprint', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswprint_l': Function(type='int', derefcnt=0, name='iswprint_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswpunct': Function(type='int', derefcnt=0, name='iswpunct', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswpunct_l': Function(type='int', derefcnt=0, name='iswpunct_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswspace': Function(type='int', derefcnt=0, name='iswspace', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswspace_l': Function(type='int', derefcnt=0, name='iswspace_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswupper': Function(type='int', derefcnt=0, name='iswupper', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswupper_l': Function(type='int', derefcnt=0, name='iswupper_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'iswxdigit': Function(type='int', derefcnt=0, name='iswxdigit', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'iswxdigit_l': Function(type='int', derefcnt=0, name='iswxdigit_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'isxdigit': Function(type='int', derefcnt=0, name='isxdigit', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'isxdigit_l': Function(type='int', derefcnt=0, name='isxdigit_l', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='locale_t', derefcnt=0, name='arg1')]), 'j0': Function(type='double', derefcnt=0, name='j0', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'j0f': Function(type='float', derefcnt=0, name='j0f', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'j0l': Function(type='long', derefcnt=0, name='j0l', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'j1': Function(type='double', derefcnt=0, name='j1', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'j1f': Function(type='float', derefcnt=0, name='j1f', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'j1l': Function(type='long', derefcnt=0, name='j1l', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'jn': Function(type='double', derefcnt=0, name='jn', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='double', derefcnt=0, name='arg1')]), 'jnf': Function(type='float', derefcnt=0, name='jnf', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='float', derefcnt=0, name='arg1')]), 'jnl': Function(type='long', derefcnt=0, name='jnl', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='long', derefcnt=0, name='arg1')]), 'jrand48': Function(type='long', derefcnt=0, name='jrand48', args=[Argument(type='unsigned', derefcnt=1, name='xsubi')]), 'jrand48_r': Function(type='int', derefcnt=0, name='jrand48_r', args=[Argument(type='unsigned', derefcnt=1, name='xsubi'), Argument(type='drand48_data', derefcnt=1, name='buffer'), Argument(type='long', derefcnt=1, name='result')]), 'kill': Function(type='int', derefcnt=0, name='kill', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='int', derefcnt=0, name='sig')]), 'killpg': Function(type='int', derefcnt=0, name='killpg', args=[Argument(type='pid_t', derefcnt=0, name='pgrp'), Argument(type='int', derefcnt=0, name='sig')]), 'l64a': Function(type='char', derefcnt=1, name='l64a', args=[Argument(type='long', derefcnt=0, name='n')]), 'la_activity': Function(type='void', derefcnt=0, name='la_activity', args=[Argument(type='uintptr_t', derefcnt=1, name='cookie'), Argument(type='unsigned', derefcnt=0, name='flag')]), 'la_objclose': Function(type='unsigned', derefcnt=0, name='la_objclose', args=[Argument(type='uintptr_t', derefcnt=1, name='cookie')]), 'la_objopen': Function(type='unsigned', derefcnt=0, name='la_objopen', args=[Argument(type='link_map', derefcnt=1, name='map'), Argument(type='Lmid_t', derefcnt=0, name='lmid'), Argument(type='uintptr_t', derefcnt=1, name='cookie')]), 'la_objsearch': Function(type='char', derefcnt=1, name='la_objsearch', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='uintptr_t', derefcnt=1, name='cookie'), Argument(type='unsigned', derefcnt=0, name='flag')]), 'la_preinit': Function(type='void', derefcnt=0, name='la_preinit', args=[Argument(type='uintptr_t', derefcnt=1, name='cookie')]), 'la_symbind32': Function(type='uintptr_t', derefcnt=0, name='la_symbind32', args=[Argument(type='Elf32_Sym', derefcnt=1, name='sym'), Argument(type='unsigned', derefcnt=0, name='ndx'), Argument(type='uintptr_t', derefcnt=1, name='refcook'), Argument(type='uintptr_t', derefcnt=1, name='defcook'), Argument(type='unsigned', derefcnt=1, name='flags'), Argument(type='char', derefcnt=1, name='symname')]), 'la_symbind64': Function(type='uintptr_t', derefcnt=0, name='la_symbind64', args=[Argument(type='Elf64_Sym', derefcnt=1, name='sym'), Argument(type='unsigned', derefcnt=0, name='ndx'), Argument(type='uintptr_t', derefcnt=1, name='refcook'), Argument(type='uintptr_t', derefcnt=1, name='defcook'), Argument(type='unsigned', derefcnt=1, name='flags'), Argument(type='char', derefcnt=1, name='symname')]), 'la_version': Function(type='unsigned', derefcnt=0, name='la_version', args=[Argument(type='unsigned', derefcnt=0, name='version')]), 'la_x32_gnu_pltenter': Function(type='Elf32_Addr', derefcnt=0, name='la_x32_gnu_pltenter', args=[Argument(type='Elf32_Sym', derefcnt=1, name='sym'), Argument(type='unsigned', derefcnt=0, name='ndx'), Argument(type='uintptr_t', derefcnt=1, name='refcook'), Argument(type='uintptr_t', derefcnt=1, name='defcook'), Argument(type='La_x86_64_regs', derefcnt=1, name='regs'), Argument(type='unsigned', derefcnt=1, name='flags'), Argument(type='char', derefcnt=1, name='symname'), Argument(type='long', derefcnt=1, name='framesizep')]), 'la_x32_gnu_pltexit': Function(type='unsigned', derefcnt=0, name='la_x32_gnu_pltexit', args=[Argument(type='Elf32_Sym', derefcnt=1, name='sym'), Argument(type='unsigned', derefcnt=0, name='ndx'), Argument(type='uintptr_t', derefcnt=1, name='refcook'), Argument(type='uintptr_t', derefcnt=1, name='defcook'), Argument(type='La_x86_64_regs', derefcnt=1, name='inregs'), Argument(type='La_x86_64_retval', derefcnt=1, name='outregs'), Argument(type='char', derefcnt=1, name='symname')]), 'la_x86_64_gnu_pltenter': Function(type='Elf64_Addr', derefcnt=0, name='la_x86_64_gnu_pltenter', args=[Argument(type='Elf64_Sym', derefcnt=1, name='sym'), Argument(type='unsigned', derefcnt=0, name='ndx'), Argument(type='uintptr_t', derefcnt=1, name='refcook'), Argument(type='uintptr_t', derefcnt=1, name='defcook'), Argument(type='La_x86_64_regs', derefcnt=1, name='regs'), Argument(type='unsigned', derefcnt=1, name='flags'), Argument(type='char', derefcnt=1, name='symname'), Argument(type='long', derefcnt=1, name='framesizep')]), 'la_x86_64_gnu_pltexit': Function(type='unsigned', derefcnt=0, name='la_x86_64_gnu_pltexit', args=[Argument(type='Elf64_Sym', derefcnt=1, name='sym'), Argument(type='unsigned', derefcnt=0, name='ndx'), Argument(type='uintptr_t', derefcnt=1, name='refcook'), Argument(type='uintptr_t', derefcnt=1, name='defcook'), Argument(type='La_x86_64_regs', derefcnt=1, name='inregs'), Argument(type='La_x86_64_retval', derefcnt=1, name='outregs'), Argument(type='char', derefcnt=1, name='symname')]), 'labs': Function(type='long', derefcnt=0, name='labs', args=[Argument(type='long', derefcnt=0, name='x')]), 'lchmod': Function(type='int', derefcnt=0, name='lchmod', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'lchown': Function(type='int', derefcnt=0, name='lchown', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='uid_t', derefcnt=0, name='owner'), Argument(type='gid_t', derefcnt=0, name='group')]), 'lckpwdf': Function(type='int', derefcnt=0, name='lckpwdf', args=[]), 'lcong48': Function(type='void', derefcnt=0, name='lcong48', args=[Argument(type='unsigned', derefcnt=1, name='param')]), 'lcong48_r': Function(type='int', derefcnt=0, name='lcong48_r', args=[Argument(type='unsigned', derefcnt=1, name='param'), Argument(type='drand48_data', derefcnt=1, name='buffer')]), 'ldexp': Function(type='double', derefcnt=0, name='ldexp', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='int', derefcnt=0, name='exponent')]), 'ldexpf': Function(type='float', derefcnt=0, name='ldexpf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='int', derefcnt=0, name='exponent')]), 'ldexpl': Function(type='long', derefcnt=0, name='ldexpl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='int', derefcnt=0, name='exponent')]), 'ldiv': Function(type='ldiv_t', derefcnt=0, name='ldiv', args=[Argument(type='long', derefcnt=0, name='numer'), Argument(type='long', derefcnt=0, name='denom')]), 'lfind': Function(type='void', derefcnt=1, name='lfind', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=1, name='base'), Argument(type='size_t', derefcnt=1, name='nmemb'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='compar_fn_t', derefcnt=0, name='compar')]), 'lgamma': Function(type='double', derefcnt=0, name='lgamma', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'lgamma_r': Function(type='double', derefcnt=0, name='lgamma_r', args=[Argument(type='double', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=1, name='signgamp')]), 'lgammaf': Function(type='float', derefcnt=0, name='lgammaf', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'lgammaf_r': Function(type='float', derefcnt=0, name='lgammaf_r', args=[Argument(type='float', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=1, name='signgamp')]), 'lgammal': Function(type='long', derefcnt=0, name='lgammal', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'lgammal_r': Function(type='long', derefcnt=0, name='lgammal_r', args=[Argument(type='long', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=1, name='signgamp')]), 'lh_delete': Function(type='void', derefcnt=1, name='lh_delete', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='void', derefcnt=1, name='data')]), 'lh_doall': Function(type='void', derefcnt=0, name='lh_doall', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='LHASH_DOALL_FN_TYPE', derefcnt=0, name='func')]), 'lh_doall_arg': Function(type='void', derefcnt=0, name='lh_doall_arg', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='LHASH_DOALL_ARG_FN_TYPE', derefcnt=0, name='func'), Argument(type='void', derefcnt=1, name='arg')]), 'lh_free': Function(type='void', derefcnt=0, name='lh_free', args=[Argument(type='LHASH', derefcnt=1, name='lh')]), 'lh_insert': Function(type='void', derefcnt=1, name='lh_insert', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='void', derefcnt=1, name='data')]), 'lh_new': Function(type='LHASH', derefcnt=1, name='lh_new', args=[Argument(type='LHASH_HASH_FN_TYPE', derefcnt=0, name='h'), Argument(type='LHASH_COMP_FN_TYPE', derefcnt=0, name='c')]), 'lh_node_stats': Function(type='void', derefcnt=0, name='lh_node_stats', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='FILE', derefcnt=1, name='out')]), 'lh_node_stats_bio': Function(type='void', derefcnt=0, name='lh_node_stats_bio', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='BIO', derefcnt=1, name='out')]), 'lh_node_usage_stats': Function(type='void', derefcnt=0, name='lh_node_usage_stats', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='FILE', derefcnt=1, name='out')]), 'lh_node_usage_stats_bio': Function(type='void', derefcnt=0, name='lh_node_usage_stats_bio', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='BIO', derefcnt=1, name='out')]), 'lh_num_items': Function(type='unsigned', derefcnt=0, name='lh_num_items', args=[Argument(type='LHASH', derefcnt=1, name='lh')]), 'lh_retrieve': Function(type='void', derefcnt=1, name='lh_retrieve', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='void', derefcnt=1, name='data')]), 'lh_stats': Function(type='void', derefcnt=0, name='lh_stats', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='FILE', derefcnt=1, name='out')]), 'lh_stats_bio': Function(type='void', derefcnt=0, name='lh_stats_bio', args=[Argument(type='LHASH', derefcnt=1, name='lh'), Argument(type='BIO', derefcnt=1, name='out')]), 'lh_strhash': Function(type='unsigned', derefcnt=0, name='lh_strhash', args=[Argument(type='char', derefcnt=1, name='c')]), 'libc_current_sigrtmax': Function(type='int', derefcnt=0, name='libc_current_sigrtmax', args=[]), 'libc_current_sigrtmin': Function(type='int', derefcnt=0, name='libc_current_sigrtmin', args=[]), 'link': Function(type='int', derefcnt=0, name='link', args=[Argument(type='char', derefcnt=1, name='from'), Argument(type='char', derefcnt=1, name='to')]), 'linkat': Function(type='int', derefcnt=0, name='linkat', args=[Argument(type='int', derefcnt=0, name='fromfd'), Argument(type='char', derefcnt=1, name='from'), Argument(type='int', derefcnt=0, name='tofd'), Argument(type='char', derefcnt=1, name='to'), Argument(type='int', derefcnt=0, name='flags')]), 'lio_listio': Function(type='int', derefcnt=0, name='lio_listio', args=[Argument(type='int', derefcnt=0, name='mode'), Argument(type='aiocb', derefcnt=2, name='list'), Argument(type='int', derefcnt=0, name='nent'), Argument(type='sigevent', derefcnt=1, name='sig')]), 'lio_listio64': Function(type='int', derefcnt=0, name='lio_listio64', args=[Argument(type='int', derefcnt=0, name='mode'), Argument(type='aiocb64', derefcnt=2, name='list'), Argument(type='int', derefcnt=0, name='nent'), Argument(type='sigevent', derefcnt=1, name='sig')]), 'listen': Function(type='int', derefcnt=0, name='listen', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='n')]), 'llabs': Function(type='long', derefcnt=0, name='llabs', args=[Argument(type='long', derefcnt=0, name='x')]), 'lldiv': Function(type='lldiv_t', derefcnt=0, name='lldiv', args=[Argument(type='long', derefcnt=0, name='numer'), Argument(type='long', derefcnt=0, name='denom')]), 'llrint': Function(type='long', derefcnt=0, name='llrint', args=[Argument(type='double', derefcnt=0, name='x')]), 'llrintf': Function(type='long', derefcnt=0, name='llrintf', args=[Argument(type='float', derefcnt=0, name='x')]), 'llrintl': Function(type='long', derefcnt=0, name='llrintl', args=[Argument(type='long', derefcnt=0, name='x')]), 'llround': Function(type='long', derefcnt=0, name='llround', args=[Argument(type='double', derefcnt=0, name='x')]), 'llroundf': Function(type='long', derefcnt=0, name='llroundf', args=[Argument(type='float', derefcnt=0, name='x')]), 'llroundl': Function(type='long', derefcnt=0, name='llroundl', args=[Argument(type='long', derefcnt=0, name='x')]), 'loc_aton': Function(type='int', derefcnt=0, name='loc_aton', args=[Argument(type='char', derefcnt=1, name='ascii'), Argument(type='u_char', derefcnt=1, name='binary')]), 'loc_ntoa': Function(type='char', derefcnt=1, name='loc_ntoa', args=[Argument(type='u_char', derefcnt=1, name='binary'), Argument(type='char', derefcnt=1, name='ascii')]), 'localeconv': Function(type='lconv', derefcnt=1, name='localeconv', args=[]), 'localtime': Function(type='tm', derefcnt=1, name='localtime', args=[Argument(type='time_t', derefcnt=1, name='timer')]), 'localtime_r': Function(type='tm', derefcnt=1, name='localtime_r', args=[Argument(type='time_t', derefcnt=1, name='timer'), Argument(type='tm', derefcnt=1, name='tp')]), 'lockf': Function(type='int', derefcnt=0, name='lockf', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='off_t', derefcnt=0, name='len')]), 'lockf64': Function(type='int', derefcnt=0, name='lockf64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='off64_t', derefcnt=0, name='len')]), 'log': Function(type='double', derefcnt=0, name='log', args=[Argument(type='double', derefcnt=0, name='x')]), 'log10': Function(type='double', derefcnt=0, name='log10', args=[Argument(type='double', derefcnt=0, name='x')]), 'log10f': Function(type='float', derefcnt=0, name='log10f', args=[Argument(type='float', derefcnt=0, name='x')]), 'log10l': Function(type='long', derefcnt=0, name='log10l', args=[Argument(type='long', derefcnt=0, name='x')]), 'log1p': Function(type='double', derefcnt=0, name='log1p', args=[Argument(type='double', derefcnt=0, name='x')]), 'log1pf': Function(type='float', derefcnt=0, name='log1pf', args=[Argument(type='float', derefcnt=0, name='x')]), 'log1pl': Function(type='long', derefcnt=0, name='log1pl', args=[Argument(type='long', derefcnt=0, name='x')]), 'log2': Function(type='double', derefcnt=0, name='log2', args=[Argument(type='double', derefcnt=0, name='x')]), 'log2f': Function(type='float', derefcnt=0, name='log2f', args=[Argument(type='float', derefcnt=0, name='x')]), 'log2l': Function(type='long', derefcnt=0, name='log2l', args=[Argument(type='long', derefcnt=0, name='x')]), 'logb': Function(type='double', derefcnt=0, name='logb', args=[Argument(type='double', derefcnt=0, name='x')]), 'logbf': Function(type='float', derefcnt=0, name='logbf', args=[Argument(type='float', derefcnt=0, name='x')]), 'logbl': Function(type='long', derefcnt=0, name='logbl', args=[Argument(type='long', derefcnt=0, name='x')]), 'logf': Function(type='float', derefcnt=0, name='logf', args=[Argument(type='float', derefcnt=0, name='x')]), 'login': Function(type='void', derefcnt=0, name='login', args=[Argument(type='utmp', derefcnt=1, name='entry')]), 'login_tty': Function(type='int', derefcnt=0, name='login_tty', args=[Argument(type='int', derefcnt=0, name='fd')]), 'logl': Function(type='long', derefcnt=0, name='logl', args=[Argument(type='long', derefcnt=0, name='x')]), 'logout': Function(type='int', derefcnt=0, name='logout', args=[Argument(type='char', derefcnt=1, name='ut_line')]), 'logwtmp': Function(type='void', derefcnt=0, name='logwtmp', args=[Argument(type='char', derefcnt=1, name='ut_line'), Argument(type='char', derefcnt=1, name='ut_name'), Argument(type='char', derefcnt=1, name='ut_host')]), 'longjmp': Function(type='void', derefcnt=0, name='longjmp', args=[Argument(type='jmp_buf_tag', derefcnt=1, name='env'), Argument(type='int', derefcnt=0, name='val')]), 'lookup_certs': Function(type='stack_st_X509', derefcnt=1, name='lookup_certs', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509_NAME', derefcnt=1, name='nm')]), 'lookup_crls': Function(type='stack_st_X509_CRL', derefcnt=1, name='lookup_crls', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx'), Argument(type='X509_NAME', derefcnt=1, name='nm')]), 'lrand48': Function(type='long', derefcnt=0, name='lrand48', args=[]), 'lrand48_r': Function(type='int', derefcnt=0, name='lrand48_r', args=[Argument(type='drand48_data', derefcnt=1, name='buffer'), Argument(type='long', derefcnt=1, name='result')]), 'lrint': Function(type='long', derefcnt=0, name='lrint', args=[Argument(type='double', derefcnt=0, name='x')]), 'lrintf': Function(type='long', derefcnt=0, name='lrintf', args=[Argument(type='float', derefcnt=0, name='x')]), 'lrintl': Function(type='long', derefcnt=0, name='lrintl', args=[Argument(type='long', derefcnt=0, name='x')]), 'lround': Function(type='long', derefcnt=0, name='lround', args=[Argument(type='double', derefcnt=0, name='x')]), 'lroundf': Function(type='long', derefcnt=0, name='lroundf', args=[Argument(type='float', derefcnt=0, name='x')]), 'lroundl': Function(type='long', derefcnt=0, name='lroundl', args=[Argument(type='long', derefcnt=0, name='x')]), 'lsearch': Function(type='void', derefcnt=1, name='lsearch', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=1, name='base'), Argument(type='size_t', derefcnt=1, name='nmemb'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='compar_fn_t', derefcnt=0, name='compar')]), 'lseek': Function(type='off_t', derefcnt=0, name='lseek', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off_t', derefcnt=0, name='offset'), Argument(type='int', derefcnt=0, name='whence')]), 'lseek64': Function(type='off64_t', derefcnt=0, name='lseek64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off64_t', derefcnt=0, name='offset'), Argument(type='int', derefcnt=0, name='whence')]), 'lstat': Function(type='int', derefcnt=0, name='lstat', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='stat', derefcnt=1, name='buf')]), 'lstat64': Function(type='int', derefcnt=0, name='lstat64', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='stat64', derefcnt=1, name='buf')]), 'lutimes': Function(type='int', derefcnt=0, name='lutimes', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='timeval', derefcnt=1, name='tvp')]), 'lxstat': Function(type='int', derefcnt=0, name='lxstat', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat', derefcnt=1, name='stat_buf')]), 'lxstat64': Function(type='int', derefcnt=0, name='lxstat64', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat64', derefcnt=1, name='stat_buf')]), 'lzma_alone_decoder': Function(type='lzma_ret', derefcnt=0, name='lzma_alone_decoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='uint64_t', derefcnt=0, name='memlimit')]), 'lzma_alone_encoder': Function(type='lzma_ret', derefcnt=0, name='lzma_alone_encoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_options_lzma', derefcnt=1, name='options')]), 'lzma_auto_decoder': Function(type='lzma_ret', derefcnt=0, name='lzma_auto_decoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='uint64_t', derefcnt=0, name='memlimit'), Argument(type='uint32_t', derefcnt=0, name='flags')]), 'lzma_block_buffer_bound': Function(type='size_t', derefcnt=0, name='lzma_block_buffer_bound', args=[Argument(type='size_t', derefcnt=0, name='uncompressed_size')]), 'lzma_block_buffer_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_block_buffer_decode', args=[Argument(type='lzma_block', derefcnt=1, name='block'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=1, name='in_pos'), Argument(type='size_t', derefcnt=0, name='in_size'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_block_buffer_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_block_buffer_encode', args=[Argument(type='lzma_block', derefcnt=1, name='block'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='in_size'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_block_compressed_size': Function(type='lzma_ret', derefcnt=0, name='lzma_block_compressed_size', args=[Argument(type='lzma_block', derefcnt=1, name='block'), Argument(type='lzma_vli', derefcnt=0, name='unpadded_size')]), 'lzma_block_decoder': Function(type='lzma_ret', derefcnt=0, name='lzma_block_decoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_block', derefcnt=1, name='block')]), 'lzma_block_encoder': Function(type='lzma_ret', derefcnt=0, name='lzma_block_encoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_block', derefcnt=1, name='block')]), 'lzma_block_header_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_block_header_decode', args=[Argument(type='lzma_block', derefcnt=1, name='block'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in')]), 'lzma_block_header_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_block_header_encode', args=[Argument(type='lzma_block', derefcnt=1, name='block'), Argument(type='uint8_t', derefcnt=1, name='out')]), 'lzma_block_header_size': Function(type='lzma_ret', derefcnt=0, name='lzma_block_header_size', args=[Argument(type='lzma_block', derefcnt=1, name='block')]), 'lzma_block_total_size': Function(type='lzma_vli', derefcnt=0, name='lzma_block_total_size', args=[Argument(type='lzma_block', derefcnt=1, name='block')]), 'lzma_block_unpadded_size': Function(type='lzma_vli', derefcnt=0, name='lzma_block_unpadded_size', args=[Argument(type='lzma_block', derefcnt=1, name='block')]), 'lzma_check_is_supported': Function(type='lzma_bool', derefcnt=0, name='lzma_check_is_supported', args=[Argument(type='lzma_check', derefcnt=0, name='check')]), 'lzma_check_size': Function(type='uint32_t', derefcnt=0, name='lzma_check_size', args=[Argument(type='lzma_check', derefcnt=0, name='check')]), 'lzma_code': Function(type='lzma_ret', derefcnt=0, name='lzma_code', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_action', derefcnt=0, name='action')]), 'lzma_crc32': Function(type='uint32_t', derefcnt=0, name='lzma_crc32', args=[Argument(type='uint8_t', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='uint32_t', derefcnt=0, name='crc')]), 'lzma_crc64': Function(type='uint64_t', derefcnt=0, name='lzma_crc64', args=[Argument(type='uint8_t', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='uint64_t', derefcnt=0, name='crc')]), 'lzma_easy_buffer_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_easy_buffer_encode', args=[Argument(type='uint32_t', derefcnt=0, name='preset'), Argument(type='lzma_check', derefcnt=0, name='check'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='in_size'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_easy_decoder_memusage': Function(type='uint64_t', derefcnt=0, name='lzma_easy_decoder_memusage', args=[Argument(type='uint32_t', derefcnt=0, name='preset')]), 'lzma_easy_encoder': Function(type='lzma_ret', derefcnt=0, name='lzma_easy_encoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='uint32_t', derefcnt=0, name='preset'), Argument(type='lzma_check', derefcnt=0, name='check')]), 'lzma_easy_encoder_memusage': Function(type='uint64_t', derefcnt=0, name='lzma_easy_encoder_memusage', args=[Argument(type='uint32_t', derefcnt=0, name='preset')]), 'lzma_end': Function(type='void', derefcnt=0, name='lzma_end', args=[Argument(type='lzma_stream', derefcnt=1, name='strm')]), 'lzma_filter_decoder_is_supported': Function(type='lzma_bool', derefcnt=0, name='lzma_filter_decoder_is_supported', args=[Argument(type='lzma_vli', derefcnt=0, name='id')]), 'lzma_filter_encoder_is_supported': Function(type='lzma_bool', derefcnt=0, name='lzma_filter_encoder_is_supported', args=[Argument(type='lzma_vli', derefcnt=0, name='id')]), 'lzma_filter_flags_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_filter_flags_decode', args=[Argument(type='lzma_filter', derefcnt=1, name='filter'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=1, name='in_pos'), Argument(type='size_t', derefcnt=0, name='in_size')]), 'lzma_filter_flags_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_filter_flags_encode', args=[Argument(type='lzma_filter', derefcnt=1, name='filter'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_filter_flags_size': Function(type='lzma_ret', derefcnt=0, name='lzma_filter_flags_size', args=[Argument(type='uint32_t', derefcnt=1, name='size'), Argument(type='lzma_filter', derefcnt=1, name='filter')]), 'lzma_filters_copy': Function(type='lzma_ret', derefcnt=0, name='lzma_filters_copy', args=[Argument(type='lzma_filter', derefcnt=1, name='src'), Argument(type='lzma_filter', derefcnt=1, name='dest'), Argument(type='lzma_allocator', derefcnt=1, name='allocator')]), 'lzma_filters_update': Function(type='lzma_ret', derefcnt=0, name='lzma_filters_update', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_filter', derefcnt=1, name='filters')]), 'lzma_get_check': Function(type='lzma_check', derefcnt=0, name='lzma_get_check', args=[Argument(type='lzma_stream', derefcnt=1, name='strm')]), 'lzma_index_append': Function(type='lzma_ret', derefcnt=0, name='lzma_index_append', args=[Argument(type='lzma_index', derefcnt=1, name='i'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='lzma_vli', derefcnt=0, name='unpadded_size'), Argument(type='lzma_vli', derefcnt=0, name='uncompressed_size')]), 'lzma_index_block_count': Function(type='lzma_vli', derefcnt=0, name='lzma_index_block_count', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_buffer_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_index_buffer_decode', args=[Argument(type='lzma_index', derefcnt=2, name='i'), Argument(type='uint64_t', derefcnt=1, name='memlimit'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=1, name='in_pos'), Argument(type='size_t', derefcnt=0, name='in_size')]), 'lzma_index_buffer_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_index_buffer_encode', args=[Argument(type='lzma_index', derefcnt=1, name='i'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_index_cat': Function(type='lzma_ret', derefcnt=0, name='lzma_index_cat', args=[Argument(type='lzma_index', derefcnt=1, name='dest'), Argument(type='lzma_index', derefcnt=1, name='src'), Argument(type='lzma_allocator', derefcnt=1, name='allocator')]), 'lzma_index_checks': Function(type='uint32_t', derefcnt=0, name='lzma_index_checks', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_decoder': Function(type='lzma_ret', derefcnt=0, name='lzma_index_decoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_index', derefcnt=2, name='i'), Argument(type='uint64_t', derefcnt=0, name='memlimit')]), 'lzma_index_dup': Function(type='lzma_index', derefcnt=1, name='lzma_index_dup', args=[Argument(type='lzma_index', derefcnt=1, name='i'), Argument(type='lzma_allocator', derefcnt=1, name='allocator')]), 'lzma_index_encoder': Function(type='lzma_ret', derefcnt=0, name='lzma_index_encoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_end': Function(type='void', derefcnt=0, name='lzma_index_end', args=[Argument(type='lzma_index', derefcnt=1, name='i'), Argument(type='lzma_allocator', derefcnt=1, name='allocator')]), 'lzma_index_file_size': Function(type='lzma_vli', derefcnt=0, name='lzma_index_file_size', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_hash_append': Function(type='lzma_ret', derefcnt=0, name='lzma_index_hash_append', args=[Argument(type='lzma_index_hash', derefcnt=1, name='index_hash'), Argument(type='lzma_vli', derefcnt=0, name='unpadded_size'), Argument(type='lzma_vli', derefcnt=0, name='uncompressed_size')]), 'lzma_index_hash_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_index_hash_decode', args=[Argument(type='lzma_index_hash', derefcnt=1, name='index_hash'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=1, name='in_pos'), Argument(type='size_t', derefcnt=0, name='in_size')]), 'lzma_index_hash_end': Function(type='void', derefcnt=0, name='lzma_index_hash_end', args=[Argument(type='lzma_index_hash', derefcnt=1, name='index_hash'), Argument(type='lzma_allocator', derefcnt=1, name='allocator')]), 'lzma_index_hash_init': Function(type='lzma_index_hash', derefcnt=1, name='lzma_index_hash_init', args=[Argument(type='lzma_index_hash', derefcnt=1, name='index_hash'), Argument(type='lzma_allocator', derefcnt=1, name='allocator')]), 'lzma_index_hash_size': Function(type='lzma_vli', derefcnt=0, name='lzma_index_hash_size', args=[Argument(type='lzma_index_hash', derefcnt=1, name='index_hash')]), 'lzma_index_init': Function(type='lzma_index', derefcnt=1, name='lzma_index_init', args=[Argument(type='lzma_allocator', derefcnt=1, name='allocator')]), 'lzma_index_iter_init': Function(type='void', derefcnt=0, name='lzma_index_iter_init', args=[Argument(type='lzma_index_iter', derefcnt=1, name='iter'), Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_iter_locate': Function(type='lzma_bool', derefcnt=0, name='lzma_index_iter_locate', args=[Argument(type='lzma_index_iter', derefcnt=1, name='iter'), Argument(type='lzma_vli', derefcnt=0, name='target')]), 'lzma_index_iter_next': Function(type='lzma_bool', derefcnt=0, name='lzma_index_iter_next', args=[Argument(type='lzma_index_iter', derefcnt=1, name='iter'), Argument(type='lzma_index_iter_mode', derefcnt=0, name='mode')]), 'lzma_index_iter_rewind': Function(type='void', derefcnt=0, name='lzma_index_iter_rewind', args=[Argument(type='lzma_index_iter', derefcnt=1, name='iter')]), 'lzma_index_memusage': Function(type='uint64_t', derefcnt=0, name='lzma_index_memusage', args=[Argument(type='lzma_vli', derefcnt=0, name='streams'), Argument(type='lzma_vli', derefcnt=0, name='blocks')]), 'lzma_index_memused': Function(type='uint64_t', derefcnt=0, name='lzma_index_memused', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_size': Function(type='lzma_vli', derefcnt=0, name='lzma_index_size', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_stream_count': Function(type='lzma_vli', derefcnt=0, name='lzma_index_stream_count', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_stream_flags': Function(type='lzma_ret', derefcnt=0, name='lzma_index_stream_flags', args=[Argument(type='lzma_index', derefcnt=1, name='i'), Argument(type='lzma_stream_flags', derefcnt=1, name='stream_flags')]), 'lzma_index_stream_padding': Function(type='lzma_ret', derefcnt=0, name='lzma_index_stream_padding', args=[Argument(type='lzma_index', derefcnt=1, name='i'), Argument(type='lzma_vli', derefcnt=0, name='stream_padding')]), 'lzma_index_stream_size': Function(type='lzma_vli', derefcnt=0, name='lzma_index_stream_size', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_total_size': Function(type='lzma_vli', derefcnt=0, name='lzma_index_total_size', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_index_uncompressed_size': Function(type='lzma_vli', derefcnt=0, name='lzma_index_uncompressed_size', args=[Argument(type='lzma_index', derefcnt=1, name='i')]), 'lzma_lzma_preset': Function(type='lzma_bool', derefcnt=0, name='lzma_lzma_preset', args=[Argument(type='lzma_options_lzma', derefcnt=1, name='options'), Argument(type='uint32_t', derefcnt=0, name='preset')]), 'lzma_memlimit_get': Function(type='uint64_t', derefcnt=0, name='lzma_memlimit_get', args=[Argument(type='lzma_stream', derefcnt=1, name='strm')]), 'lzma_memlimit_set': Function(type='lzma_ret', derefcnt=0, name='lzma_memlimit_set', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='uint64_t', derefcnt=0, name='memlimit')]), 'lzma_memusage': Function(type='uint64_t', derefcnt=0, name='lzma_memusage', args=[Argument(type='lzma_stream', derefcnt=1, name='strm')]), 'lzma_mf_is_supported': Function(type='lzma_bool', derefcnt=0, name='lzma_mf_is_supported', args=[Argument(type='lzma_match_finder', derefcnt=0, name='match_finder')]), 'lzma_mode_is_supported': Function(type='lzma_bool', derefcnt=0, name='lzma_mode_is_supported', args=[Argument(type='lzma_mode', derefcnt=0, name='mode')]), 'lzma_physmem': Function(type='uint64_t', derefcnt=0, name='lzma_physmem', args=[]), 'lzma_properties_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_properties_decode', args=[Argument(type='lzma_filter', derefcnt=1, name='filter'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='props'), Argument(type='size_t', derefcnt=0, name='props_size')]), 'lzma_properties_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_properties_encode', args=[Argument(type='lzma_filter', derefcnt=1, name='filter'), Argument(type='uint8_t', derefcnt=1, name='props')]), 'lzma_properties_size': Function(type='lzma_ret', derefcnt=0, name='lzma_properties_size', args=[Argument(type='uint32_t', derefcnt=1, name='size'), Argument(type='lzma_filter', derefcnt=1, name='filter')]), 'lzma_raw_buffer_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_raw_buffer_decode', args=[Argument(type='lzma_filter', derefcnt=1, name='filters'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=1, name='in_pos'), Argument(type='size_t', derefcnt=0, name='in_size'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_raw_buffer_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_raw_buffer_encode', args=[Argument(type='lzma_filter', derefcnt=1, name='filters'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='in_size'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_raw_decoder': Function(type='lzma_ret', derefcnt=0, name='lzma_raw_decoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_filter', derefcnt=1, name='filters')]), 'lzma_raw_decoder_memusage': Function(type='uint64_t', derefcnt=0, name='lzma_raw_decoder_memusage', args=[Argument(type='lzma_filter', derefcnt=1, name='filters')]), 'lzma_raw_encoder': Function(type='lzma_ret', derefcnt=0, name='lzma_raw_encoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_filter', derefcnt=1, name='filters')]), 'lzma_raw_encoder_memusage': Function(type='uint64_t', derefcnt=0, name='lzma_raw_encoder_memusage', args=[Argument(type='lzma_filter', derefcnt=1, name='filters')]), 'lzma_stream_buffer_bound': Function(type='size_t', derefcnt=0, name='lzma_stream_buffer_bound', args=[Argument(type='size_t', derefcnt=0, name='uncompressed_size')]), 'lzma_stream_buffer_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_buffer_decode', args=[Argument(type='uint64_t', derefcnt=1, name='memlimit'), Argument(type='uint32_t', derefcnt=0, name='flags'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=1, name='in_pos'), Argument(type='size_t', derefcnt=0, name='in_size'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_stream_buffer_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_buffer_encode', args=[Argument(type='lzma_filter', derefcnt=1, name='filters'), Argument(type='lzma_check', derefcnt=0, name='check'), Argument(type='lzma_allocator', derefcnt=1, name='allocator'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=0, name='in_size'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_stream_decoder': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_decoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='uint64_t', derefcnt=0, name='memlimit'), Argument(type='uint32_t', derefcnt=0, name='flags')]), 'lzma_stream_encoder': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_encoder', args=[Argument(type='lzma_stream', derefcnt=1, name='strm'), Argument(type='lzma_filter', derefcnt=1, name='filters'), Argument(type='lzma_check', derefcnt=0, name='check')]), 'lzma_stream_flags_compare': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_flags_compare', args=[Argument(type='lzma_stream_flags', derefcnt=1, name='a'), Argument(type='lzma_stream_flags', derefcnt=1, name='b')]), 'lzma_stream_footer_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_footer_decode', args=[Argument(type='lzma_stream_flags', derefcnt=1, name='options'), Argument(type='uint8_t', derefcnt=1, name='in')]), 'lzma_stream_footer_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_footer_encode', args=[Argument(type='lzma_stream_flags', derefcnt=1, name='options'), Argument(type='uint8_t', derefcnt=1, name='out')]), 'lzma_stream_header_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_header_decode', args=[Argument(type='lzma_stream_flags', derefcnt=1, name='options'), Argument(type='uint8_t', derefcnt=1, name='in')]), 'lzma_stream_header_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_stream_header_encode', args=[Argument(type='lzma_stream_flags', derefcnt=1, name='options'), Argument(type='uint8_t', derefcnt=1, name='out')]), 'lzma_version_number': Function(type='uint32_t', derefcnt=0, name='lzma_version_number', args=[]), 'lzma_version_string': Function(type='char', derefcnt=1, name='lzma_version_string', args=[]), 'lzma_vli_decode': Function(type='lzma_ret', derefcnt=0, name='lzma_vli_decode', args=[Argument(type='lzma_vli', derefcnt=1, name='vli'), Argument(type='size_t', derefcnt=1, name='vli_pos'), Argument(type='uint8_t', derefcnt=1, name='in'), Argument(type='size_t', derefcnt=1, name='in_pos'), Argument(type='size_t', derefcnt=0, name='in_size')]), 'lzma_vli_encode': Function(type='lzma_ret', derefcnt=0, name='lzma_vli_encode', args=[Argument(type='lzma_vli', derefcnt=0, name='vli'), Argument(type='size_t', derefcnt=1, name='vli_pos'), Argument(type='uint8_t', derefcnt=1, name='out'), Argument(type='size_t', derefcnt=1, name='out_pos'), Argument(type='size_t', derefcnt=0, name='out_size')]), 'lzma_vli_size': Function(type='uint32_t', derefcnt=0, name='lzma_vli_size', args=[Argument(type='lzma_vli', derefcnt=0, name='vli')]), 'madvise': Function(type='int', derefcnt=0, name='madvise', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='advice')]), 'makecontext': Function(type='void', derefcnt=0, name='makecontext', args=[Argument(type='ucontext_t', derefcnt=1, name='ucp'), Argument(type='void', derefcnt=0, name='func'), Argument(type='int', derefcnt=0, name='argc'), Argument(type='int', derefcnt=0, name='vararg')]), 'mallinfo': Function(type='mallinfo', derefcnt=0, name='mallinfo', args=[]), 'malloc': Function(type='void', derefcnt=1, name='malloc', args=[Argument(type='size_t', derefcnt=0, name='size')]), 'malloc_check_init': Function(type='void', derefcnt=0, name='malloc_check_init', args=[]), 'malloc_get_state': Function(type='void', derefcnt=1, name='malloc_get_state', args=[]), 'malloc_hook': Function(type='void', derefcnt=1, name='malloc_hook', args=[Argument(type='size_t', derefcnt=0, name='size'), Argument(type='void', derefcnt=1, name='arg1')]), 'malloc_info': Function(type='int', derefcnt=0, name='malloc_info', args=[Argument(type='int', derefcnt=0, name='options'), Argument(type='FILE', derefcnt=1, name='fp')]), 'malloc_initialize_hook': Function(type='void', derefcnt=0, name='malloc_initialize_hook', args=[]), 'malloc_set_state': Function(type='int', derefcnt=0, name='malloc_set_state', args=[Argument(type='void', derefcnt=1, name='ptr')]), 'malloc_stats': Function(type='void', derefcnt=0, name='malloc_stats', args=[]), 'malloc_trim': Function(type='int', derefcnt=0, name='malloc_trim', args=[Argument(type='size_t', derefcnt=0, name='pad')]), 'malloc_usable_size': Function(type='size_t', derefcnt=0, name='malloc_usable_size', args=[Argument(type='void', derefcnt=1, name='ptr')]), 'mallopt': Function(type='int', derefcnt=0, name='mallopt', args=[Argument(type='int', derefcnt=0, name='param'), Argument(type='int', derefcnt=0, name='val')]), 'matherr': Function(type='int', derefcnt=0, name='matherr', args=[Argument(type='exception', derefcnt=1, name='exc')]), 'mblen': Function(type='int', derefcnt=0, name='mblen', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n')]), 'mbrlen': Function(type='size_t', derefcnt=0, name='mbrlen', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='mbstate_t', derefcnt=1, name='ps')]), 'mbrtowc': Function(type='size_t', derefcnt=0, name='mbrtowc', args=[Argument(type='wchar_t', derefcnt=1, name='pwc'), Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='mbstate_t', derefcnt=1, name='p')]), 'mbsinit': Function(type='int', derefcnt=0, name='mbsinit', args=[Argument(type='mbstate_t', derefcnt=1, name='ps')]), 'mbsnrtowcs': Function(type='size_t', derefcnt=0, name='mbsnrtowcs', args=[Argument(type='wchar_t', derefcnt=1, name='dst'), Argument(type='char', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='nmc'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps')]), '__mbsnrtowcs_chk': Function(type='size_t', derefcnt=0, name='__mbsnrtowcs_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dst'), Argument(type='char', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='nmc'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'mbsrtowcs': Function(type='size_t', derefcnt=0, name='mbsrtowcs', args=[Argument(type='wchar_t', derefcnt=1, name='dst'), Argument(type='char', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps')]), '__mbsrtowcs_chk': Function(type='size_t', derefcnt=0, name='__mbsrtowcs_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dst'), Argument(type='char', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'mbstowcs': Function(type='size_t', derefcnt=0, name='mbstowcs', args=[Argument(type='wchar_t', derefcnt=1, name='pwcs'), Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n')]), '__mbstowcs_chk': Function(type='size_t', derefcnt=0, name='__mbstowcs_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dst'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'mbtowc': Function(type='int', derefcnt=0, name='mbtowc', args=[Argument(type='wchar_t', derefcnt=1, name='pwc'), Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n')]), 'mcheck': Function(type='int', derefcnt=0, name='mcheck', args=[Argument(type='void', derefcnt=0, name='abortfunc')]), 'mcheck_check_all': Function(type='void', derefcnt=0, name='mcheck_check_all', args=[]), 'mcheck_pedantic': Function(type='int', derefcnt=0, name='mcheck_pedantic', args=[Argument(type='void', derefcnt=0, name='abortfunc')]), 'md_ctrl': Function(type='int', derefcnt=0, name='md_ctrl', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='int', derefcnt=0, name='p1'), Argument(type='void', derefcnt=1, name='p2')]), 'memalign': Function(type='void', derefcnt=1, name='memalign', args=[Argument(type='size_t', derefcnt=0, name='alignment'), Argument(type='size_t', derefcnt=0, name='size')]), 'memalign_hook': Function(type='void', derefcnt=1, name='memalign_hook', args=[Argument(type='size_t', derefcnt=0, name='alignment'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='void', derefcnt=1, name='arg2')]), 'memccpy': Function(type='void', derefcnt=1, name='memccpy', args=[Argument(type='void', derefcnt=1, name='dest'), Argument(type='void', derefcnt=1, name='src'), Argument(type='int', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='n')]), 'memchr': Function(type='void', derefcnt=1, name='memchr', args=[Argument(type='void', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='n')]), 'memcmp': Function(type='int', derefcnt=0, name='memcmp', args=[Argument(type='void', derefcnt=1, name='s1'), Argument(type='void', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'memcpy': Function(type='void', derefcnt=1, name='memcpy', args=[Argument(type='void', derefcnt=1, name='dest'), Argument(type='void', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__memcpy_chk': Function(type='void', derefcnt=1, name='__memcpy_chk', args=[Argument(type='void', derefcnt=1, name='dstpp'), Argument(type='void', derefcnt=1, name='srcpp'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'memfrob': Function(type='void', derefcnt=1, name='memfrob', args=[Argument(type='void', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n')]), 'memmem': Function(type='void', derefcnt=1, name='memmem', args=[Argument(type='void', derefcnt=1, name='haystack'), Argument(type='size_t', derefcnt=0, name='haystacklen'), Argument(type='void', derefcnt=1, name='needle'), Argument(type='size_t', derefcnt=0, name='needlelen')]), 'memmove': Function(type='void', derefcnt=1, name='memmove', args=[Argument(type='void', derefcnt=1, name='dest'), Argument(type='void', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), 'MEMMOVE_CHK': Function(type='void', derefcnt=1, name='MEMMOVE_CHK', args=[Argument(type='void', derefcnt=1, name='dest'), Argument(type='void', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'mempcpy': Function(type='void', derefcnt=1, name='mempcpy', args=[Argument(type='void', derefcnt=1, name='dest'), Argument(type='void', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__mempcpy_chk': Function(type='void', derefcnt=1, name='__mempcpy_chk', args=[Argument(type='void', derefcnt=1, name='dstpp'), Argument(type='void', derefcnt=1, name='srcpp'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'memrchr': Function(type='void', derefcnt=1, name='memrchr', args=[Argument(type='void', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='n')]), 'memset': Function(type='void', derefcnt=1, name='memset', args=[Argument(type='void', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='n')]), '__memset_chk': Function(type='void', derefcnt=1, name='__memset_chk', args=[Argument(type='void', derefcnt=1, name='dstpp'), Argument(type='int', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'mincore': Function(type='int', derefcnt=0, name='mincore', args=[Argument(type='void', derefcnt=1, name='start'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='unsigned', derefcnt=1, name='vec')]), 'mkdir': Function(type='int', derefcnt=0, name='mkdir', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'mkdirat': Function(type='int', derefcnt=0, name='mkdirat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'mkdtemp': Function(type='char', derefcnt=1, name='mkdtemp', args=[Argument(type='char', derefcnt=1, name='template')]), 'mkfifo': Function(type='int', derefcnt=0, name='mkfifo', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'mkfifoat': Function(type='int', derefcnt=0, name='mkfifoat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'mknod': Function(type='int', derefcnt=0, name='mknod', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode'), Argument(type='dev_t', derefcnt=0, name='dev')]), 'mknodat': Function(type='int', derefcnt=0, name='mknodat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode'), Argument(type='dev_t', derefcnt=0, name='dev')]), 'mkostemp': Function(type='int', derefcnt=0, name='mkostemp', args=[Argument(type='char', derefcnt=1, name='template'), Argument(type='int', derefcnt=0, name='flags')]), 'mkostemp64': Function(type='int', derefcnt=0, name='mkostemp64', args=[Argument(type='char', derefcnt=1, name='template'), Argument(type='int', derefcnt=0, name='flags')]), 'mkostemps': Function(type='int', derefcnt=0, name='mkostemps', args=[Argument(type='char', derefcnt=1, name='template'), Argument(type='int', derefcnt=0, name='suffixlen'), Argument(type='int', derefcnt=0, name='flags')]), 'mkostemps64': Function(type='int', derefcnt=0, name='mkostemps64', args=[Argument(type='char', derefcnt=1, name='template'), Argument(type='int', derefcnt=0, name='suffixlen'), Argument(type='int', derefcnt=0, name='flags')]), 'mkstemp': Function(type='int', derefcnt=0, name='mkstemp', args=[Argument(type='char', derefcnt=1, name='template')]), 'mkstemp64': Function(type='int', derefcnt=0, name='mkstemp64', args=[Argument(type='char', derefcnt=1, name='template')]), 'mkstemps': Function(type='int', derefcnt=0, name='mkstemps', args=[Argument(type='char', derefcnt=1, name='template'), Argument(type='int', derefcnt=0, name='suffixlen')]), 'mkstemps64': Function(type='int', derefcnt=0, name='mkstemps64', args=[Argument(type='char', derefcnt=1, name='template'), Argument(type='int', derefcnt=0, name='suffixlen')]), 'mktemp': Function(type='char', derefcnt=1, name='mktemp', args=[Argument(type='char', derefcnt=1, name='template')]), 'mktime': Function(type='time_t', derefcnt=0, name='mktime', args=[Argument(type='tm', derefcnt=1, name='tp')]), 'mlock': Function(type='int', derefcnt=0, name='mlock', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len')]), 'mlockall': Function(type='int', derefcnt=0, name='mlockall', args=[Argument(type='int', derefcnt=0, name='flags')]), 'mmap': Function(type='void', derefcnt=1, name='mmap', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='prot'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='fd'), Argument(type='off_t', derefcnt=0, name='offset')]), 'mmap2': Function(type='void', derefcnt=1, name='mmap', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='prot'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='fd'), Argument(type='off_t', derefcnt=0, name='offset')]), 'mmap64': Function(type='void', derefcnt=1, name='mmap64', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='prot'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='fd'), Argument(type='off64_t', derefcnt=0, name='offset')]), 'modf': Function(type='double', derefcnt=0, name='modf', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=1, name='iptr')]), 'modff': Function(type='float', derefcnt=0, name='modff', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=1, name='iptr')]), 'modfl': Function(type='long', derefcnt=0, name='modfl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=1, name='iptr')]), 'morecore': Function(type='void', derefcnt=1, name='morecore', args=[Argument(type='ptrdiff_t', derefcnt=0, name='size')]), 'mprobe': Function(type='mcheck_status', derefcnt=0, name='mprobe', args=[Argument(type='void', derefcnt=1, name='ptr')]), 'mprotect': Function(type='int', derefcnt=0, name='mprotect', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='prot')]), 'mq_close': Function(type='int', derefcnt=0, name='mq_close', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes')]), 'mq_getattr': Function(type='int', derefcnt=0, name='mq_getattr', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes'), Argument(type='mq_attr', derefcnt=1, name='mqstat')]), 'mq_notify': Function(type='int', derefcnt=0, name='mq_notify', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes'), Argument(type='sigevent', derefcnt=1, name='notification')]), 'mq_open': Function(type='mqd_t', derefcnt=0, name='mq_open', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='int', derefcnt=0, name='vararg')]), 'mq_receive': Function(type='ssize_t', derefcnt=0, name='mq_receive', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes'), Argument(type='char', derefcnt=1, name='msg_ptr'), Argument(type='size_t', derefcnt=0, name='msg_len'), Argument(type='unsigned', derefcnt=1, name='msg_prio')]), 'mq_send': Function(type='int', derefcnt=0, name='mq_send', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes'), Argument(type='char', derefcnt=1, name='msg_ptr'), Argument(type='size_t', derefcnt=0, name='msg_len'), Argument(type='unsigned', derefcnt=0, name='msg_prio')]), 'mq_setattr': Function(type='int', derefcnt=0, name='mq_setattr', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes'), Argument(type='mq_attr', derefcnt=1, name='mqstat'), Argument(type='mq_attr', derefcnt=1, name='omqstat')]), 'mq_timedreceive': Function(type='ssize_t', derefcnt=0, name='mq_timedreceive', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes'), Argument(type='char', derefcnt=1, name='msg_ptr'), Argument(type='size_t', derefcnt=0, name='msg_len'), Argument(type='unsigned', derefcnt=1, name='msg_prio'), Argument(type='timespec', derefcnt=1, name='abs_timeout')]), 'mq_timedsend': Function(type='int', derefcnt=0, name='mq_timedsend', args=[Argument(type='mqd_t', derefcnt=0, name='mqdes'), Argument(type='char', derefcnt=1, name='msg_ptr'), Argument(type='size_t', derefcnt=0, name='msg_len'), Argument(type='unsigned', derefcnt=0, name='msg_prio'), Argument(type='timespec', derefcnt=1, name='abs_timeout')]), 'mq_unlink': Function(type='int', derefcnt=0, name='mq_unlink', args=[Argument(type='char', derefcnt=1, name='name')]), 'mrand48': Function(type='long', derefcnt=0, name='mrand48', args=[]), 'mrand48_r': Function(type='int', derefcnt=0, name='mrand48_r', args=[Argument(type='drand48_data', derefcnt=1, name='buffer'), Argument(type='long', derefcnt=1, name='result')]), 'mremap': Function(type='void', derefcnt=1, name='mremap', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='old_len'), Argument(type='size_t', derefcnt=0, name='new_len'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='int', derefcnt=0, name='vararg')]), 'msg_callback': Function(type='void', derefcnt=0, name='msg_callback', args=[Argument(type='int', derefcnt=0, name='write_p'), Argument(type='int', derefcnt=0, name='version'), Argument(type='int', derefcnt=0, name='content_type'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='void', derefcnt=1, name='arg')]), 'msgctl': Function(type='int', derefcnt=0, name='msgctl', args=[Argument(type='int', derefcnt=0, name='msqid'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='msqid_ds', derefcnt=1, name='buf')]), 'msgget': Function(type='int', derefcnt=0, name='msgget', args=[Argument(type='key_t', derefcnt=0, name='key'), Argument(type='int', derefcnt=0, name='msgflg')]), 'msgrcv': Function(type='ssize_t', derefcnt=0, name='msgrcv', args=[Argument(type='int', derefcnt=0, name='msqid'), Argument(type='void', derefcnt=1, name='msgp'), Argument(type='size_t', derefcnt=0, name='msgsz'), Argument(type='long', derefcnt=0, name='msgtyp'), Argument(type='int', derefcnt=0, name='msgflg')]), 'msgsnd': Function(type='int', derefcnt=0, name='msgsnd', args=[Argument(type='int', derefcnt=0, name='msqid'), Argument(type='void', derefcnt=1, name='msgp'), Argument(type='size_t', derefcnt=0, name='msgsz'), Argument(type='int', derefcnt=0, name='msgflg')]), 'msync': Function(type='int', derefcnt=0, name='msync', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='flags')]), 'mtrace': Function(type='void', derefcnt=0, name='mtrace', args=[]), 'munlock': Function(type='int', derefcnt=0, name='munlock', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len')]), 'munlockall': Function(type='int', derefcnt=0, name='munlockall', args=[]), 'munmap': Function(type='int', derefcnt=0, name='munmap', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len')]), 'muntrace': Function(type='void', derefcnt=0, name='muntrace', args=[]), 'name_to_handle_at': Function(type='int', derefcnt=0, name='name_to_handle_at', args=[Argument(type='int', derefcnt=0, name='dfd'), Argument(type='char', derefcnt=1, name='name'), Argument(type='file_handle', derefcnt=1, name='handle'), Argument(type='int', derefcnt=1, name='mnt_id'), Argument(type='int', derefcnt=0, name='flags')]), 'nan': Function(type='double', derefcnt=0, name='nan', args=[Argument(type='char', derefcnt=1, name='tagb')]), 'nanf': Function(type='float', derefcnt=0, name='nanf', args=[Argument(type='char', derefcnt=1, name='tagb')]), 'nanl': Function(type='long', derefcnt=0, name='nanl', args=[Argument(type='char', derefcnt=1, name='tagb')]), 'nanosleep': Function(type='int', derefcnt=0, name='nanosleep', args=[Argument(type='timespec', derefcnt=1, name='requested_time'), Argument(type='timespec', derefcnt=1, name='remaining')]), 'nearbyint': Function(type='double', derefcnt=0, name='nearbyint', args=[Argument(type='double', derefcnt=0, name='x')]), 'nearbyintf': Function(type='float', derefcnt=0, name='nearbyintf', args=[Argument(type='float', derefcnt=0, name='x')]), 'nearbyintl': Function(type='long', derefcnt=0, name='nearbyintl', args=[Argument(type='long', derefcnt=0, name='x')]), 'new_item': Function(type='int', derefcnt=0, name='new_item', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx')]), 'new_session_cb': Function(type='int', derefcnt=0, name='new_session_cb', args=[Argument(type='ssl_st', derefcnt=1, name='ssl'), Argument(type='SSL_SESSION', derefcnt=1, name='sess')]), 'newlocale': Function(type='locale_t', derefcnt=0, name='newlocale', args=[Argument(type='int', derefcnt=0, name='category_mask'), Argument(type='char', derefcnt=1, name='locale'), Argument(type='locale_t', derefcnt=0, name='base')]), 'next_proto_select_cb': Function(type='int', derefcnt=0, name='next_proto_select_cb', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=2, name='out'), Argument(type='unsigned', derefcnt=1, name='outlen'), Argument(type='unsigned', derefcnt=1, name='in'), Argument(type='unsigned', derefcnt=0, name='inlen'), Argument(type='void', derefcnt=1, name='arg')]), 'next_protos_advertised_cb': Function(type='int', derefcnt=0, name='next_protos_advertised_cb', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=2, name='buf'), Argument(type='unsigned', derefcnt=1, name='len'), Argument(type='void', derefcnt=1, name='arg')]), 'nextafter': Function(type='double', derefcnt=0, name='nextafter', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'nextafterf': Function(type='float', derefcnt=0, name='nextafterf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'nextafterl': Function(type='long', derefcnt=0, name='nextafterl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'nexttoward': Function(type='double', derefcnt=0, name='nexttoward', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'nexttowardf': Function(type='float', derefcnt=0, name='nexttowardf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'nexttowardl': Function(type='long', derefcnt=0, name='nexttowardl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'nftw': Function(type='int', derefcnt=0, name='nftw', args=[Argument(type='char', derefcnt=1, name='dir'), Argument(type='nftw_func_t', derefcnt=0, name='func'), Argument(type='int', derefcnt=0, name='descriptors'), Argument(type='int', derefcnt=0, name='flag')]), 'nftw64': Function(type='int', derefcnt=0, name='nftw64', args=[Argument(type='char', derefcnt=1, name='dir'), Argument(type='nftw64_func_t', derefcnt=0, name='func'), Argument(type='int', derefcnt=0, name='descriptors'), Argument(type='int', derefcnt=0, name='flag')]), 'nftw64_func_t': Function(type='int', derefcnt=0, name='nftw64_func_t', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat64', derefcnt=1, name='status'), Argument(type='int', derefcnt=0, name='flag'), Argument(type='FTW', derefcnt=1, name='info')]), 'nftw_func_t': Function(type='int', derefcnt=0, name='nftw_func_t', args=[Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat', derefcnt=1, name='status'), Argument(type='int', derefcnt=0, name='flag'), Argument(type='FTW', derefcnt=1, name='info')]), 'ngettext': Function(type='char', derefcnt=1, name='ngettext', args=[Argument(type='char', derefcnt=1, name='msgid1'), Argument(type='char', derefcnt=1, name='msgid2'), Argument(type='unsigned', derefcnt=0, name='n')]), 'nice': Function(type='int', derefcnt=0, name='nice', args=[Argument(type='int', derefcnt=0, name='inc')]), 'nl_langinfo': Function(type='char', derefcnt=1, name='nl_langinfo', args=[Argument(type='nl_item', derefcnt=0, name='item')]), 'nl_langinfo_l': Function(type='char', derefcnt=1, name='nl_langinfo_l', args=[Argument(type='nl_item', derefcnt=0, name='item'), Argument(type='locale_t', derefcnt=0, name='l')]), 'nrand48': Function(type='long', derefcnt=0, name='nrand48', args=[Argument(type='unsigned', derefcnt=1, name='xsubi')]), 'nrand48_r': Function(type='int', derefcnt=0, name='nrand48_r', args=[Argument(type='unsigned', derefcnt=1, name='xsubi'), Argument(type='drand48_data', derefcnt=1, name='buffer'), Argument(type='long', derefcnt=1, name='result')]), 'ns_datetosecs': Function(type='u_int32_t', derefcnt=0, name='ns_datetosecs', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1')]), 'ns_find_tsig': Function(type='u_char', derefcnt=1, name='ns_find_tsig', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1')]), 'ns_format_ttl': Function(type='int', derefcnt=0, name='ns_format_ttl', args=[Argument(type='u_long', derefcnt=0, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2')]), 'ns_get16': Function(type='u_int', derefcnt=0, name='ns_get16', args=[Argument(type='u_char', derefcnt=1, name='arg0')]), 'ns_get32': Function(type='u_long', derefcnt=0, name='ns_get32', args=[Argument(type='u_char', derefcnt=1, name='arg0')]), 'ns_initparse': Function(type='int', derefcnt=0, name='ns_initparse', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='ns_msg', derefcnt=1, name='arg2')]), 'ns_makecanon': Function(type='int', derefcnt=0, name='ns_makecanon', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2')]), 'ns_msg_getflag': Function(type='int', derefcnt=0, name='ns_msg_getflag', args=[Argument(type='ns_msg', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'ns_name_compress': Function(type='int', derefcnt=0, name='ns_name_compress', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2'), Argument(type='u_char', derefcnt=2, name='arg3'), Argument(type='u_char', derefcnt=2, name='arg4')]), 'ns_name_ntol': Function(type='int', derefcnt=0, name='ns_name_ntol', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2')]), 'ns_name_ntop': Function(type='int', derefcnt=0, name='ns_name_ntop', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2')]), 'ns_name_pack': Function(type='int', derefcnt=0, name='ns_name_pack', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='u_char', derefcnt=2, name='arg3'), Argument(type='u_char', derefcnt=2, name='arg4')]), 'ns_name_pton': Function(type='int', derefcnt=0, name='ns_name_pton', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='size_t', derefcnt=0, name='arg2')]), 'ns_name_rollback': Function(type='void', derefcnt=0, name='ns_name_rollback', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=2, name='arg1'), Argument(type='u_char', derefcnt=2, name='arg2')]), 'ns_name_skip': Function(type='int', derefcnt=0, name='ns_name_skip', args=[Argument(type='u_char', derefcnt=2, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1')]), 'ns_name_uncompress': Function(type='int', derefcnt=0, name='ns_name_uncompress', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='u_char', derefcnt=1, name='arg2'), Argument(type='char', derefcnt=1, name='arg3'), Argument(type='size_t', derefcnt=0, name='arg4')]), 'ns_name_unpack': Function(type='int', derefcnt=0, name='ns_name_unpack', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='u_char', derefcnt=1, name='arg2'), Argument(type='u_char', derefcnt=1, name='arg3'), Argument(type='size_t', derefcnt=0, name='arg4')]), 'ns_parse_ttl': Function(type='int', derefcnt=0, name='ns_parse_ttl', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='u_long', derefcnt=1, name='arg1')]), 'ns_parserr': Function(type='int', derefcnt=0, name='ns_parserr', args=[Argument(type='ns_msg', derefcnt=1, name='arg0'), Argument(type='ns_sect', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='ns_rr', derefcnt=1, name='arg3')]), 'ns_put16': Function(type='void', derefcnt=0, name='ns_put16', args=[Argument(type='u_int', derefcnt=0, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1')]), 'ns_put32': Function(type='void', derefcnt=0, name='ns_put32', args=[Argument(type='u_long', derefcnt=0, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1')]), 'ns_samedomain': Function(type='int', derefcnt=0, name='ns_samedomain', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1')]), 'ns_samename': Function(type='int', derefcnt=0, name='ns_samename', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1')]), 'ns_sign': Function(type='int', derefcnt=0, name='ns_sign', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='void', derefcnt=1, name='arg4'), Argument(type='u_char', derefcnt=1, name='arg5'), Argument(type='int', derefcnt=0, name='arg6'), Argument(type='u_char', derefcnt=1, name='arg7'), Argument(type='int', derefcnt=1, name='arg8'), Argument(type='time_t', derefcnt=0, name='arg9')]), 'ns_sign2': Function(type='int', derefcnt=0, name='ns_sign2', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='void', derefcnt=1, name='arg4'), Argument(type='u_char', derefcnt=1, name='arg5'), Argument(type='int', derefcnt=0, name='arg6'), Argument(type='u_char', derefcnt=1, name='arg7'), Argument(type='int', derefcnt=1, name='arg8'), Argument(type='time_t', derefcnt=0, name='arg9'), Argument(type='u_char', derefcnt=2, name='arg10'), Argument(type='u_char', derefcnt=2, name='arg11')]), 'ns_sign_tcp': Function(type='int', derefcnt=0, name='ns_sign_tcp', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='ns_tcp_tsig_state', derefcnt=1, name='arg4'), Argument(type='int', derefcnt=0, name='arg5')]), 'ns_sign_tcp2': Function(type='int', derefcnt=0, name='ns_sign_tcp2', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='ns_tcp_tsig_state', derefcnt=1, name='arg4'), Argument(type='int', derefcnt=0, name='arg5'), Argument(type='u_char', derefcnt=2, name='arg6'), Argument(type='u_char', derefcnt=2, name='arg7')]), 'ns_sign_tcp_init': Function(type='int', derefcnt=0, name='ns_sign_tcp_init', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='ns_tcp_tsig_state', derefcnt=1, name='arg3')]), 'ns_skiprr': Function(type='int', derefcnt=0, name='ns_skiprr', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='ns_sect', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3')]), 'ns_sprintrr': Function(type='int', derefcnt=0, name='ns_sprintrr', args=[Argument(type='ns_msg', derefcnt=1, name='arg0'), Argument(type='ns_rr', derefcnt=1, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='char', derefcnt=1, name='arg3'), Argument(type='char', derefcnt=1, name='arg4'), Argument(type='size_t', derefcnt=0, name='arg5')]), 'ns_sprintrrf': Function(type='int', derefcnt=0, name='ns_sprintrrf', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='size_t', derefcnt=0, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='ns_class', derefcnt=0, name='arg3'), Argument(type='ns_type', derefcnt=0, name='arg4'), Argument(type='u_long', derefcnt=0, name='arg5'), Argument(type='u_char', derefcnt=1, name='arg6'), Argument(type='size_t', derefcnt=0, name='arg7'), Argument(type='char', derefcnt=1, name='arg8'), Argument(type='char', derefcnt=1, name='arg9'), Argument(type='char', derefcnt=1, name='arg10'), Argument(type='size_t', derefcnt=0, name='arg11')]), 'ns_subdomain': Function(type='int', derefcnt=0, name='ns_subdomain', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1')]), 'ns_verify': Function(type='int', derefcnt=0, name='ns_verify', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='void', derefcnt=1, name='arg2'), Argument(type='u_char', derefcnt=1, name='arg3'), Argument(type='int', derefcnt=0, name='arg4'), Argument(type='u_char', derefcnt=1, name='arg5'), Argument(type='int', derefcnt=1, name='arg6'), Argument(type='time_t', derefcnt=1, name='arg7'), Argument(type='int', derefcnt=0, name='arg8')]), 'ns_verify_tcp': Function(type='int', derefcnt=0, name='ns_verify_tcp', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='ns_tcp_tsig_state', derefcnt=1, name='arg2'), Argument(type='int', derefcnt=0, name='arg3')]), 'ns_verify_tcp_init': Function(type='int', derefcnt=0, name='ns_verify_tcp_init', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='ns_tcp_tsig_state', derefcnt=1, name='arg3')]), 'nss_configure_lookup': Function(type='int', derefcnt=0, name='nss_configure_lookup', args=[Argument(type='char', derefcnt=1, name='dbname'), Argument(type='char', derefcnt=1, name='string')]), 'ntohl': Function(type='uint32_t', derefcnt=0, name='ntohl', args=[Argument(type='uint32_t', derefcnt=0, name='netlong')]), 'ntohs': Function(type='uint16_t', derefcnt=0, name='ntohs', args=[Argument(type='uint16_t', derefcnt=0, name='netshort')]), 'num_ciphers': Function(type='int', derefcnt=0, name='num_ciphers', args=[]), 'o2i_ECPublicKey': Function(type='EC_KEY', derefcnt=1, name='o2i_ECPublicKey', args=[Argument(type='EC_KEY', derefcnt=2, name='key'), Argument(type='unsigned', derefcnt=2, name='in'), Argument(type='long', derefcnt=0, name='len')]), 'obstack_alloc_failed_handler': Function(type='void', derefcnt=0, name='obstack_alloc_failed_handler', args=[]), 'obstack_begin': Function(type='int', derefcnt=0, name='obstack_begin', args=[Argument(type='obstack', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='void', derefcnt=1, name='')]), 'obstack_begin_1': Function(type='int', derefcnt=0, name='obstack_begin_1', args=[Argument(type='obstack', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='void', derefcnt=1, name=''), Argument(type='void', derefcnt=1, name='arg5')]), 'obstack_free': Function(type='void', derefcnt=0, name='obstack_free', args=[Argument(type='obstack', derefcnt=1, name='obstack'), Argument(type='void', derefcnt=1, name='glibc_block')]), 'obstack_memory_used': Function(type='int', derefcnt=0, name='obstack_memory_used', args=[Argument(type='obstack', derefcnt=1, name='arg0')]), 'obstack_newchunk': Function(type='void', derefcnt=0, name='obstack_newchunk', args=[Argument(type='obstack', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'obstack_printf': Function(type='int', derefcnt=0, name='obstack_printf', args=[Argument(type='obstack', derefcnt=1, name='obstack'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '__obstack_printf_chk': Function(type='int', derefcnt=0, name='__obstack_printf_chk', args=[Argument(type='obstack', derefcnt=1, name='obstack'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'obstack_vprintf': Function(type='int', derefcnt=0, name='obstack_vprintf', args=[Argument(type='obstack', derefcnt=1, name='obstack'), Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='args')]), '__obstack_vprintf_chk': Function(type='int', derefcnt=0, name='__obstack_vprintf_chk', args=[Argument(type='obstack', derefcnt=1, name='obstack'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='args')]), 'on_exit': Function(type='int', derefcnt=0, name='on_exit', args=[Argument(type='void', derefcnt=0, name='func'), Argument(type='void', derefcnt=1, name='arg')]), 'open': Function(type='int', derefcnt=0, name='open', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='int', derefcnt=0, name='vararg')]), 'open64': Function(type='int', derefcnt=0, name='open64', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='int', derefcnt=0, name='vararg')]), 'open_by_handle_at': Function(type='int', derefcnt=0, name='open_by_handle_at', args=[Argument(type='int', derefcnt=0, name='mountdirfd'), Argument(type='file_handle', derefcnt=1, name='handle'), Argument(type='int', derefcnt=0, name='flags')]), 'open_memstream': Function(type='FILE', derefcnt=1, name='open_memstream', args=[Argument(type='char', derefcnt=2, name='bufloc'), Argument(type='size_t', derefcnt=1, name='sizeloc')]), 'open_wmemstream': Function(type='FILE', derefcnt=1, name='open_wmemstream', args=[Argument(type='wchar_t', derefcnt=2, name='bufloc'), Argument(type='size_t', derefcnt=1, name='sizeloc')]), 'openat': Function(type='int', derefcnt=0, name='openat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='int', derefcnt=0, name='vararg')]), 'openat64': Function(type='int', derefcnt=0, name='openat64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='file'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='int', derefcnt=0, name='vararg')]), 'opendir': Function(type='DIR', derefcnt=1, name='opendir', args=[Argument(type='char', derefcnt=1, name='name')]), 'openlog': Function(type='void', derefcnt=0, name='openlog', args=[Argument(type='char', derefcnt=1, name='ident'), Argument(type='int', derefcnt=0, name='option'), Argument(type='int', derefcnt=0, name='facility')]), 'openpty': Function(type='int', derefcnt=0, name='openpty', args=[Argument(type='int', derefcnt=1, name='amaster'), Argument(type='int', derefcnt=1, name='aslave'), Argument(type='char', derefcnt=1, name='name'), Argument(type='termios', derefcnt=1, name='termp'), Argument(type='winsize', derefcnt=1, name='winp')]), 'option_is_end': Function(type='int', derefcnt=0, name='option_is_end', args=[Argument(type='argp_option', derefcnt=1, name='opt')]), 'option_is_short': Function(type='int', derefcnt=0, name='option_is_short', args=[Argument(type='argp_option', derefcnt=1, name='opt')]), 'out_func': Function(type='int', derefcnt=0, name='out_func', args=[Argument(type='void', derefcnt=1, name='arg0'), Argument(type='unsigned', derefcnt=1, name='arg1'), Argument(type='unsigned', derefcnt=0, name='arg2')]), 'outb': Function(type='void', derefcnt=0, name='outb', args=[Argument(type='unsigned', derefcnt=0, name='value'), Argument(type='unsigned', derefcnt=0, name='port')]), 'outb_p': Function(type='void', derefcnt=0, name='outb_p', args=[Argument(type='unsigned', derefcnt=0, name='value'), Argument(type='unsigned', derefcnt=0, name='port')]), 'outl': Function(type='void', derefcnt=0, name='outl', args=[Argument(type='unsigned', derefcnt=0, name='value'), Argument(type='unsigned', derefcnt=0, name='port')]), 'outl_p': Function(type='void', derefcnt=0, name='outl_p', args=[Argument(type='unsigned', derefcnt=0, name='value'), Argument(type='unsigned', derefcnt=0, name='port')]), 'outsb': Function(type='void', derefcnt=0, name='outsb', args=[Argument(type='unsigned', derefcnt=0, name='port'), Argument(type='void', derefcnt=1, name='addr'), Argument(type='unsigned', derefcnt=0, name='count')]), 'outsl': Function(type='void', derefcnt=0, name='outsl', args=[Argument(type='unsigned', derefcnt=0, name='port'), Argument(type='void', derefcnt=1, name='addr'), Argument(type='unsigned', derefcnt=0, name='count')]), 'outsw': Function(type='void', derefcnt=0, name='outsw', args=[Argument(type='unsigned', derefcnt=0, name='port'), Argument(type='void', derefcnt=1, name='addr'), Argument(type='unsigned', derefcnt=0, name='count')]), 'outw': Function(type='void', derefcnt=0, name='outw', args=[Argument(type='unsigned', derefcnt=0, name='value'), Argument(type='unsigned', derefcnt=0, name='port')]), 'outw_p': Function(type='void', derefcnt=0, name='outw_p', args=[Argument(type='unsigned', derefcnt=0, name='value'), Argument(type='unsigned', derefcnt=0, name='port')]), 'overflow': Function(type='int', derefcnt=0, name='overflow', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'p_cdname': Function(type='u_char', derefcnt=1, name='p_cdname', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='FILE', derefcnt=1, name='arg2')]), 'p_cdnname': Function(type='u_char', derefcnt=1, name='p_cdnname', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='FILE', derefcnt=1, name='arg3')]), 'p_class': Function(type='char', derefcnt=1, name='p_class', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'p_fqname': Function(type='u_char', derefcnt=1, name='p_fqname', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='FILE', derefcnt=1, name='arg2')]), 'p_fqnname': Function(type='u_char', derefcnt=1, name='p_fqnname', args=[Argument(type='u_char', derefcnt=1, name='cp'), Argument(type='u_char', derefcnt=1, name='msg'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='char', derefcnt=1, name='arg3'), Argument(type='int', derefcnt=0, name='arg4')]), 'p_option': Function(type='char', derefcnt=1, name='p_option', args=[Argument(type='u_long', derefcnt=0, name='option')]), 'p_query': Function(type='void', derefcnt=0, name='p_query', args=[Argument(type='u_char', derefcnt=1, name='arg0')]), 'p_rcode': Function(type='char', derefcnt=1, name='p_rcode', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'p_secstodate': Function(type='char', derefcnt=1, name='p_secstodate', args=[Argument(type='u_long', derefcnt=0, name='arg0')]), 'p_section': Function(type='char', derefcnt=1, name='p_section', args=[Argument(type='int', derefcnt=0, name='section'), Argument(type='int', derefcnt=0, name='opcode')]), 'p_time': Function(type='char', derefcnt=1, name='p_time', args=[Argument(type='u_int32_t', derefcnt=0, name='arg0')]), 'p_type': Function(type='char', derefcnt=1, name='p_type', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'parse_printf_format': Function(type='size_t', derefcnt=0, name='parse_printf_format', args=[Argument(type='char', derefcnt=1, name='fmt'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=1, name='argtypes')]), 'pathconf': Function(type='long', derefcnt=0, name='pathconf', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='int', derefcnt=0, name='name')]), 'pause': Function(type='int', derefcnt=0, name='pause', args=[]), 'pclose': Function(type='int', derefcnt=0, name='pclose', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'pem_password_cb': Function(type='int', derefcnt=0, name='pem_password_cb', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='rwflag'), Argument(type='void', derefcnt=1, name='userdata')]), 'perror': Function(type='void', derefcnt=0, name='perror', args=[Argument(type='char', derefcnt=1, name='s')]), 'pipe': Function(type='int', derefcnt=0, name='pipe', args=[Argument(type='int', derefcnt=1, name='pipedes')]), 'pipe2': Function(type='int', derefcnt=0, name='pipe2', args=[Argument(type='int', derefcnt=1, name='pipedes'), Argument(type='int', derefcnt=0, name='flags')]), 'pitem_free': Function(type='void', derefcnt=0, name='pitem_free', args=[Argument(type='pitem', derefcnt=1, name='item')]), 'pitem_new': Function(type='pitem', derefcnt=1, name='pitem_new', args=[Argument(type='unsigned', derefcnt=1, name='prio64be'), Argument(type='void', derefcnt=1, name='data')]), 'poll': Function(type='int', derefcnt=0, name='poll', args=[Argument(type='pollfd', derefcnt=1, name='fds'), Argument(type='nfds_t', derefcnt=0, name='nfds'), Argument(type='int', derefcnt=0, name='timeout')]), '__poll_chk': Function(type='int', derefcnt=0, name='__poll_chk', args=[Argument(type='pollfd', derefcnt=1, name='fds'), Argument(type='nfds_t', derefcnt=0, name='nfds'), Argument(type='int', derefcnt=0, name='timeout'), Argument(type='__SIZE_TYPE__', derefcnt=0, name='fdslen')]), 'popen': Function(type='FILE', derefcnt=1, name='popen', args=[Argument(type='char', derefcnt=1, name='command'), Argument(type='char', derefcnt=1, name='modes')]), 'posix_fadvise': Function(type='int', derefcnt=0, name='posix_fadvise', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off_t', derefcnt=0, name='offset'), Argument(type='off_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='advise')]), 'posix_fadvise64': Function(type='int', derefcnt=0, name='posix_fadvise64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off64_t', derefcnt=0, name='offset'), Argument(type='off64_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='advise')]), 'posix_fallocate': Function(type='int', derefcnt=0, name='posix_fallocate', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off_t', derefcnt=0, name='offset'), Argument(type='off_t', derefcnt=0, name='len')]), 'posix_fallocate64': Function(type='int', derefcnt=0, name='posix_fallocate64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off64_t', derefcnt=0, name='offset'), Argument(type='off64_t', derefcnt=0, name='len')]), 'posix_madvise': Function(type='int', derefcnt=0, name='posix_madvise', args=[Argument(type='void', derefcnt=1, name='addr'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='advice')]), 'posix_memalign': Function(type='int', derefcnt=0, name='posix_memalign', args=[Argument(type='void', derefcnt=2, name='memptr'), Argument(type='size_t', derefcnt=0, name='alignment'), Argument(type='size_t', derefcnt=0, name='size')]), 'posix_openpt': Function(type='int', derefcnt=0, name='posix_openpt', args=[Argument(type='int', derefcnt=0, name='oflag')]), 'posix_spawn': Function(type='int', derefcnt=0, name='posix_spawn', args=[Argument(type='pid_t', derefcnt=1, name='pid'), Argument(type='char', derefcnt=1, name='path'), Argument(type='posix_spawn_file_actions_t', derefcnt=1, name='file_actions'), Argument(type='posix_spawnattr_t', derefcnt=1, name='attrp'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=2, name='envp')]), 'posix_spawn_file_actions_addclose': Function(type='int', derefcnt=0, name='posix_spawn_file_actions_addclose', args=[Argument(type='posix_spawn_file_actions_t', derefcnt=1, name='file_actions'), Argument(type='int', derefcnt=0, name='fd')]), 'posix_spawn_file_actions_adddup2': Function(type='int', derefcnt=0, name='posix_spawn_file_actions_adddup2', args=[Argument(type='posix_spawn_file_actions_t', derefcnt=1, name='file_actions'), Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='newfd')]), 'posix_spawn_file_actions_addopen': Function(type='int', derefcnt=0, name='posix_spawn_file_actions_addopen', args=[Argument(type='posix_spawn_file_actions_t', derefcnt=1, name='file_actions'), Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'posix_spawn_file_actions_destroy': Function(type='int', derefcnt=0, name='posix_spawn_file_actions_destroy', args=[Argument(type='posix_spawn_file_actions_t', derefcnt=1, name='file_actions')]), 'posix_spawn_file_actions_init': Function(type='int', derefcnt=0, name='posix_spawn_file_actions_init', args=[Argument(type='posix_spawn_file_actions_t', derefcnt=1, name='file_actions')]), 'posix_spawnattr_destroy': Function(type='int', derefcnt=0, name='posix_spawnattr_destroy', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr')]), 'posix_spawnattr_getflags': Function(type='int', derefcnt=0, name='posix_spawnattr_getflags', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='short', derefcnt=1, name='flags')]), 'posix_spawnattr_getpgroup': Function(type='int', derefcnt=0, name='posix_spawnattr_getpgroup', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='pid_t', derefcnt=1, name='pgroup')]), 'posix_spawnattr_getschedparam': Function(type='int', derefcnt=0, name='posix_spawnattr_getschedparam', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='sched_param', derefcnt=1, name='schedparam')]), 'posix_spawnattr_getschedpolicy': Function(type='int', derefcnt=0, name='posix_spawnattr_getschedpolicy', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='schedpolicy')]), 'posix_spawnattr_getsigdefault': Function(type='int', derefcnt=0, name='posix_spawnattr_getsigdefault', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='sigset_t', derefcnt=1, name='sigdefault')]), 'posix_spawnattr_getsigmask': Function(type='int', derefcnt=0, name='posix_spawnattr_getsigmask', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='sigset_t', derefcnt=1, name='sigmask')]), 'posix_spawnattr_init': Function(type='int', derefcnt=0, name='posix_spawnattr_init', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr')]), 'posix_spawnattr_setflags': Function(type='int', derefcnt=0, name='posix_spawnattr_setflags', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='short', derefcnt=0, name='flags')]), 'posix_spawnattr_setpgroup': Function(type='int', derefcnt=0, name='posix_spawnattr_setpgroup', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='pid_t', derefcnt=0, name='pgroup')]), 'posix_spawnattr_setschedparam': Function(type='int', derefcnt=0, name='posix_spawnattr_setschedparam', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='sched_param', derefcnt=1, name='schedparam')]), 'posix_spawnattr_setschedpolicy': Function(type='int', derefcnt=0, name='posix_spawnattr_setschedpolicy', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='schedpolicy')]), 'posix_spawnattr_setsigdefault': Function(type='int', derefcnt=0, name='posix_spawnattr_setsigdefault', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='sigset_t', derefcnt=1, name='sigdefault')]), 'posix_spawnattr_setsigmask': Function(type='int', derefcnt=0, name='posix_spawnattr_setsigmask', args=[Argument(type='posix_spawnattr_t', derefcnt=1, name='attr'), Argument(type='sigset_t', derefcnt=1, name='sigmask')]), 'posix_spawnp': Function(type='int', derefcnt=0, name='posix_spawnp', args=[Argument(type='pid_t', derefcnt=1, name='pid'), Argument(type='char', derefcnt=1, name='file'), Argument(type='posix_spawn_file_actions_t', derefcnt=1, name='file_actions'), Argument(type='posix_spawnattr_t', derefcnt=1, name='attrp'), Argument(type='char', derefcnt=2, name='argv'), Argument(type='char', derefcnt=2, name='envp')]), 'pow': Function(type='double', derefcnt=0, name='pow', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'pow10': Function(type='double', derefcnt=0, name='pow10', args=[Argument(type='double', derefcnt=0, name='x')]), 'pow10f': Function(type='float', derefcnt=0, name='pow10f', args=[Argument(type='float', derefcnt=0, name='x')]), 'pow10l': Function(type='long', derefcnt=0, name='pow10l', args=[Argument(type='long', derefcnt=0, name='x')]), 'powf': Function(type='float', derefcnt=0, name='powf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'powl': Function(type='long', derefcnt=0, name='powl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'ppoll': Function(type='int', derefcnt=0, name='ppoll', args=[Argument(type='pollfd', derefcnt=1, name='fds'), Argument(type='nfds_t', derefcnt=0, name='nfds'), Argument(type='timespec', derefcnt=1, name='timeout'), Argument(type='sigset_t', derefcnt=1, name='ss')]), '__ppoll_chk': Function(type='int', derefcnt=0, name='__ppoll_chk', args=[Argument(type='pollfd', derefcnt=1, name='fds'), Argument(type='nfds_t', derefcnt=0, name='nfds'), Argument(type='timespec', derefcnt=1, name='timeout'), Argument(type='__sigset_t', derefcnt=1, name='ss'), Argument(type='__SIZE_TYPE__', derefcnt=0, name='fdslen')]), 'pqueue_find': Function(type='pitem', derefcnt=1, name='pqueue_find', args=[Argument(type='pqueue', derefcnt=0, name='pq'), Argument(type='unsigned', derefcnt=1, name='prio64be')]), 'pqueue_free': Function(type='void', derefcnt=0, name='pqueue_free', args=[Argument(type='pqueue', derefcnt=0, name='pq')]), 'pqueue_insert': Function(type='pitem', derefcnt=1, name='pqueue_insert', args=[Argument(type='pqueue', derefcnt=0, name='pq'), Argument(type='pitem', derefcnt=1, name='item')]), 'pqueue_iterator': Function(type='pitem', derefcnt=1, name='pqueue_iterator', args=[Argument(type='pqueue', derefcnt=0, name='pq')]), 'pqueue_new': Function(type='pqueue', derefcnt=0, name='pqueue_new', args=[]), 'pqueue_next': Function(type='pitem', derefcnt=1, name='pqueue_next', args=[Argument(type='piterator', derefcnt=1, name='iter')]), 'pqueue_peek': Function(type='pitem', derefcnt=1, name='pqueue_peek', args=[Argument(type='pqueue', derefcnt=0, name='pq')]), 'pqueue_pop': Function(type='pitem', derefcnt=1, name='pqueue_pop', args=[Argument(type='pqueue', derefcnt=0, name='pq')]), 'pqueue_print': Function(type='void', derefcnt=0, name='pqueue_print', args=[Argument(type='pqueue', derefcnt=0, name='pq')]), 'pqueue_size': Function(type='int', derefcnt=0, name='pqueue_size', args=[Argument(type='pqueue', derefcnt=0, name='pq')]), 'prctl': Function(type='int', derefcnt=0, name='prctl', args=[Argument(type='int', derefcnt=0, name='option'), Argument(type='int', derefcnt=0, name='vararg')]), 'pread': Function(type='ssize_t', derefcnt=0, name='pread', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes'), Argument(type='off_t', derefcnt=0, name='offset')]), '__pread_chk': Function(type='ssize_t', derefcnt=0, name='__pread_chk', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes'), Argument(type='off_t', derefcnt=0, name='offset'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'pread64': Function(type='ssize_t', derefcnt=0, name='pread64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes'), Argument(type='off64_t', derefcnt=0, name='offset')]), '__pread64_chk': Function(type='ssize_t', derefcnt=0, name='__pread64_chk', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes'), Argument(type='off64_t', derefcnt=0, name='offset'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'preadv': Function(type='ssize_t', derefcnt=0, name='preadv', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='iovec', derefcnt=1, name='iovec'), Argument(type='int', derefcnt=0, name='count'), Argument(type='off_t', derefcnt=0, name='offset')]), 'preadv64': Function(type='ssize_t', derefcnt=0, name='preadv64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='iovec', derefcnt=1, name='iovec'), Argument(type='int', derefcnt=0, name='count'), Argument(type='off64_t', derefcnt=0, name='offset')]), 'printf': Function(type='int', derefcnt=0, name='printf', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '__printf_chk': Function(type='int', derefcnt=0, name='__printf_chk', args=[Argument(type='int', derefcnt=0, name='flag'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'printf_arginfo_function': Function(type='int', derefcnt=0, name='printf_arginfo_function', args=[Argument(type='printf_info', derefcnt=1, name='info'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=1, name='argtypes')]), 'printf_arginfo_size_function': Function(type='int', derefcnt=0, name='printf_arginfo_size_function', args=[Argument(type='printf_info', derefcnt=1, name='info'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=1, name='argtypes'), Argument(type='int', derefcnt=1, name='size')]), 'printf_function': Function(type='int', derefcnt=0, name='printf_function', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='printf_info', derefcnt=1, name='info'), Argument(type='void', derefcnt=2, name='args')]), 'printf_size': Function(type='int', derefcnt=0, name='printf_size', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='printf_info', derefcnt=1, name='info'), Argument(type='void', derefcnt=2, name='args')]), 'printf_size_info': Function(type='int', derefcnt=0, name='printf_size_info', args=[Argument(type='printf_info', derefcnt=1, name='info'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=1, name='argtypes')]), 'printf_va_arg_function': Function(type='void', derefcnt=0, name='printf_va_arg_function', args=[Argument(type='void', derefcnt=1, name='mem'), Argument(type='va_list', derefcnt=1, name='ap')]), 'prlimit': Function(type='int', derefcnt=0, name='prlimit', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='rlimit_resource', derefcnt=0, name='resource'), Argument(type='rlimit', derefcnt=1, name='new_limit'), Argument(type='rlimit', derefcnt=1, name='old_limit')]), 'prlimit64': Function(type='int', derefcnt=0, name='prlimit64', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='rlimit_resource', derefcnt=0, name='resource'), Argument(type='rlimit64', derefcnt=1, name='new_limit'), Argument(type='rlimit64', derefcnt=1, name='old_limit')]), 'process_vm_readv': Function(type='ssize_t', derefcnt=0, name='process_vm_readv', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='iovec', derefcnt=1, name='lvec'), Argument(type='unsigned', derefcnt=0, name='liovcnt'), Argument(type='iovec', derefcnt=1, name='rvec'), Argument(type='unsigned', derefcnt=0, name='riovcnt'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'process_vm_writev': Function(type='ssize_t', derefcnt=0, name='process_vm_writev', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='iovec', derefcnt=1, name='lvec'), Argument(type='unsigned', derefcnt=0, name='liovcnt'), Argument(type='iovec', derefcnt=1, name='rvec'), Argument(type='unsigned', derefcnt=0, name='riovcnt'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'profil': Function(type='int', derefcnt=0, name='profil', args=[Argument(type='unsigned', derefcnt=1, name='sample_buffer'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='size_t', derefcnt=0, name='offset'), Argument(type='unsigned', derefcnt=0, name='scale')]), 'pselect': Function(type='int', derefcnt=0, name='pselect', args=[Argument(type='int', derefcnt=0, name='nfds'), Argument(type='fd_set', derefcnt=1, name='readfds'), Argument(type='fd_set', derefcnt=1, name='writefds'), Argument(type='fd_set', derefcnt=1, name='exceptfds'), Argument(type='timespec', derefcnt=1, name='timeout'), Argument(type='sigset_t', derefcnt=1, name='sigmask')]), 'psiginfo': Function(type='void', derefcnt=0, name='psiginfo', args=[Argument(type='siginfo_t', derefcnt=1, name='pinfo'), Argument(type='char', derefcnt=1, name='s')]), 'psignal': Function(type='void', derefcnt=0, name='psignal', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='char', derefcnt=1, name='s')]), 'psk_client_callback': Function(type='unsigned', derefcnt=0, name='psk_client_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='char', derefcnt=1, name='hint'), Argument(type='char', derefcnt=1, name='identity'), Argument(type='unsigned', derefcnt=0, name='max_identity_len'), Argument(type='unsigned', derefcnt=1, name='psk'), Argument(type='unsigned', derefcnt=0, name='max_psk_len')]), 'psk_server_callback': Function(type='unsigned', derefcnt=0, name='psk_server_callback', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='char', derefcnt=1, name='identity'), Argument(type='unsigned', derefcnt=1, name='psk'), Argument(type='unsigned', derefcnt=0, name='max_psk_len')]), 'pthread_atfork': Function(type='int', derefcnt=0, name='pthread_atfork', args=[Argument(type='void', derefcnt=0, name='prepare'), Argument(type='void', derefcnt=0, name='parent'), Argument(type='void', derefcnt=0, name='child')]), 'pthread_attr_destroy': Function(type='int', derefcnt=0, name='pthread_attr_destroy', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr')]), 'pthread_attr_getaffinity_np': Function(type='int', derefcnt=0, name='pthread_attr_getaffinity_np', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='size_t', derefcnt=0, name='cpusetsize'), Argument(type='cpu_set_t', derefcnt=1, name='cpuset')]), 'pthread_attr_getdetachstate': Function(type='int', derefcnt=0, name='pthread_attr_getdetachstate', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='detachstate')]), 'pthread_attr_getguardsize': Function(type='int', derefcnt=0, name='pthread_attr_getguardsize', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='size_t', derefcnt=1, name='guardsize')]), 'pthread_attr_getinheritsched': Function(type='int', derefcnt=0, name='pthread_attr_getinheritsched', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='inherit')]), 'pthread_attr_getschedparam': Function(type='int', derefcnt=0, name='pthread_attr_getschedparam', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='sched_param', derefcnt=1, name='param')]), 'pthread_attr_getschedpolicy': Function(type='int', derefcnt=0, name='pthread_attr_getschedpolicy', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='policy')]), 'pthread_attr_getscope': Function(type='int', derefcnt=0, name='pthread_attr_getscope', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='scope')]), 'pthread_attr_getstack': Function(type='int', derefcnt=0, name='pthread_attr_getstack', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='void', derefcnt=2, name='stackaddr'), Argument(type='size_t', derefcnt=1, name='stacksize')]), 'pthread_attr_getstackaddr': Function(type='int', derefcnt=0, name='pthread_attr_getstackaddr', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='void', derefcnt=2, name='stackaddr')]), 'pthread_attr_getstacksize': Function(type='int', derefcnt=0, name='pthread_attr_getstacksize', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='size_t', derefcnt=1, name='stacksize')]), 'pthread_attr_init': Function(type='int', derefcnt=0, name='pthread_attr_init', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr')]), 'pthread_attr_setaffinity_np': Function(type='int', derefcnt=0, name='pthread_attr_setaffinity_np', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='size_t', derefcnt=0, name='cpusetsize'), Argument(type='cpu_set_t', derefcnt=1, name='cpuset')]), 'pthread_attr_setdetachstate': Function(type='int', derefcnt=0, name='pthread_attr_setdetachstate', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='detachstate')]), 'pthread_attr_setguardsize': Function(type='int', derefcnt=0, name='pthread_attr_setguardsize', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='size_t', derefcnt=0, name='guardsize')]), 'pthread_attr_setinheritsched': Function(type='int', derefcnt=0, name='pthread_attr_setinheritsched', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='inherit')]), 'pthread_attr_setschedparam': Function(type='int', derefcnt=0, name='pthread_attr_setschedparam', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='sched_param', derefcnt=1, name='param')]), 'pthread_attr_setschedpolicy': Function(type='int', derefcnt=0, name='pthread_attr_setschedpolicy', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='policy')]), 'pthread_attr_setscope': Function(type='int', derefcnt=0, name='pthread_attr_setscope', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='scope')]), 'pthread_attr_setstack': Function(type='int', derefcnt=0, name='pthread_attr_setstack', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='void', derefcnt=1, name='stackaddr'), Argument(type='size_t', derefcnt=0, name='stacksize')]), 'pthread_attr_setstackaddr': Function(type='int', derefcnt=0, name='pthread_attr_setstackaddr', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='void', derefcnt=1, name='stackaddr')]), 'pthread_attr_setstacksize': Function(type='int', derefcnt=0, name='pthread_attr_setstacksize', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='size_t', derefcnt=0, name='stacksize')]), 'pthread_barrier_destroy': Function(type='int', derefcnt=0, name='pthread_barrier_destroy', args=[Argument(type='pthread_barrier_t', derefcnt=1, name='barrier')]), 'pthread_barrier_init': Function(type='int', derefcnt=0, name='pthread_barrier_init', args=[Argument(type='pthread_barrier_t', derefcnt=1, name='barrier'), Argument(type='pthread_barrierattr_t', derefcnt=1, name='attr'), Argument(type='unsigned', derefcnt=0, name='count')]), 'pthread_barrier_wait': Function(type='int', derefcnt=0, name='pthread_barrier_wait', args=[Argument(type='pthread_barrier_t', derefcnt=1, name='barrier')]), 'pthread_barrierattr_destroy': Function(type='int', derefcnt=0, name='pthread_barrierattr_destroy', args=[Argument(type='pthread_barrierattr_t', derefcnt=1, name='attr')]), 'pthread_barrierattr_getpshared': Function(type='int', derefcnt=0, name='pthread_barrierattr_getpshared', args=[Argument(type='pthread_barrierattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='pshared')]), 'pthread_barrierattr_init': Function(type='int', derefcnt=0, name='pthread_barrierattr_init', args=[Argument(type='pthread_barrierattr_t', derefcnt=1, name='attr')]), 'pthread_barrierattr_setpshared': Function(type='int', derefcnt=0, name='pthread_barrierattr_setpshared', args=[Argument(type='pthread_barrierattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='pshared')]), 'pthread_cancel': Function(type='int', derefcnt=0, name='pthread_cancel', args=[Argument(type='pthread_t', derefcnt=0, name='th')]), 'pthread_cond_broadcast': Function(type='int', derefcnt=0, name='pthread_cond_broadcast', args=[Argument(type='pthread_cond_t', derefcnt=1, name='cond')]), 'pthread_cond_destroy': Function(type='int', derefcnt=0, name='pthread_cond_destroy', args=[Argument(type='pthread_cond_t', derefcnt=1, name='cond')]), 'pthread_cond_init': Function(type='int', derefcnt=0, name='pthread_cond_init', args=[Argument(type='pthread_cond_t', derefcnt=1, name='cond'), Argument(type='pthread_condattr_t', derefcnt=1, name='cond_attr')]), 'pthread_cond_signal': Function(type='int', derefcnt=0, name='pthread_cond_signal', args=[Argument(type='pthread_cond_t', derefcnt=1, name='cond')]), 'pthread_cond_timedwait': Function(type='int', derefcnt=0, name='pthread_cond_timedwait', args=[Argument(type='pthread_cond_t', derefcnt=1, name='cond'), Argument(type='pthread_mutex_t', derefcnt=1, name='mutex'), Argument(type='timespec', derefcnt=1, name='abstime')]), 'pthread_cond_wait': Function(type='int', derefcnt=0, name='pthread_cond_wait', args=[Argument(type='pthread_cond_t', derefcnt=1, name='cond'), Argument(type='pthread_mutex_t', derefcnt=1, name='mutex')]), 'pthread_condattr_destroy': Function(type='int', derefcnt=0, name='pthread_condattr_destroy', args=[Argument(type='pthread_condattr_t', derefcnt=1, name='attr')]), 'pthread_condattr_getclock': Function(type='int', derefcnt=0, name='pthread_condattr_getclock', args=[Argument(type='pthread_condattr_t', derefcnt=1, name='attr'), Argument(type='clockid_t', derefcnt=1, name='clock_id')]), 'pthread_condattr_getpshared': Function(type='int', derefcnt=0, name='pthread_condattr_getpshared', args=[Argument(type='pthread_condattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='pshared')]), 'pthread_condattr_init': Function(type='int', derefcnt=0, name='pthread_condattr_init', args=[Argument(type='pthread_condattr_t', derefcnt=1, name='attr')]), 'pthread_condattr_setclock': Function(type='int', derefcnt=0, name='pthread_condattr_setclock', args=[Argument(type='pthread_condattr_t', derefcnt=1, name='attr'), Argument(type='clockid_t', derefcnt=0, name='clock_id')]), 'pthread_condattr_setpshared': Function(type='int', derefcnt=0, name='pthread_condattr_setpshared', args=[Argument(type='pthread_condattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='pshared')]), 'pthread_create': Function(type='int', derefcnt=0, name='pthread_create', args=[Argument(type='pthread_t', derefcnt=1, name='newthread'), Argument(type='pthread_attr_t', derefcnt=1, name='attr'), Argument(type='void', derefcnt=1, name='start_routine'), Argument(type='void', derefcnt=1, name='arg')]), 'pthread_detach': Function(type='int', derefcnt=0, name='pthread_detach', args=[Argument(type='pthread_t', derefcnt=0, name='th')]), 'pthread_equal': Function(type='int', derefcnt=0, name='pthread_equal', args=[Argument(type='pthread_t', derefcnt=0, name='thread1'), Argument(type='pthread_t', derefcnt=0, name='thread2')]), 'pthread_exit': Function(type='void', derefcnt=0, name='pthread_exit', args=[Argument(type='void', derefcnt=1, name='retval')]), 'pthread_getaffinity_np': Function(type='int', derefcnt=0, name='pthread_getaffinity_np', args=[Argument(type='pthread_t', derefcnt=0, name='th'), Argument(type='size_t', derefcnt=0, name='cpusetsize'), Argument(type='cpu_set_t', derefcnt=1, name='cpuset')]), 'pthread_getattr_default_np': Function(type='int', derefcnt=0, name='pthread_getattr_default_np', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr')]), 'pthread_getattr_np': Function(type='int', derefcnt=0, name='pthread_getattr_np', args=[Argument(type='pthread_t', derefcnt=0, name='th'), Argument(type='pthread_attr_t', derefcnt=1, name='attr')]), 'pthread_getconcurrency': Function(type='int', derefcnt=0, name='pthread_getconcurrency', args=[]), 'pthread_getcpuclockid': Function(type='int', derefcnt=0, name='pthread_getcpuclockid', args=[Argument(type='pthread_t', derefcnt=0, name='thread_id'), Argument(type='clockid_t', derefcnt=1, name='clock_id')]), 'pthread_getname_np': Function(type='int', derefcnt=0, name='pthread_getname_np', args=[Argument(type='pthread_t', derefcnt=0, name='target_thread'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'pthread_getschedparam': Function(type='int', derefcnt=0, name='pthread_getschedparam', args=[Argument(type='pthread_t', derefcnt=0, name='target_thread'), Argument(type='int', derefcnt=1, name='policy'), Argument(type='sched_param', derefcnt=1, name='param')]), 'pthread_getspecific': Function(type='void', derefcnt=1, name='pthread_getspecific', args=[Argument(type='pthread_key_t', derefcnt=0, name='key')]), 'pthread_join': Function(type='int', derefcnt=0, name='pthread_join', args=[Argument(type='pthread_t', derefcnt=0, name='th'), Argument(type='void', derefcnt=2, name='thread_return')]), 'pthread_key_create': Function(type='int', derefcnt=0, name='pthread_key_create', args=[Argument(type='pthread_key_t', derefcnt=1, name='key'), Argument(type='void', derefcnt=0, name='destr_function')]), 'pthread_key_delete': Function(type='int', derefcnt=0, name='pthread_key_delete', args=[Argument(type='pthread_key_t', derefcnt=0, name='key')]), 'pthread_kill': Function(type='int', derefcnt=0, name='pthread_kill', args=[Argument(type='pthread_t', derefcnt=0, name='threadid'), Argument(type='int', derefcnt=0, name='signo')]), 'pthread_mutex_consistent': Function(type='int', derefcnt=0, name='pthread_mutex_consistent', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex')]), 'pthread_mutex_consistent_np': Function(type='int', derefcnt=0, name='pthread_mutex_consistent_np', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex')]), 'pthread_mutex_destroy': Function(type='int', derefcnt=0, name='pthread_mutex_destroy', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex')]), 'pthread_mutex_getprioceiling': Function(type='int', derefcnt=0, name='pthread_mutex_getprioceiling', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex'), Argument(type='int', derefcnt=1, name='prioceiling')]), 'pthread_mutex_init': Function(type='int', derefcnt=0, name='pthread_mutex_init', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex'), Argument(type='pthread_mutexattr_t', derefcnt=1, name='mutexattr')]), 'pthread_mutex_lock': Function(type='int', derefcnt=0, name='pthread_mutex_lock', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex')]), 'pthread_mutex_setprioceiling': Function(type='int', derefcnt=0, name='pthread_mutex_setprioceiling', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex'), Argument(type='int', derefcnt=0, name='prioceiling'), Argument(type='int', derefcnt=1, name='old_ceiling')]), 'pthread_mutex_timedlock': Function(type='int', derefcnt=0, name='pthread_mutex_timedlock', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex'), Argument(type='timespec', derefcnt=1, name='abstime')]), 'pthread_mutex_trylock': Function(type='int', derefcnt=0, name='pthread_mutex_trylock', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex')]), 'pthread_mutex_unlock': Function(type='int', derefcnt=0, name='pthread_mutex_unlock', args=[Argument(type='pthread_mutex_t', derefcnt=1, name='mutex')]), 'pthread_mutexattr_destroy': Function(type='int', derefcnt=0, name='pthread_mutexattr_destroy', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr')]), 'pthread_mutexattr_getprioceiling': Function(type='int', derefcnt=0, name='pthread_mutexattr_getprioceiling', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='prioceiling')]), 'pthread_mutexattr_getprotocol': Function(type='int', derefcnt=0, name='pthread_mutexattr_getprotocol', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='protocol')]), 'pthread_mutexattr_getpshared': Function(type='int', derefcnt=0, name='pthread_mutexattr_getpshared', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='pshared')]), 'pthread_mutexattr_getrobust': Function(type='int', derefcnt=0, name='pthread_mutexattr_getrobust', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='robustness')]), 'pthread_mutexattr_getrobust_np': Function(type='int', derefcnt=0, name='pthread_mutexattr_getrobust_np', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='robustness')]), 'pthread_mutexattr_gettype': Function(type='int', derefcnt=0, name='pthread_mutexattr_gettype', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='kind')]), 'pthread_mutexattr_init': Function(type='int', derefcnt=0, name='pthread_mutexattr_init', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr')]), 'pthread_mutexattr_setprioceiling': Function(type='int', derefcnt=0, name='pthread_mutexattr_setprioceiling', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='prioceiling')]), 'pthread_mutexattr_setprotocol': Function(type='int', derefcnt=0, name='pthread_mutexattr_setprotocol', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='protocol')]), 'pthread_mutexattr_setpshared': Function(type='int', derefcnt=0, name='pthread_mutexattr_setpshared', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='pshared')]), 'pthread_mutexattr_setrobust': Function(type='int', derefcnt=0, name='pthread_mutexattr_setrobust', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='robustness')]), 'pthread_mutexattr_setrobust_np': Function(type='int', derefcnt=0, name='pthread_mutexattr_setrobust_np', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='robustness')]), 'pthread_mutexattr_settype': Function(type='int', derefcnt=0, name='pthread_mutexattr_settype', args=[Argument(type='pthread_mutexattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='kind')]), 'pthread_once': Function(type='int', derefcnt=0, name='pthread_once', args=[Argument(type='pthread_once_t', derefcnt=1, name='once_control'), Argument(type='void', derefcnt=0, name='init_routine')]), 'pthread_register_cancel': Function(type='void', derefcnt=0, name='pthread_register_cancel', args=[Argument(type='pthread_unwind_buf_t', derefcnt=1, name='buf')]), 'pthread_register_cancel_defer': Function(type='void', derefcnt=0, name='pthread_register_cancel_defer', args=[Argument(type='pthread_unwind_buf_t', derefcnt=1, name='buf')]), 'pthread_rwlock_destroy': Function(type='int', derefcnt=0, name='pthread_rwlock_destroy', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock')]), 'pthread_rwlock_init': Function(type='int', derefcnt=0, name='pthread_rwlock_init', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock'), Argument(type='pthread_rwlockattr_t', derefcnt=1, name='attr')]), 'pthread_rwlock_rdlock': Function(type='int', derefcnt=0, name='pthread_rwlock_rdlock', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock')]), 'pthread_rwlock_timedrdlock': Function(type='int', derefcnt=0, name='pthread_rwlock_timedrdlock', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock'), Argument(type='timespec', derefcnt=1, name='abstime')]), 'pthread_rwlock_timedwrlock': Function(type='int', derefcnt=0, name='pthread_rwlock_timedwrlock', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock'), Argument(type='timespec', derefcnt=1, name='abstime')]), 'pthread_rwlock_tryrdlock': Function(type='int', derefcnt=0, name='pthread_rwlock_tryrdlock', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock')]), 'pthread_rwlock_trywrlock': Function(type='int', derefcnt=0, name='pthread_rwlock_trywrlock', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock')]), 'pthread_rwlock_unlock': Function(type='int', derefcnt=0, name='pthread_rwlock_unlock', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock')]), 'pthread_rwlock_wrlock': Function(type='int', derefcnt=0, name='pthread_rwlock_wrlock', args=[Argument(type='pthread_rwlock_t', derefcnt=1, name='rwlock')]), 'pthread_rwlockattr_destroy': Function(type='int', derefcnt=0, name='pthread_rwlockattr_destroy', args=[Argument(type='pthread_rwlockattr_t', derefcnt=1, name='attr')]), 'pthread_rwlockattr_getkind_np': Function(type='int', derefcnt=0, name='pthread_rwlockattr_getkind_np', args=[Argument(type='pthread_rwlockattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='pref')]), 'pthread_rwlockattr_getpshared': Function(type='int', derefcnt=0, name='pthread_rwlockattr_getpshared', args=[Argument(type='pthread_rwlockattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=1, name='pshared')]), 'pthread_rwlockattr_init': Function(type='int', derefcnt=0, name='pthread_rwlockattr_init', args=[Argument(type='pthread_rwlockattr_t', derefcnt=1, name='attr')]), 'pthread_rwlockattr_setkind_np': Function(type='int', derefcnt=0, name='pthread_rwlockattr_setkind_np', args=[Argument(type='pthread_rwlockattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='pref')]), 'pthread_rwlockattr_setpshared': Function(type='int', derefcnt=0, name='pthread_rwlockattr_setpshared', args=[Argument(type='pthread_rwlockattr_t', derefcnt=1, name='attr'), Argument(type='int', derefcnt=0, name='pshared')]), 'pthread_self': Function(type='pthread_t', derefcnt=0, name='pthread_self', args=[]), 'pthread_setaffinity_np': Function(type='int', derefcnt=0, name='pthread_setaffinity_np', args=[Argument(type='pthread_t', derefcnt=0, name='th'), Argument(type='size_t', derefcnt=0, name='cpusetsize'), Argument(type='cpu_set_t', derefcnt=1, name='cpuset')]), 'pthread_setattr_default_np': Function(type='int', derefcnt=0, name='pthread_setattr_default_np', args=[Argument(type='pthread_attr_t', derefcnt=1, name='attr')]), 'pthread_setcancelstate': Function(type='int', derefcnt=0, name='pthread_setcancelstate', args=[Argument(type='int', derefcnt=0, name='state'), Argument(type='int', derefcnt=1, name='oldstate')]), 'pthread_setcanceltype': Function(type='int', derefcnt=0, name='pthread_setcanceltype', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=1, name='oldtype')]), 'pthread_setconcurrency': Function(type='int', derefcnt=0, name='pthread_setconcurrency', args=[Argument(type='int', derefcnt=0, name='level')]), 'pthread_setname_np': Function(type='int', derefcnt=0, name='pthread_setname_np', args=[Argument(type='pthread_t', derefcnt=0, name='target_thread'), Argument(type='char', derefcnt=1, name='name')]), 'pthread_setschedparam': Function(type='int', derefcnt=0, name='pthread_setschedparam', args=[Argument(type='pthread_t', derefcnt=0, name='target_thread'), Argument(type='int', derefcnt=0, name='policy'), Argument(type='sched_param', derefcnt=1, name='param')]), 'pthread_setschedprio': Function(type='int', derefcnt=0, name='pthread_setschedprio', args=[Argument(type='pthread_t', derefcnt=0, name='target_thread'), Argument(type='int', derefcnt=0, name='prio')]), 'pthread_setspecific': Function(type='int', derefcnt=0, name='pthread_setspecific', args=[Argument(type='pthread_key_t', derefcnt=0, name='key'), Argument(type='void', derefcnt=1, name='pointer')]), 'pthread_sigmask': Function(type='int', derefcnt=0, name='pthread_sigmask', args=[Argument(type='int', derefcnt=0, name='how'), Argument(type='sigset_t', derefcnt=1, name='newmask'), Argument(type='sigset_t', derefcnt=1, name='oldmask')]), 'pthread_sigqueue': Function(type='int', derefcnt=0, name='pthread_sigqueue', args=[Argument(type='pthread_t', derefcnt=0, name='threadid'), Argument(type='int', derefcnt=0, name='signo'), Argument(type='sigval', derefcnt=0, name='value')]), 'pthread_spin_destroy': Function(type='int', derefcnt=0, name='pthread_spin_destroy', args=[Argument(type='pthread_spinlock_t', derefcnt=1, name='lock')]), 'pthread_spin_init': Function(type='int', derefcnt=0, name='pthread_spin_init', args=[Argument(type='pthread_spinlock_t', derefcnt=1, name='lock'), Argument(type='int', derefcnt=0, name='pshared')]), 'pthread_spin_lock': Function(type='int', derefcnt=0, name='pthread_spin_lock', args=[Argument(type='pthread_spinlock_t', derefcnt=1, name='lock')]), 'pthread_spin_trylock': Function(type='int', derefcnt=0, name='pthread_spin_trylock', args=[Argument(type='pthread_spinlock_t', derefcnt=1, name='lock')]), 'pthread_spin_unlock': Function(type='int', derefcnt=0, name='pthread_spin_unlock', args=[Argument(type='pthread_spinlock_t', derefcnt=1, name='lock')]), 'pthread_testcancel': Function(type='void', derefcnt=0, name='pthread_testcancel', args=[]), 'pthread_timedjoin_np': Function(type='int', derefcnt=0, name='pthread_timedjoin_np', args=[Argument(type='pthread_t', derefcnt=0, name='th'), Argument(type='void', derefcnt=2, name='thread_return'), Argument(type='timespec', derefcnt=1, name='abstime')]), 'pthread_tryjoin_np': Function(type='int', derefcnt=0, name='pthread_tryjoin_np', args=[Argument(type='pthread_t', derefcnt=0, name='th'), Argument(type='void', derefcnt=2, name='thread_return')]), 'pthread_unregister_cancel': Function(type='void', derefcnt=0, name='pthread_unregister_cancel', args=[Argument(type='pthread_unwind_buf_t', derefcnt=1, name='buf')]), 'pthread_unregister_cancel_restore': Function(type='void', derefcnt=0, name='pthread_unregister_cancel_restore', args=[Argument(type='pthread_unwind_buf_t', derefcnt=1, name='buf')]), 'pthread_unwind_next': Function(type='void', derefcnt=0, name='pthread_unwind_next', args=[Argument(type='pthread_unwind_buf_t', derefcnt=1, name='buf')]), 'pthread_yield': Function(type='int', derefcnt=0, name='pthread_yield', args=[]), 'ptrace': Function(type='long', derefcnt=0, name='ptrace', args=[Argument(type='ptrace_request', derefcnt=0, name='request'), Argument(type='int', derefcnt=0, name='vararg')]), 'ptsname': Function(type='char', derefcnt=1, name='ptsname', args=[Argument(type='int', derefcnt=0, name='fd')]), 'ptsname_r': Function(type='int', derefcnt=0, name='ptsname_r', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'put_cipher_by_char': Function(type='int', derefcnt=0, name='put_cipher_by_char', args=[Argument(type='SSL_CIPHER', derefcnt=1, name='cipher'), Argument(type='unsigned', derefcnt=1, name='ptr')]), 'putc': Function(type='int', derefcnt=0, name='putc', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='FILE', derefcnt=1, name='stream')]), 'putc_unlocked': Function(type='int', derefcnt=0, name='putc_unlocked', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='FILE', derefcnt=1, name='stream')]), 'putchar': Function(type='int', derefcnt=0, name='putchar', args=[Argument(type='int', derefcnt=0, name='c')]), 'putchar_unlocked': Function(type='int', derefcnt=0, name='putchar_unlocked', args=[Argument(type='int', derefcnt=0, name='c')]), 'putenv': Function(type='int', derefcnt=0, name='putenv', args=[Argument(type='char', derefcnt=1, name='string')]), 'putgrent': Function(type='int', derefcnt=0, name='putgrent', args=[Argument(type='group', derefcnt=1, name='p'), Argument(type='FILE', derefcnt=1, name='f')]), 'putlong': Function(type='void', derefcnt=0, name='putlong', args=[Argument(type='u_int32_t', derefcnt=0, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1')]), 'putmsg': Function(type='int', derefcnt=0, name='putmsg', args=[Argument(type='int', derefcnt=0, name='fildes'), Argument(type='strbuf', derefcnt=1, name='ctlptr'), Argument(type='strbuf', derefcnt=1, name='dataptr'), Argument(type='int', derefcnt=0, name='flags')]), 'putpmsg': Function(type='int', derefcnt=0, name='putpmsg', args=[Argument(type='int', derefcnt=0, name='fildes'), Argument(type='strbuf', derefcnt=1, name='ctlptr'), Argument(type='strbuf', derefcnt=1, name='dataptr'), Argument(type='int', derefcnt=0, name='band'), Argument(type='int', derefcnt=0, name='flags')]), 'putpwent': Function(type='int', derefcnt=0, name='putpwent', args=[Argument(type='passwd', derefcnt=1, name='p'), Argument(type='FILE', derefcnt=1, name='f')]), 'puts': Function(type='int', derefcnt=0, name='puts', args=[Argument(type='char', derefcnt=1, name='s')]), 'putsgent': Function(type='int', derefcnt=0, name='putsgent', args=[Argument(type='sgrp', derefcnt=1, name='g'), Argument(type='FILE', derefcnt=1, name='stream')]), 'putshort': Function(type='void', derefcnt=0, name='putshort', args=[Argument(type='u_int16_t', derefcnt=0, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1')]), 'putspent': Function(type='int', derefcnt=0, name='putspent', args=[Argument(type='spwd', derefcnt=1, name='p'), Argument(type='FILE', derefcnt=1, name='stream')]), 'pututline': Function(type='utmp', derefcnt=1, name='pututline', args=[Argument(type='utmp', derefcnt=1, name='utmp_ptr')]), 'pututxline': Function(type='utmpx', derefcnt=1, name='pututxline', args=[Argument(type='utmpx', derefcnt=1, name='utmpx')]), 'putw': Function(type='int', derefcnt=0, name='putw', args=[Argument(type='int', derefcnt=0, name='w'), Argument(type='FILE', derefcnt=1, name='stream')]), 'putwc': Function(type='wint_t', derefcnt=0, name='putwc', args=[Argument(type='wchar_t', derefcnt=0, name='wc'), Argument(type='FILE', derefcnt=1, name='stream')]), 'putwc_unlocked': Function(type='wint_t', derefcnt=0, name='putwc_unlocked', args=[Argument(type='wchar_t', derefcnt=0, name='wc'), Argument(type='FILE', derefcnt=1, name='stream')]), 'putwchar': Function(type='wint_t', derefcnt=0, name='putwchar', args=[Argument(type='wchar_t', derefcnt=0, name='wc')]), 'putwchar_unlocked': Function(type='wint_t', derefcnt=0, name='putwchar_unlocked', args=[Argument(type='wchar_t', derefcnt=0, name='wc')]), 'pvalloc': Function(type='void', derefcnt=1, name='pvalloc', args=[Argument(type='size_t', derefcnt=0, name='size')]), 'pwrite': Function(type='ssize_t', derefcnt=0, name='pwrite', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='off_t', derefcnt=0, name='offset')]), 'pwrite64': Function(type='ssize_t', derefcnt=0, name='pwrite64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='off64_t', derefcnt=0, name='offset')]), 'pwritev': Function(type='ssize_t', derefcnt=0, name='pwritev', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='iovec', derefcnt=1, name='iovec'), Argument(type='int', derefcnt=0, name='count'), Argument(type='off_t', derefcnt=0, name='offset')]), 'pwritev64': Function(type='ssize_t', derefcnt=0, name='pwritev64', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='iovec', derefcnt=1, name='iovec'), Argument(type='int', derefcnt=0, name='count'), Argument(type='off64_t', derefcnt=0, name='offset')]), 'qecvt': Function(type='char', derefcnt=1, name='qecvt', args=[Argument(type='long', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign')]), 'qecvt_r': Function(type='int', derefcnt=0, name='qecvt_r', args=[Argument(type='long', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len')]), 'qfcvt': Function(type='char', derefcnt=1, name='qfcvt', args=[Argument(type='long', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign')]), 'qfcvt_r': Function(type='int', derefcnt=0, name='qfcvt_r', args=[Argument(type='long', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='int', derefcnt=1, name='decpt'), Argument(type='int', derefcnt=1, name='sign'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len')]), 'qgcvt': Function(type='char', derefcnt=1, name='qgcvt', args=[Argument(type='long', derefcnt=0, name='value'), Argument(type='int', derefcnt=0, name='ndigit'), Argument(type='char', derefcnt=1, name='buf')]), 'qsort': Function(type='void', derefcnt=0, name='qsort', args=[Argument(type='void', derefcnt=1, name='base'), Argument(type='size_t', derefcnt=0, name='nmemb'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='compar_fn_t', derefcnt=0, name='compar')]), 'qsort_r': Function(type='void', derefcnt=0, name='qsort_r', args=[Argument(type='void', derefcnt=1, name='base'), Argument(type='size_t', derefcnt=0, name='nmemb'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='compar_d_fn_t', derefcnt=0, name='compar'), Argument(type='void', derefcnt=1, name='arg')]), 'quick_exit': Function(type='void', derefcnt=0, name='quick_exit', args=[Argument(type='int', derefcnt=0, name='status')]), 'raise': Function(type='int', derefcnt=0, name='raise', args=[Argument(type='int', derefcnt=0, name='sig')]), 'rand': Function(type='int', derefcnt=0, name='rand', args=[]), 'rand_r': Function(type='int', derefcnt=0, name='rand_r', args=[Argument(type='unsigned', derefcnt=1, name='seed')]), 'random': Function(type='long', derefcnt=0, name='random', args=[]), 'random_r': Function(type='int', derefcnt=0, name='random_r', args=[Argument(type='random_data', derefcnt=1, name='buf'), Argument(type='int32_t', derefcnt=1, name='result')]), 'rawmemchr': Function(type='void', derefcnt=1, name='rawmemchr', args=[Argument(type='void', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c')]), 'rcmd': Function(type='int', derefcnt=0, name='rcmd', args=[Argument(type='char', derefcnt=2, name='ahost'), Argument(type='unsigned', derefcnt=0, name='rport'), Argument(type='char', derefcnt=1, name='locuser'), Argument(type='char', derefcnt=1, name='remuser'), Argument(type='char', derefcnt=1, name='cmd'), Argument(type='int', derefcnt=1, name='fd2p')]), 'rcmd_af': Function(type='int', derefcnt=0, name='rcmd_af', args=[Argument(type='char', derefcnt=2, name='ahost'), Argument(type='unsigned', derefcnt=0, name='rport'), Argument(type='char', derefcnt=1, name='locuser'), Argument(type='char', derefcnt=1, name='remuser'), Argument(type='char', derefcnt=1, name='cmd'), Argument(type='int', derefcnt=1, name='fd2p'), Argument(type='sa_family_t', derefcnt=0, name='af')]), 're_compile_fastmap': Function(type='int', derefcnt=0, name='re_compile_fastmap', args=[Argument(type='re_pattern_buffer', derefcnt=1, name='buffer')]), 're_compile_pattern': Function(type='char', derefcnt=1, name='re_compile_pattern', args=[Argument(type='char', derefcnt=1, name='pattern'), Argument(type='size_t', derefcnt=0, name='length'), Argument(type='re_pattern_buffer', derefcnt=1, name='buffer')]), 're_match': Function(type='int', derefcnt=0, name='re_match', args=[Argument(type='re_pattern_buffer', derefcnt=1, name='buffer'), Argument(type='char', derefcnt=1, name='string'), Argument(type='int', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='start'), Argument(type='re_registers', derefcnt=1, name='regs')]), 're_match_2': Function(type='int', derefcnt=0, name='re_match_2', args=[Argument(type='re_pattern_buffer', derefcnt=1, name='buffer'), Argument(type='char', derefcnt=1, name='string1'), Argument(type='int', derefcnt=0, name='length1'), Argument(type='char', derefcnt=1, name='string2'), Argument(type='int', derefcnt=0, name='length2'), Argument(type='int', derefcnt=0, name='start'), Argument(type='re_registers', derefcnt=1, name='regs'), Argument(type='int', derefcnt=0, name='stop')]), 're_search': Function(type='int', derefcnt=0, name='re_search', args=[Argument(type='re_pattern_buffer', derefcnt=1, name='buffer'), Argument(type='char', derefcnt=1, name='string'), Argument(type='int', derefcnt=0, name='length'), Argument(type='int', derefcnt=0, name='start'), Argument(type='int', derefcnt=0, name='range'), Argument(type='re_registers', derefcnt=1, name='regs')]), 're_search_2': Function(type='int', derefcnt=0, name='re_search_2', args=[Argument(type='re_pattern_buffer', derefcnt=1, name='buffer'), Argument(type='char', derefcnt=1, name='string1'), Argument(type='int', derefcnt=0, name='length1'), Argument(type='char', derefcnt=1, name='string2'), Argument(type='int', derefcnt=0, name='length2'), Argument(type='int', derefcnt=0, name='start'), Argument(type='int', derefcnt=0, name='range'), Argument(type='re_registers', derefcnt=1, name='regs'), Argument(type='int', derefcnt=0, name='stop')]), 're_set_registers': Function(type='void', derefcnt=0, name='re_set_registers', args=[Argument(type='re_pattern_buffer', derefcnt=1, name='buffer'), Argument(type='re_registers', derefcnt=1, name='regs'), Argument(type='unsigned', derefcnt=0, name='num_regs'), Argument(type='regoff_t', derefcnt=1, name='starts'), Argument(type='regoff_t', derefcnt=1, name='ends')]), 're_set_syntax': Function(type='reg_syntax_t', derefcnt=0, name='re_set_syntax', args=[Argument(type='reg_syntax_t', derefcnt=0, name='syntax')]), 'read': Function(type='ssize_t', derefcnt=0, name='read', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes')]), '__read_chk': Function(type='ssize_t', derefcnt=0, name='__read_chk', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='nbytes'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'readahead': Function(type='ssize_t', derefcnt=0, name='readahead', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off64_t', derefcnt=0, name='offset'), Argument(type='size_t', derefcnt=0, name='count')]), 'readdir': Function(type='dirent', derefcnt=1, name='readdir', args=[Argument(type='DIR', derefcnt=1, name='dirp')]), 'readdir64': Function(type='dirent64', derefcnt=1, name='readdir64', args=[Argument(type='DIR', derefcnt=1, name='dirp')]), 'readdir64_r': Function(type='int', derefcnt=0, name='readdir64_r', args=[Argument(type='DIR', derefcnt=1, name='dirp'), Argument(type='dirent64', derefcnt=1, name='entry'), Argument(type='dirent64', derefcnt=2, name='result')]), 'readdir_r': Function(type='int', derefcnt=0, name='readdir_r', args=[Argument(type='DIR', derefcnt=1, name='dirp'), Argument(type='dirent', derefcnt=1, name='entry'), Argument(type='dirent', derefcnt=2, name='result')]), 'readlink': Function(type='ssize_t', derefcnt=0, name='readlink', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len')]), '__readlink_chk': Function(type='ssize_t', derefcnt=0, name='__readlink_chk', args=[Argument(type='char', derefcnt=1, name='path'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'readlinkat': Function(type='ssize_t', derefcnt=0, name='readlinkat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len')]), '__readlinkat_chk': Function(type='ssize_t', derefcnt=0, name='__readlinkat_chk', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'readv': Function(type='ssize_t', derefcnt=0, name='readv', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='iovec', derefcnt=1, name='iovec'), Argument(type='int', derefcnt=0, name='count')]), 'realloc': Function(type='void', derefcnt=1, name='realloc', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='size')]), 'realloc_hook': Function(type='void', derefcnt=1, name='realloc_hook', args=[Argument(type='void', derefcnt=1, name='ptr'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='void', derefcnt=1, name='arg2')]), 'realpath': Function(type='char', derefcnt=1, name='realpath', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='resolved')]), '__realpath_chk': Function(type='char', derefcnt=1, name='__realpath_chk', args=[Argument(type='char', derefcnt=1, name='buf'), Argument(type='char', derefcnt=1, name='resolved'), Argument(type='size_t', derefcnt=0, name='resolvedlen')]), 'recv': Function(type='ssize_t', derefcnt=0, name='recv', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=0, name='flags')]), '__recv_chk': Function(type='ssize_t', derefcnt=0, name='__recv_chk', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='int', derefcnt=0, name='flags')]), 'recvfrom': Function(type='ssize_t', derefcnt=0, name='recvfrom', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=1, name='addr_len')]), '__recvfrom_chk': Function(type='ssize_t', derefcnt=0, name='__recvfrom_chk', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=1, name='addr_len')]), 'recvmmsg': Function(type='int', derefcnt=0, name='recvmmsg', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='mmsghdr', derefcnt=1, name='vmessages'), Argument(type='unsigned', derefcnt=0, name='vlen'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='timespec', derefcnt=1, name='tmo')]), 'recvmsg': Function(type='ssize_t', derefcnt=0, name='recvmsg', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='msghdr', derefcnt=1, name='message'), Argument(type='int', derefcnt=0, name='flags')]), 'regcomp': Function(type='int', derefcnt=0, name='regcomp', args=[Argument(type='regex_t', derefcnt=1, name='preg'), Argument(type='char', derefcnt=1, name='pattern'), Argument(type='int', derefcnt=0, name='cflags')]), 'regerror': Function(type='size_t', derefcnt=0, name='regerror', args=[Argument(type='int', derefcnt=0, name='errcode'), Argument(type='regex_t', derefcnt=1, name='preg'), Argument(type='char', derefcnt=1, name='errbuf'), Argument(type='size_t', derefcnt=0, name='errbuf_size')]), 'regexec': Function(type='int', derefcnt=0, name='regexec', args=[Argument(type='regex_t', derefcnt=1, name='preg'), Argument(type='char', derefcnt=1, name='string'), Argument(type='size_t', derefcnt=0, name='nmatch'), Argument(type='regmatch_t', derefcnt=1, name='pmatch'), Argument(type='int', derefcnt=0, name='eflags')]), 'regfree': Function(type='void', derefcnt=0, name='regfree', args=[Argument(type='regex_t', derefcnt=1, name='preg')]), 'register_printf_function': Function(type='int', derefcnt=0, name='register_printf_function', args=[Argument(type='int', derefcnt=0, name='spec'), Argument(type='printf_function', derefcnt=0, name='func'), Argument(type='printf_arginfo_function', derefcnt=0, name='arginfo')]), 'register_printf_modifier': Function(type='int', derefcnt=0, name='register_printf_modifier', args=[Argument(type='wchar_t', derefcnt=1, name='str')]), 'register_printf_specifier': Function(type='int', derefcnt=0, name='register_printf_specifier', args=[Argument(type='int', derefcnt=0, name='spec'), Argument(type='printf_function', derefcnt=0, name='func'), Argument(type='printf_arginfo_size_function', derefcnt=0, name='arginfo')]), 'register_printf_type': Function(type='int', derefcnt=0, name='register_printf_type', args=[Argument(type='printf_va_arg_function', derefcnt=0, name='fct')]), 'remainder': Function(type='double', derefcnt=0, name='remainder', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y')]), 'remainderf': Function(type='float', derefcnt=0, name='remainderf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y')]), 'remainderl': Function(type='long', derefcnt=0, name='remainderl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y')]), 'remap_file_pages': Function(type='int', derefcnt=0, name='remap_file_pages', args=[Argument(type='void', derefcnt=1, name='start'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='prot'), Argument(type='size_t', derefcnt=0, name='pgoff'), Argument(type='int', derefcnt=0, name='flags')]), 'remove': Function(type='int', derefcnt=0, name='remove', args=[Argument(type='char', derefcnt=1, name='filename')]), 'remove_session_cb': Function(type='void', derefcnt=0, name='remove_session_cb', args=[Argument(type='ssl_ctx_st', derefcnt=1, name='ctx'), Argument(type='SSL_SESSION', derefcnt=1, name='sess')]), 'remque': Function(type='void', derefcnt=0, name='remque', args=[Argument(type='void', derefcnt=1, name='elem')]), 'remquo': Function(type='double', derefcnt=0, name='remquo', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='y'), Argument(type='int', derefcnt=1, name='quo')]), 'remquof': Function(type='float', derefcnt=0, name='remquof', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='y'), Argument(type='int', derefcnt=1, name='quo')]), 'remquol': Function(type='long', derefcnt=0, name='remquol', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='y'), Argument(type='int', derefcnt=1, name='quo')]), 'rename': Function(type='int', derefcnt=0, name='rename', args=[Argument(type='char', derefcnt=1, name='old'), Argument(type='char', derefcnt=1, name='new')]), 'renameat': Function(type='int', derefcnt=0, name='renameat', args=[Argument(type='int', derefcnt=0, name='oldfd'), Argument(type='char', derefcnt=1, name='old'), Argument(type='int', derefcnt=0, name='newfd'), Argument(type='char', derefcnt=1, name='new')]), 'res_close': Function(type='void', derefcnt=0, name='res_close', args=[]), 'res_dnok': Function(type='int', derefcnt=0, name='res_dnok', args=[Argument(type='char', derefcnt=1, name='arg0')]), 'res_hnok': Function(type='int', derefcnt=0, name='res_hnok', args=[Argument(type='char', derefcnt=1, name='arg0')]), 'res_hostalias': Function(type='char', derefcnt=1, name='res_hostalias', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='size_t', derefcnt=0, name='arg3')]), 'res_init': Function(type='int', derefcnt=0, name='res_init', args=[]), 'res_isourserver': Function(type='int', derefcnt=0, name='res_isourserver', args=[Argument(type='sockaddr_in', derefcnt=1, name='arg0')]), 'res_mailok': Function(type='int', derefcnt=0, name='res_mailok', args=[Argument(type='char', derefcnt=1, name='arg0')]), 'res_mkquery': Function(type='int', derefcnt=0, name='res_mkquery', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='u_char', derefcnt=1, name='arg4'), Argument(type='int', derefcnt=0, name='arg5'), Argument(type='u_char', derefcnt=1, name='arg6'), Argument(type='u_char', derefcnt=1, name='arg7'), Argument(type='int', derefcnt=0, name='arg8')]), 'res_nameinquery': Function(type='int', derefcnt=0, name='res_nameinquery', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='u_char', derefcnt=1, name='arg3'), Argument(type='u_char', derefcnt=1, name='arg4')]), 'res_nclose': Function(type='void', derefcnt=0, name='res_nclose', args=[Argument(type='res_state', derefcnt=0, name='arg0')]), 'res_ninit': Function(type='int', derefcnt=0, name='res_ninit', args=[Argument(type='res_state', derefcnt=0, name='arg0')]), 'res_nisourserver': Function(type='int', derefcnt=0, name='res_nisourserver', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='sockaddr_in', derefcnt=1, name='arg1')]), 'res_nmkquery': Function(type='int', derefcnt=0, name='res_nmkquery', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='int', derefcnt=0, name='arg4'), Argument(type='u_char', derefcnt=1, name='arg5'), Argument(type='int', derefcnt=0, name='arg6'), Argument(type='u_char', derefcnt=1, name='arg7'), Argument(type='u_char', derefcnt=1, name='arg8'), Argument(type='int', derefcnt=0, name='arg9')]), 'res_npquery': Function(type='void', derefcnt=0, name='res_npquery', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='FILE', derefcnt=1, name='arg3')]), 'res_nquery': Function(type='int', derefcnt=0, name='res_nquery', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='u_char', derefcnt=1, name='arg4'), Argument(type='int', derefcnt=0, name='arg5')]), 'res_nquerydomain': Function(type='int', derefcnt=0, name='res_nquerydomain', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='char', derefcnt=1, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='int', derefcnt=0, name='arg4'), Argument(type='u_char', derefcnt=1, name='arg5'), Argument(type='int', derefcnt=0, name='arg6')]), 'res_nsearch': Function(type='int', derefcnt=0, name='res_nsearch', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='u_char', derefcnt=1, name='arg4'), Argument(type='int', derefcnt=0, name='arg5')]), 'res_nsend': Function(type='int', derefcnt=0, name='res_nsend', args=[Argument(type='res_state', derefcnt=0, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='u_char', derefcnt=1, name='arg3'), Argument(type='int', derefcnt=0, name='arg4')]), 'res_ownok': Function(type='int', derefcnt=0, name='res_ownok', args=[Argument(type='char', derefcnt=1, name='arg0')]), 'res_queriesmatch': Function(type='int', derefcnt=0, name='res_queriesmatch', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='u_char', derefcnt=1, name='arg1'), Argument(type='u_char', derefcnt=1, name='arg2'), Argument(type='u_char', derefcnt=1, name='arg3')]), 'res_query': Function(type='int', derefcnt=0, name='res_query', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='u_char', derefcnt=1, name='arg3'), Argument(type='int', derefcnt=0, name='arg4')]), 'res_querydomain': Function(type='int', derefcnt=0, name='res_querydomain', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='int', derefcnt=0, name='arg3'), Argument(type='u_char', derefcnt=1, name='arg4'), Argument(type='int', derefcnt=0, name='arg5')]), 'res_randomid': Function(type='u_int', derefcnt=0, name='res_randomid', args=[]), 'res_search': Function(type='int', derefcnt=0, name='res_search', args=[Argument(type='char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=0, name='arg2'), Argument(type='u_char', derefcnt=1, name='arg3'), Argument(type='int', derefcnt=0, name='arg4')]), 'res_send': Function(type='int', derefcnt=0, name='res_send', args=[Argument(type='u_char', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='u_char', derefcnt=1, name='arg2'), Argument(type='int', derefcnt=0, name='arg3')]), 'res_send_qhook': Function(type='res_sendhookact', derefcnt=0, name='res_send_qhook', args=[Argument(type='sockaddr_in', derefcnt=2, name='ns'), Argument(type='u_char', derefcnt=2, name='query'), Argument(type='int', derefcnt=1, name='querylen'), Argument(type='u_char', derefcnt=1, name='ans'), Argument(type='int', derefcnt=0, name='anssiz'), Argument(type='int', derefcnt=1, name='resplen')]), 'res_send_rhook': Function(type='res_sendhookact', derefcnt=0, name='res_send_rhook', args=[Argument(type='sockaddr_in', derefcnt=1, name='ns'), Argument(type='u_char', derefcnt=1, name='query'), Argument(type='int', derefcnt=0, name='querylen'), Argument(type='u_char', derefcnt=1, name='ans'), Argument(type='int', derefcnt=0, name='anssiz'), Argument(type='int', derefcnt=1, name='resplen')]), 'res_state': Function(type='res_state', derefcnt=1, name='res_state', args=[]), 'revoke': Function(type='int', derefcnt=0, name='revoke', args=[Argument(type='char', derefcnt=1, name='file')]), 'rewind': Function(type='void', derefcnt=0, name='rewind', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'rewinddir': Function(type='void', derefcnt=0, name='rewinddir', args=[Argument(type='DIR', derefcnt=1, name='dirp')]), 'rexec': Function(type='int', derefcnt=0, name='rexec', args=[Argument(type='char', derefcnt=2, name='ahost'), Argument(type='int', derefcnt=0, name='rport'), Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='pass'), Argument(type='char', derefcnt=1, name='cmd'), Argument(type='int', derefcnt=1, name='fd2p')]), 'rexec_af': Function(type='int', derefcnt=0, name='rexec_af', args=[Argument(type='char', derefcnt=2, name='ahost'), Argument(type='int', derefcnt=0, name='rport'), Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='pass'), Argument(type='char', derefcnt=1, name='cmd'), Argument(type='int', derefcnt=1, name='fd2p'), Argument(type='sa_family_t', derefcnt=0, name='af')]), 'rindex': Function(type='char', derefcnt=1, name='rindex', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c')]), 'rint': Function(type='double', derefcnt=0, name='rint', args=[Argument(type='double', derefcnt=0, name='x')]), 'rintf': Function(type='float', derefcnt=0, name='rintf', args=[Argument(type='float', derefcnt=0, name='x')]), 'rintl': Function(type='long', derefcnt=0, name='rintl', args=[Argument(type='long', derefcnt=0, name='x')]), 'rmdir': Function(type='int', derefcnt=0, name='rmdir', args=[Argument(type='char', derefcnt=1, name='path')]), 'round': Function(type='double', derefcnt=0, name='round', args=[Argument(type='double', derefcnt=0, name='x')]), 'roundf': Function(type='float', derefcnt=0, name='roundf', args=[Argument(type='float', derefcnt=0, name='x')]), 'roundl': Function(type='long', derefcnt=0, name='roundl', args=[Argument(type='long', derefcnt=0, name='x')]), 'routine': Function(type='void', derefcnt=0, name='routine', args=[Argument(type='void', derefcnt=1, name='arg0')]), 'rpmatch': Function(type='int', derefcnt=0, name='rpmatch', args=[Argument(type='char', derefcnt=1, name='response')]), 'rresvport': Function(type='int', derefcnt=0, name='rresvport', args=[Argument(type='int', derefcnt=1, name='alport')]), 'rresvport_af': Function(type='int', derefcnt=0, name='rresvport_af', args=[Argument(type='int', derefcnt=1, name='alport'), Argument(type='sa_family_t', derefcnt=0, name='af')]), 'rsa_keygen': Function(type='int', derefcnt=0, name='rsa_keygen', args=[Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='bits'), Argument(type='BIGNUM', derefcnt=1, name='e'), Argument(type='BN_GENCB', derefcnt=1, name='cb')]), 'rsa_mod_exp': Function(type='int', derefcnt=0, name='rsa_mod_exp', args=[Argument(type='BIGNUM', derefcnt=1, name='r0'), Argument(type='BIGNUM', derefcnt=1, name='I'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='BN_CTX', derefcnt=1, name='ctx')]), 'rsa_priv_dec': Function(type='int', derefcnt=0, name='rsa_priv_dec', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'rsa_priv_enc': Function(type='int', derefcnt=0, name='rsa_priv_enc', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'rsa_pub_dec': Function(type='int', derefcnt=0, name='rsa_pub_dec', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'rsa_pub_enc': Function(type='int', derefcnt=0, name='rsa_pub_enc', args=[Argument(type='int', derefcnt=0, name='flen'), Argument(type='unsigned', derefcnt=1, name='from'), Argument(type='unsigned', derefcnt=1, name='to'), Argument(type='RSA', derefcnt=1, name='rsa'), Argument(type='int', derefcnt=0, name='padding')]), 'rsa_sign': Function(type='int', derefcnt=0, name='rsa_sign', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigret'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'rsa_verify': Function(type='int', derefcnt=0, name='rsa_verify', args=[Argument(type='int', derefcnt=0, name='dtype'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigbuf'), Argument(type='unsigned', derefcnt=0, name='siglen'), Argument(type='RSA', derefcnt=1, name='rsa')]), 'ruserok': Function(type='int', derefcnt=0, name='ruserok', args=[Argument(type='char', derefcnt=1, name='rhost'), Argument(type='int', derefcnt=0, name='suser'), Argument(type='char', derefcnt=1, name='remuser'), Argument(type='char', derefcnt=1, name='locuser')]), 'ruserok_af': Function(type='int', derefcnt=0, name='ruserok_af', args=[Argument(type='char', derefcnt=1, name='rhost'), Argument(type='int', derefcnt=0, name='suser'), Argument(type='char', derefcnt=1, name='remuser'), Argument(type='char', derefcnt=1, name='locuser'), Argument(type='sa_family_t', derefcnt=0, name='af')]), 'sa_restorer': Function(type='void', derefcnt=0, name='sa_restorer', args=[]), 'sa_sigaction': Function(type='void', derefcnt=0, name='sa_sigaction', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='siginfo_t', derefcnt=1, name='arg1'), Argument(type='void', derefcnt=1, name='arg2')]), 'sbrk': Function(type='void', derefcnt=1, name='sbrk', args=[Argument(type='intptr_t', derefcnt=0, name='delta')]), 'scalb': Function(type='double', derefcnt=0, name='scalb', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=0, name='n')]), 'scalbf': Function(type='float', derefcnt=0, name='scalbf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=0, name='n')]), 'scalbl': Function(type='long', derefcnt=0, name='scalbl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='n')]), 'scalbln': Function(type='double', derefcnt=0, name='scalbln', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='n')]), 'scalblnf': Function(type='float', derefcnt=0, name='scalblnf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='n')]), 'scalblnl': Function(type='long', derefcnt=0, name='scalblnl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=0, name='n')]), 'scalbn': Function(type='double', derefcnt=0, name='scalbn', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='int', derefcnt=0, name='n')]), 'scalbnf': Function(type='float', derefcnt=0, name='scalbnf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='int', derefcnt=0, name='n')]), 'scalbnl': Function(type='long', derefcnt=0, name='scalbnl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='int', derefcnt=0, name='n')]), 'scandir': Function(type='int', derefcnt=0, name='scandir', args=[Argument(type='char', derefcnt=1, name='dir'), Argument(type='dirent', derefcnt=3, name='namelist'), Argument(type='int', derefcnt=0, name='selector'), Argument(type='int', derefcnt=0, name='cmp')]), 'scandir64': Function(type='int', derefcnt=0, name='scandir64', args=[Argument(type='char', derefcnt=1, name='dir'), Argument(type='dirent64', derefcnt=3, name='namelist'), Argument(type='int', derefcnt=0, name='selector'), Argument(type='int', derefcnt=0, name='cmp')]), 'scandirat': Function(type='int', derefcnt=0, name='scandirat', args=[Argument(type='int', derefcnt=0, name='dfd'), Argument(type='char', derefcnt=1, name='dir'), Argument(type='dirent', derefcnt=3, name='namelist'), Argument(type='int', derefcnt=0, name='selector'), Argument(type='int', derefcnt=0, name='cmp')]), 'scandirat64': Function(type='int', derefcnt=0, name='scandirat64', args=[Argument(type='int', derefcnt=0, name='dfd'), Argument(type='char', derefcnt=1, name='dir'), Argument(type='dirent64', derefcnt=3, name='namelist'), Argument(type='int', derefcnt=0, name='selector'), Argument(type='int', derefcnt=0, name='cmp')]), 'scanf': Function(type='int', derefcnt=0, name='scanf', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'sched_cpualloc': Function(type='cpu_set_t', derefcnt=1, name='sched_cpualloc', args=[Argument(type='size_t', derefcnt=0, name='count')]), 'sched_cpucount': Function(type='int', derefcnt=0, name='sched_cpucount', args=[Argument(type='size_t', derefcnt=0, name='setsize'), Argument(type='cpu_set_t', derefcnt=1, name='setp')]), 'sched_cpufree': Function(type='void', derefcnt=0, name='sched_cpufree', args=[Argument(type='cpu_set_t', derefcnt=1, name='set')]), 'sched_get_priority_max': Function(type='int', derefcnt=0, name='sched_get_priority_max', args=[Argument(type='int', derefcnt=0, name='algorithm')]), 'sched_get_priority_min': Function(type='int', derefcnt=0, name='sched_get_priority_min', args=[Argument(type='int', derefcnt=0, name='algorithm')]), 'sched_getaffinity': Function(type='int', derefcnt=0, name='sched_getaffinity', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='size_t', derefcnt=0, name='cpusetsize'), Argument(type='cpu_set_t', derefcnt=1, name='cpuset')]), 'sched_getcpu': Function(type='int', derefcnt=0, name='sched_getcpu', args=[]), 'sched_getparam': Function(type='int', derefcnt=0, name='sched_getparam', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='sched_param', derefcnt=1, name='param')]), 'sched_getscheduler': Function(type='int', derefcnt=0, name='sched_getscheduler', args=[Argument(type='pid_t', derefcnt=0, name='pid')]), 'sched_rr_get_interval': Function(type='int', derefcnt=0, name='sched_rr_get_interval', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='timespec', derefcnt=1, name='t')]), 'sched_setaffinity': Function(type='int', derefcnt=0, name='sched_setaffinity', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='size_t', derefcnt=0, name='cpusetsize'), Argument(type='cpu_set_t', derefcnt=1, name='cpuset')]), 'sched_setparam': Function(type='int', derefcnt=0, name='sched_setparam', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='sched_param', derefcnt=1, name='param')]), 'sched_setscheduler': Function(type='int', derefcnt=0, name='sched_setscheduler', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='int', derefcnt=0, name='policy'), Argument(type='sched_param', derefcnt=1, name='param')]), 'sched_yield': Function(type='int', derefcnt=0, name='sched_yield', args=[]), 'secure_getenv': Function(type='char', derefcnt=1, name='secure_getenv', args=[Argument(type='char', derefcnt=1, name='name')]), 'seed48': Function(type='unsigned', derefcnt=1, name='seed48', args=[Argument(type='unsigned', derefcnt=1, name='seed16v')]), 'seed48_r': Function(type='int', derefcnt=0, name='seed48_r', args=[Argument(type='unsigned', derefcnt=1, name='seed16v'), Argument(type='drand48_data', derefcnt=1, name='buffer')]), 'seekdir': Function(type='void', derefcnt=0, name='seekdir', args=[Argument(type='DIR', derefcnt=1, name='dirp'), Argument(type='long', derefcnt=0, name='pos')]), 'select': Function(type='int', derefcnt=0, name='select', args=[Argument(type='int', derefcnt=0, name='nfds'), Argument(type='fd_set', derefcnt=1, name='readfds'), Argument(type='fd_set', derefcnt=1, name='writefds'), Argument(type='fd_set', derefcnt=1, name='exceptfds'), Argument(type='timeval', derefcnt=1, name='timeout')]), 'sem_close': Function(type='int', derefcnt=0, name='sem_close', args=[Argument(type='sem_t', derefcnt=1, name='sem')]), 'sem_destroy': Function(type='int', derefcnt=0, name='sem_destroy', args=[Argument(type='sem_t', derefcnt=1, name='sem')]), 'sem_getvalue': Function(type='int', derefcnt=0, name='sem_getvalue', args=[Argument(type='sem_t', derefcnt=1, name='sem'), Argument(type='int', derefcnt=1, name='sval')]), 'sem_init': Function(type='int', derefcnt=0, name='sem_init', args=[Argument(type='sem_t', derefcnt=1, name='sem'), Argument(type='int', derefcnt=0, name='pshared'), Argument(type='unsigned', derefcnt=0, name='value')]), 'sem_open': Function(type='sem_t', derefcnt=1, name='sem_open', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='int', derefcnt=0, name='vararg')]), 'sem_post': Function(type='int', derefcnt=0, name='sem_post', args=[Argument(type='sem_t', derefcnt=1, name='sem')]), 'sem_timedwait': Function(type='int', derefcnt=0, name='sem_timedwait', args=[Argument(type='sem_t', derefcnt=1, name='sem'), Argument(type='timespec', derefcnt=1, name='abstime')]), 'sem_trywait': Function(type='int', derefcnt=0, name='sem_trywait', args=[Argument(type='sem_t', derefcnt=1, name='sem')]), 'sem_unlink': Function(type='int', derefcnt=0, name='sem_unlink', args=[Argument(type='char', derefcnt=1, name='name')]), 'sem_wait': Function(type='int', derefcnt=0, name='sem_wait', args=[Argument(type='sem_t', derefcnt=1, name='sem')]), 'semctl': Function(type='int', derefcnt=0, name='semctl', args=[Argument(type='int', derefcnt=0, name='semid'), Argument(type='int', derefcnt=0, name='semnum'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='int', derefcnt=0, name='vararg')]), 'semget': Function(type='int', derefcnt=0, name='semget', args=[Argument(type='key_t', derefcnt=0, name='key'), Argument(type='int', derefcnt=0, name='nsems'), Argument(type='int', derefcnt=0, name='semflg')]), 'semop': Function(type='int', derefcnt=0, name='semop', args=[Argument(type='int', derefcnt=0, name='semid'), Argument(type='sembuf', derefcnt=1, name='sops'), Argument(type='size_t', derefcnt=0, name='nsops')]), 'semtimedop': Function(type='int', derefcnt=0, name='semtimedop', args=[Argument(type='int', derefcnt=0, name='semid'), Argument(type='sembuf', derefcnt=1, name='sops'), Argument(type='size_t', derefcnt=0, name='nsops'), Argument(type='timespec', derefcnt=1, name='timeout')]), 'send': Function(type='ssize_t', derefcnt=0, name='send', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=0, name='flags')]), 'sendfile': Function(type='ssize_t', derefcnt=0, name='sendfile', args=[Argument(type='int', derefcnt=0, name='out_fd'), Argument(type='int', derefcnt=0, name='in_fd'), Argument(type='off_t', derefcnt=1, name='offset'), Argument(type='size_t', derefcnt=0, name='count')]), 'sendfile64': Function(type='ssize_t', derefcnt=0, name='sendfile64', args=[Argument(type='int', derefcnt=0, name='out_fd'), Argument(type='int', derefcnt=0, name='in_fd'), Argument(type='off64_t', derefcnt=1, name='offset'), Argument(type='size_t', derefcnt=0, name='count')]), 'sendmmsg': Function(type='int', derefcnt=0, name='sendmmsg', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='mmsghdr', derefcnt=1, name='vmessages'), Argument(type='unsigned', derefcnt=0, name='vlen'), Argument(type='int', derefcnt=0, name='flags')]), 'sendmsg': Function(type='ssize_t', derefcnt=0, name='sendmsg', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='msghdr', derefcnt=1, name='message'), Argument(type='int', derefcnt=0, name='flags')]), 'sendto': Function(type='ssize_t', derefcnt=0, name='sendto', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='CONST_SOCKADDR_ARG', derefcnt=0, name='addr'), Argument(type='socklen_t', derefcnt=0, name='addr_len')]), 'set_asn1_parameters': Function(type='int', derefcnt=0, name='set_asn1_parameters', args=[Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='arg0'), Argument(type='ASN1_TYPE', derefcnt=1, name='arg1')]), 'setaliasent': Function(type='void', derefcnt=0, name='setaliasent', args=[]), 'setbuf': Function(type='void', derefcnt=0, name='setbuf', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='char', derefcnt=1, name='buf')]), 'setbuffer': Function(type='void', derefcnt=0, name='setbuffer', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='size')]), 'setcontext': Function(type='int', derefcnt=0, name='setcontext', args=[Argument(type='ucontext_t', derefcnt=1, name='ucp')]), 'setdomainname': Function(type='int', derefcnt=0, name='setdomainname', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='size_t', derefcnt=0, name='len')]), 'setegid': Function(type='int', derefcnt=0, name='setegid', args=[Argument(type='gid_t', derefcnt=0, name='gid')]), 'setenv': Function(type='int', derefcnt=0, name='setenv', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='char', derefcnt=1, name='value'), Argument(type='int', derefcnt=0, name='replace')]), 'seteuid': Function(type='int', derefcnt=0, name='seteuid', args=[Argument(type='uid_t', derefcnt=0, name='uid')]), 'setfsent': Function(type='int', derefcnt=0, name='setfsent', args=[]), 'setgid': Function(type='int', derefcnt=0, name='setgid', args=[Argument(type='gid_t', derefcnt=0, name='gid')]), 'setgrent': Function(type='void', derefcnt=0, name='setgrent', args=[]), 'setgroups': Function(type='int', derefcnt=0, name='setgroups', args=[Argument(type='size_t', derefcnt=0, name='n'), Argument(type='gid_t', derefcnt=1, name='groups')]), 'sethostent': Function(type='void', derefcnt=0, name='sethostent', args=[Argument(type='int', derefcnt=0, name='stay_open')]), 'sethostid': Function(type='int', derefcnt=0, name='sethostid', args=[Argument(type='long', derefcnt=0, name='id')]), 'sethostname': Function(type='int', derefcnt=0, name='sethostname', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='size_t', derefcnt=0, name='len')]), 'setipv4sourcefilter': Function(type='int', derefcnt=0, name='setipv4sourcefilter', args=[Argument(type='int', derefcnt=0, name='s'), Argument(type='in_addr', derefcnt=0, name='interface_addr'), Argument(type='in_addr', derefcnt=0, name='group'), Argument(type='uint32_t', derefcnt=0, name='fmode'), Argument(type='uint32_t', derefcnt=0, name='numsrc'), Argument(type='in_addr', derefcnt=1, name='slist')]), 'setitimer': Function(type='int', derefcnt=0, name='setitimer', args=[Argument(type='itimer_which_t', derefcnt=0, name='which'), Argument(type='itimerval', derefcnt=1, name='new'), Argument(type='itimerval', derefcnt=1, name='old')]), 'setjmp': Function(type='int', derefcnt=0, name='setjmp', args=[Argument(type='jmp_buf_tag', derefcnt=1, name='env')]), 'setkey': Function(type='void', derefcnt=0, name='setkey', args=[Argument(type='char', derefcnt=1, name='key')]), 'setkey_r': Function(type='void', derefcnt=0, name='setkey_r', args=[Argument(type='char', derefcnt=1, name='key'), Argument(type='crypt_data', derefcnt=1, name='data')]), 'setlinebuf': Function(type='void', derefcnt=0, name='setlinebuf', args=[Argument(type='FILE', derefcnt=1, name='stream')]), 'setlocale': Function(type='char', derefcnt=1, name='setlocale', args=[Argument(type='int', derefcnt=0, name='category'), Argument(type='char', derefcnt=1, name='locale')]), 'setlogin': Function(type='int', derefcnt=0, name='setlogin', args=[Argument(type='char', derefcnt=1, name='name')]), 'setlogmask': Function(type='int', derefcnt=0, name='setlogmask', args=[Argument(type='int', derefcnt=0, name='mask')]), 'setmntent': Function(type='FILE', derefcnt=1, name='setmntent', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='char', derefcnt=1, name='mode')]), 'setnetent': Function(type='void', derefcnt=0, name='setnetent', args=[Argument(type='int', derefcnt=0, name='stay_open')]), 'setnetgrent': Function(type='int', derefcnt=0, name='setnetgrent', args=[Argument(type='char', derefcnt=1, name='netgroup')]), 'setns': Function(type='int', derefcnt=0, name='setns', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='nstype')]), 'setpgid': Function(type='int', derefcnt=0, name='setpgid', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='pid_t', derefcnt=0, name='pgid')]), 'setpgrp': Function(type='int', derefcnt=0, name='setpgrp', args=[]), 'setpriority': Function(type='int', derefcnt=0, name='setpriority', args=[Argument(type='priority_which_t', derefcnt=0, name='which'), Argument(type='id_t', derefcnt=0, name='who'), Argument(type='int', derefcnt=0, name='prio')]), 'setprotoent': Function(type='void', derefcnt=0, name='setprotoent', args=[Argument(type='int', derefcnt=0, name='stay_open')]), 'setpwent': Function(type='void', derefcnt=0, name='setpwent', args=[]), 'setregid': Function(type='int', derefcnt=0, name='setregid', args=[Argument(type='gid_t', derefcnt=0, name='rgid'), Argument(type='gid_t', derefcnt=0, name='egid')]), 'setresgid': Function(type='int', derefcnt=0, name='setresgid', args=[Argument(type='gid_t', derefcnt=0, name='rgid'), Argument(type='gid_t', derefcnt=0, name='egid'), Argument(type='gid_t', derefcnt=0, name='sgid')]), 'setresuid': Function(type='int', derefcnt=0, name='setresuid', args=[Argument(type='uid_t', derefcnt=0, name='ruid'), Argument(type='uid_t', derefcnt=0, name='euid'), Argument(type='uid_t', derefcnt=0, name='suid')]), 'setreuid': Function(type='int', derefcnt=0, name='setreuid', args=[Argument(type='uid_t', derefcnt=0, name='ruid'), Argument(type='uid_t', derefcnt=0, name='euid')]), 'setrlimit': Function(type='int', derefcnt=0, name='setrlimit', args=[Argument(type='rlimit_resource_t', derefcnt=0, name='resource'), Argument(type='rlimit', derefcnt=1, name='rlimits')]), 'setrlimit64': Function(type='int', derefcnt=0, name='setrlimit64', args=[Argument(type='rlimit_resource_t', derefcnt=0, name='resource'), Argument(type='rlimit64', derefcnt=1, name='rlimits')]), 'setrpcent': Function(type='void', derefcnt=0, name='setrpcent', args=[Argument(type='int', derefcnt=0, name='stayopen')]), 'setservent': Function(type='void', derefcnt=0, name='setservent', args=[Argument(type='int', derefcnt=0, name='stay_open')]), 'setsgent': Function(type='void', derefcnt=0, name='setsgent', args=[]), 'setsid': Function(type='pid_t', derefcnt=0, name='setsid', args=[]), 'setsockopt': Function(type='int', derefcnt=0, name='setsockopt', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='level'), Argument(type='int', derefcnt=0, name='optname'), Argument(type='void', derefcnt=1, name='optval'), Argument(type='socklen_t', derefcnt=0, name='optlen')]), 'setsourcefilter': Function(type='int', derefcnt=0, name='setsourcefilter', args=[Argument(type='int', derefcnt=0, name='s'), Argument(type='uint32_t', derefcnt=0, name='interface_addr'), Argument(type='sockaddr', derefcnt=1, name='group'), Argument(type='socklen_t', derefcnt=0, name='grouplen'), Argument(type='uint32_t', derefcnt=0, name='fmode'), Argument(type='uint32_t', derefcnt=0, name='numsrc'), Argument(type='sockaddr_storage', derefcnt=1, name='slist')]), 'setspent': Function(type='void', derefcnt=0, name='setspent', args=[]), 'setstate': Function(type='char', derefcnt=1, name='setstate', args=[Argument(type='char', derefcnt=1, name='statebuf')]), 'setstate_r': Function(type='int', derefcnt=0, name='setstate_r', args=[Argument(type='char', derefcnt=1, name='statebuf'), Argument(type='random_data', derefcnt=1, name='buf')]), 'settimeofday': Function(type='int', derefcnt=0, name='settimeofday', args=[Argument(type='timeval', derefcnt=1, name='tv'), Argument(type='timezone', derefcnt=1, name='tz')]), 'setttyent': Function(type='int', derefcnt=0, name='setttyent', args=[]), 'setuid': Function(type='int', derefcnt=0, name='setuid', args=[Argument(type='uid_t', derefcnt=0, name='uid')]), 'setusershell': Function(type='void', derefcnt=0, name='setusershell', args=[]), 'setutent': Function(type='void', derefcnt=0, name='setutent', args=[]), 'setutxent': Function(type='void', derefcnt=0, name='setutxent', args=[]), 'setvbuf': Function(type='int', derefcnt=0, name='setvbuf', args=[Argument(type='FILE', derefcnt=1, name='stream'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='modes'), Argument(type='size_t', derefcnt=0, name='n')]), 'sgetsgent': Function(type='sgrp', derefcnt=1, name='sgetsgent', args=[Argument(type='char', derefcnt=1, name='string')]), 'sgetsgent_r': Function(type='int', derefcnt=0, name='sgetsgent_r', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='sgrp', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='sgrp', derefcnt=2, name='result')]), 'sgetspent': Function(type='spwd', derefcnt=1, name='sgetspent', args=[Argument(type='char', derefcnt=1, name='string')]), 'sgetspent_r': Function(type='int', derefcnt=0, name='sgetspent_r', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='spwd', derefcnt=1, name='result_buf'), Argument(type='char', derefcnt=1, name='buffer'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='spwd', derefcnt=2, name='result')]), 'shm_open': Function(type='int', derefcnt=0, name='shm_open', args=[Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='oflag'), Argument(type='mode_t', derefcnt=0, name='mode')]), 'shm_unlink': Function(type='int', derefcnt=0, name='shm_unlink', args=[Argument(type='char', derefcnt=1, name='name')]), 'shmat': Function(type='void', derefcnt=1, name='shmat', args=[Argument(type='int', derefcnt=0, name='shmid'), Argument(type='void', derefcnt=1, name='shmaddr'), Argument(type='int', derefcnt=0, name='shmflg')]), 'shmctl': Function(type='int', derefcnt=0, name='shmctl', args=[Argument(type='int', derefcnt=0, name='shmid'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='shmid_ds', derefcnt=1, name='buf')]), 'shmdt': Function(type='int', derefcnt=0, name='shmdt', args=[Argument(type='void', derefcnt=1, name='shmaddr')]), 'shmget': Function(type='int', derefcnt=0, name='shmget', args=[Argument(type='key_t', derefcnt=0, name='key'), Argument(type='size_t', derefcnt=0, name='size'), Argument(type='int', derefcnt=0, name='shmflg')]), 'shutdown': Function(type='int', derefcnt=0, name='shutdown', args=[Argument(type='X509_LOOKUP', derefcnt=1, name='ctx')]), 'sigaction': Function(type='int', derefcnt=0, name='sigaction', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='sigaction', derefcnt=1, name='act'), Argument(type='sigaction', derefcnt=1, name='oact')]), 'sigaddset': Function(type='int', derefcnt=0, name='sigaddset', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='int', derefcnt=0, name='signo')]), 'sigaltstack': Function(type='int', derefcnt=0, name='sigaltstack', args=[Argument(type='sigaltstack', derefcnt=1, name='ss'), Argument(type='sigaltstack', derefcnt=1, name='oss')]), 'sigandset': Function(type='int', derefcnt=0, name='sigandset', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='sigset_t', derefcnt=1, name='left'), Argument(type='sigset_t', derefcnt=1, name='right')]), 'sigblock': Function(type='int', derefcnt=0, name='sigblock', args=[Argument(type='int', derefcnt=0, name='mask')]), 'sigdelset': Function(type='int', derefcnt=0, name='sigdelset', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='int', derefcnt=0, name='signo')]), 'sigemptyset': Function(type='int', derefcnt=0, name='sigemptyset', args=[Argument(type='sigset_t', derefcnt=1, name='set')]), 'sigfillset': Function(type='int', derefcnt=0, name='sigfillset', args=[Argument(type='sigset_t', derefcnt=1, name='set')]), 'siggetmask': Function(type='int', derefcnt=0, name='siggetmask', args=[]), 'sighandler_t': Function(type='void', derefcnt=0, name='sighandler_t', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'sighold': Function(type='int', derefcnt=0, name='sighold', args=[Argument(type='int', derefcnt=0, name='sig')]), 'sigignore': Function(type='int', derefcnt=0, name='sigignore', args=[Argument(type='int', derefcnt=0, name='sig')]), 'siginterrupt': Function(type='int', derefcnt=0, name='siginterrupt', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='int', derefcnt=0, name='interrupt')]), 'sigisemptyset': Function(type='int', derefcnt=0, name='sigisemptyset', args=[Argument(type='sigset_t', derefcnt=1, name='set')]), 'sigismember': Function(type='int', derefcnt=0, name='sigismember', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='int', derefcnt=0, name='signo')]), 'siglongjmp': Function(type='void', derefcnt=0, name='siglongjmp', args=[Argument(type='sigjmp_buf', derefcnt=0, name='env'), Argument(type='int', derefcnt=0, name='val')]), 'sign': Function(type='int', derefcnt=0, name='sign', args=[Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='m'), Argument(type='unsigned', derefcnt=0, name='m_length'), Argument(type='unsigned', derefcnt=1, name='sigret'), Argument(type='unsigned', derefcnt=1, name='siglen'), Argument(type='void', derefcnt=1, name='key')]), 'signal': Function(type='sighandler_t', derefcnt=0, name='signal', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='sighandler_t', derefcnt=0, name='handler')]), 'signbit': Function(type='int', derefcnt=0, name='signbit', args=[Argument(type='double', derefcnt=0, name='value')]), 'signbitf': Function(type='int', derefcnt=0, name='signbitf', args=[Argument(type='float', derefcnt=0, name='value')]), 'signbitl': Function(type='int', derefcnt=0, name='signbitl', args=[Argument(type='long', derefcnt=0, name='value')]), 'significand': Function(type='double', derefcnt=0, name='significand', args=[Argument(type='double', derefcnt=0, name='x')]), 'significandf': Function(type='float', derefcnt=0, name='significandf', args=[Argument(type='float', derefcnt=0, name='x')]), 'significandl': Function(type='long', derefcnt=0, name='significandl', args=[Argument(type='long', derefcnt=0, name='x')]), 'sigorset': Function(type='int', derefcnt=0, name='sigorset', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='sigset_t', derefcnt=1, name='left'), Argument(type='sigset_t', derefcnt=1, name='right')]), 'sigpause': Function(type='int', derefcnt=0, name='sigpause', args=[Argument(type='int', derefcnt=0, name='sig')]), 'sigpending': Function(type='int', derefcnt=0, name='sigpending', args=[Argument(type='sigset_t', derefcnt=1, name='set')]), 'sigprocmask': Function(type='int', derefcnt=0, name='sigprocmask', args=[Argument(type='int', derefcnt=0, name='how'), Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='sigset_t', derefcnt=1, name='oset')]), 'sigqueue': Function(type='int', derefcnt=0, name='sigqueue', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='int', derefcnt=0, name='sig'), Argument(type='sigval', derefcnt=0, name='val')]), 'sigrelse': Function(type='int', derefcnt=0, name='sigrelse', args=[Argument(type='int', derefcnt=0, name='sig')]), 'sigreturn': Function(type='int', derefcnt=0, name='sigreturn', args=[Argument(type='sigcontext', derefcnt=1, name='scp')]), 'sigset': Function(type='sighandler_t', derefcnt=0, name='sigset', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='sighandler_t', derefcnt=0, name='disp')]), 'sigsetjmp': Function(type='int', derefcnt=0, name='sigsetjmp', args=[Argument(type='jmp_buf_tag', derefcnt=1, name='env'), Argument(type='int', derefcnt=0, name='savemask')]), 'sigsetmask': Function(type='int', derefcnt=0, name='sigsetmask', args=[Argument(type='int', derefcnt=0, name='mask')]), 'sigstack': Function(type='int', derefcnt=0, name='sigstack', args=[Argument(type='sigstack', derefcnt=1, name='ss'), Argument(type='sigstack', derefcnt=1, name='oss')]), 'sigsuspend': Function(type='int', derefcnt=0, name='sigsuspend', args=[Argument(type='sigset_t', derefcnt=1, name='set')]), 'sigtimedwait': Function(type='int', derefcnt=0, name='sigtimedwait', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='siginfo_t', derefcnt=1, name='info'), Argument(type='timespec', derefcnt=1, name='timeout')]), 'sigvec': Function(type='int', derefcnt=0, name='sigvec', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='sigvec', derefcnt=1, name='vec'), Argument(type='sigvec', derefcnt=1, name='ovec')]), 'sigwait': Function(type='int', derefcnt=0, name='sigwait', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='int', derefcnt=1, name='sig')]), 'sigwaitinfo': Function(type='int', derefcnt=0, name='sigwaitinfo', args=[Argument(type='sigset_t', derefcnt=1, name='set'), Argument(type='siginfo_t', derefcnt=1, name='info')]), 'sin': Function(type='double', derefcnt=0, name='sin', args=[Argument(type='double', derefcnt=0, name='x')]), 'sincos': Function(type='void', derefcnt=0, name='sincos', args=[Argument(type='double', derefcnt=0, name='x'), Argument(type='double', derefcnt=1, name='sinx'), Argument(type='double', derefcnt=1, name='cosx')]), 'sincosf': Function(type='void', derefcnt=0, name='sincosf', args=[Argument(type='float', derefcnt=0, name='x'), Argument(type='float', derefcnt=1, name='sinx'), Argument(type='float', derefcnt=1, name='cosx')]), 'sincosl': Function(type='void', derefcnt=0, name='sincosl', args=[Argument(type='long', derefcnt=0, name='x'), Argument(type='long', derefcnt=1, name='sinx'), Argument(type='long', derefcnt=1, name='cosx')]), 'sinf': Function(type='float', derefcnt=0, name='sinf', args=[Argument(type='float', derefcnt=0, name='x')]), 'sinh': Function(type='double', derefcnt=0, name='sinh', args=[Argument(type='double', derefcnt=0, name='x')]), 'sinhf': Function(type='float', derefcnt=0, name='sinhf', args=[Argument(type='float', derefcnt=0, name='x')]), 'sinhl': Function(type='long', derefcnt=0, name='sinhl', args=[Argument(type='long', derefcnt=0, name='x')]), 'sinl': Function(type='long', derefcnt=0, name='sinl', args=[Argument(type='long', derefcnt=0, name='x')]), 'sk_delete': Function(type='void', derefcnt=1, name='sk_delete', args=[Argument(type='STACK', derefcnt=1, name='st'), Argument(type='int', derefcnt=0, name='loc')]), 'sk_delete_ptr': Function(type='void', derefcnt=1, name='sk_delete_ptr', args=[Argument(type='STACK', derefcnt=1, name='st'), Argument(type='void', derefcnt=1, name='p')]), 'sk_dup': Function(type='STACK', derefcnt=1, name='sk_dup', args=[Argument(type='STACK', derefcnt=1, name='st')]), 'sk_find': Function(type='int', derefcnt=0, name='sk_find', args=[Argument(type='STACK', derefcnt=1, name='st'), Argument(type='void', derefcnt=1, name='data')]), 'sk_find_ex': Function(type='int', derefcnt=0, name='sk_find_ex', args=[Argument(type='STACK', derefcnt=1, name='st'), Argument(type='void', derefcnt=1, name='data')]), 'sk_free': Function(type='void', derefcnt=0, name='sk_free', args=[Argument(type='STACK', derefcnt=1, name='arg0')]), 'sk_insert': Function(type='int', derefcnt=0, name='sk_insert', args=[Argument(type='STACK', derefcnt=1, name='sk'), Argument(type='void', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='where')]), 'sk_is_sorted': Function(type='int', derefcnt=0, name='sk_is_sorted', args=[Argument(type='STACK', derefcnt=1, name='st')]), 'sk_new': Function(type='STACK', derefcnt=1, name='sk_new', args=[Argument(type='int', derefcnt=0, name='cmp')]), 'sk_new_null': Function(type='STACK', derefcnt=1, name='sk_new_null', args=[]), 'sk_num': Function(type='int', derefcnt=0, name='sk_num', args=[Argument(type='STACK', derefcnt=1, name='arg0')]), 'sk_pop': Function(type='void', derefcnt=1, name='sk_pop', args=[Argument(type='STACK', derefcnt=1, name='st')]), 'sk_pop_free': Function(type='void', derefcnt=0, name='sk_pop_free', args=[Argument(type='STACK', derefcnt=1, name='st'), Argument(type='void', derefcnt=0, name='func')]), 'sk_push': Function(type='int', derefcnt=0, name='sk_push', args=[Argument(type='STACK', derefcnt=1, name='st'), Argument(type='void', derefcnt=1, name='data')]), 'sk_set': Function(type='void', derefcnt=1, name='sk_set', args=[Argument(type='STACK', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='void', derefcnt=1, name='arg2')]), 'sk_set_cmp_func': Function(type='int', derefcnt=0, name='sk_set_cmp_func', args=[Argument(type='STACK', derefcnt=1, name='sk'), Argument(type='int', derefcnt=0, name='c')]), 'sk_shift': Function(type='void', derefcnt=1, name='sk_shift', args=[Argument(type='STACK', derefcnt=1, name='st')]), 'sk_sort': Function(type='void', derefcnt=0, name='sk_sort', args=[Argument(type='STACK', derefcnt=1, name='st')]), 'sk_unshift': Function(type='int', derefcnt=0, name='sk_unshift', args=[Argument(type='STACK', derefcnt=1, name='st'), Argument(type='void', derefcnt=1, name='data')]), 'sk_value': Function(type='void', derefcnt=1, name='sk_value', args=[Argument(type='STACK', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1')]), 'sk_zero': Function(type='void', derefcnt=0, name='sk_zero', args=[Argument(type='STACK', derefcnt=1, name='st')]), 'sleep': Function(type='unsigned', derefcnt=0, name='sleep', args=[Argument(type='unsigned', derefcnt=0, name='seconds')]), 'snprintf': Function(type='int', derefcnt=0, name='snprintf', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxlen'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '___snprintf_chk': Function(type='int', derefcnt=0, name='___snprintf_chk', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxlen'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='size_t', derefcnt=0, name='slen'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'sockatmark': Function(type='int', derefcnt=0, name='sockatmark', args=[Argument(type='int', derefcnt=0, name='fd')]), 'socket': Function(type='int', derefcnt=0, name='socket', args=[Argument(type='int', derefcnt=0, name='domain'), Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='protocol')]), 'socketpair': Function(type='int', derefcnt=0, name='socketpair', args=[Argument(type='int', derefcnt=0, name='domain'), Argument(type='int', derefcnt=0, name='type'), Argument(type='int', derefcnt=0, name='protocol'), Argument(type='int', derefcnt=1, name='fds')]), 'splice': Function(type='ssize_t', derefcnt=0, name='splice', args=[Argument(type='int', derefcnt=0, name='fdin'), Argument(type='off64_t', derefcnt=1, name='offin'), Argument(type='int', derefcnt=0, name='fdout'), Argument(type='off64_t', derefcnt=1, name='offout'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'sprintf': Function(type='int', derefcnt=0, name='sprintf', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '___sprintf_chk': Function(type='int', derefcnt=0, name='___sprintf_chk', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='size_t', derefcnt=0, name='slen'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'sqrt': Function(type='double', derefcnt=0, name='sqrt', args=[Argument(type='double', derefcnt=0, name='x')]), 'sqrtf': Function(type='float', derefcnt=0, name='sqrtf', args=[Argument(type='float', derefcnt=0, name='x')]), 'sqrtl': Function(type='long', derefcnt=0, name='sqrtl', args=[Argument(type='long', derefcnt=0, name='x')]), 'srand': Function(type='void', derefcnt=0, name='srand', args=[Argument(type='unsigned', derefcnt=0, name='seed')]), 'srand48': Function(type='void', derefcnt=0, name='srand48', args=[Argument(type='long', derefcnt=0, name='seedval')]), 'srand48_r': Function(type='int', derefcnt=0, name='srand48_r', args=[Argument(type='long', derefcnt=0, name='seedval'), Argument(type='drand48_data', derefcnt=1, name='buffer')]), 'srandom': Function(type='void', derefcnt=0, name='srandom', args=[Argument(type='unsigned', derefcnt=0, name='seed')]), 'srandom_r': Function(type='int', derefcnt=0, name='srandom_r', args=[Argument(type='unsigned', derefcnt=0, name='seed'), Argument(type='random_data', derefcnt=1, name='buf')]), 'sscanf': Function(type='int', derefcnt=0, name='sscanf', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'ssignal': Function(type='sighandler_t', derefcnt=0, name='ssignal', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='sighandler_t', derefcnt=0, name='handler')]), 'ssl_accept': Function(type='int', derefcnt=0, name='ssl_accept', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_callback_ctrl': Function(type='long', derefcnt=0, name='ssl_callback_ctrl', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='cb_id'), Argument(type='void', derefcnt=0, name='fp')]), 'ssl_clear': Function(type='void', derefcnt=0, name='ssl_clear', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_connect': Function(type='int', derefcnt=0, name='ssl_connect', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_ctrl': Function(type='long', derefcnt=0, name='ssl_ctrl', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg'), Argument(type='void', derefcnt=1, name='parg')]), 'ssl_ctx_callback_ctrl': Function(type='long', derefcnt=0, name='ssl_ctx_callback_ctrl', args=[Argument(type='SSL_CTX', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='cb_id'), Argument(type='void', derefcnt=0, name='fp')]), 'ssl_ctx_ctrl': Function(type='long', derefcnt=0, name='ssl_ctx_ctrl', args=[Argument(type='SSL_CTX', derefcnt=1, name='ctx'), Argument(type='int', derefcnt=0, name='cmd'), Argument(type='long', derefcnt=0, name='larg'), Argument(type='void', derefcnt=1, name='parg')]), 'ssl_dispatch_alert': Function(type='int', derefcnt=0, name='ssl_dispatch_alert', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_free': Function(type='void', derefcnt=0, name='ssl_free', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_get_message': Function(type='long', derefcnt=0, name='ssl_get_message', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='st1'), Argument(type='int', derefcnt=0, name='stn'), Argument(type='int', derefcnt=0, name='mt'), Argument(type='long', derefcnt=0, name='max'), Argument(type='int', derefcnt=1, name='ok')]), 'ssl_new': Function(type='int', derefcnt=0, name='ssl_new', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_peek': Function(type='int', derefcnt=0, name='ssl_peek', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'ssl_pending': Function(type='int', derefcnt=0, name='ssl_pending', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_read': Function(type='int', derefcnt=0, name='ssl_read', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'ssl_read_bytes': Function(type='int', derefcnt=0, name='ssl_read_bytes', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len'), Argument(type='int', derefcnt=0, name='peek')]), 'ssl_renegotiate': Function(type='int', derefcnt=0, name='ssl_renegotiate', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_renegotiate_check': Function(type='int', derefcnt=0, name='ssl_renegotiate_check', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_shutdown': Function(type='int', derefcnt=0, name='ssl_shutdown', args=[Argument(type='SSL', derefcnt=1, name='s')]), 'ssl_version': Function(type='int', derefcnt=0, name='ssl_version', args=[]), 'ssl_write': Function(type='int', derefcnt=0, name='ssl_write', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='int', derefcnt=0, name='len')]), 'ssl_write_bytes': Function(type='int', derefcnt=0, name='ssl_write_bytes', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='type'), Argument(type='void', derefcnt=1, name='buf_'), Argument(type='int', derefcnt=0, name='len')]), 'stat': Function(type='int', derefcnt=0, name='stat', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='stat', derefcnt=1, name='buf')]), 'stat64': Function(type='int', derefcnt=0, name='stat64', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='stat64', derefcnt=1, name='buf')]), 'step': Function(type='int', derefcnt=0, name='step', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='char', derefcnt=1, name='expbuf')]), 'stime': Function(type='int', derefcnt=0, name='stime', args=[Argument(type='time_t', derefcnt=1, name='when')]), 'stpcpy': Function(type='char', derefcnt=1, name='stpcpy', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src')]), '__stpcpy_chk': Function(type='char', derefcnt=1, name='__stpcpy_chk', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'stpncpy': Function(type='char', derefcnt=1, name='stpncpy', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__stpncpy_chk': Function(type='char', derefcnt=1, name='__stpncpy_chk', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'strcasecmp': Function(type='int', derefcnt=0, name='strcasecmp', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2')]), 'strcasecmp_l': Function(type='int', derefcnt=0, name='strcasecmp_l', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strcasestr': Function(type='char', derefcnt=1, name='strcasestr', args=[Argument(type='char', derefcnt=1, name='haystack'), Argument(type='char', derefcnt=1, name='needle')]), 'strcat': Function(type='char', derefcnt=1, name='strcat', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src')]), '__strcat_chk': Function(type='char', derefcnt=1, name='__strcat_chk', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'strchr': Function(type='char', derefcnt=1, name='strchr', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c')]), 'strchrnul': Function(type='char', derefcnt=1, name='strchrnul', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c')]), 'strcmp': Function(type='int', derefcnt=0, name='strcmp', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2')]), 'strcoll': Function(type='int', derefcnt=0, name='strcoll', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2')]), 'strcoll_l': Function(type='int', derefcnt=0, name='strcoll_l', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2'), Argument(type='locale_t', derefcnt=0, name='l')]), 'strcpy': Function(type='char', derefcnt=1, name='strcpy', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src')]), '__strcpy_chk': Function(type='char', derefcnt=1, name='__strcpy_chk', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'strcspn': Function(type='size_t', derefcnt=0, name='strcspn', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='reject')]), 'strdup': Function(type='char', derefcnt=1, name='strdup', args=[Argument(type='char', derefcnt=1, name='s')]), 'strerror': Function(type='char', derefcnt=1, name='strerror', args=[Argument(type='int', derefcnt=0, name='errnum')]), 'strerror_l': Function(type='char', derefcnt=1, name='strerror_l', args=[Argument(type='int', derefcnt=0, name='errnum'), Argument(type='locale_t', derefcnt=0, name='l')]), 'strerror_r': Function(type='char', derefcnt=1, name='strerror_r', args=[Argument(type='int', derefcnt=0, name='errnum'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'strfmon': Function(type='ssize_t', derefcnt=0, name='strfmon', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxsize'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'strfmon_l': Function(type='ssize_t', derefcnt=0, name='strfmon_l', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxsize'), Argument(type='locale_t', derefcnt=0, name='loc'), Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'strfry': Function(type='char', derefcnt=1, name='strfry', args=[Argument(type='char', derefcnt=1, name='string')]), 'strftime': Function(type='size_t', derefcnt=0, name='strftime', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxsize'), Argument(type='char', derefcnt=1, name='format'), Argument(type='tm', derefcnt=1, name='tp')]), 'strftime_l': Function(type='size_t', derefcnt=0, name='strftime_l', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxsize'), Argument(type='char', derefcnt=1, name='format'), Argument(type='tm', derefcnt=1, name='tp'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strlen': Function(type='size_t', derefcnt=0, name='strlen', args=[Argument(type='char', derefcnt=1, name='s')]), 'strncasecmp': Function(type='int', derefcnt=0, name='strncasecmp', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'strncasecmp_l': Function(type='int', derefcnt=0, name='strncasecmp_l', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strncat': Function(type='char', derefcnt=1, name='strncat', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__strncat_chk': Function(type='char', derefcnt=1, name='__strncat_chk', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='s1len')]), 'strncmp': Function(type='int', derefcnt=0, name='strncmp', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'strncpy': Function(type='char', derefcnt=1, name='strncpy', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__strncpy_chk': Function(type='char', derefcnt=1, name='__strncpy_chk', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='s1len')]), 'strndup': Function(type='char', derefcnt=1, name='strndup', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='size_t', derefcnt=0, name='n')]), 'strnlen': Function(type='size_t', derefcnt=0, name='strnlen', args=[Argument(type='char', derefcnt=1, name='string'), Argument(type='size_t', derefcnt=0, name='maxlen')]), 'strpbrk': Function(type='char', derefcnt=1, name='strpbrk', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='accept')]), 'strptime': Function(type='char', derefcnt=1, name='strptime', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='tm', derefcnt=1, name='tp')]), 'strptime_l': Function(type='char', derefcnt=1, name='strptime_l', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='tm', derefcnt=1, name='tp'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strrchr': Function(type='char', derefcnt=1, name='strrchr', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='c')]), 'strsep': Function(type='char', derefcnt=1, name='strsep', args=[Argument(type='char', derefcnt=2, name='stringp'), Argument(type='char', derefcnt=1, name='delim')]), 'strsignal': Function(type='char', derefcnt=1, name='strsignal', args=[Argument(type='int', derefcnt=0, name='sig')]), 'strspn': Function(type='size_t', derefcnt=0, name='strspn', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='accept')]), 'strstr': Function(type='char', derefcnt=1, name='strstr', args=[Argument(type='char', derefcnt=1, name='haystack'), Argument(type='char', derefcnt=1, name='needle')]), 'strtod': Function(type='double', derefcnt=0, name='strtod', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr')]), 'strtod_l': Function(type='double', derefcnt=0, name='strtod_l', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strtof': Function(type='float', derefcnt=0, name='strtof', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr')]), 'strtof_l': Function(type='float', derefcnt=0, name='strtof_l', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strtoimax': Function(type='intmax_t', derefcnt=0, name='strtoimax', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strtok': Function(type='char', derefcnt=1, name='strtok', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='delim')]), 'strtok_r': Function(type='char', derefcnt=1, name='strtok_r', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='delim'), Argument(type='char', derefcnt=2, name='save_ptr')]), 'strtol': Function(type='long', derefcnt=0, name='strtol', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strtol_l': Function(type='long', derefcnt=0, name='strtol_l', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strtold': Function(type='long', derefcnt=0, name='strtold', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr')]), 'strtold_l': Function(type='long', derefcnt=0, name='strtold_l', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strtoll': Function(type='long', derefcnt=0, name='strtoll', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strtoll_l': Function(type='long', derefcnt=0, name='strtoll_l', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strtoq': Function(type='long', derefcnt=0, name='strtoq', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strtoul': Function(type='unsigned', derefcnt=0, name='strtoul', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strtoul_l': Function(type='unsigned', derefcnt=0, name='strtoul_l', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strtoull': Function(type='unsigned', derefcnt=0, name='strtoull', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strtoull_l': Function(type='unsigned', derefcnt=0, name='strtoull_l', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'strtoumax': Function(type='uintmax_t', derefcnt=0, name='strtoumax', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strtouq': Function(type='unsigned', derefcnt=0, name='strtouq', args=[Argument(type='char', derefcnt=1, name='nptr'), Argument(type='char', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'strverscmp': Function(type='int', derefcnt=0, name='strverscmp', args=[Argument(type='char', derefcnt=1, name='s1'), Argument(type='char', derefcnt=1, name='s2')]), 'strxfrm': Function(type='size_t', derefcnt=0, name='strxfrm', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), 'strxfrm_l': Function(type='size_t', derefcnt=0, name='strxfrm_l', args=[Argument(type='char', derefcnt=1, name='dest'), Argument(type='char', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='locale_t', derefcnt=0, name='l')]), 'stty': Function(type='int', derefcnt=0, name='stty', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='sgttyb', derefcnt=1, name='params')]), 'swab': Function(type='void', derefcnt=0, name='swab', args=[Argument(type='void', derefcnt=1, name='from'), Argument(type='void', derefcnt=1, name='to'), Argument(type='ssize_t', derefcnt=0, name='n')]), 'swapcontext': Function(type='int', derefcnt=0, name='swapcontext', args=[Argument(type='ucontext_t', derefcnt=1, name='oucp'), Argument(type='ucontext_t', derefcnt=1, name='ucp')]), 'swprintf': Function(type='int', derefcnt=0, name='swprintf', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '__swprintf_chk': Function(type='int', derefcnt=0, name='__swprintf_chk', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='int', derefcnt=0, name='flag'), Argument(type='size_t', derefcnt=0, name='s_len'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'swscanf': Function(type='int', derefcnt=0, name='swscanf', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'sym_ntop': Function(type='char', derefcnt=1, name='sym_ntop', args=[Argument(type='res_sym', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=1, name='arg2')]), 'sym_ntos': Function(type='char', derefcnt=1, name='sym_ntos', args=[Argument(type='res_sym', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=0, name='arg1'), Argument(type='int', derefcnt=1, name='arg2')]), 'sym_ston': Function(type='int', derefcnt=0, name='sym_ston', args=[Argument(type='res_sym', derefcnt=1, name='arg0'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='int', derefcnt=1, name='arg2')]), 'symlink': Function(type='int', derefcnt=0, name='symlink', args=[Argument(type='char', derefcnt=1, name='from'), Argument(type='char', derefcnt=1, name='to')]), 'symlinkat': Function(type='int', derefcnt=0, name='symlinkat', args=[Argument(type='char', derefcnt=1, name='from'), Argument(type='int', derefcnt=0, name='tofd'), Argument(type='char', derefcnt=1, name='to')]), 'sync': Function(type='void', derefcnt=0, name='sync', args=[]), 'sync_file_range': Function(type='int', derefcnt=0, name='sync_file_range', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='off64_t', derefcnt=0, name='offset'), Argument(type='off64_t', derefcnt=0, name='count'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'syncfs': Function(type='int', derefcnt=0, name='syncfs', args=[Argument(type='int', derefcnt=0, name='fd')]), 'syscall': Function(type='long', derefcnt=0, name='syscall', args=[Argument(type='long', derefcnt=0, name='sysno'), Argument(type='int', derefcnt=0, name='vararg')]), 'sysconf': Function(type='long', derefcnt=0, name='sysconf', args=[Argument(type='int', derefcnt=0, name='name')]), 'syslog': Function(type='void', derefcnt=0, name='syslog', args=[Argument(type='int', derefcnt=0, name='pri'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='int', derefcnt=0, name='vararg')]), 'system': Function(type='int', derefcnt=0, name='system', args=[Argument(type='char', derefcnt=1, name='command')]), 'sysv_signal': Function(type='sighandler_t', derefcnt=0, name='sysv_signal', args=[Argument(type='int', derefcnt=0, name='sig'), Argument(type='sighandler_t', derefcnt=0, name='handler')]), 'tan': Function(type='double', derefcnt=0, name='tan', args=[Argument(type='double', derefcnt=0, name='x')]), 'tanf': Function(type='float', derefcnt=0, name='tanf', args=[Argument(type='float', derefcnt=0, name='x')]), 'tanh': Function(type='double', derefcnt=0, name='tanh', args=[Argument(type='double', derefcnt=0, name='x')]), 'tanhf': Function(type='float', derefcnt=0, name='tanhf', args=[Argument(type='float', derefcnt=0, name='x')]), 'tanhl': Function(type='long', derefcnt=0, name='tanhl', args=[Argument(type='long', derefcnt=0, name='x')]), 'tanl': Function(type='long', derefcnt=0, name='tanl', args=[Argument(type='long', derefcnt=0, name='x')]), 'tcdrain': Function(type='int', derefcnt=0, name='tcdrain', args=[Argument(type='int', derefcnt=0, name='fd')]), 'tcflow': Function(type='int', derefcnt=0, name='tcflow', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='action')]), 'tcflush': Function(type='int', derefcnt=0, name='tcflush', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='queue_selector')]), 'tcgetattr': Function(type='int', derefcnt=0, name='tcgetattr', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='termios', derefcnt=1, name='termios_p')]), 'tcgetpgrp': Function(type='pid_t', derefcnt=0, name='tcgetpgrp', args=[Argument(type='int', derefcnt=0, name='fd')]), 'tcgetsid': Function(type='pid_t', derefcnt=0, name='tcgetsid', args=[Argument(type='int', derefcnt=0, name='fd')]), 'tcsendbreak': Function(type='int', derefcnt=0, name='tcsendbreak', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='duration')]), 'tcsetattr': Function(type='int', derefcnt=0, name='tcsetattr', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='int', derefcnt=0, name='optional_actions'), Argument(type='termios', derefcnt=1, name='termios_p')]), 'tcsetpgrp': Function(type='int', derefcnt=0, name='tcsetpgrp', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='pid_t', derefcnt=0, name='pgrp_id')]), 'td_init': Function(type='td_err_e', derefcnt=0, name='td_init', args=[]), 'td_key_iter_f': Function(type='int', derefcnt=0, name='td_key_iter_f', args=[Argument(type='thread_key_t', derefcnt=0, name='arg0'), Argument(type='void', derefcnt=1, name='arg2')]), 'td_log': Function(type='td_err_e', derefcnt=0, name='td_log', args=[]), 'td_symbol_list': Function(type='char', derefcnt=2, name='td_symbol_list', args=[]), 'td_ta_clear_event': Function(type='td_err_e', derefcnt=0, name='td_ta_clear_event', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='td_thr_events_t', derefcnt=1, name='event')]), 'td_ta_delete': Function(type='td_err_e', derefcnt=0, name='td_ta_delete', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta')]), 'td_ta_enable_stats': Function(type='td_err_e', derefcnt=0, name='td_ta_enable_stats', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='int', derefcnt=0, name='enable')]), 'td_ta_event_addr': Function(type='td_err_e', derefcnt=0, name='td_ta_event_addr', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='td_event_e', derefcnt=0, name='event'), Argument(type='td_notify_t', derefcnt=1, name='ptr')]), 'td_ta_event_getmsg': Function(type='td_err_e', derefcnt=0, name='td_ta_event_getmsg', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='td_event_msg_t', derefcnt=1, name='msg')]), 'td_ta_get_nthreads': Function(type='td_err_e', derefcnt=0, name='td_ta_get_nthreads', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='int', derefcnt=1, name='np')]), 'td_ta_get_ph': Function(type='td_err_e', derefcnt=0, name='td_ta_get_ph', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='ps_prochandle', derefcnt=2, name='ph')]), 'td_ta_get_stats': Function(type='td_err_e', derefcnt=0, name='td_ta_get_stats', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='td_ta_stats_t', derefcnt=1, name='statsp')]), 'td_ta_map_id2thr': Function(type='td_err_e', derefcnt=0, name='td_ta_map_id2thr', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='pthread_t', derefcnt=0, name='pt'), Argument(type='td_thrhandle_t', derefcnt=1, name='th')]), 'td_ta_map_lwp2thr': Function(type='td_err_e', derefcnt=0, name='td_ta_map_lwp2thr', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='lwpid_t', derefcnt=0, name='lwpid'), Argument(type='td_thrhandle_t', derefcnt=1, name='th')]), 'td_ta_new': Function(type='td_err_e', derefcnt=0, name='td_ta_new', args=[Argument(type='ps_prochandle', derefcnt=1, name='ps'), Argument(type='td_thragent_t', derefcnt=2, name='ta')]), 'td_ta_reset_stats': Function(type='td_err_e', derefcnt=0, name='td_ta_reset_stats', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta')]), 'td_ta_set_event': Function(type='td_err_e', derefcnt=0, name='td_ta_set_event', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='td_thr_events_t', derefcnt=1, name='event')]), 'td_ta_setconcurrency': Function(type='td_err_e', derefcnt=0, name='td_ta_setconcurrency', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='int', derefcnt=0, name='level')]), 'td_ta_thr_iter': Function(type='td_err_e', derefcnt=0, name='td_ta_thr_iter', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='td_thr_iter_f', derefcnt=1, name='callback'), Argument(type='void', derefcnt=1, name='cbdata_p'), Argument(type='td_thr_state_e', derefcnt=0, name='state'), Argument(type='int', derefcnt=0, name='ti_pri'), Argument(type='sigset_t', derefcnt=1, name='ti_sigmask_p'), Argument(type='unsigned', derefcnt=0, name='ti_user_flags')]), 'td_ta_tsd_iter': Function(type='td_err_e', derefcnt=0, name='td_ta_tsd_iter', args=[Argument(type='td_thragent_t', derefcnt=1, name='ta'), Argument(type='td_key_iter_f', derefcnt=1, name='ki'), Argument(type='void', derefcnt=1, name='p')]), 'td_thr_clear_event': Function(type='td_err_e', derefcnt=0, name='td_thr_clear_event', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='td_thr_events_t', derefcnt=1, name='event')]), 'td_thr_dbresume': Function(type='td_err_e', derefcnt=0, name='td_thr_dbresume', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th')]), 'td_thr_dbsuspend': Function(type='td_err_e', derefcnt=0, name='td_thr_dbsuspend', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th')]), 'td_thr_event_enable': Function(type='td_err_e', derefcnt=0, name='td_thr_event_enable', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='int', derefcnt=0, name='event')]), 'td_thr_event_getmsg': Function(type='td_err_e', derefcnt=0, name='td_thr_event_getmsg', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='td_event_msg_t', derefcnt=1, name='msg')]), 'td_thr_get_info': Function(type='td_err_e', derefcnt=0, name='td_thr_get_info', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='td_thrinfo_t', derefcnt=1, name='infop')]), 'td_thr_getfpregs': Function(type='td_err_e', derefcnt=0, name='td_thr_getfpregs', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='prfpregset_t', derefcnt=1, name='regset')]), 'td_thr_getgregs': Function(type='td_err_e', derefcnt=0, name='td_thr_getgregs', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='prgregset_t', derefcnt=0, name='gregs')]), 'td_thr_getxregs': Function(type='td_err_e', derefcnt=0, name='td_thr_getxregs', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='void', derefcnt=1, name='xregs')]), 'td_thr_getxregsize': Function(type='td_err_e', derefcnt=0, name='td_thr_getxregsize', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='int', derefcnt=1, name='sizep')]), 'td_thr_iter_f': Function(type='int', derefcnt=0, name='td_thr_iter_f', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='arg1')]), 'td_thr_set_event': Function(type='td_err_e', derefcnt=0, name='td_thr_set_event', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='td_thr_events_t', derefcnt=1, name='event')]), 'td_thr_setfpregs': Function(type='td_err_e', derefcnt=0, name='td_thr_setfpregs', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='prfpregset_t', derefcnt=1, name='fpregs')]), 'td_thr_setgregs': Function(type='td_err_e', derefcnt=0, name='td_thr_setgregs', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='prgregset_t', derefcnt=0, name='gregs')]), 'td_thr_setprio': Function(type='td_err_e', derefcnt=0, name='td_thr_setprio', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='int', derefcnt=0, name='prio')]), 'td_thr_setsigpending': Function(type='td_err_e', derefcnt=0, name='td_thr_setsigpending', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='unsigned', derefcnt=0, name='n'), Argument(type='sigset_t', derefcnt=1, name='ss')]), 'td_thr_setxregs': Function(type='td_err_e', derefcnt=0, name='td_thr_setxregs', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='void', derefcnt=1, name='addr')]), 'td_thr_sigsetmask': Function(type='td_err_e', derefcnt=0, name='td_thr_sigsetmask', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='sigset_t', derefcnt=1, name='ss')]), 'td_thr_tls_get_addr': Function(type='td_err_e', derefcnt=0, name='td_thr_tls_get_addr', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='psaddr_t', derefcnt=0, name='map_address'), Argument(type='size_t', derefcnt=0, name='offset'), Argument(type='psaddr_t', derefcnt=1, name='address')]), 'td_thr_tlsbase': Function(type='td_err_e', derefcnt=0, name='td_thr_tlsbase', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='unsigned', derefcnt=0, name='modid'), Argument(type='psaddr_t', derefcnt=1, name='base')]), 'td_thr_tsd': Function(type='td_err_e', derefcnt=0, name='td_thr_tsd', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th'), Argument(type='thread_key_t', derefcnt=0, name='tk'), Argument(type='void', derefcnt=2, name='data')]), 'td_thr_validate': Function(type='td_err_e', derefcnt=0, name='td_thr_validate', args=[Argument(type='td_thrhandle_t', derefcnt=1, name='th')]), 'tdelete': Function(type='void', derefcnt=1, name='tdelete', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=2, name='rootp'), Argument(type='compar_fn_t', derefcnt=0, name='compar')]), 'tdestroy': Function(type='void', derefcnt=0, name='tdestroy', args=[Argument(type='void', derefcnt=1, name='root'), Argument(type='free_fn_t', derefcnt=0, name='freefct')]), 'tee': Function(type='ssize_t', derefcnt=0, name='tee', args=[Argument(type='int', derefcnt=0, name='fdin'), Argument(type='int', derefcnt=0, name='fdout'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'telldir': Function(type='long', derefcnt=0, name='telldir', args=[Argument(type='DIR', derefcnt=1, name='dirp')]), 'tempnam': Function(type='char', derefcnt=1, name='tempnam', args=[Argument(type='char', derefcnt=1, name='dir'), Argument(type='char', derefcnt=1, name='pfx')]), 'textdomain': Function(type='char', derefcnt=1, name='textdomain', args=[Argument(type='char', derefcnt=1, name='domainname')]), 'tfind': Function(type='void', derefcnt=1, name='tfind', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=2, name='rootp'), Argument(type='compar_fn_t', derefcnt=0, name='compar')]), 'tgamma': Function(type='double', derefcnt=0, name='tgamma', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'tgammaf': Function(type='float', derefcnt=0, name='tgammaf', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'tgammal': Function(type='long', derefcnt=0, name='tgammal', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'time': Function(type='time_t', derefcnt=0, name='time', args=[Argument(type='time_t', derefcnt=1, name='timer')]), 'timegm': Function(type='time_t', derefcnt=0, name='timegm', args=[Argument(type='tm', derefcnt=1, name='tp')]), 'timelocal': Function(type='time_t', derefcnt=0, name='timelocal', args=[Argument(type='tm', derefcnt=1, name='tp')]), 'timer_create': Function(type='int', derefcnt=0, name='timer_create', args=[Argument(type='clockid_t', derefcnt=0, name='clock_id'), Argument(type='sigevent', derefcnt=1, name='evp'), Argument(type='timer_t', derefcnt=1, name='timerid')]), 'timer_delete': Function(type='int', derefcnt=0, name='timer_delete', args=[Argument(type='timer_t', derefcnt=0, name='timerid')]), 'timer_getoverrun': Function(type='int', derefcnt=0, name='timer_getoverrun', args=[Argument(type='timer_t', derefcnt=0, name='timerid')]), 'timer_gettime': Function(type='int', derefcnt=0, name='timer_gettime', args=[Argument(type='timer_t', derefcnt=0, name='timerid'), Argument(type='itimerspec', derefcnt=1, name='value')]), 'timer_settime': Function(type='int', derefcnt=0, name='timer_settime', args=[Argument(type='timer_t', derefcnt=0, name='timerid'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='itimerspec', derefcnt=1, name='value'), Argument(type='itimerspec', derefcnt=1, name='ovalue')]), 'timespec_get': Function(type='int', derefcnt=0, name='timespec_get', args=[Argument(type='timespec', derefcnt=1, name='ts'), Argument(type='int', derefcnt=0, name='base')]), 'tls_session_secret_cb_fn': Function(type='int', derefcnt=0, name='tls_session_secret_cb_fn', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='void', derefcnt=1, name='secret'), Argument(type='int', derefcnt=1, name='secret_len'), Argument(type='stack_st_SSL_CIPHER', derefcnt=1, name='peer_ciphers'), Argument(type='SSL_CIPHER', derefcnt=2, name='cipher'), Argument(type='void', derefcnt=1, name='arg')]), 'tls_session_ticket_ext_cb_fn': Function(type='int', derefcnt=0, name='tls_session_ticket_ext_cb_fn', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len'), Argument(type='void', derefcnt=1, name='arg')]), 'tlsext_debug_cb': Function(type='void', derefcnt=0, name='tlsext_debug_cb', args=[Argument(type='SSL', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='client_server'), Argument(type='int', derefcnt=0, name='type'), Argument(type='unsigned', derefcnt=1, name='data'), Argument(type='int', derefcnt=0, name='len'), Argument(type='void', derefcnt=1, name='arg')]), 'tlsext_opaque_prf_input_callback': Function(type='int', derefcnt=0, name='tlsext_opaque_prf_input_callback', args=[Argument(type='SSL', derefcnt=1, name='arg0'), Argument(type='void', derefcnt=1, name='peerinput'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='void', derefcnt=1, name='arg')]), 'tlsext_servername_callback': Function(type='int', derefcnt=0, name='tlsext_servername_callback', args=[Argument(type='SSL', derefcnt=1, name='arg0'), Argument(type='int', derefcnt=1, name='arg1'), Argument(type='void', derefcnt=1, name='arg2')]), 'tlsext_status_cb': Function(type='int', derefcnt=0, name='tlsext_status_cb', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='void', derefcnt=1, name='arg')]), 'tlsext_ticket_key_cb': Function(type='int', derefcnt=0, name='tlsext_ticket_key_cb', args=[Argument(type='SSL', derefcnt=1, name='ssl'), Argument(type='unsigned', derefcnt=1, name='name'), Argument(type='unsigned', derefcnt=1, name='iv'), Argument(type='EVP_CIPHER_CTX', derefcnt=1, name='ectx'), Argument(type='HMAC_CTX', derefcnt=1, name='hctx'), Argument(type='int', derefcnt=0, name='enc')]), 'tmpfile': Function(type='FILE', derefcnt=1, name='tmpfile', args=[]), 'tmpfile64': Function(type='FILE', derefcnt=1, name='tmpfile64', args=[]), 'tmpnam': Function(type='char', derefcnt=1, name='tmpnam', args=[Argument(type='char', derefcnt=1, name='s')]), 'tmpnam_r': Function(type='char', derefcnt=1, name='tmpnam_r', args=[Argument(type='char', derefcnt=1, name='s')]), 'toascii': Function(type='int', derefcnt=0, name='toascii', args=[Argument(type='int', derefcnt=0, name='c')]), 'tolower': Function(type='int', derefcnt=0, name='tolower', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'tolower_l': Function(type='int', derefcnt=0, name='tolower_l', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='locale_t', derefcnt=0, name='l')]), 'toupper': Function(type='int', derefcnt=0, name='toupper', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'toupper_l': Function(type='int', derefcnt=0, name='toupper_l', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='locale_t', derefcnt=0, name='l')]), 'towctrans': Function(type='wint_t', derefcnt=0, name='towctrans', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='wctrans_t', derefcnt=0, name='desc')]), 'towctrans_l': Function(type='wint_t', derefcnt=0, name='towctrans_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='wctrans_t', derefcnt=0, name='desc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'towlower': Function(type='wint_t', derefcnt=0, name='towlower', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'towlower_l': Function(type='wint_t', derefcnt=0, name='towlower_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'towupper': Function(type='wint_t', derefcnt=0, name='towupper', args=[Argument(type='wint_t', derefcnt=0, name='wc')]), 'towupper_l': Function(type='wint_t', derefcnt=0, name='towupper_l', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'trunc': Function(type='double', derefcnt=0, name='trunc', args=[Argument(type='double', derefcnt=0, name='x')]), 'truncate': Function(type='int', derefcnt=0, name='truncate', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='off_t', derefcnt=0, name='length')]), 'truncate64': Function(type='int', derefcnt=0, name='truncate64', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='off64_t', derefcnt=0, name='length')]), 'truncf': Function(type='float', derefcnt=0, name='truncf', args=[Argument(type='float', derefcnt=0, name='x')]), 'truncl': Function(type='long', derefcnt=0, name='truncl', args=[Argument(type='long', derefcnt=0, name='x')]), 'tsearch': Function(type='void', derefcnt=1, name='tsearch', args=[Argument(type='void', derefcnt=1, name='key'), Argument(type='void', derefcnt=2, name='rootp'), Argument(type='compar_fn_t', derefcnt=0, name='compar')]), 'ttyname': Function(type='char', derefcnt=1, name='ttyname', args=[Argument(type='int', derefcnt=0, name='fd')]), 'ttyname_r': Function(type='int', derefcnt=0, name='ttyname_r', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen')]), '__ttyname_r_chk': Function(type='int', derefcnt=0, name='__ttyname_r_chk', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='buflen'), Argument(type='size_t', derefcnt=0, name='nreal')]), 'ttyslot': Function(type='int', derefcnt=0, name='ttyslot', args=[]), 'twalk': Function(type='void', derefcnt=0, name='twalk', args=[Argument(type='void', derefcnt=1, name='root'), Argument(type='action_fn_t', derefcnt=0, name='action')]), 'tzset': Function(type='void', derefcnt=0, name='tzset', args=[]), 'ualarm': Function(type='useconds_t', derefcnt=0, name='ualarm', args=[Argument(type='useconds_t', derefcnt=0, name='value'), Argument(type='useconds_t', derefcnt=0, name='interval')]), 'uflow': Function(type='int', derefcnt=0, name='uflow', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0')]), 'ulckpwdf': Function(type='int', derefcnt=0, name='ulckpwdf', args=[]), 'ulimit': Function(type='long', derefcnt=0, name='ulimit', args=[Argument(type='int', derefcnt=0, name='cmd'), Argument(type='int', derefcnt=0, name='vararg')]), 'umask': Function(type='mode_t', derefcnt=0, name='umask', args=[Argument(type='mode_t', derefcnt=0, name='mask')]), 'uname': Function(type='int', derefcnt=0, name='uname', args=[Argument(type='utsname', derefcnt=1, name='name')]), 'uncompress': Function(type='int', derefcnt=0, name='uncompress', args=[Argument(type='Bytef', derefcnt=1, name='dest'), Argument(type='uLongf', derefcnt=1, name='destLen'), Argument(type='Bytef', derefcnt=1, name='source'), Argument(type='uLong', derefcnt=0, name='sourceLen')]), 'underflow': Function(type='int', derefcnt=0, name='underflow', args=[Argument(type='IO_FILE', derefcnt=1, name='arg0')]), 'ungetc': Function(type='int', derefcnt=0, name='ungetc', args=[Argument(type='int', derefcnt=0, name='c'), Argument(type='FILE', derefcnt=1, name='stream')]), 'ungetwc': Function(type='wint_t', derefcnt=0, name='ungetwc', args=[Argument(type='wint_t', derefcnt=0, name='wc'), Argument(type='FILE', derefcnt=1, name='stream')]), 'unlink': Function(type='int', derefcnt=0, name='unlink', args=[Argument(type='char', derefcnt=1, name='name')]), 'unlinkat': Function(type='int', derefcnt=0, name='unlinkat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='name'), Argument(type='int', derefcnt=0, name='flag')]), 'unlockpt': Function(type='int', derefcnt=0, name='unlockpt', args=[Argument(type='int', derefcnt=0, name='fd')]), 'unsetenv': Function(type='int', derefcnt=0, name='unsetenv', args=[Argument(type='char', derefcnt=1, name='name')]), 'unshare': Function(type='int', derefcnt=0, name='unshare', args=[Argument(type='int', derefcnt=0, name='flags')]), 'update': Function(type='int', derefcnt=0, name='update', args=[Argument(type='EVP_MD_CTX', derefcnt=1, name='ctx'), Argument(type='void', derefcnt=1, name='data'), Argument(type='size_t', derefcnt=0, name='count')]), 'updwtmp': Function(type='void', derefcnt=0, name='updwtmp', args=[Argument(type='char', derefcnt=1, name='wtmp_file'), Argument(type='utmp', derefcnt=1, name='utmp')]), 'updwtmpx': Function(type='void', derefcnt=0, name='updwtmpx', args=[Argument(type='char', derefcnt=1, name='wtmpx_file'), Argument(type='utmpx', derefcnt=1, name='utmpx')]), 'uselocale': Function(type='locale_t', derefcnt=0, name='uselocale', args=[Argument(type='locale_t', derefcnt=0, name='dataset')]), 'usleep': Function(type='int', derefcnt=0, name='usleep', args=[Argument(type='useconds_t', derefcnt=0, name='useconds')]), 'ustat': Function(type='int', derefcnt=0, name='ustat', args=[Argument(type='dev_t', derefcnt=0, name='dev'), Argument(type='ustat', derefcnt=1, name='ubuf')]), 'utime': Function(type='int', derefcnt=0, name='utime', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='utimbuf', derefcnt=1, name='file_times')]), 'utimensat': Function(type='int', derefcnt=0, name='utimensat', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='timespec', derefcnt=1, name='times'), Argument(type='int', derefcnt=0, name='flags')]), 'utimes': Function(type='int', derefcnt=0, name='utimes', args=[Argument(type='char', derefcnt=1, name='file'), Argument(type='timeval', derefcnt=1, name='tvp')]), 'utmpname': Function(type='int', derefcnt=0, name='utmpname', args=[Argument(type='char', derefcnt=1, name='file')]), 'utmpxname': Function(type='int', derefcnt=0, name='utmpxname', args=[Argument(type='char', derefcnt=1, name='file')]), 'valloc': Function(type='void', derefcnt=1, name='valloc', args=[Argument(type='size_t', derefcnt=0, name='size')]), 'vasprintf': Function(type='int', derefcnt=0, name='vasprintf', args=[Argument(type='char', derefcnt=2, name='ptr'), Argument(type='char', derefcnt=1, name='f'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '__vasprintf_chk': Function(type='int', derefcnt=0, name='__vasprintf_chk', args=[Argument(type='char', derefcnt=2, name='result_ptr'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='args')]), 'vdprintf': Function(type='int', derefcnt=0, name='vdprintf', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '__vdprintf_chk': Function(type='int', derefcnt=0, name='__vdprintf_chk', args=[Argument(type='int', derefcnt=0, name='d'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='arg')]), 'verify': Function(type='int', derefcnt=0, name='verify', args=[Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'verify_callback': Function(type='int', derefcnt=0, name='verify_callback', args=[Argument(type='int', derefcnt=0, name='ok'), Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'verify_cb': Function(type='int', derefcnt=0, name='verify_cb', args=[Argument(type='int', derefcnt=0, name='ok'), Argument(type='X509_STORE_CTX', derefcnt=1, name='ctx')]), 'verr': Function(type='void', derefcnt=0, name='verr', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg2')]), 'verrx': Function(type='void', derefcnt=0, name='verrx', args=[Argument(type='int', derefcnt=0, name='status'), Argument(type='char', derefcnt=1, name='arg1'), Argument(type='gnuc_va_list', derefcnt=0, name='arg2')]), 'versionsort': Function(type='int', derefcnt=0, name='versionsort', args=[Argument(type='dirent', derefcnt=2, name='e1'), Argument(type='dirent', derefcnt=2, name='e2')]), 'versionsort64': Function(type='int', derefcnt=0, name='versionsort64', args=[Argument(type='dirent64', derefcnt=2, name='e1'), Argument(type='dirent64', derefcnt=2, name='e2')]), 'vfork': Function(type='pid_t', derefcnt=0, name='vfork', args=[]), 'vfprintf': Function(type='int', derefcnt=0, name='vfprintf', args=[Argument(type='FILE', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '___vfprintf_chk': Function(type='int', derefcnt=0, name='___vfprintf_chk', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='int', derefcnt=0, name='flag'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='ap')]), 'vfscanf': Function(type='int', derefcnt=0, name='vfscanf', args=[Argument(type='FILE', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), 'vfwprintf': Function(type='int', derefcnt=0, name='vfwprintf', args=[Argument(type='FILE', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '__vfwprintf_chk': Function(type='int', derefcnt=0, name='__vfwprintf_chk', args=[Argument(type='FILE', derefcnt=1, name='fp'), Argument(type='int', derefcnt=0, name='flag'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='ap')]), 'vfwscanf': Function(type='int', derefcnt=0, name='vfwscanf', args=[Argument(type='FILE', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), 'vhangup': Function(type='int', derefcnt=0, name='vhangup', args=[]), 'vmsplice': Function(type='ssize_t', derefcnt=0, name='vmsplice', args=[Argument(type='int', derefcnt=0, name='fdout'), Argument(type='iovec', derefcnt=1, name='iov'), Argument(type='size_t', derefcnt=0, name='count'), Argument(type='unsigned', derefcnt=0, name='flags')]), 'vprintf': Function(type='int', derefcnt=0, name='vprintf', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '___vprintf_chk': Function(type='int', derefcnt=0, name='___vprintf_chk', args=[Argument(type='int', derefcnt=0, name='flag'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='ap')]), 'vscanf': Function(type='int', derefcnt=0, name='vscanf', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), 'vsnprintf': Function(type='int', derefcnt=0, name='vsnprintf', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxlen'), Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '___vsnprintf_chk': Function(type='int', derefcnt=0, name='___vsnprintf_chk', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxlen'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='size_t', derefcnt=0, name='slen'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='args')]), 'vsprintf': Function(type='int', derefcnt=0, name='vsprintf', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '___vsprintf_chk': Function(type='int', derefcnt=0, name='___vsprintf_chk', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='size_t', derefcnt=0, name='slen'), Argument(type='char', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='args')]), 'vsscanf': Function(type='int', derefcnt=0, name='vsscanf', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), 'vswprintf': Function(type='int', derefcnt=0, name='vswprintf', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '__vswprintf_chk': Function(type='int', derefcnt=0, name='__vswprintf_chk', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxlen'), Argument(type='int', derefcnt=0, name='flags'), Argument(type='size_t', derefcnt=0, name='slen'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='args')]), 'vswscanf': Function(type='int', derefcnt=0, name='vswscanf', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), 'vsyslog': Function(type='void', derefcnt=0, name='vsyslog', args=[Argument(type='int', derefcnt=0, name='pri'), Argument(type='char', derefcnt=1, name='fmt'), Argument(type='gnuc_va_list', derefcnt=0, name='ap')]), 'vwarn': Function(type='void', derefcnt=0, name='vwarn', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg1')]), 'vwarnx': Function(type='void', derefcnt=0, name='vwarnx', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg1')]), 'vwprintf': Function(type='int', derefcnt=0, name='vwprintf', args=[Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), '__vwprintf_chk': Function(type='int', derefcnt=0, name='__vwprintf_chk', args=[Argument(type='int', derefcnt=0, name='flag'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='va_list', derefcnt=0, name='ap')]), 'vwscanf': Function(type='int', derefcnt=0, name='vwscanf', args=[Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='gnuc_va_list', derefcnt=0, name='arg')]), 'wait': Function(type='pid_t', derefcnt=0, name='wait', args=[Argument(type='WAIT_STATUS', derefcnt=0, name='stat_loc')]), 'wait3': Function(type='pid_t', derefcnt=0, name='wait3', args=[Argument(type='WAIT_STATUS', derefcnt=0, name='stat_loc'), Argument(type='int', derefcnt=0, name='options'), Argument(type='rusage', derefcnt=1, name='usage')]), 'wait4': Function(type='pid_t', derefcnt=0, name='wait4', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='WAIT_STATUS', derefcnt=0, name='stat_loc'), Argument(type='int', derefcnt=0, name='options'), Argument(type='rusage', derefcnt=1, name='usage')]), 'waitid': Function(type='int', derefcnt=0, name='waitid', args=[Argument(type='idtype_t', derefcnt=0, name='idtype'), Argument(type='id_t', derefcnt=0, name='id'), Argument(type='siginfo_t', derefcnt=1, name='infop'), Argument(type='int', derefcnt=0, name='options')]), 'waitpid': Function(type='pid_t', derefcnt=0, name='waitpid', args=[Argument(type='pid_t', derefcnt=0, name='pid'), Argument(type='int', derefcnt=1, name='stat_loc'), Argument(type='int', derefcnt=0, name='options')]), 'warn': Function(type='void', derefcnt=0, name='warn', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'warnx': Function(type='void', derefcnt=0, name='warnx', args=[Argument(type='char', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'wcpcpy': Function(type='wchar_t', derefcnt=1, name='wcpcpy', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src')]), '__wcpcpy_chk': Function(type='wchar_t', derefcnt=1, name='__wcpcpy_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'wcpncpy': Function(type='wchar_t', derefcnt=1, name='wcpncpy', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__wcpncpy_chk': Function(type='wchar_t', derefcnt=1, name='__wcpncpy_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'wcrtomb': Function(type='size_t', derefcnt=0, name='wcrtomb', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='wc'), Argument(type='mbstate_t', derefcnt=1, name='ps')]), '__wcrtomb_chk': Function(type='size_t', derefcnt=0, name='__wcrtomb_chk', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='wchar'), Argument(type='mbstate_t', derefcnt=1, name='ps'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'wcscasecmp': Function(type='int', derefcnt=0, name='wcscasecmp', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2')]), 'wcscasecmp_l': Function(type='int', derefcnt=0, name='wcscasecmp_l', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcscat': Function(type='wchar_t', derefcnt=1, name='wcscat', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src')]), '__wcscat_chk': Function(type='wchar_t', derefcnt=1, name='__wcscat_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'wcschr': Function(type='wchar_t', derefcnt=1, name='wcschr', args=[Argument(type='wchar_t', derefcnt=1, name='wcs'), Argument(type='wchar_t', derefcnt=0, name='wc')]), 'wcschrnul': Function(type='wchar_t', derefcnt=1, name='wcschrnul', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='wc')]), 'wcscmp': Function(type='int', derefcnt=0, name='wcscmp', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2')]), 'wcscoll': Function(type='int', derefcnt=0, name='wcscoll', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2')]), 'wcscoll_l': Function(type='int', derefcnt=0, name='wcscoll_l', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcscpy': Function(type='wchar_t', derefcnt=1, name='wcscpy', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src')]), '__wcscpy_chk': Function(type='wchar_t', derefcnt=1, name='__wcscpy_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), 'wcscspn': Function(type='size_t', derefcnt=0, name='wcscspn', args=[Argument(type='wchar_t', derefcnt=1, name='wcs'), Argument(type='wchar_t', derefcnt=1, name='reject')]), 'wcsdup': Function(type='wchar_t', derefcnt=1, name='wcsdup', args=[Argument(type='wchar_t', derefcnt=1, name='s')]), 'wcsftime': Function(type='size_t', derefcnt=0, name='wcsftime', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxsize'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='tm', derefcnt=1, name='tp')]), 'wcsftime_l': Function(type='size_t', derefcnt=0, name='wcsftime_l', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxsize'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='tm', derefcnt=1, name='tp'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcslen': Function(type='size_t', derefcnt=0, name='wcslen', args=[Argument(type='wchar_t', derefcnt=1, name='s')]), 'wcsncasecmp': Function(type='int', derefcnt=0, name='wcsncasecmp', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'wcsncasecmp_l': Function(type='int', derefcnt=0, name='wcsncasecmp_l', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcsncat': Function(type='wchar_t', derefcnt=1, name='wcsncat', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__wcsncat_chk': Function(type='wchar_t', derefcnt=1, name='__wcsncat_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'wcsncmp': Function(type='int', derefcnt=0, name='wcsncmp', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'wcsncpy': Function(type='wchar_t', derefcnt=1, name='wcsncpy', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n')]), '__wcsncpy_chk': Function(type='wchar_t', derefcnt=1, name='__wcsncpy_chk', args=[Argument(type='wchar_t', derefcnt=1, name='dest'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='destlen')]), 'wcsnlen': Function(type='size_t', derefcnt=0, name='wcsnlen', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='maxlen')]), 'wcsnrtombs': Function(type='size_t', derefcnt=0, name='wcsnrtombs', args=[Argument(type='char', derefcnt=1, name='dst'), Argument(type='wchar_t', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='nwc'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps')]), '__wcsnrtombs_chk': Function(type='size_t', derefcnt=0, name='__wcsnrtombs_chk', args=[Argument(type='char', derefcnt=1, name='dst'), Argument(type='wchar_t', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='nwc'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'wcspbrk': Function(type='wchar_t', derefcnt=1, name='wcspbrk', args=[Argument(type='wchar_t', derefcnt=1, name='wcs'), Argument(type='wchar_t', derefcnt=1, name='accept')]), 'wcsrchr': Function(type='wchar_t', derefcnt=1, name='wcsrchr', args=[Argument(type='wchar_t', derefcnt=1, name='wcs'), Argument(type='wchar_t', derefcnt=0, name='wc')]), 'wcsrtombs': Function(type='size_t', derefcnt=0, name='wcsrtombs', args=[Argument(type='char', derefcnt=1, name='dst'), Argument(type='wchar_t', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps')]), '__wcsrtombs_chk': Function(type='size_t', derefcnt=0, name='__wcsrtombs_chk', args=[Argument(type='char', derefcnt=1, name='dst'), Argument(type='wchar_t', derefcnt=2, name='src'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='mbstate_t', derefcnt=1, name='ps'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'wcsspn': Function(type='size_t', derefcnt=0, name='wcsspn', args=[Argument(type='wchar_t', derefcnt=1, name='wcs'), Argument(type='wchar_t', derefcnt=1, name='accept')]), 'wcsstr': Function(type='wchar_t', derefcnt=1, name='wcsstr', args=[Argument(type='wchar_t', derefcnt=1, name='haystack'), Argument(type='wchar_t', derefcnt=1, name='needle')]), 'wcstod': Function(type='double', derefcnt=0, name='wcstod', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr')]), 'wcstod_l': Function(type='double', derefcnt=0, name='wcstod_l', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcstof': Function(type='float', derefcnt=0, name='wcstof', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr')]), 'wcstof_l': Function(type='float', derefcnt=0, name='wcstof_l', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcstoimax': Function(type='intmax_t', derefcnt=0, name='wcstoimax', args=[Argument(type='gwchar_t', derefcnt=1, name='nptr'), Argument(type='gwchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcstok': Function(type='wchar_t', derefcnt=1, name='wcstok', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=1, name='delim'), Argument(type='wchar_t', derefcnt=2, name='ptr')]), 'wcstol': Function(type='long', derefcnt=0, name='wcstol', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcstol_l': Function(type='long', derefcnt=0, name='wcstol_l', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcstold': Function(type='long', derefcnt=0, name='wcstold', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr')]), 'wcstold_l': Function(type='long', derefcnt=0, name='wcstold_l', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcstoll': Function(type='long', derefcnt=0, name='wcstoll', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcstoll_l': Function(type='long', derefcnt=0, name='wcstoll_l', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcstombs': Function(type='size_t', derefcnt=0, name='wcstombs', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=1, name='pwcs'), Argument(type='size_t', derefcnt=0, name='n')]), '__wcstombs_chk': Function(type='size_t', derefcnt=0, name='__wcstombs_chk', args=[Argument(type='char', derefcnt=1, name='dst'), Argument(type='wchar_t', derefcnt=1, name='src'), Argument(type='size_t', derefcnt=0, name='len'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'wcstoq': Function(type='long', derefcnt=0, name='wcstoq', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcstoul': Function(type='unsigned', derefcnt=0, name='wcstoul', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcstoul_l': Function(type='unsigned', derefcnt=0, name='wcstoul_l', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcstoull': Function(type='unsigned', derefcnt=0, name='wcstoull', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcstoull_l': Function(type='unsigned', derefcnt=0, name='wcstoull_l', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wcstoumax': Function(type='uintmax_t', derefcnt=0, name='wcstoumax', args=[Argument(type='gwchar_t', derefcnt=1, name='nptr'), Argument(type='gwchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcstouq': Function(type='unsigned', derefcnt=0, name='wcstouq', args=[Argument(type='wchar_t', derefcnt=1, name='nptr'), Argument(type='wchar_t', derefcnt=2, name='endptr'), Argument(type='int', derefcnt=0, name='base')]), 'wcswcs': Function(type='wchar_t', derefcnt=1, name='wcswcs', args=[Argument(type='wchar_t', derefcnt=1, name='haystack'), Argument(type='wchar_t', derefcnt=1, name='needle')]), 'wcswidth': Function(type='int', derefcnt=0, name='wcswidth', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='size_t', derefcnt=0, name='n')]), 'wcsxfrm': Function(type='size_t', derefcnt=0, name='wcsxfrm', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'wcsxfrm_l': Function(type='size_t', derefcnt=0, name='wcsxfrm_l', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='locale_t', derefcnt=0, name='loc')]), 'wctob': Function(type='int', derefcnt=0, name='wctob', args=[Argument(type='wint_t', derefcnt=0, name='c')]), 'wctomb': Function(type='int', derefcnt=0, name='wctomb', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='wchar')]), '__wctomb_chk': Function(type='int', derefcnt=0, name='__wctomb_chk', args=[Argument(type='char', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='wchar'), Argument(type='size_t', derefcnt=0, name='buflen')]), 'wctrans': Function(type='wctrans_t', derefcnt=0, name='wctrans', args=[Argument(type='char', derefcnt=1, name='property')]), 'wctrans_l': Function(type='wctrans_t', derefcnt=0, name='wctrans_l', args=[Argument(type='char', derefcnt=1, name='property'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'wctype': Function(type='wctype_t', derefcnt=0, name='wctype', args=[Argument(type='char', derefcnt=1, name='property')]), 'wctype_l': Function(type='wctype_t', derefcnt=0, name='wctype_l', args=[Argument(type='char', derefcnt=1, name='property'), Argument(type='locale_t', derefcnt=0, name='locale')]), 'wcwidth': Function(type='int', derefcnt=0, name='wcwidth', args=[Argument(type='wchar_t', derefcnt=0, name='c')]), 'wmemchr': Function(type='wchar_t', derefcnt=1, name='wmemchr', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='n')]), 'wmemcmp': Function(type='int', derefcnt=0, name='wmemcmp', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), 'wmemcpy': Function(type='wchar_t', derefcnt=1, name='wmemcpy', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), '__wmemcpy_chk': Function(type='wchar_t', derefcnt=1, name='__wmemcpy_chk', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='ns1')]), 'wmemmove': Function(type='wchar_t', derefcnt=1, name='wmemmove', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), '__wmemmove_chk': Function(type='wchar_t', derefcnt=1, name='__wmemmove_chk', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='ns1')]), 'wmempcpy': Function(type='wchar_t', derefcnt=1, name='wmempcpy', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n')]), '__wmempcpy_chk': Function(type='wchar_t', derefcnt=1, name='__wmempcpy_chk', args=[Argument(type='wchar_t', derefcnt=1, name='s1'), Argument(type='wchar_t', derefcnt=1, name='s2'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='ns1')]), 'wmemset': Function(type='wchar_t', derefcnt=1, name='wmemset', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='n')]), '__wmemset_chk': Function(type='wchar_t', derefcnt=1, name='__wmemset_chk', args=[Argument(type='wchar_t', derefcnt=1, name='s'), Argument(type='wchar_t', derefcnt=0, name='c'), Argument(type='size_t', derefcnt=0, name='n'), Argument(type='size_t', derefcnt=0, name='dstlen')]), 'wordexp': Function(type='int', derefcnt=0, name='wordexp', args=[Argument(type='char', derefcnt=1, name='words'), Argument(type='wordexp_t', derefcnt=1, name='pwordexp'), Argument(type='int', derefcnt=0, name='flags')]), 'wordfree': Function(type='void', derefcnt=0, name='wordfree', args=[Argument(type='wordexp_t', derefcnt=1, name='wordexp')]), 'wprintf': Function(type='int', derefcnt=0, name='wprintf', args=[Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), '__wprintf_chk': Function(type='int', derefcnt=0, name='__wprintf_chk', args=[Argument(type='int', derefcnt=0, name='flag'), Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'write': Function(type='ssize_t', derefcnt=0, name='write', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='void', derefcnt=1, name='buf'), Argument(type='size_t', derefcnt=0, name='n')]), 'writev': Function(type='ssize_t', derefcnt=0, name='writev', args=[Argument(type='int', derefcnt=0, name='fd'), Argument(type='iovec', derefcnt=1, name='iovec'), Argument(type='int', derefcnt=0, name='count')]), 'wscanf': Function(type='int', derefcnt=0, name='wscanf', args=[Argument(type='wchar_t', derefcnt=1, name='format'), Argument(type='int', derefcnt=0, name='vararg')]), 'xmknod': Function(type='int', derefcnt=0, name='xmknod', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode'), Argument(type='dev_t', derefcnt=1, name='dev')]), 'xmknodat': Function(type='int', derefcnt=0, name='xmknodat', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='int', derefcnt=0, name='fd'), Argument(type='char', derefcnt=1, name='path'), Argument(type='mode_t', derefcnt=0, name='mode'), Argument(type='dev_t', derefcnt=1, name='dev')]), 'xpg_basename': Function(type='char', derefcnt=1, name='xpg_basename', args=[Argument(type='char', derefcnt=1, name='path')]), 'xstat': Function(type='int', derefcnt=0, name='xstat', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat', derefcnt=1, name='stat_buf')]), 'xstat64': Function(type='int', derefcnt=0, name='xstat64', args=[Argument(type='int', derefcnt=0, name='ver'), Argument(type='char', derefcnt=1, name='filename'), Argument(type='stat64', derefcnt=1, name='stat_buf')]), 'y0': Function(type='double', derefcnt=0, name='y0', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'y0f': Function(type='float', derefcnt=0, name='y0f', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'y0l': Function(type='long', derefcnt=0, name='y0l', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'y1': Function(type='double', derefcnt=0, name='y1', args=[Argument(type='double', derefcnt=0, name='arg0')]), 'y1f': Function(type='float', derefcnt=0, name='y1f', args=[Argument(type='float', derefcnt=0, name='arg0')]), 'y1l': Function(type='long', derefcnt=0, name='y1l', args=[Argument(type='long', derefcnt=0, name='arg0')]), 'yn': Function(type='double', derefcnt=0, name='yn', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='double', derefcnt=0, name='arg1')]), 'ynf': Function(type='float', derefcnt=0, name='ynf', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='float', derefcnt=0, name='arg1')]), 'ynl': Function(type='long', derefcnt=0, name='ynl', args=[Argument(type='int', derefcnt=0, name='arg0'), Argument(type='long', derefcnt=0, name='arg1')]), 'zError': Function(type='char', derefcnt=1, name='zError', args=[Argument(type='int', derefcnt=0, name='arg0')]), 'zlibCompileFlags': Function(type='uLong', derefcnt=0, name='zlibCompileFlags', args=[]), 'zlibVersion': Function(type='char', derefcnt=1, name='zlibVersion', args=[])}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument","title":"<code>Argument</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument.derefcnt","title":"<code>derefcnt: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Argument.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function","title":"<code>Function</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.args","title":"<code>args: List[Argument]</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.derefcnt","title":"<code>derefcnt: int</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/functions/#pwndbg.lib.functions.Function.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/gcc/","title":"Gcc","text":"<p>Functions for determining the architecture-dependent path to GCC and any flags it should be executed with.</p>"},{"location":"source/lib/gcc/#pwndbg.lib.gcc.printed_message","title":"<code>printed_message = False</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/gcc/#pwndbg.lib.gcc.which","title":"<code>which(arch)</code>","text":""},{"location":"source/lib/memory/","title":"Memory","text":"<p>Reading, writing, and describing memory.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.PAGE_MASK","title":"<code>PAGE_MASK = ~PAGE_SIZE - 1</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.PAGE_SIZE","title":"<code>PAGE_SIZE = 4096</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.align_down","title":"<code>align_down = round_down</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.align_up","title":"<code>align_up = round_up</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page","title":"<code>Page</code>","text":"<p>Represents the address space and page permissions of at least one page of memory.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.end","title":"<code>end: int</code>  <code>property</code>","text":"<p>Address beyond mapping. So the last effective address is self.end-1 It is the same as displayed in /proc//maps"},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.execute","title":"<code>execute: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.flags","title":"<code>flags = flags</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.is_guard","title":"<code>is_guard: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.is_memory_mapped_file","title":"<code>is_memory_mapped_file: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.is_stack","title":"<code>is_stack: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.memsz","title":"<code>memsz = size</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.objfile","title":"<code>objfile = objfile</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.offset","title":"<code>offset = offset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.permstr","title":"<code>permstr: str</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.read","title":"<code>read: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.rw","title":"<code>rw: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.rwx","title":"<code>rwx: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.start","title":"<code>start: int</code>  <code>property</code>","text":"<p>Mapping start address.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.vaddr","title":"<code>vaddr = start</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.write","title":"<code>write: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.wx","title":"<code>wx: bool</code>  <code>property</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__contains__","title":"<code>__contains__(addr)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__eq__","title":"<code>__eq__(other)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__init__","title":"<code>__init__(start, size, flags, offset, objfile='')</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__lt__","title":"<code>__lt__(other)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.Page.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.page_align","title":"<code>page_align(address)</code>","text":"<p>page_align(address) -&gt; int</p> <p>Round down <code>address</code> to the nearest page boundary.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.page_offset","title":"<code>page_offset(address)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.page_size_align","title":"<code>page_size_align(address)</code>","text":""},{"location":"source/lib/memory/#pwndbg.lib.memory.round_down","title":"<code>round_down(address, align)</code>","text":"<p>round_down(address, align) -&gt; int</p> <p>Round down <code>address</code> to the nearest increment of <code>align</code>.</p>"},{"location":"source/lib/memory/#pwndbg.lib.memory.round_up","title":"<code>round_up(address, align)</code>","text":"<p>round_up(address, align) -&gt; int</p> <p>Round up <code>address</code> to the nearest increment of <code>align</code>.</p>"},{"location":"source/lib/net/","title":"Net","text":"<p>Re-implements some psutil functionality to be able to get information from remote debugging sessions.</p>"},{"location":"source/lib/net/#pwndbg.lib.net.NETLINK_TYPES","title":"<code>NETLINK_TYPES = {0: 'NETLINK_ROUTE', 1: 'NETLINK_UNUSED', 2: 'NETLINK_USERSOCK', 3: 'NETLINK_FIREWALL', 4: 'NETLINK_SOCK_DIAG', 5: 'NETLINK_NFLOG', 6: 'NETLINK_XFRM', 7: 'NETLINK_SELINUX', 8: 'NETLINK_ISCSI', 9: 'NETLINK_AUDIT', 10: 'NETLINK_FIB_LOOKUP', 11: 'NETLINK_CONNECTOR', 12: 'NETLINK_NETFILTER', 13: 'NETLINK_IP6_FW', 14: 'NETLINK_DNRTMSG', 15: 'NETLINK_KOBJECT_UEVENT', 16: 'NETLINK_GENERIC', 18: 'NETLINK_SCSITRANSPORT', 19: 'NETLINK_ECRYPTFS', 20: 'NETLINK_RDMA', 21: 'NETLINK_CRYPTO'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.TCP_STATUSES","title":"<code>TCP_STATUSES = {'01': 'established', '02': 'syn_sent', '03': 'syn_recv', '04': 'fin_wait1', '05': 'fin_wait2', '06': 'time_wait', '07': 'close', '08': 'close_wait', '09': 'last_ack', '0A': 'listen', '0B': 'closing'}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection","title":"<code>Connection</code>","text":"<p>               Bases: <code>inode</code></p>"},{"location":"source/lib/net/#pwndbg.lib.net.Connection.family","title":"<code>family: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.inode","title":"<code>inode: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.lhost","title":"<code>lhost: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.lport","title":"<code>lport: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.rhost","title":"<code>rhost: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.rport","title":"<code>rport: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.status","title":"<code>status: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Connection.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink","title":"<code>Netlink</code>","text":"<p>               Bases: <code>inode</code></p>"},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.eth","title":"<code>eth: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.pid","title":"<code>pid: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.Netlink.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket","title":"<code>UnixSocket</code>","text":"<p>               Bases: <code>inode</code></p>"},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket.path","title":"<code>path = '(anonymous)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.UnixSocket.__str__","title":"<code>__str__()</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.inode","title":"<code>inode</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.inode.inode","title":"<code>inode: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.netlink","title":"<code>netlink(data)</code>","text":""},{"location":"source/lib/net/#pwndbg.lib.net.tcp","title":"<code>tcp(data)</code>","text":"<p>It will first list all listening TCP sockets, and next list all established TCP connections. A typical entry of /proc/net/tcp would look like this (split up into 3 parts because of the length of the line):</p>"},{"location":"source/lib/net/#pwndbg.lib.net.unix","title":"<code>unix(data)</code>","text":""},{"location":"source/lib/regs/","title":"Regs","text":"<p>Reading register value from the inferior, and provides a standardized interface to registers like \"sp\" and \"pc\".</p>"},{"location":"source/lib/regs/#pwndbg.lib.regs.BitFlags","title":"<code>BitFlags = OrderedDict[str, Union[int, Tuple[int, int]]]</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64","title":"<code>aarch64 = RegisterSet(retaddr=('lr'), flags={'cpsr': aarch64_cpsr_flags}, extra_flags={'scr_el3': aarch64_scr_flags, 'sctlr': aarch64_sctlr_flags, 'sctlr_el2': aarch64_sctlr_flags, 'sctlr_el3': aarch64_sctlr_flags, 'spsr_el1': aarch64_cpsr_flags, 'spsr_el2': aarch64_cpsr_flags, 'spsr_el3': aarch64_cpsr_flags}, gpr=('x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27', 'x28', 'x29'), misc=('w0', 'w1', 'w2', 'w3', 'w4', 'w5', 'w6', 'w7', 'w8', 'w9', 'w10', 'w11', 'w12', 'w13', 'w14', 'w15', 'w16', 'w17', 'w18', 'w19', 'w20', 'w21', 'w22', 'w23', 'w24', 'w25', 'w26', 'w27', 'w28'), args=('x0', 'x1', 'x2', 'x3'), retval='x0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64_cpsr_flags","title":"<code>aarch64_cpsr_flags = BitFlags([('N', 31), ('Z', 30), ('C', 29), ('V', 28), ('Q', 27), ('PAN', 22), ('IL', 20), ('D', 9), ('A', 8), ('I', 7), ('F', 6), ('EL', (2, 2)), ('SP', 0)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64_scr_flags","title":"<code>aarch64_scr_flags = BitFlags([('HCE', 8), ('SMD', 7), ('EA', 3), ('FIQ', 2), ('IRQ', 1), ('NS', 0)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.aarch64_sctlr_flags","title":"<code>aarch64_sctlr_flags = BitFlags([('TIDCP', 63), ('SPINTMASK', 62), ('NMI', 61), ('EPAN', 57), ('ATA0', 43), ('ATA0', 42), ('TCF', (40, 2)), ('TCF0', (38, 2)), ('ITFSB', 37), ('BT1', 36), ('BT0', 35), ('EnIA', 31), ('EnIB', 30), ('EnDA', 27), ('UCI', 26), ('EE', 25), ('E0E', 24), ('SPAN', 23), ('TSCXT', 20), ('WXN', 19), ('nTWE', 18), ('nTWI', 16), ('UCT', 15), ('DZE', 14), ('EnDB', 13), ('I', 12), ('UMA', 9), ('SED', 8), ('ITD', 7), ('nAA', 6), ('CP15BEN', 5), ('SA0', 4), ('SA', 3), ('C', 2), ('A', 1), ('M', 0)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.amd64","title":"<code>amd64 = RegisterSet(pc='rip', stack='rsp', frame='rbp', flags=x86flags, gpr=('rax', 'rbx', 'rcx', 'rdx', 'rdi', 'rsi', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15'), misc=('cs', 'ss', 'ds', 'es', 'fs', 'gs', 'fsbase', 'gsbase', 'ax', 'ah', 'al', 'bx', 'bh', 'bl', 'cx', 'ch', 'cl', 'dx', 'dh', 'dl', 'dil', 'sil', 'spl', 'bpl', 'di', 'si', 'bp', 'sp', 'ip'), args=('rdi', 'rsi', 'rdx', 'rcx', 'r8', 'r9'), retval='rax')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.arm","title":"<code>arm = RegisterSet(retaddr=('lr'), flags={'cpsr': arm_cpsr_flags}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12'), args=('r0', 'r1', 'r2', 'r3'), retval='r0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.arm_cpsr_flags","title":"<code>arm_cpsr_flags = BitFlags([('N', 31), ('Z', 30), ('C', 29), ('V', 28), ('Q', 27), ('J', 24), ('T', 5), ('E', 9), ('A', 8), ('I', 7), ('F', 6)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.arm_xpsr_flags","title":"<code>arm_xpsr_flags = BitFlags([('N', 31), ('Z', 30), ('C', 29), ('V', 28), ('Q', 27), ('T', 24)])</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.armcm","title":"<code>armcm = RegisterSet(retaddr=('lr'), flags={'xpsr': arm_xpsr_flags}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12'), args=('r0', 'r1', 'r2', 'r3'), retval='r0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.i386","title":"<code>i386 = RegisterSet(pc='eip', stack='esp', frame='ebp', flags=x86flags, gpr=('eax', 'ebx', 'ecx', 'edx', 'edi', 'esi'), misc=('cs', 'ss', 'ds', 'es', 'fs', 'gs', 'fsbase', 'gsbase', 'ax', 'ah', 'al', 'bx', 'bh', 'bl', 'cx', 'ch', 'cl', 'dx', 'dh', 'dl', 'di', 'si', 'bp', 'sp', 'ip'), retval='eax')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.iwmmxt","title":"<code>iwmmxt = RegisterSet(retaddr=('lr'), flags={'cpsr': arm_cpsr_flags}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12'), args=('r0', 'r1', 'r2', 'r3'), retval='r0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.mips","title":"<code>mips = RegisterSet(frame='fp', retaddr=('ra'), gpr=('v0', 'v1', 'a0', 'a1', 'a2', 'a3', 't0', 't1', 't2', 't3', 't4', 't5', 't6', 't7', 't8', 't9', 's0', 's1', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 'gp'), args=('a0', 'a1', 'a2', 'a3'), retval='v0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.powerpc","title":"<code>powerpc = RegisterSet(retaddr=('lr'), flags={'msr': BitFlags(), 'xer': BitFlags()}, gpr=('r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15', 'r16', 'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25', 'r26', 'r27', 'r28', 'r29', 'r30', 'r31', 'cr', 'ctr'), args=('r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10'), retval='r3')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.reg_sets","title":"<code>reg_sets = {'i386': i386, 'i8086': i386, 'x86-64': amd64, 'rv32': riscv, 'rv64': riscv, 'mips': mips, 'sparc': sparc, 'arm': arm, 'iwmmxt': iwmmxt, 'armcm': armcm, 'aarch64': aarch64, 'powerpc': powerpc}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.riscv","title":"<code>riscv = RegisterSet(pc='pc', stack='sp', retaddr=('ra'), gpr=('gp', 'tp', 't0', 't1', 't2', 's0', 's1', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 's11', 't3', 't4', 't5', 't6'), args=('a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'), retval='a0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.sparc","title":"<code>sparc = RegisterSet(stack='sp', frame='fp', retaddr=('i7'), flags={'psr': BitFlags()}, gpr=('g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'o0', 'o1', 'o2', 'o3', 'o4', 'o5', 'o7', 'l0', 'l1', 'l2', 'l3', 'l4', 'l5', 'l6', 'l7', 'i0', 'i1', 'i2', 'i3', 'i4', 'i5'), args=('i0', 'i1', 'i2', 'i3', 'i4', 'i5'), retval='o0')</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.x86flags","title":"<code>x86flags = {'eflags': BitFlags([('CF', 0), ('PF', 2), ('AF', 4), ('ZF', 6), ('SF', 7), ('IF', 9), ('DF', 10), ('OF', 11)])}</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet","title":"<code>RegisterSet</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.all","title":"<code>all: Set[str] = set(misc) | set(flags) | set(extra_flags) | set(self.retaddr) | set(self.common)</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.args","title":"<code>args: Tuple[str, ...] = args</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.common","title":"<code>common: List[str] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.emulated_regs_order","title":"<code>emulated_regs_order: List[str] = []</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.extra_flags","title":"<code>extra_flags = extra_flags</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.flags","title":"<code>flags: Dict[str, BitFlags] = flags</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.frame","title":"<code>frame: str | None = frame</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.gpr","title":"<code>gpr: Tuple[str, ...] = gpr</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.misc","title":"<code>misc: Tuple[str, ...] = misc</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.pc","title":"<code>pc: str = pc</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.retaddr","title":"<code>retaddr: Tuple[str, ...] = retaddr</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.retval","title":"<code>retval: str | None = retval</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.stack","title":"<code>stack: str = stack</code>  <code>instance-attribute</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.__init__","title":"<code>__init__(pc='pc', stack='sp', frame=None, retaddr=(), flags={}, extra_flags={}, gpr=(), misc=(), args=(), retval=None)</code>","text":""},{"location":"source/lib/regs/#pwndbg.lib.regs.RegisterSet.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"source/lib/stdio/","title":"Stdio","text":"<p>Provides functionality to circumvent GDB's hooks on sys.stdin and sys.stdout which prevent output from appearing on-screen inside of certain event handlers.</p>"},{"location":"source/lib/stdio/#pwndbg.lib.stdio.stdio","title":"<code>stdio = Stdio()</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio","title":"<code>Stdio</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio.queue","title":"<code>queue: List[Tuple[TextIO, TextIO, TextIO]] = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio.__enter__","title":"<code>__enter__(*a, **kw)</code>","text":""},{"location":"source/lib/stdio/#pwndbg.lib.stdio.Stdio.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":""},{"location":"source/lib/strings/","title":"Strings","text":""},{"location":"source/lib/strings/#pwndbg.lib.strings.strip_colors","title":"<code>strip_colors(text)</code>","text":"<p>Remove all ANSI color codes from the text</p>"},{"location":"source/lib/tempfile/","title":"Tempfile","text":"<p>Common helper and cache for pwndbg tempdir</p>"},{"location":"source/lib/tempfile/#pwndbg.lib.tempfile.cachedir","title":"<code>cachedir(namespace=None)</code>","text":"<p>Returns and potentially creates a persistent safe cachedir location based on XDG_CACHE_HOME or ~/.cache</p> <p>Optionally creates a sub namespace inside the pwndbg cache folder.</p>"},{"location":"source/lib/tempfile/#pwndbg.lib.tempfile.tempdir","title":"<code>tempdir()</code>","text":"<p>Returns a safe and unpredictable temporary directory with pwndbg prefix.</p>"},{"location":"source/lib/tips/","title":"Tips","text":""},{"location":"source/lib/tips/#pwndbg.lib.tips.TIPS","title":"<code>TIPS: List[str] = [\"GDB's `apropos &lt;topic&gt;` command displays all registered commands that are related to the given &lt;topic&gt;\", \"GDB's `follow-fork-mode` parameter can be used to set whether to trace parent or child after fork() calls. Pwndbg sets it to child by default\", 'Use GDB\\'s `dprintf` command to print all calls to given function. E.g. `dprintf malloc, \"malloc(%p)\\\\n\", (void*)$rdi` will print all malloc calls', \"Use GDB's `pi` command to run an interactive Python console where you can use Pwndbg APIs like `pwndbg.gdblib.memory.read(addr, len)`, `pwndbg.gdblib.memory.write(addr, data)`, `pwndbg.gdb.vmmap.get()` and so on!\", \"GDB's `set directories &lt;path&gt;` parameter can be used to debug e.g. glibc sources like the malloc/free functions!\", \"If you have debugging symbols the `info args` command shows current frame's function arguments (use `up` and `down` to switch between frames)\", 'Calling functions like `call (void)puts(\"hello world\")` will run all other target threads for the time the function runs. Use `set scheduler-locking on` to lock the execution to current thread when calling functions', 'If you want Pwndbg to clear screen on each command (but still save previous output in history) use `set context-clear-screen on`', 'The `set show-flags on` setting will display CPU flags register in the regs context panel', 'GDB and Pwndbg parameters can be shown or set with `show &lt;param&gt;` and `set &lt;param&gt; &lt;value&gt;` GDB commands', \"Use Pwndbg's `config` and `theme` commands to tune its configuration and theme colors!\", 'Pwndbg mirrors some of Windbg commands like `eq`, `ew`, `ed`, `eb`, `es`, `dq`, `dw`, `dd`, `db`, `ds` for writing and reading memory', 'Pwndbg resolves kernel memory maps by parsing page tables (default) or via `monitor info mem` QEMU gdbstub command (use `set kernel-vmmap-via-page-tables off` for that)', \"Use the `vmmap` command for a better &amp; colored memory maps display (than the GDB's `info proc mappings`)\", 'Use the `telescope` command to dereference a given address/pointer multiple times (if the dereferenced value is a valid ptr; see `config telescope` to configure its behavior)', 'Use the `context` (or `ctx`) command to display the context once again. You can reconfigure the context layout with `set context-section &lt;sections&gt;` or forward the output to a file/tty via `set context-output &lt;file&gt;`. See also `config context` to configure it further!', \"Disable Pwndbg context information display with `set context-sections ''`\", 'Pwndbg context displays where the program branches to thanks to emulating few instructions into the future. You can disable this with `set emulate off` which may also speed up debugging', 'Use the `canary` command to see all stack canary/cookie values on the stack (based on the *usual* stack canary value initialized by glibc)', \"Use the `procinfo` command for better process introspection (than the GDB's `info proc` command)\", 'Want to display each context panel in a separate tmux window? See https://github.com/pwndbg/pwndbg/blob/dev/FEATURES.md#splitting--layouting-context', 'Use `$base(\"heap\")` to get the start address of a [heap] memory page', 'Use the `errno` (or `errno &lt;number&gt;`) command to see the name of the last or provided (libc) error', 'Pwndbg sets the SIGLARM, SIGBUS, SIGPIPE and SIGSEGV signals so they are not passed to the app; see `info signals` for full GDB signals configuration', 'Use `vmmap -A|-B &lt;number&gt; &lt;filter&gt;` to display &lt;number&gt; of maps after/before filtered ones', 'Use the `killall` command to kill all specified threads (via their ids)', 'Use the `spray` command to spray memory with cyclic pattern or specified value', \"Use `patch &lt;address&gt; '&lt;assembly&gt;'` to patch an address with given assembly code\", \"Want to NOP some instructions? Use `patch &lt;address&gt; 'nop; nop; nop'`\", '`heap_config` shows heap related configuration', '`break-if-taken` and `break-if-not-taken` commands sets breakpoints after a given jump instruction was taken or not', '`stepuntilasm &lt;assembly-instruction [operands]&gt;` steps program forward until matching instruction occures', 'Use `plist` command to dump elements of linked list', 'If your program has multiple threads they will be displayed in the context display or using the `context threads` command', 'Use `track-got enable|info|query` to track GOT accesses - useful for hijacking control flow via writable GOT/PLT', 'Need to `mmap` or `mprotect` memory in the debugee? Use commands with the same name to inject and run such syscalls', 'Use `hi` to see if a an address belongs to a glibc heap chunk', 'Use `contextprev` and `contextnext` to display a previous context output again without scrolling', 'Try splitting the context output into multiple TUI windows using `layout pwndbg` (`tui disable` or `ctrl-x + a` to go back to CLI mode)']</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/tips/#pwndbg.lib.tips.color_tip","title":"<code>color_tip(tip)</code>","text":""},{"location":"source/lib/tips/#pwndbg.lib.tips.get_tip_of_the_day","title":"<code>get_tip_of_the_day()</code>","text":""},{"location":"source/lib/version/","title":"Version","text":""},{"location":"source/lib/version/#pwndbg.lib.version.__version__","title":"<code>__version__ = '2024.08.29'</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/version/#pwndbg.lib.version.b_id","title":"<code>b_id = build_id()</code>  <code>module-attribute</code>","text":""},{"location":"source/lib/version/#pwndbg.lib.version.build_id","title":"<code>build_id()</code>","text":"<p>Returns pwndbg commit id if git is available.</p>"},{"location":"source/lib/which/","title":"Which","text":""},{"location":"source/lib/which/#pwndbg.lib.which.which","title":"<code>which(name, all=False)</code>","text":"<p>which(name, flags = os.X_OK, all = False) -&gt; str or str set</p> <p>Works as the system command <code>which</code>; searches $PATH for <code>name</code> and returns a full path if found.</p> <p>If <code>all</code> is :const:<code>True</code> the set of all found locations is returned, else the first occurrence or :const:<code>None</code> is returned.</p> <p>Parameters:</p> Name Type Description Default <code>`name`</code> <code>str</code> <p>The file to search for.</p> required <code>`all`</code> <code>bool</code> <p>Whether to return all locations where <code>name</code> was found.</p> required <p>Returns:</p> Type Description <code>Set[str] | str | None</code> <p>If <code>all</code> is :const:<code>True</code> the set of all locations where <code>name</code> was found,</p> <code>Set[str] | str | None</code> <p>else the first location or :const:<code>None</code> if not found.</p> Example <p>which('sh') '/bin/sh'</p>"},{"location":"source/lib/disasm/__init__/","title":"init","text":""},{"location":"source/lib/disasm/helpers/","title":"Helpers","text":""},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.arithmetic_shift_right","title":"<code>arithmetic_shift_right(n, shift_amt, bit_width)</code>","text":"<p>This returns the value represented by the two's-complement binary representation of the final result. This means the result could be negative (if the top bit of the input is negative)</p> <p><code>n</code> is truncated to the width of <code>bit_width</code> before the operation takes place.</p>"},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.logical_shift_left","title":"<code>logical_shift_left(n, shift_amt, bit_width)</code>","text":""},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.logical_shift_right","title":"<code>logical_shift_right(n, shift_amt, bit_width)</code>","text":"<p><code>n</code> is truncated to the width of <code>bit_width</code> before the operation takes place.</p>"},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.rotate_right","title":"<code>rotate_right(n, shift_amt, bit_width)</code>","text":"<p><code>n</code> is truncated to the width of <code>bit_width</code> before the operation takes place.</p>"},{"location":"source/lib/disasm/helpers/#pwndbg.lib.disasm.helpers.to_signed","title":"<code>to_signed(unsigned, bit_width)</code>","text":"<p>Returns the signed number associated with the two's-complement binary representation of <code>unsigned</code></p>"},{"location":"source/lib/heap/__init__/","title":"init","text":""},{"location":"source/lib/heap/helpers/","title":"Helpers","text":""},{"location":"source/lib/heap/helpers/#pwndbg.lib.heap.helpers.find_fastbin_size","title":"<code>find_fastbin_size(mem, max_size, step)</code>","text":""},{"location":"source/wrappers/__init__/","title":"init","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand","title":"<code>OnlyWithCommand</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.all_cmds","title":"<code>all_cmds: List[str] = [cmd[0] if isinstance(cmd, list) else cmd for cmd in commands]</code>  <code>instance-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.cmd","title":"<code>cmd: List[str] = command if isinstance(command, list) else [command]</code>  <code>instance-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.cmd_path","title":"<code>cmd_path: str | None = which(self.cmd[0])</code>  <code>instance-attribute</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.__call__","title":"<code>__call__(function)</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.OnlyWithCommand.__init__","title":"<code>__init__(*commands)</code>","text":""},{"location":"source/wrappers/__init__/#pwndbg.wrappers.call_cmd","title":"<code>call_cmd(cmd)</code>","text":""},{"location":"source/wrappers/checksec/","title":"Checksec","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.get_raw_out","title":"<code>get_raw_out(local_path)</code>","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.monkeypatch_pwnlib_term_text","title":"<code>monkeypatch_pwnlib_term_text()</code>","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.pie_status","title":"<code>pie_status(local_path)</code>","text":""},{"location":"source/wrappers/checksec/#pwndbg.wrappers.checksec.relro_status","title":"<code>relro_status(local_path)</code>","text":""},{"location":"source/wrappers/readelf/","title":"Readelf","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.cmd_name","title":"<code>cmd_name = 'readelf'</code>  <code>module-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType","title":"<code>RelocationType</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType.GLOB_DAT","title":"<code>GLOB_DAT = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType.IRELATIVE","title":"<code>IRELATIVE = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.RelocationType.JUMP_SLOT","title":"<code>JUMP_SLOT = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"source/wrappers/readelf/#pwndbg.wrappers.readelf.get_got_entry","title":"<code>get_got_entry(local_path)</code>","text":""},{"location":"blog/archive/2022/","title":"2022","text":""}]}